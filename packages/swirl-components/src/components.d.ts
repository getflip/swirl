/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { SwirlActionListItemIntent, SwirlActionListItemSize } from "./components/swirl-action-list-item/swirl-action-list-item";
import { SwirlAppLayoutMobileView } from "./components/swirl-app-layout/swirl-app-layout";
import { SwirlAutocompleteSuggestion } from "./components/swirl-autocomplete/swirl-autocomplete";
import { SwirlTextInputMode } from "./components/swirl-text-input/swirl-text-input";
import { SwirlAvatarBadgePosition, SwirlAvatarColor, SwirlAvatarSize, SwirlAvatarVariant } from "./components/swirl-avatar/swirl-avatar";
import { SwirlBadgeIntent, SwirlBadgeSize, SwirlBadgeVariant } from "./components/swirl-badge/swirl-badge";
import { SwirlBannerAriaRole, SwirlBannerIntent } from "./components/swirl-banner/swirl-banner";
import { SwirlBoxOverflow, SwirlBoxPadding } from "./components/swirl-box/swirl-box";
import { SwirlButtonIconPosition, SwirlButtonIntent, SwirlButtonSize, SwirlButtonType, SwirlButtonVariant } from "./components/swirl-button/swirl-button";
import { SwirlButtonGroupOrientation } from "./components/swirl-button-group/swirl-button-group";
import { SwirlCheckboxState } from "./components/swirl-checkbox/swirl-checkbox";
import { SwirlChipIntent } from "./components/swirl-chip/swirl-chip";
import { WCDatepickerLabels } from "wc-datepicker/dist/types/components/wc-datepicker/wc-datepicker";
import { SwirlDialogIntent } from "./components/swirl-dialog/swirl-dialog";
import { SwirlFileViewerPdfZoom } from "./components/swirl-file-viewer/viewers/swirl-file-viewer-pdf/swirl-file-viewer-pdf";
import { SwirlFileViewerPdfZoom as SwirlFileViewerPdfZoom1 } from "./components/swirl-file-viewer/viewers/swirl-file-viewer-pdf/swirl-file-viewer-pdf";
import { SwirlFormGroupOrientation } from "./components/swirl-form-group/swirl-form-group";
import { SwirlHeadingAlign, SwirlHeadingLevel, SwirlHeadingTag } from "./components/swirl-heading/swirl-heading";
import { SwirlIconSize } from "./components/swirl-icon/swirl-icon.types";
import { SwirlInlineErrorSize } from "./components/swirl-inline-error/swirl-inline-error";
import { SwirlLinkTarget } from "./components/swirl-link/swirl-link";
import { SwirlOptionListItemContext } from "./components/swirl-option-list-item/swirl-option-list-item";
import { SwirlPaginationVariant } from "./components/swirl-pagination/swirl-pagination";
import { SwirlPopoverAnimation } from "./components/swirl-popover/swirl-popover";
import { Placement } from "@floating-ui/dom";
import { SwirlProgressIndicatorSize, SwirlProgressIndicatorVariant } from "./components/swirl-progress-indicator/swirl-progress-indicator";
import { SwirlRadioState } from "./components/swirl-radio/swirl-radio";
import { SwirlSkeletonBoxBorderRadius } from "./components/swirl-skeleton-box/swirl-skeleton-box";
import { SwirlSkeletonTextSize } from "./components/swirl-skeleton-text/swirl-skeleton-text";
import { SwirlSpinnerSize } from "./components/swirl-spinner/swirl-spinner";
import { SwirlStackAlign, SwirlStackJustify, SwirlStackOrientation, SwirlStackSpacing } from "./components/swirl-stack/swirl-stack";
import { SwirlSwitchSize } from "./components/swirl-switch/swirl-switch";
import { SwirlTableColumnSort } from "./components/swirl-table-column/swirl-table-column";
import { SwirlTagIntent } from "./components/swirl-tag/swirl-tag";
import { SwirlTextAlign, SwirlTextColor, SwirlTextFontStyle, SwirlTextSize, SwirlTextWeight } from "./components/swirl-text/swirl-text";
import { SwirlTextInputMode as SwirlTextInputMode1, SwirlTextInputType } from "./components/swirl-text-input/swirl-text-input";
import { SwirlTheme, SwirlThemeChangeEventData, SwirlThemeProviderConfig } from "./components/swirl-theme-provider/swirl-theme-provider";
import { SwirlThumbnailFormat, SwirlThumbnailSize } from "./components/swirl-thumbnail/swirl-thumbnail";
import { SwirlToastIntent } from "./components/swirl-toast/swirl-toast";
import { SwirlToastConfig, SwirlToastMessage } from "./components/swirl-toast-provider/swirl-toast-provider";
import { SwirlTooltipPosition } from "./components/swirl-tooltip/swirl-tooltip";
export namespace Components {
    interface FileManager {
    }
    interface SwirlActionList {
    }
    interface SwirlActionListItem {
        "description"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "intent"?: SwirlActionListItemIntent;
        "label": string;
        "size"?: SwirlActionListItemSize;
        "suffix"?: string;
    }
    interface SwirlActionListSection {
        "label": string;
    }
    interface SwirlAppLayout {
        "appBarMedia"?: string;
        "appName": string;
        "backToNavigationViewButtonLabel"?: string;
        /**
          * Change the currently displayed view on mobile viewports
          * @param mobileView
         */
        "changeMobileView": (mobileView: SwirlAppLayoutMobileView, transition?: boolean) => Promise<void>;
        "ctaIcon"?: string;
        "ctaLabel"?: string;
        "heading"?: string;
        /**
          * Hide the sidebar
         */
        "hideSidebar": () => Promise<void>;
        "navigationBackButtonLabel"?: string;
        "navigationLabel"?: string;
        "showNavigationBackButton"?: boolean;
        /**
          * Show the sidebar
         */
        "showSidebar": () => Promise<void>;
        "sidebarCloseButtonLabel"?: string;
        "sidebarHeading"?: string;
        "subheading"?: string;
        /**
          * Toggle the sidebar
         */
        "toggleSidebar": () => Promise<void>;
        "transitionStyle"?: string;
    }
    interface SwirlAutocomplete {
        "autoSelect"?: boolean;
        "clearButtonLabel"?: string;
        "clearable"?: boolean;
        "disabled"?: boolean;
        "generateSuggestions"?: (
    currentValue: string
  ) => Promise<SwirlAutocompleteSuggestion[]>;
        "inline"?: boolean;
        "invalid"?: boolean;
        "maxLength"?: number;
        "menuLabel"?: string;
        "mode"?: SwirlTextInputMode;
        "required"?: boolean;
        "spellCheck"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlAvatar {
        "badge"?: string;
        "badgePosition"?: SwirlAvatarBadgePosition;
        "color"?: SwirlAvatarColor;
        "icon"?: string;
        "initials"?: string;
        "interactive"?: boolean;
        "label": string;
        "showLabel"?: boolean;
        "size"?: SwirlAvatarSize;
        "src"?: string;
        "variant"?: SwirlAvatarVariant;
    }
    interface SwirlAvatarGroup {
        "badge"?: string;
    }
    interface SwirlBadge {
        "icon"?: string;
        "intent"?: SwirlBadgeIntent;
        "label": string;
        "size"?: SwirlBadgeSize;
        "variant"?: SwirlBadgeVariant;
    }
    interface SwirlBanner {
        "actionLabel"?: string;
        "content": string;
        "dismissLabel"?: string;
        "dismissable"?: boolean;
        "importance"?: SwirlBannerAriaRole;
        "intent"?: SwirlBannerIntent;
        "showIcon"?: boolean;
    }
    interface SwirlBox {
        "as"?: string;
        "bordered"?: boolean;
        "centerBlock"?: boolean;
        "centerInline"?: boolean;
        "cover"?: boolean;
        "overflow"?: SwirlBoxOverflow;
        "padding"?: SwirlBoxPadding;
    }
    interface SwirlButton {
        "disabled"?: boolean;
        "download"?: string;
        "form"?: string;
        "hideLabel"?: boolean;
        "href"?: string;
        "icon"?: string;
        "iconPosition": SwirlButtonIconPosition;
        "intent"?: SwirlButtonIntent;
        "label": string;
        "name"?: string;
        "pill"?: boolean;
        "size"?: SwirlButtonSize;
        "swirlAriaDescribedby"?: string;
        "swirlAriaExpanded"?: string;
        "swirlAriaLabel"?: string;
        "target"?: string;
        "type"?: SwirlButtonType;
        "value"?: string;
        "variant"?: SwirlButtonVariant;
    }
    interface SwirlButtonGroup {
        "orientation"?: SwirlButtonGroupOrientation;
        "segmented"?: boolean;
        "stretch"?: boolean;
        "wrap"?: boolean;
    }
    interface SwirlCard {
        "as"?: string;
        "elevated"?: boolean;
        "href"?: string;
        "interactive"?: boolean;
        "linkTarget"?: string;
    }
    interface SwirlCheckbox {
        "checked"?: SwirlCheckboxState;
        "description"?: string;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "swirlAriaDescribedby"?: string;
        "swirlAriaLabel"?: string;
        "value"?: string;
    }
    interface SwirlChip {
        "avatar"?: string;
        "icon"?: string;
        "intent"?: SwirlChipIntent;
        "interactive"?: boolean;
        "label": string;
    }
    interface SwirlConsoleLayout {
        "appName": string;
        "backButonLabel"?: string;
        "heading": string;
        "helpButonLabel"?: string;
        "hideNavigationButtonLabel"?: string;
        /**
          * Hide the mobile navigation.
         */
        "hideSidebar": () => Promise<void>;
        "logoText"?: string;
        "navigationLabel"?: string;
        "showBackButton"?: boolean;
        "showHelpButton"?: boolean;
        "showNavigationButtonLabel"?: string;
        /**
          * Show the mobile navigation.
         */
        "showSidebar": () => Promise<void>;
        "subheading"?: string;
        /**
          * Toggle the mobile navigation visibility.
         */
        "toggleSidebar": () => Promise<void>;
    }
    interface SwirlDateInput {
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "datePickerLabel"?: string;
        "datePickerTriggerLabel"?: string;
        "disabled"?: boolean;
        "format"?: string;
        "inline"?: boolean;
        "invalid"?: boolean;
        "labels"?: WCDatepickerLabels;
        "locale"?: string;
        "placeholder"?: string;
        "required"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlDatePicker {
        "labels"?: WCDatepickerLabels;
        "locale"?: string;
        "range"?: boolean;
        "startDate"?: Date;
        "value"?: Date | Date[];
    }
    interface SwirlDescriptionList {
    }
    interface SwirlDescriptionListItem {
        "term": string;
    }
    interface SwirlDialog {
        /**
          * Close the dialog.
         */
        "close": () => Promise<void>;
        "hideLabel"?: boolean;
        "intent"?: SwirlDialogIntent;
        "label": string;
        /**
          * Open the dialog.
         */
        "open": () => Promise<void>;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
    }
    interface SwirlEmptyState {
        "heading"?: string;
        "illustration"?: string;
    }
    interface SwirlFileUploader {
        "accept"?: string;
        "ctaLabel"?: string;
        "description"?: string;
        "disabled"?: boolean;
        "dragDropLabel"?: string;
        "inputId": string;
        "inputName": string;
        "label": string;
        "multiple"?: boolean;
        /**
          * Reset the file input.
         */
        "reset": () => Promise<void>;
        "showDropzone"?: boolean;
        "uploadButtonLabel"?: string;
    }
    interface SwirlFileViewer {
        "active"?: boolean;
        "autoplay"?: boolean;
        "description"?: string;
        /**
          * Download the file.
         */
        "download": () => Promise<void>;
        "errorMessage"?: string;
        "file": string;
        /**
          * Print the file. Applicable to PDFs only.
         */
        "print": () => Promise<void>;
        "type": string;
        "typeUnsupportedMessage"?: string;
        "zoom"?: SwirlFileViewerPdfZoom;
    }
    interface SwirlFileViewerAudio {
        "autoplay"?: boolean;
        "file": string;
        "type": string;
    }
    interface SwirlFileViewerCsv {
        "errorMessage"?: string;
        "file": string;
    }
    interface SwirlFileViewerImage {
        "description"?: string;
        "errorMessage"?: string;
        "file": string;
        /**
          * Get the current zoom.
          * @returns
         */
        "getZoom": () => Promise<number>;
        "maxZoom"?: number;
        /**
          * Resets the zoom.
          * @returns
         */
        "resetZoom": () => Promise<void>;
    }
    interface SwirlFileViewerPdf {
        "errorMessage"?: string;
        "file": string;
        /**
          * Navigate to next page, if single page mode is enabled.
         */
        "nextPage": () => Promise<void>;
        /**
          * Navigate to previous page, if single page mode is enabled.
         */
        "previousPage": () => Promise<void>;
        /**
          * Print the file.
         */
        "print": () => Promise<void>;
        /**
          * Navigate to specific page, if single page mode is enabled.
         */
        "setPage": (page: number) => Promise<void>;
        "singlePageMode": boolean;
        "zoom"?: SwirlFileViewerPdfZoom;
    }
    interface SwirlFileViewerText {
        "errorMessage"?: string;
        "file": string;
    }
    interface SwirlFileViewerVideo {
        "autoplay"?: boolean;
        "file": string;
        "type": string;
    }
    interface SwirlFormControl {
        "description"?: string;
        "disabled"?: boolean;
        "errorMessage"?: string;
        "inline"?: boolean;
        "invalid"?: boolean;
        "label": string;
    }
    interface SwirlFormGroup {
        "orientation": SwirlFormGroupOrientation;
    }
    interface SwirlHeading {
        "align"?: SwirlHeadingAlign;
        "as"?: SwirlHeadingTag;
        "balance"?: boolean;
        "headingId"?: string;
        "level"?: SwirlHeadingLevel;
        "text": string;
    }
    interface SwirlIconAdd {
        "size": SwirlIconSize;
    }
    interface SwirlIconAddPhoto {
        "size": SwirlIconSize;
    }
    interface SwirlIconAdminPanelSettings {
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowBack {
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowDownward {
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowForward {
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowLeft {
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowRight {
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowRightSmall {
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowUpward {
        "size": SwirlIconSize;
    }
    interface SwirlIconAttachment {
        "size": SwirlIconSize;
    }
    interface SwirlIconBlock {
        "size": SwirlIconSize;
    }
    interface SwirlIconCancel {
        "size": SwirlIconSize;
    }
    interface SwirlIconChatBubble {
        "size": SwirlIconSize;
    }
    interface SwirlIconChatsFilled {
        "size": SwirlIconSize;
    }
    interface SwirlIconChatsOutlined {
        "size": SwirlIconSize;
    }
    interface SwirlIconCheck {
        "size": SwirlIconSize;
    }
    interface SwirlIconCheckCircle {
        "size": SwirlIconSize;
    }
    interface SwirlIconCheckSmall {
        "size": SwirlIconSize;
    }
    interface SwirlIconCheckStrong {
        "size": SwirlIconSize;
    }
    interface SwirlIconChevronLeft {
        "size": SwirlIconSize;
    }
    interface SwirlIconChevronRight {
        "size": SwirlIconSize;
    }
    interface SwirlIconClose {
        "size": SwirlIconSize;
    }
    interface SwirlIconCloseSmall {
        "size": SwirlIconSize;
    }
    interface SwirlIconCloudUpload {
        "size": SwirlIconSize;
    }
    interface SwirlIconColumn {
        "size": SwirlIconSize;
    }
    interface SwirlIconComment {
        "size": SwirlIconSize;
    }
    interface SwirlIconCopy {
        "size": SwirlIconSize;
    }
    interface SwirlIconDateRange {
        "size": SwirlIconSize;
    }
    interface SwirlIconDelete {
        "size": SwirlIconSize;
    }
    interface SwirlIconDescription {
        "size": SwirlIconSize;
    }
    interface SwirlIconDownload {
        "size": SwirlIconSize;
    }
    interface SwirlIconDragHandle {
        "size": SwirlIconSize;
    }
    interface SwirlIconEdit {
        "size": SwirlIconSize;
    }
    interface SwirlIconEmojiMood {
        "size": SwirlIconSize;
    }
    interface SwirlIconEmojiSatisfied {
        "size": SwirlIconSize;
    }
    interface SwirlIconError {
        "size": SwirlIconSize;
    }
    interface SwirlIconExpandLess {
        "size": SwirlIconSize;
    }
    interface SwirlIconExpandMore {
        "size": SwirlIconSize;
    }
    interface SwirlIconFile {
        "size": SwirlIconSize;
    }
    interface SwirlIconFilter {
        "size": SwirlIconSize;
    }
    interface SwirlIconFolderShared {
        "size": SwirlIconSize;
    }
    interface SwirlIconFullscreen {
        "size": SwirlIconSize;
    }
    interface SwirlIconFullscreenExit {
        "size": SwirlIconSize;
    }
    interface SwirlIconGroupAssign {
        "size": SwirlIconSize;
    }
    interface SwirlIconGroups {
        "size": SwirlIconSize;
    }
    interface SwirlIconGroupsCustom {
        "size": SwirlIconSize;
    }
    interface SwirlIconGroupsFilled {
        "size": SwirlIconSize;
    }
    interface SwirlIconGroupsOutlined {
        "size": SwirlIconSize;
    }
    interface SwirlIconHelp {
        "size": SwirlIconSize;
    }
    interface SwirlIconImage {
        "size": SwirlIconSize;
    }
    interface SwirlIconInfo {
        "size": SwirlIconSize;
    }
    interface SwirlIconInventory {
        "size": SwirlIconSize;
    }
    interface SwirlIconLike {
        "size": SwirlIconSize;
    }
    interface SwirlIconLink {
        "size": SwirlIconSize;
    }
    interface SwirlIconLock {
        "size": SwirlIconSize;
    }
    interface SwirlIconLogout {
        "size": SwirlIconSize;
    }
    interface SwirlIconMail {
        "size": SwirlIconSize;
    }
    interface SwirlIconManageAccounts {
        "size": SwirlIconSize;
    }
    interface SwirlIconMention {
        "size": SwirlIconSize;
    }
    interface SwirlIconMenu {
        "size": SwirlIconSize;
    }
    interface SwirlIconMenuFilled {
        "size": SwirlIconSize;
    }
    interface SwirlIconMenuOutlined {
        "size": SwirlIconSize;
    }
    interface SwirlIconMessage {
        "size": SwirlIconSize;
    }
    interface SwirlIconMoreHorizontal {
        "size": SwirlIconSize;
    }
    interface SwirlIconMoreVertikal {
        "size": SwirlIconSize;
    }
    interface SwirlIconNewsFilled {
        "size": SwirlIconSize;
    }
    interface SwirlIconNewsOutlined {
        "size": SwirlIconSize;
    }
    interface SwirlIconNotifications {
        "size": SwirlIconSize;
    }
    interface SwirlIconNotificationsActive {
        "size": SwirlIconSize;
    }
    interface SwirlIconNotificationsOff {
        "size": SwirlIconSize;
    }
    interface SwirlIconOpenInNew {
        "size": SwirlIconSize;
    }
    interface SwirlIconPeopleAlt {
        "size": SwirlIconSize;
    }
    interface SwirlIconPerson {
        "size": SwirlIconSize;
    }
    interface SwirlIconPersonOff {
        "size": SwirlIconSize;
    }
    interface SwirlIconPhone {
        "size": SwirlIconSize;
    }
    interface SwirlIconPoll {
        "size": SwirlIconSize;
    }
    interface SwirlIconPrint {
        "size": SwirlIconSize;
    }
    interface SwirlIconRecieved {
        "size": SwirlIconSize;
    }
    interface SwirlIconRemove {
        "size": SwirlIconSize;
    }
    interface SwirlIconSearch {
        "size": SwirlIconSize;
    }
    interface SwirlIconSearchStrong {
        "size": SwirlIconSize;
    }
    interface SwirlIconSend {
        "size": SwirlIconSize;
    }
    interface SwirlIconSettings {
        "size": SwirlIconSize;
    }
    interface SwirlIconSync {
        "size": SwirlIconSize;
    }
    interface SwirlIconTasksFilled {
        "size": SwirlIconSize;
    }
    interface SwirlIconTasksOutlined {
        "size": SwirlIconSize;
    }
    interface SwirlIconTimeFilled {
        "size": SwirlIconSize;
    }
    interface SwirlIconTimeOutlined {
        "size": SwirlIconSize;
    }
    interface SwirlIconToday {
        "size": SwirlIconSize;
    }
    interface SwirlIconUserAssign {
        "size": SwirlIconSize;
    }
    interface SwirlIconVideoCamera {
        "size": SwirlIconSize;
    }
    interface SwirlIconVisibility {
        "size": SwirlIconSize;
    }
    interface SwirlIconVisibilityOff {
        "size": SwirlIconSize;
    }
    interface SwirlIconWarning {
        "size": SwirlIconSize;
    }
    interface SwirlInlineError {
        "message": string;
        "size"?: SwirlInlineErrorSize;
    }
    interface SwirlLightbox {
        /**
          * Activate a slide.
          * @param newActiveSlideIndex
         */
        "activateSlide": (newActiveSlideIndex: number) => Promise<void>;
        /**
          * Close the lightbox.
         */
        "close": () => Promise<void>;
        "closeButtonLabel"?: string;
        "downloadButtonLabel"?: string;
        "label": string;
        "nextSlideButtonLabel"?: string;
        /**
          * Open the lightbox.
         */
        "open": () => Promise<void>;
        "previousSlideButtonLabel"?: string;
    }
    interface SwirlLink {
        "href": string;
        "label": string;
        "target"?: SwirlLinkTarget;
    }
    interface SwirlList {
    }
    interface SwirlModal {
        /**
          * Close the modal.
         */
        "close": () => Promise<void>;
        "closeButtonLabel"?: string;
        "label": string;
        /**
          * Open the modal.
         */
        "open": () => Promise<void>;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
    }
    interface SwirlOptionList {
        "allowDrag"?: boolean;
        "assistiveTextItemGrabbed"?: string;
        "assistiveTextItemMoved"?: string;
        "assistiveTextItemMoving"?: string;
        "disabled"?: boolean;
        "label"?: string;
        "multiSelect"?: boolean;
        "optionListId"?: string;
        "value"?: string[];
    }
    interface SwirlOptionListItem {
        "allowDrag"?: boolean;
        "context"?: SwirlOptionListItemContext;
        "disabled"?: boolean;
        "dragHandleDescription"?: string;
        "dragHandleLabel"?: string;
        "dragging"?: boolean;
        "icon"?: string;
        "label": string;
        "selected"?: boolean;
        "value": string;
    }
    interface SwirlOptionListSection {
        "label": string;
    }
    interface SwirlPagination {
        "accessibleNextButtonLabel"?: string;
        "accessiblePrevButtonLabel"?: string;
        "label": string;
        "nextButtonLabel"?: string;
        "page": number;
        "pageLabel"?: string;
        "pageSelectLabel"?: string;
        "pages": number;
        "prevButtonLabel"?: string;
        "variant"?: SwirlPaginationVariant;
    }
    interface SwirlPdfReader {
        "autoZoomLabel"?: string;
        /**
          * Close the reader.
         */
        "close": () => Promise<void>;
        "closeButtonLabel"?: string;
        "downloadButtonLabel"?: string;
        "file": string;
        "label": string;
        /**
          * Open the reader.
         */
        "open": () => Promise<void>;
        "printButtonLabel"?: string;
        "zoomInButtonLabel"?: string;
        "zoomOutButtonLabel"?: string;
        "zoomSelectLabel"?: string;
    }
    interface SwirlPopover {
        "animation"?: SwirlPopoverAnimation;
        /**
          * Close the popover.
          * @returns
         */
        "close": () => Promise<void>;
        "enableFlip"?: boolean;
        "label": string;
        "offset"?: number | number[];
        /**
          * Open the popover.
          * @returns
         */
        "open": () => Promise<void>;
        "placement"?: Placement;
        "popoverId": string;
        "trigger": string;
        "useContainerWidth"?: boolean | string;
    }
    interface SwirlProgressIndicator {
        "label": string;
        "size"?: SwirlProgressIndicatorSize;
        "value"?: number;
        "variant"?: SwirlProgressIndicatorVariant;
    }
    interface SwirlRadio {
        "checked"?: SwirlRadioState;
        "description"?: string;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "value": string;
    }
    interface SwirlRadioGroup {
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlResourceList {
        "label"?: string;
    }
    interface SwirlResourceListFileItem {
        "description"?: string;
        "errorMessage"?: string;
        "icon"?: string;
        "label": string;
        "loading": boolean;
        "removable"?: boolean;
        "removeButtonLabel"?: string;
    }
    interface SwirlResourceListItem {
        "checked"?: boolean;
        "description"?: string;
        "disabled"?: boolean;
        "hideDivider"?: boolean;
        "href"?: string;
        "label": string;
        "media"?: string;
        "menuTriggerId"?: string;
        "menuTriggerLabel"?: string;
        "meta"?: string;
        "selectable"?: boolean;
        "value"?: string;
    }
    interface SwirlSearch {
        "autoFocus"?: boolean;
        "clearButtonLabel"?: string;
        "disabled"?: boolean;
        "inputId"?: string;
        "inputName"?: string;
        "label"?: string;
        "placeholder"?: string;
        "value"?: string;
    }
    interface SwirlSelect {
        "disabled"?: boolean;
        "inline"?: boolean;
        "invalid"?: boolean;
        "label": string;
        "multiSelect"?: boolean;
        "required"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string[];
    }
    interface SwirlSeparator {
    }
    interface SwirlSkeletonBox {
        "aspectRatio"?: string;
        "borderRadius"?: SwirlSkeletonBoxBorderRadius;
        "height"?: string;
        "width"?: string;
    }
    interface SwirlSkeletonText {
        "animated"?: boolean;
        "lines"?: number;
        "size"?: SwirlSkeletonTextSize;
    }
    interface SwirlSpinner {
        "label"?: string;
        "size"?: SwirlSpinnerSize;
    }
    interface SwirlStack {
        "align"?: SwirlStackAlign;
        "as"?: string;
        "justify"?: SwirlStackJustify;
        "orientation"?: SwirlStackOrientation;
        "spacing"?: SwirlStackSpacing;
        "wrap"?: boolean;
    }
    interface SwirlSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "label"?: string;
        "size"?: SwirlSwitchSize;
        "value"?: string;
    }
    interface SwirlTab {
        "active"?: boolean;
        "label": string;
        "tabId": string;
    }
    interface SwirlTable {
        "caption"?: string;
        "emptyStateLabel"?: string;
        "label": string;
    }
    interface SwirlTableCell {
    }
    interface SwirlTableColumn {
        "maxWidth"?: string;
        "minWidth"?: string;
        "sort"?: SwirlTableColumnSort;
        "sortable"?: boolean;
        "sticky"?: boolean;
        "width"?: string;
    }
    interface SwirlTableRow {
        "highlighted"?: boolean;
        "index"?: number;
    }
    interface SwirlTableRowGroup {
        "label": string;
    }
    interface SwirlTabs {
        /**
          * Activate a tab.
          * @param tabId
         */
        "activateTab": (tabId: string) => Promise<void>;
        "initialTab"?: string;
        "label": string;
    }
    interface SwirlTag {
        "intent"?: SwirlTagIntent;
        "label": string;
        "removable"?: boolean;
        "removalButtonLabel"?: string;
    }
    interface SwirlText {
        "align"?: SwirlTextAlign;
        "as"?: string;
        "balance"?: boolean;
        "color"?: SwirlTextColor;
        "fontStyle"?: SwirlTextFontStyle;
        "size"?: SwirlTextSize;
        "truncate"?: boolean;
        "weight"?: SwirlTextWeight;
    }
    interface SwirlTextInput {
        "autoComplete"?: string;
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "clearButtonLabel"?: string;
        "clearable"?: boolean;
        "disableDynamicWidth"?: boolean;
        "disabled"?: boolean;
        "inline"?: boolean;
        "invalid"?: boolean;
        "max"?: number;
        "maxLength"?: number;
        "min"?: number;
        "mode"?: SwirlTextInputMode;
        "passwordToggleLabel"?: string;
        "prefixLabel"?: string;
        "required"?: boolean;
        "rows"?: number;
        "showCharacterCounter"?: boolean;
        "spellCheck"?: boolean;
        "step"?: number;
        "suffixLabel"?: string;
        "swirlAriaAutocomplete"?: string;
        "swirlAriaControls"?: string;
        "swirlAriaDescribedby"?: string;
        "swirlAriaExpanded"?: string;
        "swirlRole"?: string;
        "type"?: SwirlTextInputType;
        "value"?: string;
    }
    interface SwirlThemeProvider {
        "config": SwirlThemeProviderConfig;
        /**
          * Returns the active app theme.
          * @returns SwirlTheme
         */
        "getActiveTheme": () => Promise<SwirlTheme>;
        /**
          * Returns the user's preferred theme stored in local storage.
          * @returns SwirlTheme
         */
        "getPreferredTheme": () => Promise<SwirlTheme>;
        /**
          * Resets the user's preferred theme, using the OS theme instead.
         */
        "resetPreferredTheme": () => Promise<void>;
        /**
          * Sets the user's preferred theme and stores it in local storage. Overrides the OS theme.
         */
        "setPreferredTheme": (theme: SwirlTheme) => Promise<void>;
    }
    interface SwirlThumbnail {
        "alt": string;
        "format"?: SwirlThumbnailFormat;
        "size": SwirlThumbnailSize;
        "src": string;
    }
    interface SwirlToast {
        "accessibleDismissLabel"?: string;
        "content": string;
        "dismissLabel"?: string;
        "duration"?: number;
        "icon"?: string;
        "intent"?: SwirlToastIntent;
        "toastId": string;
    }
    interface SwirlToastProvider {
        /**
          * Clear all toasts
          * @param newToast
          * @returns
         */
        "clearAll": () => Promise<void>;
        /**
          * Dismiss a toast
          * @param toastId
          * @returns
         */
        "dismiss": (toastId: string) => Promise<void>;
        /**
          * Optional global duration for all toasts. Overrides any durations set via the `toast` method. Set to 0 to disable automatic closing of toasts.
         */
        "globalDuration"?: number;
        /**
          * Create a new toast
          * @param newToast
          * @returns
         */
        "toast": (newToast: SwirlToastConfig) => Promise<SwirlToastMessage>;
    }
    interface SwirlTooltip {
        "content": string;
        "delay"?: number;
        "position"?: SwirlTooltipPosition;
    }
    interface SwirlTreeNavigationItem {
        "active"?: boolean;
        "icon"?: string;
        "label": string;
    }
    interface SwirlVideoThumbnail {
        "duration"?: string;
        "durationLabel"?: string;
        "label": string;
        "src": string;
    }
    interface SwirlVisuallyHidden {
    }
}
export interface SwirlAppLayoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlAppLayoutElement;
}
export interface SwirlAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlAutocompleteElement;
}
export interface SwirlBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlBannerElement;
}
export interface SwirlCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlCheckboxElement;
}
export interface SwirlConsoleLayoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlConsoleLayoutElement;
}
export interface SwirlDateInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlDateInputElement;
}
export interface SwirlDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlDatePickerElement;
}
export interface SwirlDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlDialogElement;
}
export interface SwirlFileUploaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileUploaderElement;
}
export interface SwirlFileViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerElement;
}
export interface SwirlFileViewerAudioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerAudioElement;
}
export interface SwirlFileViewerCsvCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerCsvElement;
}
export interface SwirlFileViewerImageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerImageElement;
}
export interface SwirlFileViewerPdfCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerPdfElement;
}
export interface SwirlFileViewerTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerTextElement;
}
export interface SwirlFileViewerVideoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerVideoElement;
}
export interface SwirlModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlModalElement;
}
export interface SwirlOptionListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlOptionListElement;
}
export interface SwirlOptionListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlOptionListItemElement;
}
export interface SwirlPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlPaginationElement;
}
export interface SwirlPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlPopoverElement;
}
export interface SwirlRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlRadioElement;
}
export interface SwirlRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlRadioGroupElement;
}
export interface SwirlResourceListFileItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlResourceListFileItemElement;
}
export interface SwirlResourceListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlResourceListItemElement;
}
export interface SwirlSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlSearchElement;
}
export interface SwirlSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlSelectElement;
}
export interface SwirlSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlSwitchElement;
}
export interface SwirlTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlTabsElement;
}
export interface SwirlTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlTagElement;
}
export interface SwirlTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlTextInputElement;
}
export interface SwirlThemeProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlThemeProviderElement;
}
export interface SwirlToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlToastElement;
}
declare global {
    interface HTMLFileManagerElement extends Components.FileManager, HTMLStencilElement {
    }
    var HTMLFileManagerElement: {
        prototype: HTMLFileManagerElement;
        new (): HTMLFileManagerElement;
    };
    interface HTMLSwirlActionListElement extends Components.SwirlActionList, HTMLStencilElement {
    }
    var HTMLSwirlActionListElement: {
        prototype: HTMLSwirlActionListElement;
        new (): HTMLSwirlActionListElement;
    };
    interface HTMLSwirlActionListItemElement extends Components.SwirlActionListItem, HTMLStencilElement {
    }
    var HTMLSwirlActionListItemElement: {
        prototype: HTMLSwirlActionListItemElement;
        new (): HTMLSwirlActionListItemElement;
    };
    interface HTMLSwirlActionListSectionElement extends Components.SwirlActionListSection, HTMLStencilElement {
    }
    var HTMLSwirlActionListSectionElement: {
        prototype: HTMLSwirlActionListSectionElement;
        new (): HTMLSwirlActionListSectionElement;
    };
    interface HTMLSwirlAppLayoutElement extends Components.SwirlAppLayout, HTMLStencilElement {
    }
    var HTMLSwirlAppLayoutElement: {
        prototype: HTMLSwirlAppLayoutElement;
        new (): HTMLSwirlAppLayoutElement;
    };
    interface HTMLSwirlAutocompleteElement extends Components.SwirlAutocomplete, HTMLStencilElement {
    }
    var HTMLSwirlAutocompleteElement: {
        prototype: HTMLSwirlAutocompleteElement;
        new (): HTMLSwirlAutocompleteElement;
    };
    interface HTMLSwirlAvatarElement extends Components.SwirlAvatar, HTMLStencilElement {
    }
    var HTMLSwirlAvatarElement: {
        prototype: HTMLSwirlAvatarElement;
        new (): HTMLSwirlAvatarElement;
    };
    interface HTMLSwirlAvatarGroupElement extends Components.SwirlAvatarGroup, HTMLStencilElement {
    }
    var HTMLSwirlAvatarGroupElement: {
        prototype: HTMLSwirlAvatarGroupElement;
        new (): HTMLSwirlAvatarGroupElement;
    };
    interface HTMLSwirlBadgeElement extends Components.SwirlBadge, HTMLStencilElement {
    }
    var HTMLSwirlBadgeElement: {
        prototype: HTMLSwirlBadgeElement;
        new (): HTMLSwirlBadgeElement;
    };
    interface HTMLSwirlBannerElement extends Components.SwirlBanner, HTMLStencilElement {
    }
    var HTMLSwirlBannerElement: {
        prototype: HTMLSwirlBannerElement;
        new (): HTMLSwirlBannerElement;
    };
    interface HTMLSwirlBoxElement extends Components.SwirlBox, HTMLStencilElement {
    }
    var HTMLSwirlBoxElement: {
        prototype: HTMLSwirlBoxElement;
        new (): HTMLSwirlBoxElement;
    };
    interface HTMLSwirlButtonElement extends Components.SwirlButton, HTMLStencilElement {
    }
    var HTMLSwirlButtonElement: {
        prototype: HTMLSwirlButtonElement;
        new (): HTMLSwirlButtonElement;
    };
    interface HTMLSwirlButtonGroupElement extends Components.SwirlButtonGroup, HTMLStencilElement {
    }
    var HTMLSwirlButtonGroupElement: {
        prototype: HTMLSwirlButtonGroupElement;
        new (): HTMLSwirlButtonGroupElement;
    };
    interface HTMLSwirlCardElement extends Components.SwirlCard, HTMLStencilElement {
    }
    var HTMLSwirlCardElement: {
        prototype: HTMLSwirlCardElement;
        new (): HTMLSwirlCardElement;
    };
    interface HTMLSwirlCheckboxElement extends Components.SwirlCheckbox, HTMLStencilElement {
    }
    var HTMLSwirlCheckboxElement: {
        prototype: HTMLSwirlCheckboxElement;
        new (): HTMLSwirlCheckboxElement;
    };
    interface HTMLSwirlChipElement extends Components.SwirlChip, HTMLStencilElement {
    }
    var HTMLSwirlChipElement: {
        prototype: HTMLSwirlChipElement;
        new (): HTMLSwirlChipElement;
    };
    interface HTMLSwirlConsoleLayoutElement extends Components.SwirlConsoleLayout, HTMLStencilElement {
    }
    var HTMLSwirlConsoleLayoutElement: {
        prototype: HTMLSwirlConsoleLayoutElement;
        new (): HTMLSwirlConsoleLayoutElement;
    };
    interface HTMLSwirlDateInputElement extends Components.SwirlDateInput, HTMLStencilElement {
    }
    var HTMLSwirlDateInputElement: {
        prototype: HTMLSwirlDateInputElement;
        new (): HTMLSwirlDateInputElement;
    };
    interface HTMLSwirlDatePickerElement extends Components.SwirlDatePicker, HTMLStencilElement {
    }
    var HTMLSwirlDatePickerElement: {
        prototype: HTMLSwirlDatePickerElement;
        new (): HTMLSwirlDatePickerElement;
    };
    interface HTMLSwirlDescriptionListElement extends Components.SwirlDescriptionList, HTMLStencilElement {
    }
    var HTMLSwirlDescriptionListElement: {
        prototype: HTMLSwirlDescriptionListElement;
        new (): HTMLSwirlDescriptionListElement;
    };
    interface HTMLSwirlDescriptionListItemElement extends Components.SwirlDescriptionListItem, HTMLStencilElement {
    }
    var HTMLSwirlDescriptionListItemElement: {
        prototype: HTMLSwirlDescriptionListItemElement;
        new (): HTMLSwirlDescriptionListItemElement;
    };
    interface HTMLSwirlDialogElement extends Components.SwirlDialog, HTMLStencilElement {
    }
    var HTMLSwirlDialogElement: {
        prototype: HTMLSwirlDialogElement;
        new (): HTMLSwirlDialogElement;
    };
    interface HTMLSwirlEmptyStateElement extends Components.SwirlEmptyState, HTMLStencilElement {
    }
    var HTMLSwirlEmptyStateElement: {
        prototype: HTMLSwirlEmptyStateElement;
        new (): HTMLSwirlEmptyStateElement;
    };
    interface HTMLSwirlFileUploaderElement extends Components.SwirlFileUploader, HTMLStencilElement {
    }
    var HTMLSwirlFileUploaderElement: {
        prototype: HTMLSwirlFileUploaderElement;
        new (): HTMLSwirlFileUploaderElement;
    };
    interface HTMLSwirlFileViewerElement extends Components.SwirlFileViewer, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerElement: {
        prototype: HTMLSwirlFileViewerElement;
        new (): HTMLSwirlFileViewerElement;
    };
    interface HTMLSwirlFileViewerAudioElement extends Components.SwirlFileViewerAudio, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerAudioElement: {
        prototype: HTMLSwirlFileViewerAudioElement;
        new (): HTMLSwirlFileViewerAudioElement;
    };
    interface HTMLSwirlFileViewerCsvElement extends Components.SwirlFileViewerCsv, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerCsvElement: {
        prototype: HTMLSwirlFileViewerCsvElement;
        new (): HTMLSwirlFileViewerCsvElement;
    };
    interface HTMLSwirlFileViewerImageElement extends Components.SwirlFileViewerImage, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerImageElement: {
        prototype: HTMLSwirlFileViewerImageElement;
        new (): HTMLSwirlFileViewerImageElement;
    };
    interface HTMLSwirlFileViewerPdfElement extends Components.SwirlFileViewerPdf, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerPdfElement: {
        prototype: HTMLSwirlFileViewerPdfElement;
        new (): HTMLSwirlFileViewerPdfElement;
    };
    interface HTMLSwirlFileViewerTextElement extends Components.SwirlFileViewerText, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerTextElement: {
        prototype: HTMLSwirlFileViewerTextElement;
        new (): HTMLSwirlFileViewerTextElement;
    };
    interface HTMLSwirlFileViewerVideoElement extends Components.SwirlFileViewerVideo, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerVideoElement: {
        prototype: HTMLSwirlFileViewerVideoElement;
        new (): HTMLSwirlFileViewerVideoElement;
    };
    interface HTMLSwirlFormControlElement extends Components.SwirlFormControl, HTMLStencilElement {
    }
    var HTMLSwirlFormControlElement: {
        prototype: HTMLSwirlFormControlElement;
        new (): HTMLSwirlFormControlElement;
    };
    interface HTMLSwirlFormGroupElement extends Components.SwirlFormGroup, HTMLStencilElement {
    }
    var HTMLSwirlFormGroupElement: {
        prototype: HTMLSwirlFormGroupElement;
        new (): HTMLSwirlFormGroupElement;
    };
    interface HTMLSwirlHeadingElement extends Components.SwirlHeading, HTMLStencilElement {
    }
    var HTMLSwirlHeadingElement: {
        prototype: HTMLSwirlHeadingElement;
        new (): HTMLSwirlHeadingElement;
    };
    interface HTMLSwirlIconAddElement extends Components.SwirlIconAdd, HTMLStencilElement {
    }
    var HTMLSwirlIconAddElement: {
        prototype: HTMLSwirlIconAddElement;
        new (): HTMLSwirlIconAddElement;
    };
    interface HTMLSwirlIconAddPhotoElement extends Components.SwirlIconAddPhoto, HTMLStencilElement {
    }
    var HTMLSwirlIconAddPhotoElement: {
        prototype: HTMLSwirlIconAddPhotoElement;
        new (): HTMLSwirlIconAddPhotoElement;
    };
    interface HTMLSwirlIconAdminPanelSettingsElement extends Components.SwirlIconAdminPanelSettings, HTMLStencilElement {
    }
    var HTMLSwirlIconAdminPanelSettingsElement: {
        prototype: HTMLSwirlIconAdminPanelSettingsElement;
        new (): HTMLSwirlIconAdminPanelSettingsElement;
    };
    interface HTMLSwirlIconArrowBackElement extends Components.SwirlIconArrowBack, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowBackElement: {
        prototype: HTMLSwirlIconArrowBackElement;
        new (): HTMLSwirlIconArrowBackElement;
    };
    interface HTMLSwirlIconArrowDownwardElement extends Components.SwirlIconArrowDownward, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowDownwardElement: {
        prototype: HTMLSwirlIconArrowDownwardElement;
        new (): HTMLSwirlIconArrowDownwardElement;
    };
    interface HTMLSwirlIconArrowForwardElement extends Components.SwirlIconArrowForward, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowForwardElement: {
        prototype: HTMLSwirlIconArrowForwardElement;
        new (): HTMLSwirlIconArrowForwardElement;
    };
    interface HTMLSwirlIconArrowLeftElement extends Components.SwirlIconArrowLeft, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowLeftElement: {
        prototype: HTMLSwirlIconArrowLeftElement;
        new (): HTMLSwirlIconArrowLeftElement;
    };
    interface HTMLSwirlIconArrowRightElement extends Components.SwirlIconArrowRight, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowRightElement: {
        prototype: HTMLSwirlIconArrowRightElement;
        new (): HTMLSwirlIconArrowRightElement;
    };
    interface HTMLSwirlIconArrowRightSmallElement extends Components.SwirlIconArrowRightSmall, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowRightSmallElement: {
        prototype: HTMLSwirlIconArrowRightSmallElement;
        new (): HTMLSwirlIconArrowRightSmallElement;
    };
    interface HTMLSwirlIconArrowUpwardElement extends Components.SwirlIconArrowUpward, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowUpwardElement: {
        prototype: HTMLSwirlIconArrowUpwardElement;
        new (): HTMLSwirlIconArrowUpwardElement;
    };
    interface HTMLSwirlIconAttachmentElement extends Components.SwirlIconAttachment, HTMLStencilElement {
    }
    var HTMLSwirlIconAttachmentElement: {
        prototype: HTMLSwirlIconAttachmentElement;
        new (): HTMLSwirlIconAttachmentElement;
    };
    interface HTMLSwirlIconBlockElement extends Components.SwirlIconBlock, HTMLStencilElement {
    }
    var HTMLSwirlIconBlockElement: {
        prototype: HTMLSwirlIconBlockElement;
        new (): HTMLSwirlIconBlockElement;
    };
    interface HTMLSwirlIconCancelElement extends Components.SwirlIconCancel, HTMLStencilElement {
    }
    var HTMLSwirlIconCancelElement: {
        prototype: HTMLSwirlIconCancelElement;
        new (): HTMLSwirlIconCancelElement;
    };
    interface HTMLSwirlIconChatBubbleElement extends Components.SwirlIconChatBubble, HTMLStencilElement {
    }
    var HTMLSwirlIconChatBubbleElement: {
        prototype: HTMLSwirlIconChatBubbleElement;
        new (): HTMLSwirlIconChatBubbleElement;
    };
    interface HTMLSwirlIconChatsFilledElement extends Components.SwirlIconChatsFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconChatsFilledElement: {
        prototype: HTMLSwirlIconChatsFilledElement;
        new (): HTMLSwirlIconChatsFilledElement;
    };
    interface HTMLSwirlIconChatsOutlinedElement extends Components.SwirlIconChatsOutlined, HTMLStencilElement {
    }
    var HTMLSwirlIconChatsOutlinedElement: {
        prototype: HTMLSwirlIconChatsOutlinedElement;
        new (): HTMLSwirlIconChatsOutlinedElement;
    };
    interface HTMLSwirlIconCheckElement extends Components.SwirlIconCheck, HTMLStencilElement {
    }
    var HTMLSwirlIconCheckElement: {
        prototype: HTMLSwirlIconCheckElement;
        new (): HTMLSwirlIconCheckElement;
    };
    interface HTMLSwirlIconCheckCircleElement extends Components.SwirlIconCheckCircle, HTMLStencilElement {
    }
    var HTMLSwirlIconCheckCircleElement: {
        prototype: HTMLSwirlIconCheckCircleElement;
        new (): HTMLSwirlIconCheckCircleElement;
    };
    interface HTMLSwirlIconCheckSmallElement extends Components.SwirlIconCheckSmall, HTMLStencilElement {
    }
    var HTMLSwirlIconCheckSmallElement: {
        prototype: HTMLSwirlIconCheckSmallElement;
        new (): HTMLSwirlIconCheckSmallElement;
    };
    interface HTMLSwirlIconCheckStrongElement extends Components.SwirlIconCheckStrong, HTMLStencilElement {
    }
    var HTMLSwirlIconCheckStrongElement: {
        prototype: HTMLSwirlIconCheckStrongElement;
        new (): HTMLSwirlIconCheckStrongElement;
    };
    interface HTMLSwirlIconChevronLeftElement extends Components.SwirlIconChevronLeft, HTMLStencilElement {
    }
    var HTMLSwirlIconChevronLeftElement: {
        prototype: HTMLSwirlIconChevronLeftElement;
        new (): HTMLSwirlIconChevronLeftElement;
    };
    interface HTMLSwirlIconChevronRightElement extends Components.SwirlIconChevronRight, HTMLStencilElement {
    }
    var HTMLSwirlIconChevronRightElement: {
        prototype: HTMLSwirlIconChevronRightElement;
        new (): HTMLSwirlIconChevronRightElement;
    };
    interface HTMLSwirlIconCloseElement extends Components.SwirlIconClose, HTMLStencilElement {
    }
    var HTMLSwirlIconCloseElement: {
        prototype: HTMLSwirlIconCloseElement;
        new (): HTMLSwirlIconCloseElement;
    };
    interface HTMLSwirlIconCloseSmallElement extends Components.SwirlIconCloseSmall, HTMLStencilElement {
    }
    var HTMLSwirlIconCloseSmallElement: {
        prototype: HTMLSwirlIconCloseSmallElement;
        new (): HTMLSwirlIconCloseSmallElement;
    };
    interface HTMLSwirlIconCloudUploadElement extends Components.SwirlIconCloudUpload, HTMLStencilElement {
    }
    var HTMLSwirlIconCloudUploadElement: {
        prototype: HTMLSwirlIconCloudUploadElement;
        new (): HTMLSwirlIconCloudUploadElement;
    };
    interface HTMLSwirlIconColumnElement extends Components.SwirlIconColumn, HTMLStencilElement {
    }
    var HTMLSwirlIconColumnElement: {
        prototype: HTMLSwirlIconColumnElement;
        new (): HTMLSwirlIconColumnElement;
    };
    interface HTMLSwirlIconCommentElement extends Components.SwirlIconComment, HTMLStencilElement {
    }
    var HTMLSwirlIconCommentElement: {
        prototype: HTMLSwirlIconCommentElement;
        new (): HTMLSwirlIconCommentElement;
    };
    interface HTMLSwirlIconCopyElement extends Components.SwirlIconCopy, HTMLStencilElement {
    }
    var HTMLSwirlIconCopyElement: {
        prototype: HTMLSwirlIconCopyElement;
        new (): HTMLSwirlIconCopyElement;
    };
    interface HTMLSwirlIconDateRangeElement extends Components.SwirlIconDateRange, HTMLStencilElement {
    }
    var HTMLSwirlIconDateRangeElement: {
        prototype: HTMLSwirlIconDateRangeElement;
        new (): HTMLSwirlIconDateRangeElement;
    };
    interface HTMLSwirlIconDeleteElement extends Components.SwirlIconDelete, HTMLStencilElement {
    }
    var HTMLSwirlIconDeleteElement: {
        prototype: HTMLSwirlIconDeleteElement;
        new (): HTMLSwirlIconDeleteElement;
    };
    interface HTMLSwirlIconDescriptionElement extends Components.SwirlIconDescription, HTMLStencilElement {
    }
    var HTMLSwirlIconDescriptionElement: {
        prototype: HTMLSwirlIconDescriptionElement;
        new (): HTMLSwirlIconDescriptionElement;
    };
    interface HTMLSwirlIconDownloadElement extends Components.SwirlIconDownload, HTMLStencilElement {
    }
    var HTMLSwirlIconDownloadElement: {
        prototype: HTMLSwirlIconDownloadElement;
        new (): HTMLSwirlIconDownloadElement;
    };
    interface HTMLSwirlIconDragHandleElement extends Components.SwirlIconDragHandle, HTMLStencilElement {
    }
    var HTMLSwirlIconDragHandleElement: {
        prototype: HTMLSwirlIconDragHandleElement;
        new (): HTMLSwirlIconDragHandleElement;
    };
    interface HTMLSwirlIconEditElement extends Components.SwirlIconEdit, HTMLStencilElement {
    }
    var HTMLSwirlIconEditElement: {
        prototype: HTMLSwirlIconEditElement;
        new (): HTMLSwirlIconEditElement;
    };
    interface HTMLSwirlIconEmojiMoodElement extends Components.SwirlIconEmojiMood, HTMLStencilElement {
    }
    var HTMLSwirlIconEmojiMoodElement: {
        prototype: HTMLSwirlIconEmojiMoodElement;
        new (): HTMLSwirlIconEmojiMoodElement;
    };
    interface HTMLSwirlIconEmojiSatisfiedElement extends Components.SwirlIconEmojiSatisfied, HTMLStencilElement {
    }
    var HTMLSwirlIconEmojiSatisfiedElement: {
        prototype: HTMLSwirlIconEmojiSatisfiedElement;
        new (): HTMLSwirlIconEmojiSatisfiedElement;
    };
    interface HTMLSwirlIconErrorElement extends Components.SwirlIconError, HTMLStencilElement {
    }
    var HTMLSwirlIconErrorElement: {
        prototype: HTMLSwirlIconErrorElement;
        new (): HTMLSwirlIconErrorElement;
    };
    interface HTMLSwirlIconExpandLessElement extends Components.SwirlIconExpandLess, HTMLStencilElement {
    }
    var HTMLSwirlIconExpandLessElement: {
        prototype: HTMLSwirlIconExpandLessElement;
        new (): HTMLSwirlIconExpandLessElement;
    };
    interface HTMLSwirlIconExpandMoreElement extends Components.SwirlIconExpandMore, HTMLStencilElement {
    }
    var HTMLSwirlIconExpandMoreElement: {
        prototype: HTMLSwirlIconExpandMoreElement;
        new (): HTMLSwirlIconExpandMoreElement;
    };
    interface HTMLSwirlIconFileElement extends Components.SwirlIconFile, HTMLStencilElement {
    }
    var HTMLSwirlIconFileElement: {
        prototype: HTMLSwirlIconFileElement;
        new (): HTMLSwirlIconFileElement;
    };
    interface HTMLSwirlIconFilterElement extends Components.SwirlIconFilter, HTMLStencilElement {
    }
    var HTMLSwirlIconFilterElement: {
        prototype: HTMLSwirlIconFilterElement;
        new (): HTMLSwirlIconFilterElement;
    };
    interface HTMLSwirlIconFolderSharedElement extends Components.SwirlIconFolderShared, HTMLStencilElement {
    }
    var HTMLSwirlIconFolderSharedElement: {
        prototype: HTMLSwirlIconFolderSharedElement;
        new (): HTMLSwirlIconFolderSharedElement;
    };
    interface HTMLSwirlIconFullscreenElement extends Components.SwirlIconFullscreen, HTMLStencilElement {
    }
    var HTMLSwirlIconFullscreenElement: {
        prototype: HTMLSwirlIconFullscreenElement;
        new (): HTMLSwirlIconFullscreenElement;
    };
    interface HTMLSwirlIconFullscreenExitElement extends Components.SwirlIconFullscreenExit, HTMLStencilElement {
    }
    var HTMLSwirlIconFullscreenExitElement: {
        prototype: HTMLSwirlIconFullscreenExitElement;
        new (): HTMLSwirlIconFullscreenExitElement;
    };
    interface HTMLSwirlIconGroupAssignElement extends Components.SwirlIconGroupAssign, HTMLStencilElement {
    }
    var HTMLSwirlIconGroupAssignElement: {
        prototype: HTMLSwirlIconGroupAssignElement;
        new (): HTMLSwirlIconGroupAssignElement;
    };
    interface HTMLSwirlIconGroupsElement extends Components.SwirlIconGroups, HTMLStencilElement {
    }
    var HTMLSwirlIconGroupsElement: {
        prototype: HTMLSwirlIconGroupsElement;
        new (): HTMLSwirlIconGroupsElement;
    };
    interface HTMLSwirlIconGroupsCustomElement extends Components.SwirlIconGroupsCustom, HTMLStencilElement {
    }
    var HTMLSwirlIconGroupsCustomElement: {
        prototype: HTMLSwirlIconGroupsCustomElement;
        new (): HTMLSwirlIconGroupsCustomElement;
    };
    interface HTMLSwirlIconGroupsFilledElement extends Components.SwirlIconGroupsFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconGroupsFilledElement: {
        prototype: HTMLSwirlIconGroupsFilledElement;
        new (): HTMLSwirlIconGroupsFilledElement;
    };
    interface HTMLSwirlIconGroupsOutlinedElement extends Components.SwirlIconGroupsOutlined, HTMLStencilElement {
    }
    var HTMLSwirlIconGroupsOutlinedElement: {
        prototype: HTMLSwirlIconGroupsOutlinedElement;
        new (): HTMLSwirlIconGroupsOutlinedElement;
    };
    interface HTMLSwirlIconHelpElement extends Components.SwirlIconHelp, HTMLStencilElement {
    }
    var HTMLSwirlIconHelpElement: {
        prototype: HTMLSwirlIconHelpElement;
        new (): HTMLSwirlIconHelpElement;
    };
    interface HTMLSwirlIconImageElement extends Components.SwirlIconImage, HTMLStencilElement {
    }
    var HTMLSwirlIconImageElement: {
        prototype: HTMLSwirlIconImageElement;
        new (): HTMLSwirlIconImageElement;
    };
    interface HTMLSwirlIconInfoElement extends Components.SwirlIconInfo, HTMLStencilElement {
    }
    var HTMLSwirlIconInfoElement: {
        prototype: HTMLSwirlIconInfoElement;
        new (): HTMLSwirlIconInfoElement;
    };
    interface HTMLSwirlIconInventoryElement extends Components.SwirlIconInventory, HTMLStencilElement {
    }
    var HTMLSwirlIconInventoryElement: {
        prototype: HTMLSwirlIconInventoryElement;
        new (): HTMLSwirlIconInventoryElement;
    };
    interface HTMLSwirlIconLikeElement extends Components.SwirlIconLike, HTMLStencilElement {
    }
    var HTMLSwirlIconLikeElement: {
        prototype: HTMLSwirlIconLikeElement;
        new (): HTMLSwirlIconLikeElement;
    };
    interface HTMLSwirlIconLinkElement extends Components.SwirlIconLink, HTMLStencilElement {
    }
    var HTMLSwirlIconLinkElement: {
        prototype: HTMLSwirlIconLinkElement;
        new (): HTMLSwirlIconLinkElement;
    };
    interface HTMLSwirlIconLockElement extends Components.SwirlIconLock, HTMLStencilElement {
    }
    var HTMLSwirlIconLockElement: {
        prototype: HTMLSwirlIconLockElement;
        new (): HTMLSwirlIconLockElement;
    };
    interface HTMLSwirlIconLogoutElement extends Components.SwirlIconLogout, HTMLStencilElement {
    }
    var HTMLSwirlIconLogoutElement: {
        prototype: HTMLSwirlIconLogoutElement;
        new (): HTMLSwirlIconLogoutElement;
    };
    interface HTMLSwirlIconMailElement extends Components.SwirlIconMail, HTMLStencilElement {
    }
    var HTMLSwirlIconMailElement: {
        prototype: HTMLSwirlIconMailElement;
        new (): HTMLSwirlIconMailElement;
    };
    interface HTMLSwirlIconManageAccountsElement extends Components.SwirlIconManageAccounts, HTMLStencilElement {
    }
    var HTMLSwirlIconManageAccountsElement: {
        prototype: HTMLSwirlIconManageAccountsElement;
        new (): HTMLSwirlIconManageAccountsElement;
    };
    interface HTMLSwirlIconMentionElement extends Components.SwirlIconMention, HTMLStencilElement {
    }
    var HTMLSwirlIconMentionElement: {
        prototype: HTMLSwirlIconMentionElement;
        new (): HTMLSwirlIconMentionElement;
    };
    interface HTMLSwirlIconMenuElement extends Components.SwirlIconMenu, HTMLStencilElement {
    }
    var HTMLSwirlIconMenuElement: {
        prototype: HTMLSwirlIconMenuElement;
        new (): HTMLSwirlIconMenuElement;
    };
    interface HTMLSwirlIconMenuFilledElement extends Components.SwirlIconMenuFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconMenuFilledElement: {
        prototype: HTMLSwirlIconMenuFilledElement;
        new (): HTMLSwirlIconMenuFilledElement;
    };
    interface HTMLSwirlIconMenuOutlinedElement extends Components.SwirlIconMenuOutlined, HTMLStencilElement {
    }
    var HTMLSwirlIconMenuOutlinedElement: {
        prototype: HTMLSwirlIconMenuOutlinedElement;
        new (): HTMLSwirlIconMenuOutlinedElement;
    };
    interface HTMLSwirlIconMessageElement extends Components.SwirlIconMessage, HTMLStencilElement {
    }
    var HTMLSwirlIconMessageElement: {
        prototype: HTMLSwirlIconMessageElement;
        new (): HTMLSwirlIconMessageElement;
    };
    interface HTMLSwirlIconMoreHorizontalElement extends Components.SwirlIconMoreHorizontal, HTMLStencilElement {
    }
    var HTMLSwirlIconMoreHorizontalElement: {
        prototype: HTMLSwirlIconMoreHorizontalElement;
        new (): HTMLSwirlIconMoreHorizontalElement;
    };
    interface HTMLSwirlIconMoreVertikalElement extends Components.SwirlIconMoreVertikal, HTMLStencilElement {
    }
    var HTMLSwirlIconMoreVertikalElement: {
        prototype: HTMLSwirlIconMoreVertikalElement;
        new (): HTMLSwirlIconMoreVertikalElement;
    };
    interface HTMLSwirlIconNewsFilledElement extends Components.SwirlIconNewsFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconNewsFilledElement: {
        prototype: HTMLSwirlIconNewsFilledElement;
        new (): HTMLSwirlIconNewsFilledElement;
    };
    interface HTMLSwirlIconNewsOutlinedElement extends Components.SwirlIconNewsOutlined, HTMLStencilElement {
    }
    var HTMLSwirlIconNewsOutlinedElement: {
        prototype: HTMLSwirlIconNewsOutlinedElement;
        new (): HTMLSwirlIconNewsOutlinedElement;
    };
    interface HTMLSwirlIconNotificationsElement extends Components.SwirlIconNotifications, HTMLStencilElement {
    }
    var HTMLSwirlIconNotificationsElement: {
        prototype: HTMLSwirlIconNotificationsElement;
        new (): HTMLSwirlIconNotificationsElement;
    };
    interface HTMLSwirlIconNotificationsActiveElement extends Components.SwirlIconNotificationsActive, HTMLStencilElement {
    }
    var HTMLSwirlIconNotificationsActiveElement: {
        prototype: HTMLSwirlIconNotificationsActiveElement;
        new (): HTMLSwirlIconNotificationsActiveElement;
    };
    interface HTMLSwirlIconNotificationsOffElement extends Components.SwirlIconNotificationsOff, HTMLStencilElement {
    }
    var HTMLSwirlIconNotificationsOffElement: {
        prototype: HTMLSwirlIconNotificationsOffElement;
        new (): HTMLSwirlIconNotificationsOffElement;
    };
    interface HTMLSwirlIconOpenInNewElement extends Components.SwirlIconOpenInNew, HTMLStencilElement {
    }
    var HTMLSwirlIconOpenInNewElement: {
        prototype: HTMLSwirlIconOpenInNewElement;
        new (): HTMLSwirlIconOpenInNewElement;
    };
    interface HTMLSwirlIconPeopleAltElement extends Components.SwirlIconPeopleAlt, HTMLStencilElement {
    }
    var HTMLSwirlIconPeopleAltElement: {
        prototype: HTMLSwirlIconPeopleAltElement;
        new (): HTMLSwirlIconPeopleAltElement;
    };
    interface HTMLSwirlIconPersonElement extends Components.SwirlIconPerson, HTMLStencilElement {
    }
    var HTMLSwirlIconPersonElement: {
        prototype: HTMLSwirlIconPersonElement;
        new (): HTMLSwirlIconPersonElement;
    };
    interface HTMLSwirlIconPersonOffElement extends Components.SwirlIconPersonOff, HTMLStencilElement {
    }
    var HTMLSwirlIconPersonOffElement: {
        prototype: HTMLSwirlIconPersonOffElement;
        new (): HTMLSwirlIconPersonOffElement;
    };
    interface HTMLSwirlIconPhoneElement extends Components.SwirlIconPhone, HTMLStencilElement {
    }
    var HTMLSwirlIconPhoneElement: {
        prototype: HTMLSwirlIconPhoneElement;
        new (): HTMLSwirlIconPhoneElement;
    };
    interface HTMLSwirlIconPollElement extends Components.SwirlIconPoll, HTMLStencilElement {
    }
    var HTMLSwirlIconPollElement: {
        prototype: HTMLSwirlIconPollElement;
        new (): HTMLSwirlIconPollElement;
    };
    interface HTMLSwirlIconPrintElement extends Components.SwirlIconPrint, HTMLStencilElement {
    }
    var HTMLSwirlIconPrintElement: {
        prototype: HTMLSwirlIconPrintElement;
        new (): HTMLSwirlIconPrintElement;
    };
    interface HTMLSwirlIconRecievedElement extends Components.SwirlIconRecieved, HTMLStencilElement {
    }
    var HTMLSwirlIconRecievedElement: {
        prototype: HTMLSwirlIconRecievedElement;
        new (): HTMLSwirlIconRecievedElement;
    };
    interface HTMLSwirlIconRemoveElement extends Components.SwirlIconRemove, HTMLStencilElement {
    }
    var HTMLSwirlIconRemoveElement: {
        prototype: HTMLSwirlIconRemoveElement;
        new (): HTMLSwirlIconRemoveElement;
    };
    interface HTMLSwirlIconSearchElement extends Components.SwirlIconSearch, HTMLStencilElement {
    }
    var HTMLSwirlIconSearchElement: {
        prototype: HTMLSwirlIconSearchElement;
        new (): HTMLSwirlIconSearchElement;
    };
    interface HTMLSwirlIconSearchStrongElement extends Components.SwirlIconSearchStrong, HTMLStencilElement {
    }
    var HTMLSwirlIconSearchStrongElement: {
        prototype: HTMLSwirlIconSearchStrongElement;
        new (): HTMLSwirlIconSearchStrongElement;
    };
    interface HTMLSwirlIconSendElement extends Components.SwirlIconSend, HTMLStencilElement {
    }
    var HTMLSwirlIconSendElement: {
        prototype: HTMLSwirlIconSendElement;
        new (): HTMLSwirlIconSendElement;
    };
    interface HTMLSwirlIconSettingsElement extends Components.SwirlIconSettings, HTMLStencilElement {
    }
    var HTMLSwirlIconSettingsElement: {
        prototype: HTMLSwirlIconSettingsElement;
        new (): HTMLSwirlIconSettingsElement;
    };
    interface HTMLSwirlIconSyncElement extends Components.SwirlIconSync, HTMLStencilElement {
    }
    var HTMLSwirlIconSyncElement: {
        prototype: HTMLSwirlIconSyncElement;
        new (): HTMLSwirlIconSyncElement;
    };
    interface HTMLSwirlIconTasksFilledElement extends Components.SwirlIconTasksFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconTasksFilledElement: {
        prototype: HTMLSwirlIconTasksFilledElement;
        new (): HTMLSwirlIconTasksFilledElement;
    };
    interface HTMLSwirlIconTasksOutlinedElement extends Components.SwirlIconTasksOutlined, HTMLStencilElement {
    }
    var HTMLSwirlIconTasksOutlinedElement: {
        prototype: HTMLSwirlIconTasksOutlinedElement;
        new (): HTMLSwirlIconTasksOutlinedElement;
    };
    interface HTMLSwirlIconTimeFilledElement extends Components.SwirlIconTimeFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconTimeFilledElement: {
        prototype: HTMLSwirlIconTimeFilledElement;
        new (): HTMLSwirlIconTimeFilledElement;
    };
    interface HTMLSwirlIconTimeOutlinedElement extends Components.SwirlIconTimeOutlined, HTMLStencilElement {
    }
    var HTMLSwirlIconTimeOutlinedElement: {
        prototype: HTMLSwirlIconTimeOutlinedElement;
        new (): HTMLSwirlIconTimeOutlinedElement;
    };
    interface HTMLSwirlIconTodayElement extends Components.SwirlIconToday, HTMLStencilElement {
    }
    var HTMLSwirlIconTodayElement: {
        prototype: HTMLSwirlIconTodayElement;
        new (): HTMLSwirlIconTodayElement;
    };
    interface HTMLSwirlIconUserAssignElement extends Components.SwirlIconUserAssign, HTMLStencilElement {
    }
    var HTMLSwirlIconUserAssignElement: {
        prototype: HTMLSwirlIconUserAssignElement;
        new (): HTMLSwirlIconUserAssignElement;
    };
    interface HTMLSwirlIconVideoCameraElement extends Components.SwirlIconVideoCamera, HTMLStencilElement {
    }
    var HTMLSwirlIconVideoCameraElement: {
        prototype: HTMLSwirlIconVideoCameraElement;
        new (): HTMLSwirlIconVideoCameraElement;
    };
    interface HTMLSwirlIconVisibilityElement extends Components.SwirlIconVisibility, HTMLStencilElement {
    }
    var HTMLSwirlIconVisibilityElement: {
        prototype: HTMLSwirlIconVisibilityElement;
        new (): HTMLSwirlIconVisibilityElement;
    };
    interface HTMLSwirlIconVisibilityOffElement extends Components.SwirlIconVisibilityOff, HTMLStencilElement {
    }
    var HTMLSwirlIconVisibilityOffElement: {
        prototype: HTMLSwirlIconVisibilityOffElement;
        new (): HTMLSwirlIconVisibilityOffElement;
    };
    interface HTMLSwirlIconWarningElement extends Components.SwirlIconWarning, HTMLStencilElement {
    }
    var HTMLSwirlIconWarningElement: {
        prototype: HTMLSwirlIconWarningElement;
        new (): HTMLSwirlIconWarningElement;
    };
    interface HTMLSwirlInlineErrorElement extends Components.SwirlInlineError, HTMLStencilElement {
    }
    var HTMLSwirlInlineErrorElement: {
        prototype: HTMLSwirlInlineErrorElement;
        new (): HTMLSwirlInlineErrorElement;
    };
    interface HTMLSwirlLightboxElement extends Components.SwirlLightbox, HTMLStencilElement {
    }
    var HTMLSwirlLightboxElement: {
        prototype: HTMLSwirlLightboxElement;
        new (): HTMLSwirlLightboxElement;
    };
    interface HTMLSwirlLinkElement extends Components.SwirlLink, HTMLStencilElement {
    }
    var HTMLSwirlLinkElement: {
        prototype: HTMLSwirlLinkElement;
        new (): HTMLSwirlLinkElement;
    };
    interface HTMLSwirlListElement extends Components.SwirlList, HTMLStencilElement {
    }
    var HTMLSwirlListElement: {
        prototype: HTMLSwirlListElement;
        new (): HTMLSwirlListElement;
    };
    interface HTMLSwirlModalElement extends Components.SwirlModal, HTMLStencilElement {
    }
    var HTMLSwirlModalElement: {
        prototype: HTMLSwirlModalElement;
        new (): HTMLSwirlModalElement;
    };
    interface HTMLSwirlOptionListElement extends Components.SwirlOptionList, HTMLStencilElement {
    }
    var HTMLSwirlOptionListElement: {
        prototype: HTMLSwirlOptionListElement;
        new (): HTMLSwirlOptionListElement;
    };
    interface HTMLSwirlOptionListItemElement extends Components.SwirlOptionListItem, HTMLStencilElement {
    }
    var HTMLSwirlOptionListItemElement: {
        prototype: HTMLSwirlOptionListItemElement;
        new (): HTMLSwirlOptionListItemElement;
    };
    interface HTMLSwirlOptionListSectionElement extends Components.SwirlOptionListSection, HTMLStencilElement {
    }
    var HTMLSwirlOptionListSectionElement: {
        prototype: HTMLSwirlOptionListSectionElement;
        new (): HTMLSwirlOptionListSectionElement;
    };
    interface HTMLSwirlPaginationElement extends Components.SwirlPagination, HTMLStencilElement {
    }
    var HTMLSwirlPaginationElement: {
        prototype: HTMLSwirlPaginationElement;
        new (): HTMLSwirlPaginationElement;
    };
    interface HTMLSwirlPdfReaderElement extends Components.SwirlPdfReader, HTMLStencilElement {
    }
    var HTMLSwirlPdfReaderElement: {
        prototype: HTMLSwirlPdfReaderElement;
        new (): HTMLSwirlPdfReaderElement;
    };
    interface HTMLSwirlPopoverElement extends Components.SwirlPopover, HTMLStencilElement {
    }
    var HTMLSwirlPopoverElement: {
        prototype: HTMLSwirlPopoverElement;
        new (): HTMLSwirlPopoverElement;
    };
    interface HTMLSwirlProgressIndicatorElement extends Components.SwirlProgressIndicator, HTMLStencilElement {
    }
    var HTMLSwirlProgressIndicatorElement: {
        prototype: HTMLSwirlProgressIndicatorElement;
        new (): HTMLSwirlProgressIndicatorElement;
    };
    interface HTMLSwirlRadioElement extends Components.SwirlRadio, HTMLStencilElement {
    }
    var HTMLSwirlRadioElement: {
        prototype: HTMLSwirlRadioElement;
        new (): HTMLSwirlRadioElement;
    };
    interface HTMLSwirlRadioGroupElement extends Components.SwirlRadioGroup, HTMLStencilElement {
    }
    var HTMLSwirlRadioGroupElement: {
        prototype: HTMLSwirlRadioGroupElement;
        new (): HTMLSwirlRadioGroupElement;
    };
    interface HTMLSwirlResourceListElement extends Components.SwirlResourceList, HTMLStencilElement {
    }
    var HTMLSwirlResourceListElement: {
        prototype: HTMLSwirlResourceListElement;
        new (): HTMLSwirlResourceListElement;
    };
    interface HTMLSwirlResourceListFileItemElement extends Components.SwirlResourceListFileItem, HTMLStencilElement {
    }
    var HTMLSwirlResourceListFileItemElement: {
        prototype: HTMLSwirlResourceListFileItemElement;
        new (): HTMLSwirlResourceListFileItemElement;
    };
    interface HTMLSwirlResourceListItemElement extends Components.SwirlResourceListItem, HTMLStencilElement {
    }
    var HTMLSwirlResourceListItemElement: {
        prototype: HTMLSwirlResourceListItemElement;
        new (): HTMLSwirlResourceListItemElement;
    };
    interface HTMLSwirlSearchElement extends Components.SwirlSearch, HTMLStencilElement {
    }
    var HTMLSwirlSearchElement: {
        prototype: HTMLSwirlSearchElement;
        new (): HTMLSwirlSearchElement;
    };
    interface HTMLSwirlSelectElement extends Components.SwirlSelect, HTMLStencilElement {
    }
    var HTMLSwirlSelectElement: {
        prototype: HTMLSwirlSelectElement;
        new (): HTMLSwirlSelectElement;
    };
    interface HTMLSwirlSeparatorElement extends Components.SwirlSeparator, HTMLStencilElement {
    }
    var HTMLSwirlSeparatorElement: {
        prototype: HTMLSwirlSeparatorElement;
        new (): HTMLSwirlSeparatorElement;
    };
    interface HTMLSwirlSkeletonBoxElement extends Components.SwirlSkeletonBox, HTMLStencilElement {
    }
    var HTMLSwirlSkeletonBoxElement: {
        prototype: HTMLSwirlSkeletonBoxElement;
        new (): HTMLSwirlSkeletonBoxElement;
    };
    interface HTMLSwirlSkeletonTextElement extends Components.SwirlSkeletonText, HTMLStencilElement {
    }
    var HTMLSwirlSkeletonTextElement: {
        prototype: HTMLSwirlSkeletonTextElement;
        new (): HTMLSwirlSkeletonTextElement;
    };
    interface HTMLSwirlSpinnerElement extends Components.SwirlSpinner, HTMLStencilElement {
    }
    var HTMLSwirlSpinnerElement: {
        prototype: HTMLSwirlSpinnerElement;
        new (): HTMLSwirlSpinnerElement;
    };
    interface HTMLSwirlStackElement extends Components.SwirlStack, HTMLStencilElement {
    }
    var HTMLSwirlStackElement: {
        prototype: HTMLSwirlStackElement;
        new (): HTMLSwirlStackElement;
    };
    interface HTMLSwirlSwitchElement extends Components.SwirlSwitch, HTMLStencilElement {
    }
    var HTMLSwirlSwitchElement: {
        prototype: HTMLSwirlSwitchElement;
        new (): HTMLSwirlSwitchElement;
    };
    interface HTMLSwirlTabElement extends Components.SwirlTab, HTMLStencilElement {
    }
    var HTMLSwirlTabElement: {
        prototype: HTMLSwirlTabElement;
        new (): HTMLSwirlTabElement;
    };
    interface HTMLSwirlTableElement extends Components.SwirlTable, HTMLStencilElement {
    }
    var HTMLSwirlTableElement: {
        prototype: HTMLSwirlTableElement;
        new (): HTMLSwirlTableElement;
    };
    interface HTMLSwirlTableCellElement extends Components.SwirlTableCell, HTMLStencilElement {
    }
    var HTMLSwirlTableCellElement: {
        prototype: HTMLSwirlTableCellElement;
        new (): HTMLSwirlTableCellElement;
    };
    interface HTMLSwirlTableColumnElement extends Components.SwirlTableColumn, HTMLStencilElement {
    }
    var HTMLSwirlTableColumnElement: {
        prototype: HTMLSwirlTableColumnElement;
        new (): HTMLSwirlTableColumnElement;
    };
    interface HTMLSwirlTableRowElement extends Components.SwirlTableRow, HTMLStencilElement {
    }
    var HTMLSwirlTableRowElement: {
        prototype: HTMLSwirlTableRowElement;
        new (): HTMLSwirlTableRowElement;
    };
    interface HTMLSwirlTableRowGroupElement extends Components.SwirlTableRowGroup, HTMLStencilElement {
    }
    var HTMLSwirlTableRowGroupElement: {
        prototype: HTMLSwirlTableRowGroupElement;
        new (): HTMLSwirlTableRowGroupElement;
    };
    interface HTMLSwirlTabsElement extends Components.SwirlTabs, HTMLStencilElement {
    }
    var HTMLSwirlTabsElement: {
        prototype: HTMLSwirlTabsElement;
        new (): HTMLSwirlTabsElement;
    };
    interface HTMLSwirlTagElement extends Components.SwirlTag, HTMLStencilElement {
    }
    var HTMLSwirlTagElement: {
        prototype: HTMLSwirlTagElement;
        new (): HTMLSwirlTagElement;
    };
    interface HTMLSwirlTextElement extends Components.SwirlText, HTMLStencilElement {
    }
    var HTMLSwirlTextElement: {
        prototype: HTMLSwirlTextElement;
        new (): HTMLSwirlTextElement;
    };
    interface HTMLSwirlTextInputElement extends Components.SwirlTextInput, HTMLStencilElement {
    }
    var HTMLSwirlTextInputElement: {
        prototype: HTMLSwirlTextInputElement;
        new (): HTMLSwirlTextInputElement;
    };
    interface HTMLSwirlThemeProviderElement extends Components.SwirlThemeProvider, HTMLStencilElement {
    }
    var HTMLSwirlThemeProviderElement: {
        prototype: HTMLSwirlThemeProviderElement;
        new (): HTMLSwirlThemeProviderElement;
    };
    interface HTMLSwirlThumbnailElement extends Components.SwirlThumbnail, HTMLStencilElement {
    }
    var HTMLSwirlThumbnailElement: {
        prototype: HTMLSwirlThumbnailElement;
        new (): HTMLSwirlThumbnailElement;
    };
    interface HTMLSwirlToastElement extends Components.SwirlToast, HTMLStencilElement {
    }
    var HTMLSwirlToastElement: {
        prototype: HTMLSwirlToastElement;
        new (): HTMLSwirlToastElement;
    };
    interface HTMLSwirlToastProviderElement extends Components.SwirlToastProvider, HTMLStencilElement {
    }
    var HTMLSwirlToastProviderElement: {
        prototype: HTMLSwirlToastProviderElement;
        new (): HTMLSwirlToastProviderElement;
    };
    interface HTMLSwirlTooltipElement extends Components.SwirlTooltip, HTMLStencilElement {
    }
    var HTMLSwirlTooltipElement: {
        prototype: HTMLSwirlTooltipElement;
        new (): HTMLSwirlTooltipElement;
    };
    interface HTMLSwirlTreeNavigationItemElement extends Components.SwirlTreeNavigationItem, HTMLStencilElement {
    }
    var HTMLSwirlTreeNavigationItemElement: {
        prototype: HTMLSwirlTreeNavigationItemElement;
        new (): HTMLSwirlTreeNavigationItemElement;
    };
    interface HTMLSwirlVideoThumbnailElement extends Components.SwirlVideoThumbnail, HTMLStencilElement {
    }
    var HTMLSwirlVideoThumbnailElement: {
        prototype: HTMLSwirlVideoThumbnailElement;
        new (): HTMLSwirlVideoThumbnailElement;
    };
    interface HTMLSwirlVisuallyHiddenElement extends Components.SwirlVisuallyHidden, HTMLStencilElement {
    }
    var HTMLSwirlVisuallyHiddenElement: {
        prototype: HTMLSwirlVisuallyHiddenElement;
        new (): HTMLSwirlVisuallyHiddenElement;
    };
    interface HTMLElementTagNameMap {
        "file-manager": HTMLFileManagerElement;
        "swirl-action-list": HTMLSwirlActionListElement;
        "swirl-action-list-item": HTMLSwirlActionListItemElement;
        "swirl-action-list-section": HTMLSwirlActionListSectionElement;
        "swirl-app-layout": HTMLSwirlAppLayoutElement;
        "swirl-autocomplete": HTMLSwirlAutocompleteElement;
        "swirl-avatar": HTMLSwirlAvatarElement;
        "swirl-avatar-group": HTMLSwirlAvatarGroupElement;
        "swirl-badge": HTMLSwirlBadgeElement;
        "swirl-banner": HTMLSwirlBannerElement;
        "swirl-box": HTMLSwirlBoxElement;
        "swirl-button": HTMLSwirlButtonElement;
        "swirl-button-group": HTMLSwirlButtonGroupElement;
        "swirl-card": HTMLSwirlCardElement;
        "swirl-checkbox": HTMLSwirlCheckboxElement;
        "swirl-chip": HTMLSwirlChipElement;
        "swirl-console-layout": HTMLSwirlConsoleLayoutElement;
        "swirl-date-input": HTMLSwirlDateInputElement;
        "swirl-date-picker": HTMLSwirlDatePickerElement;
        "swirl-description-list": HTMLSwirlDescriptionListElement;
        "swirl-description-list-item": HTMLSwirlDescriptionListItemElement;
        "swirl-dialog": HTMLSwirlDialogElement;
        "swirl-empty-state": HTMLSwirlEmptyStateElement;
        "swirl-file-uploader": HTMLSwirlFileUploaderElement;
        "swirl-file-viewer": HTMLSwirlFileViewerElement;
        "swirl-file-viewer-audio": HTMLSwirlFileViewerAudioElement;
        "swirl-file-viewer-csv": HTMLSwirlFileViewerCsvElement;
        "swirl-file-viewer-image": HTMLSwirlFileViewerImageElement;
        "swirl-file-viewer-pdf": HTMLSwirlFileViewerPdfElement;
        "swirl-file-viewer-text": HTMLSwirlFileViewerTextElement;
        "swirl-file-viewer-video": HTMLSwirlFileViewerVideoElement;
        "swirl-form-control": HTMLSwirlFormControlElement;
        "swirl-form-group": HTMLSwirlFormGroupElement;
        "swirl-heading": HTMLSwirlHeadingElement;
        "swirl-icon-add": HTMLSwirlIconAddElement;
        "swirl-icon-add-photo": HTMLSwirlIconAddPhotoElement;
        "swirl-icon-admin-panel-settings": HTMLSwirlIconAdminPanelSettingsElement;
        "swirl-icon-arrow-back": HTMLSwirlIconArrowBackElement;
        "swirl-icon-arrow-downward": HTMLSwirlIconArrowDownwardElement;
        "swirl-icon-arrow-forward": HTMLSwirlIconArrowForwardElement;
        "swirl-icon-arrow-left": HTMLSwirlIconArrowLeftElement;
        "swirl-icon-arrow-right": HTMLSwirlIconArrowRightElement;
        "swirl-icon-arrow-right-small": HTMLSwirlIconArrowRightSmallElement;
        "swirl-icon-arrow-upward": HTMLSwirlIconArrowUpwardElement;
        "swirl-icon-attachment": HTMLSwirlIconAttachmentElement;
        "swirl-icon-block": HTMLSwirlIconBlockElement;
        "swirl-icon-cancel": HTMLSwirlIconCancelElement;
        "swirl-icon-chat-bubble": HTMLSwirlIconChatBubbleElement;
        "swirl-icon-chats-filled": HTMLSwirlIconChatsFilledElement;
        "swirl-icon-chats-outlined": HTMLSwirlIconChatsOutlinedElement;
        "swirl-icon-check": HTMLSwirlIconCheckElement;
        "swirl-icon-check-circle": HTMLSwirlIconCheckCircleElement;
        "swirl-icon-check-small": HTMLSwirlIconCheckSmallElement;
        "swirl-icon-check-strong": HTMLSwirlIconCheckStrongElement;
        "swirl-icon-chevron-left": HTMLSwirlIconChevronLeftElement;
        "swirl-icon-chevron-right": HTMLSwirlIconChevronRightElement;
        "swirl-icon-close": HTMLSwirlIconCloseElement;
        "swirl-icon-close-small": HTMLSwirlIconCloseSmallElement;
        "swirl-icon-cloud-upload": HTMLSwirlIconCloudUploadElement;
        "swirl-icon-column": HTMLSwirlIconColumnElement;
        "swirl-icon-comment": HTMLSwirlIconCommentElement;
        "swirl-icon-copy": HTMLSwirlIconCopyElement;
        "swirl-icon-date-range": HTMLSwirlIconDateRangeElement;
        "swirl-icon-delete": HTMLSwirlIconDeleteElement;
        "swirl-icon-description": HTMLSwirlIconDescriptionElement;
        "swirl-icon-download": HTMLSwirlIconDownloadElement;
        "swirl-icon-drag-handle": HTMLSwirlIconDragHandleElement;
        "swirl-icon-edit": HTMLSwirlIconEditElement;
        "swirl-icon-emoji-mood": HTMLSwirlIconEmojiMoodElement;
        "swirl-icon-emoji-satisfied": HTMLSwirlIconEmojiSatisfiedElement;
        "swirl-icon-error": HTMLSwirlIconErrorElement;
        "swirl-icon-expand-less": HTMLSwirlIconExpandLessElement;
        "swirl-icon-expand-more": HTMLSwirlIconExpandMoreElement;
        "swirl-icon-file": HTMLSwirlIconFileElement;
        "swirl-icon-filter": HTMLSwirlIconFilterElement;
        "swirl-icon-folder-shared": HTMLSwirlIconFolderSharedElement;
        "swirl-icon-fullscreen": HTMLSwirlIconFullscreenElement;
        "swirl-icon-fullscreen-exit": HTMLSwirlIconFullscreenExitElement;
        "swirl-icon-group-assign": HTMLSwirlIconGroupAssignElement;
        "swirl-icon-groups": HTMLSwirlIconGroupsElement;
        "swirl-icon-groups-custom": HTMLSwirlIconGroupsCustomElement;
        "swirl-icon-groups-filled": HTMLSwirlIconGroupsFilledElement;
        "swirl-icon-groups-outlined": HTMLSwirlIconGroupsOutlinedElement;
        "swirl-icon-help": HTMLSwirlIconHelpElement;
        "swirl-icon-image": HTMLSwirlIconImageElement;
        "swirl-icon-info": HTMLSwirlIconInfoElement;
        "swirl-icon-inventory": HTMLSwirlIconInventoryElement;
        "swirl-icon-like": HTMLSwirlIconLikeElement;
        "swirl-icon-link": HTMLSwirlIconLinkElement;
        "swirl-icon-lock": HTMLSwirlIconLockElement;
        "swirl-icon-logout": HTMLSwirlIconLogoutElement;
        "swirl-icon-mail": HTMLSwirlIconMailElement;
        "swirl-icon-manage-accounts": HTMLSwirlIconManageAccountsElement;
        "swirl-icon-mention": HTMLSwirlIconMentionElement;
        "swirl-icon-menu": HTMLSwirlIconMenuElement;
        "swirl-icon-menu-filled": HTMLSwirlIconMenuFilledElement;
        "swirl-icon-menu-outlined": HTMLSwirlIconMenuOutlinedElement;
        "swirl-icon-message": HTMLSwirlIconMessageElement;
        "swirl-icon-more-horizontal": HTMLSwirlIconMoreHorizontalElement;
        "swirl-icon-more-vertikal": HTMLSwirlIconMoreVertikalElement;
        "swirl-icon-news-filled": HTMLSwirlIconNewsFilledElement;
        "swirl-icon-news-outlined": HTMLSwirlIconNewsOutlinedElement;
        "swirl-icon-notifications": HTMLSwirlIconNotificationsElement;
        "swirl-icon-notifications-active": HTMLSwirlIconNotificationsActiveElement;
        "swirl-icon-notifications-off": HTMLSwirlIconNotificationsOffElement;
        "swirl-icon-open-in-new": HTMLSwirlIconOpenInNewElement;
        "swirl-icon-people-alt": HTMLSwirlIconPeopleAltElement;
        "swirl-icon-person": HTMLSwirlIconPersonElement;
        "swirl-icon-person-off": HTMLSwirlIconPersonOffElement;
        "swirl-icon-phone": HTMLSwirlIconPhoneElement;
        "swirl-icon-poll": HTMLSwirlIconPollElement;
        "swirl-icon-print": HTMLSwirlIconPrintElement;
        "swirl-icon-recieved": HTMLSwirlIconRecievedElement;
        "swirl-icon-remove": HTMLSwirlIconRemoveElement;
        "swirl-icon-search": HTMLSwirlIconSearchElement;
        "swirl-icon-search-strong": HTMLSwirlIconSearchStrongElement;
        "swirl-icon-send": HTMLSwirlIconSendElement;
        "swirl-icon-settings": HTMLSwirlIconSettingsElement;
        "swirl-icon-sync": HTMLSwirlIconSyncElement;
        "swirl-icon-tasks-filled": HTMLSwirlIconTasksFilledElement;
        "swirl-icon-tasks-outlined": HTMLSwirlIconTasksOutlinedElement;
        "swirl-icon-time-filled": HTMLSwirlIconTimeFilledElement;
        "swirl-icon-time-outlined": HTMLSwirlIconTimeOutlinedElement;
        "swirl-icon-today": HTMLSwirlIconTodayElement;
        "swirl-icon-user-assign": HTMLSwirlIconUserAssignElement;
        "swirl-icon-video-camera": HTMLSwirlIconVideoCameraElement;
        "swirl-icon-visibility": HTMLSwirlIconVisibilityElement;
        "swirl-icon-visibility-off": HTMLSwirlIconVisibilityOffElement;
        "swirl-icon-warning": HTMLSwirlIconWarningElement;
        "swirl-inline-error": HTMLSwirlInlineErrorElement;
        "swirl-lightbox": HTMLSwirlLightboxElement;
        "swirl-link": HTMLSwirlLinkElement;
        "swirl-list": HTMLSwirlListElement;
        "swirl-modal": HTMLSwirlModalElement;
        "swirl-option-list": HTMLSwirlOptionListElement;
        "swirl-option-list-item": HTMLSwirlOptionListItemElement;
        "swirl-option-list-section": HTMLSwirlOptionListSectionElement;
        "swirl-pagination": HTMLSwirlPaginationElement;
        "swirl-pdf-reader": HTMLSwirlPdfReaderElement;
        "swirl-popover": HTMLSwirlPopoverElement;
        "swirl-progress-indicator": HTMLSwirlProgressIndicatorElement;
        "swirl-radio": HTMLSwirlRadioElement;
        "swirl-radio-group": HTMLSwirlRadioGroupElement;
        "swirl-resource-list": HTMLSwirlResourceListElement;
        "swirl-resource-list-file-item": HTMLSwirlResourceListFileItemElement;
        "swirl-resource-list-item": HTMLSwirlResourceListItemElement;
        "swirl-search": HTMLSwirlSearchElement;
        "swirl-select": HTMLSwirlSelectElement;
        "swirl-separator": HTMLSwirlSeparatorElement;
        "swirl-skeleton-box": HTMLSwirlSkeletonBoxElement;
        "swirl-skeleton-text": HTMLSwirlSkeletonTextElement;
        "swirl-spinner": HTMLSwirlSpinnerElement;
        "swirl-stack": HTMLSwirlStackElement;
        "swirl-switch": HTMLSwirlSwitchElement;
        "swirl-tab": HTMLSwirlTabElement;
        "swirl-table": HTMLSwirlTableElement;
        "swirl-table-cell": HTMLSwirlTableCellElement;
        "swirl-table-column": HTMLSwirlTableColumnElement;
        "swirl-table-row": HTMLSwirlTableRowElement;
        "swirl-table-row-group": HTMLSwirlTableRowGroupElement;
        "swirl-tabs": HTMLSwirlTabsElement;
        "swirl-tag": HTMLSwirlTagElement;
        "swirl-text": HTMLSwirlTextElement;
        "swirl-text-input": HTMLSwirlTextInputElement;
        "swirl-theme-provider": HTMLSwirlThemeProviderElement;
        "swirl-thumbnail": HTMLSwirlThumbnailElement;
        "swirl-toast": HTMLSwirlToastElement;
        "swirl-toast-provider": HTMLSwirlToastProviderElement;
        "swirl-tooltip": HTMLSwirlTooltipElement;
        "swirl-tree-navigation-item": HTMLSwirlTreeNavigationItemElement;
        "swirl-video-thumbnail": HTMLSwirlVideoThumbnailElement;
        "swirl-visually-hidden": HTMLSwirlVisuallyHiddenElement;
    }
}
declare namespace LocalJSX {
    interface FileManager {
    }
    interface SwirlActionList {
    }
    interface SwirlActionListItem {
        "description"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "intent"?: SwirlActionListItemIntent;
        "label": string;
        "size"?: SwirlActionListItemSize;
        "suffix"?: string;
    }
    interface SwirlActionListSection {
        "label": string;
    }
    interface SwirlAppLayout {
        "appBarMedia"?: string;
        "appName": string;
        "backToNavigationViewButtonLabel"?: string;
        "ctaIcon"?: string;
        "ctaLabel"?: string;
        "heading"?: string;
        "navigationBackButtonLabel"?: string;
        "navigationLabel"?: string;
        "onCtaClick"?: (event: SwirlAppLayoutCustomEvent<MouseEvent>) => void;
        "onMobileViewChange"?: (event: SwirlAppLayoutCustomEvent<SwirlAppLayoutMobileView>) => void;
        "onNavigationBackButtonClick"?: (event: SwirlAppLayoutCustomEvent<MouseEvent>) => void;
        "onSidebarToggle"?: (event: SwirlAppLayoutCustomEvent<boolean>) => void;
        "showNavigationBackButton"?: boolean;
        "sidebarCloseButtonLabel"?: string;
        "sidebarHeading"?: string;
        "subheading"?: string;
        "transitionStyle"?: string;
    }
    interface SwirlAutocomplete {
        "autoSelect"?: boolean;
        "clearButtonLabel"?: string;
        "clearable"?: boolean;
        "disabled"?: boolean;
        "generateSuggestions"?: (
    currentValue: string
  ) => Promise<SwirlAutocompleteSuggestion[]>;
        "inline"?: boolean;
        "invalid"?: boolean;
        "maxLength"?: number;
        "menuLabel"?: string;
        "mode"?: SwirlTextInputMode;
        "onValueChange"?: (event: SwirlAutocompleteCustomEvent<string>) => void;
        "required"?: boolean;
        "spellCheck"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlAvatar {
        "badge"?: string;
        "badgePosition"?: SwirlAvatarBadgePosition;
        "color"?: SwirlAvatarColor;
        "icon"?: string;
        "initials"?: string;
        "interactive"?: boolean;
        "label": string;
        "showLabel"?: boolean;
        "size"?: SwirlAvatarSize;
        "src"?: string;
        "variant"?: SwirlAvatarVariant;
    }
    interface SwirlAvatarGroup {
        "badge"?: string;
    }
    interface SwirlBadge {
        "icon"?: string;
        "intent"?: SwirlBadgeIntent;
        "label": string;
        "size"?: SwirlBadgeSize;
        "variant"?: SwirlBadgeVariant;
    }
    interface SwirlBanner {
        "actionLabel"?: string;
        "content": string;
        "dismissLabel"?: string;
        "dismissable"?: boolean;
        "importance"?: SwirlBannerAriaRole;
        "intent"?: SwirlBannerIntent;
        "onAction"?: (event: SwirlBannerCustomEvent<MouseEvent>) => void;
        "onDismiss"?: (event: SwirlBannerCustomEvent<MouseEvent>) => void;
        "showIcon"?: boolean;
    }
    interface SwirlBox {
        "as"?: string;
        "bordered"?: boolean;
        "centerBlock"?: boolean;
        "centerInline"?: boolean;
        "cover"?: boolean;
        "overflow"?: SwirlBoxOverflow;
        "padding"?: SwirlBoxPadding;
    }
    interface SwirlButton {
        "disabled"?: boolean;
        "download"?: string;
        "form"?: string;
        "hideLabel"?: boolean;
        "href"?: string;
        "icon"?: string;
        "iconPosition"?: SwirlButtonIconPosition;
        "intent"?: SwirlButtonIntent;
        "label": string;
        "name"?: string;
        "pill"?: boolean;
        "size"?: SwirlButtonSize;
        "swirlAriaDescribedby"?: string;
        "swirlAriaExpanded"?: string;
        "swirlAriaLabel"?: string;
        "target"?: string;
        "type"?: SwirlButtonType;
        "value"?: string;
        "variant"?: SwirlButtonVariant;
    }
    interface SwirlButtonGroup {
        "orientation"?: SwirlButtonGroupOrientation;
        "segmented"?: boolean;
        "stretch"?: boolean;
        "wrap"?: boolean;
    }
    interface SwirlCard {
        "as"?: string;
        "elevated"?: boolean;
        "href"?: string;
        "interactive"?: boolean;
        "linkTarget"?: string;
    }
    interface SwirlCheckbox {
        "checked"?: SwirlCheckboxState;
        "description"?: string;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "onValueChange"?: (event: SwirlCheckboxCustomEvent<boolean>) => void;
        "swirlAriaDescribedby"?: string;
        "swirlAriaLabel"?: string;
        "value"?: string;
    }
    interface SwirlChip {
        "avatar"?: string;
        "icon"?: string;
        "intent"?: SwirlChipIntent;
        "interactive"?: boolean;
        "label": string;
    }
    interface SwirlConsoleLayout {
        "appName": string;
        "backButonLabel"?: string;
        "heading": string;
        "helpButonLabel"?: string;
        "hideNavigationButtonLabel"?: string;
        "logoText"?: string;
        "navigationLabel"?: string;
        "onBackButtonClick"?: (event: SwirlConsoleLayoutCustomEvent<MouseEvent>) => void;
        "onHelpButtonClick"?: (event: SwirlConsoleLayoutCustomEvent<MouseEvent>) => void;
        "showBackButton"?: boolean;
        "showHelpButton"?: boolean;
        "showNavigationButtonLabel"?: string;
        "subheading"?: string;
    }
    interface SwirlDateInput {
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "datePickerLabel"?: string;
        "datePickerTriggerLabel"?: string;
        "disabled"?: boolean;
        "format"?: string;
        "inline"?: boolean;
        "invalid"?: boolean;
        "labels"?: WCDatepickerLabels;
        "locale"?: string;
        "onValueChange"?: (event: SwirlDateInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlDatePicker {
        "labels"?: WCDatepickerLabels;
        "locale"?: string;
        "onValueChange"?: (event: SwirlDatePickerCustomEvent<Date | Date[]>) => void;
        "range"?: boolean;
        "startDate"?: Date;
        "value"?: Date | Date[];
    }
    interface SwirlDescriptionList {
    }
    interface SwirlDescriptionListItem {
        "term": string;
    }
    interface SwirlDialog {
        "hideLabel"?: boolean;
        "intent"?: SwirlDialogIntent;
        "label": string;
        "onPrimaryAction"?: (event: SwirlDialogCustomEvent<MouseEvent>) => void;
        "onSecondaryAction"?: (event: SwirlDialogCustomEvent<MouseEvent>) => void;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
    }
    interface SwirlEmptyState {
        "heading"?: string;
        "illustration"?: string;
    }
    interface SwirlFileUploader {
        "accept"?: string;
        "ctaLabel"?: string;
        "description"?: string;
        "disabled"?: boolean;
        "dragDropLabel"?: string;
        "inputId": string;
        "inputName": string;
        "label": string;
        "multiple"?: boolean;
        "onValueChange"?: (event: SwirlFileUploaderCustomEvent<FileList>) => void;
        "showDropzone"?: boolean;
        "uploadButtonLabel"?: string;
    }
    interface SwirlFileViewer {
        "active"?: boolean;
        "autoplay"?: boolean;
        "description"?: string;
        "errorMessage"?: string;
        "file": string;
        "onActivate"?: (event: SwirlFileViewerCustomEvent<HTMLElement>) => void;
        "type": string;
        "typeUnsupportedMessage"?: string;
        "zoom"?: SwirlFileViewerPdfZoom;
    }
    interface SwirlFileViewerAudio {
        "autoplay"?: boolean;
        "file": string;
        "onActivate"?: (event: SwirlFileViewerAudioCustomEvent<HTMLElement>) => void;
        "type": string;
    }
    interface SwirlFileViewerCsv {
        "errorMessage"?: string;
        "file": string;
        "onActivate"?: (event: SwirlFileViewerCsvCustomEvent<HTMLElement>) => void;
    }
    interface SwirlFileViewerImage {
        "description"?: string;
        "errorMessage"?: string;
        "file": string;
        "maxZoom"?: number;
        "onActivate"?: (event: SwirlFileViewerImageCustomEvent<HTMLElement>) => void;
    }
    interface SwirlFileViewerPdf {
        "errorMessage"?: string;
        "file": string;
        "onActivate"?: (event: SwirlFileViewerPdfCustomEvent<HTMLElement>) => void;
        "singlePageMode"?: boolean;
        "zoom"?: SwirlFileViewerPdfZoom;
    }
    interface SwirlFileViewerText {
        "errorMessage"?: string;
        "file": string;
        "onActivate"?: (event: SwirlFileViewerTextCustomEvent<HTMLElement>) => void;
    }
    interface SwirlFileViewerVideo {
        "autoplay"?: boolean;
        "file": string;
        "onActivate"?: (event: SwirlFileViewerVideoCustomEvent<HTMLElement>) => void;
        "type": string;
    }
    interface SwirlFormControl {
        "description"?: string;
        "disabled"?: boolean;
        "errorMessage"?: string;
        "inline"?: boolean;
        "invalid"?: boolean;
        "label": string;
    }
    interface SwirlFormGroup {
        "orientation"?: SwirlFormGroupOrientation;
    }
    interface SwirlHeading {
        "align"?: SwirlHeadingAlign;
        "as"?: SwirlHeadingTag;
        "balance"?: boolean;
        "headingId"?: string;
        "level"?: SwirlHeadingLevel;
        "text": string;
    }
    interface SwirlIconAdd {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconAddPhoto {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconAdminPanelSettings {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowBack {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowDownward {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowForward {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowLeft {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowRight {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowRightSmall {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowUpward {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconAttachment {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconBlock {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCancel {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconChatBubble {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconChatsFilled {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconChatsOutlined {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCheck {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCheckCircle {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCheckSmall {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCheckStrong {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconChevronLeft {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconChevronRight {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconClose {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCloseSmall {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCloudUpload {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconColumn {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconComment {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCopy {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDateRange {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDelete {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDescription {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDownload {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDragHandle {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconEdit {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconEmojiMood {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconEmojiSatisfied {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconError {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconExpandLess {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconExpandMore {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFile {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFilter {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFolderShared {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFullscreen {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFullscreenExit {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconGroupAssign {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconGroups {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconGroupsCustom {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconGroupsFilled {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconGroupsOutlined {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconHelp {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconImage {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconInfo {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconInventory {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLike {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLink {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLock {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLogout {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMail {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconManageAccounts {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMention {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMenu {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMenuFilled {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMenuOutlined {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMessage {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMoreHorizontal {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMoreVertikal {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconNewsFilled {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconNewsOutlined {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconNotifications {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconNotificationsActive {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconNotificationsOff {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconOpenInNew {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPeopleAlt {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPerson {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPersonOff {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPhone {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPoll {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPrint {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconRecieved {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconRemove {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSearch {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSearchStrong {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSend {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSettings {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSync {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTasksFilled {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTasksOutlined {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTimeFilled {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTimeOutlined {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconToday {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconUserAssign {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconVideoCamera {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconVisibility {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconVisibilityOff {
        "size"?: SwirlIconSize;
    }
    interface SwirlIconWarning {
        "size"?: SwirlIconSize;
    }
    interface SwirlInlineError {
        "message": string;
        "size"?: SwirlInlineErrorSize;
    }
    interface SwirlLightbox {
        "closeButtonLabel"?: string;
        "downloadButtonLabel"?: string;
        "label": string;
        "nextSlideButtonLabel"?: string;
        "previousSlideButtonLabel"?: string;
    }
    interface SwirlLink {
        "href": string;
        "label": string;
        "target"?: SwirlLinkTarget;
    }
    interface SwirlList {
    }
    interface SwirlModal {
        "closeButtonLabel"?: string;
        "label": string;
        "onModalClose"?: (event: SwirlModalCustomEvent<void>) => void;
        "onModalOpen"?: (event: SwirlModalCustomEvent<void>) => void;
        "onPrimaryAction"?: (event: SwirlModalCustomEvent<MouseEvent>) => void;
        "onSecondaryAction"?: (event: SwirlModalCustomEvent<MouseEvent>) => void;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
    }
    interface SwirlOptionList {
        "allowDrag"?: boolean;
        "assistiveTextItemGrabbed"?: string;
        "assistiveTextItemMoved"?: string;
        "assistiveTextItemMoving"?: string;
        "disabled"?: boolean;
        "label"?: string;
        "multiSelect"?: boolean;
        "onItemDrop"?: (event: SwirlOptionListCustomEvent<{ oldIndex: number; newIndex: number }>) => void;
        "onValueChange"?: (event: SwirlOptionListCustomEvent<string[]>) => void;
        "optionListId"?: string;
        "value"?: string[];
    }
    interface SwirlOptionListItem {
        "allowDrag"?: boolean;
        "context"?: SwirlOptionListItemContext;
        "disabled"?: boolean;
        "dragHandleDescription"?: string;
        "dragHandleLabel"?: string;
        "dragging"?: boolean;
        "icon"?: string;
        "label": string;
        "onToggleDrag"?: (event: SwirlOptionListItemCustomEvent<HTMLSwirlOptionListItemElement>) => void;
        "selected"?: boolean;
        "value": string;
    }
    interface SwirlOptionListSection {
        "label": string;
    }
    interface SwirlPagination {
        "accessibleNextButtonLabel"?: string;
        "accessiblePrevButtonLabel"?: string;
        "label": string;
        "nextButtonLabel"?: string;
        "onSetPage"?: (event: SwirlPaginationCustomEvent<number>) => void;
        "page": number;
        "pageLabel"?: string;
        "pageSelectLabel"?: string;
        "pages": number;
        "prevButtonLabel"?: string;
        "variant"?: SwirlPaginationVariant;
    }
    interface SwirlPdfReader {
        "autoZoomLabel"?: string;
        "closeButtonLabel"?: string;
        "downloadButtonLabel"?: string;
        "file": string;
        "label": string;
        "printButtonLabel"?: string;
        "zoomInButtonLabel"?: string;
        "zoomOutButtonLabel"?: string;
        "zoomSelectLabel"?: string;
    }
    interface SwirlPopover {
        "animation"?: SwirlPopoverAnimation;
        "enableFlip"?: boolean;
        "label": string;
        "offset"?: number | number[];
        "onPopoverClose"?: (event: SwirlPopoverCustomEvent<void>) => void;
        "onPopoverOpen"?: (event: SwirlPopoverCustomEvent<void>) => void;
        "placement"?: Placement;
        "popoverId": string;
        "trigger": string;
        "useContainerWidth"?: boolean | string;
    }
    interface SwirlProgressIndicator {
        "label": string;
        "size"?: SwirlProgressIndicatorSize;
        "value"?: number;
        "variant"?: SwirlProgressIndicatorVariant;
    }
    interface SwirlRadio {
        "checked"?: SwirlRadioState;
        "description"?: string;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "onValueChange"?: (event: SwirlRadioCustomEvent<string>) => void;
        "value": string;
    }
    interface SwirlRadioGroup {
        "onValueChange"?: (event: SwirlRadioGroupCustomEvent<string>) => void;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlResourceList {
        "label"?: string;
    }
    interface SwirlResourceListFileItem {
        "description"?: string;
        "errorMessage"?: string;
        "icon"?: string;
        "label": string;
        "loading"?: boolean;
        "onRemove"?: (event: SwirlResourceListFileItemCustomEvent<MouseEvent>) => void;
        "removable"?: boolean;
        "removeButtonLabel"?: string;
    }
    interface SwirlResourceListItem {
        "checked"?: boolean;
        "description"?: string;
        "disabled"?: boolean;
        "hideDivider"?: boolean;
        "href"?: string;
        "label": string;
        "media"?: string;
        "menuTriggerId"?: string;
        "menuTriggerLabel"?: string;
        "meta"?: string;
        "onValueChange"?: (event: SwirlResourceListItemCustomEvent<boolean>) => void;
        "selectable"?: boolean;
        "value"?: string;
    }
    interface SwirlSearch {
        "autoFocus"?: boolean;
        "clearButtonLabel"?: string;
        "disabled"?: boolean;
        "inputId"?: string;
        "inputName"?: string;
        "label"?: string;
        "onInputBlur"?: (event: SwirlSearchCustomEvent<FocusEvent>) => void;
        "onInputFocus"?: (event: SwirlSearchCustomEvent<FocusEvent>) => void;
        "onValueChange"?: (event: SwirlSearchCustomEvent<string>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface SwirlSelect {
        "disabled"?: boolean;
        "inline"?: boolean;
        "invalid"?: boolean;
        "label": string;
        "multiSelect"?: boolean;
        "onValueChange"?: (event: SwirlSelectCustomEvent<string[]>) => void;
        "required"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string[];
    }
    interface SwirlSeparator {
    }
    interface SwirlSkeletonBox {
        "aspectRatio"?: string;
        "borderRadius"?: SwirlSkeletonBoxBorderRadius;
        "height"?: string;
        "width"?: string;
    }
    interface SwirlSkeletonText {
        "animated"?: boolean;
        "lines"?: number;
        "size"?: SwirlSkeletonTextSize;
    }
    interface SwirlSpinner {
        "label"?: string;
        "size"?: SwirlSpinnerSize;
    }
    interface SwirlStack {
        "align"?: SwirlStackAlign;
        "as"?: string;
        "justify"?: SwirlStackJustify;
        "orientation"?: SwirlStackOrientation;
        "spacing"?: SwirlStackSpacing;
        "wrap"?: boolean;
    }
    interface SwirlSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "label"?: string;
        "onValueChange"?: (event: SwirlSwitchCustomEvent<boolean>) => void;
        "size"?: SwirlSwitchSize;
        "value"?: string;
    }
    interface SwirlTab {
        "active"?: boolean;
        "label": string;
        "tabId": string;
    }
    interface SwirlTable {
        "caption"?: string;
        "emptyStateLabel"?: string;
        "label": string;
    }
    interface SwirlTableCell {
    }
    interface SwirlTableColumn {
        "maxWidth"?: string;
        "minWidth"?: string;
        "sort"?: SwirlTableColumnSort;
        "sortable"?: boolean;
        "sticky"?: boolean;
        "width"?: string;
    }
    interface SwirlTableRow {
        "highlighted"?: boolean;
        "index"?: number;
    }
    interface SwirlTableRowGroup {
        "label": string;
    }
    interface SwirlTabs {
        "initialTab"?: string;
        "label": string;
        "onTabActivated"?: (event: SwirlTabsCustomEvent<HTMLSwirlTabElement>) => void;
    }
    interface SwirlTag {
        "intent"?: SwirlTagIntent;
        "label": string;
        "onRemove"?: (event: SwirlTagCustomEvent<MouseEvent>) => void;
        "removable"?: boolean;
        "removalButtonLabel"?: string;
    }
    interface SwirlText {
        "align"?: SwirlTextAlign;
        "as"?: string;
        "balance"?: boolean;
        "color"?: SwirlTextColor;
        "fontStyle"?: SwirlTextFontStyle;
        "size"?: SwirlTextSize;
        "truncate"?: boolean;
        "weight"?: SwirlTextWeight;
    }
    interface SwirlTextInput {
        "autoComplete"?: string;
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "clearButtonLabel"?: string;
        "clearable"?: boolean;
        "disableDynamicWidth"?: boolean;
        "disabled"?: boolean;
        "inline"?: boolean;
        "invalid"?: boolean;
        "max"?: number;
        "maxLength"?: number;
        "min"?: number;
        "mode"?: SwirlTextInputMode;
        "onInputBlur"?: (event: SwirlTextInputCustomEvent<FocusEvent>) => void;
        "onInputFocus"?: (event: SwirlTextInputCustomEvent<FocusEvent>) => void;
        "onValueChange"?: (event: SwirlTextInputCustomEvent<string>) => void;
        "passwordToggleLabel"?: string;
        "prefixLabel"?: string;
        "required"?: boolean;
        "rows"?: number;
        "showCharacterCounter"?: boolean;
        "spellCheck"?: boolean;
        "step"?: number;
        "suffixLabel"?: string;
        "swirlAriaAutocomplete"?: string;
        "swirlAriaControls"?: string;
        "swirlAriaDescribedby"?: string;
        "swirlAriaExpanded"?: string;
        "swirlRole"?: string;
        "type"?: SwirlTextInputType;
        "value"?: string;
    }
    interface SwirlThemeProvider {
        "config"?: SwirlThemeProviderConfig;
        "onThemeChange"?: (event: SwirlThemeProviderCustomEvent<SwirlThemeChangeEventData>) => void;
    }
    interface SwirlThumbnail {
        "alt": string;
        "format"?: SwirlThumbnailFormat;
        "size"?: SwirlThumbnailSize;
        "src": string;
    }
    interface SwirlToast {
        "accessibleDismissLabel"?: string;
        "content": string;
        "dismissLabel"?: string;
        "duration"?: number;
        "icon"?: string;
        "intent"?: SwirlToastIntent;
        "onDismiss"?: (event: SwirlToastCustomEvent<string>) => void;
        "toastId": string;
    }
    interface SwirlToastProvider {
        /**
          * Optional global duration for all toasts. Overrides any durations set via the `toast` method. Set to 0 to disable automatic closing of toasts.
         */
        "globalDuration"?: number;
    }
    interface SwirlTooltip {
        "content": string;
        "delay"?: number;
        "position"?: SwirlTooltipPosition;
    }
    interface SwirlTreeNavigationItem {
        "active"?: boolean;
        "icon"?: string;
        "label": string;
    }
    interface SwirlVideoThumbnail {
        "duration"?: string;
        "durationLabel"?: string;
        "label": string;
        "src": string;
    }
    interface SwirlVisuallyHidden {
    }
    interface IntrinsicElements {
        "file-manager": FileManager;
        "swirl-action-list": SwirlActionList;
        "swirl-action-list-item": SwirlActionListItem;
        "swirl-action-list-section": SwirlActionListSection;
        "swirl-app-layout": SwirlAppLayout;
        "swirl-autocomplete": SwirlAutocomplete;
        "swirl-avatar": SwirlAvatar;
        "swirl-avatar-group": SwirlAvatarGroup;
        "swirl-badge": SwirlBadge;
        "swirl-banner": SwirlBanner;
        "swirl-box": SwirlBox;
        "swirl-button": SwirlButton;
        "swirl-button-group": SwirlButtonGroup;
        "swirl-card": SwirlCard;
        "swirl-checkbox": SwirlCheckbox;
        "swirl-chip": SwirlChip;
        "swirl-console-layout": SwirlConsoleLayout;
        "swirl-date-input": SwirlDateInput;
        "swirl-date-picker": SwirlDatePicker;
        "swirl-description-list": SwirlDescriptionList;
        "swirl-description-list-item": SwirlDescriptionListItem;
        "swirl-dialog": SwirlDialog;
        "swirl-empty-state": SwirlEmptyState;
        "swirl-file-uploader": SwirlFileUploader;
        "swirl-file-viewer": SwirlFileViewer;
        "swirl-file-viewer-audio": SwirlFileViewerAudio;
        "swirl-file-viewer-csv": SwirlFileViewerCsv;
        "swirl-file-viewer-image": SwirlFileViewerImage;
        "swirl-file-viewer-pdf": SwirlFileViewerPdf;
        "swirl-file-viewer-text": SwirlFileViewerText;
        "swirl-file-viewer-video": SwirlFileViewerVideo;
        "swirl-form-control": SwirlFormControl;
        "swirl-form-group": SwirlFormGroup;
        "swirl-heading": SwirlHeading;
        "swirl-icon-add": SwirlIconAdd;
        "swirl-icon-add-photo": SwirlIconAddPhoto;
        "swirl-icon-admin-panel-settings": SwirlIconAdminPanelSettings;
        "swirl-icon-arrow-back": SwirlIconArrowBack;
        "swirl-icon-arrow-downward": SwirlIconArrowDownward;
        "swirl-icon-arrow-forward": SwirlIconArrowForward;
        "swirl-icon-arrow-left": SwirlIconArrowLeft;
        "swirl-icon-arrow-right": SwirlIconArrowRight;
        "swirl-icon-arrow-right-small": SwirlIconArrowRightSmall;
        "swirl-icon-arrow-upward": SwirlIconArrowUpward;
        "swirl-icon-attachment": SwirlIconAttachment;
        "swirl-icon-block": SwirlIconBlock;
        "swirl-icon-cancel": SwirlIconCancel;
        "swirl-icon-chat-bubble": SwirlIconChatBubble;
        "swirl-icon-chats-filled": SwirlIconChatsFilled;
        "swirl-icon-chats-outlined": SwirlIconChatsOutlined;
        "swirl-icon-check": SwirlIconCheck;
        "swirl-icon-check-circle": SwirlIconCheckCircle;
        "swirl-icon-check-small": SwirlIconCheckSmall;
        "swirl-icon-check-strong": SwirlIconCheckStrong;
        "swirl-icon-chevron-left": SwirlIconChevronLeft;
        "swirl-icon-chevron-right": SwirlIconChevronRight;
        "swirl-icon-close": SwirlIconClose;
        "swirl-icon-close-small": SwirlIconCloseSmall;
        "swirl-icon-cloud-upload": SwirlIconCloudUpload;
        "swirl-icon-column": SwirlIconColumn;
        "swirl-icon-comment": SwirlIconComment;
        "swirl-icon-copy": SwirlIconCopy;
        "swirl-icon-date-range": SwirlIconDateRange;
        "swirl-icon-delete": SwirlIconDelete;
        "swirl-icon-description": SwirlIconDescription;
        "swirl-icon-download": SwirlIconDownload;
        "swirl-icon-drag-handle": SwirlIconDragHandle;
        "swirl-icon-edit": SwirlIconEdit;
        "swirl-icon-emoji-mood": SwirlIconEmojiMood;
        "swirl-icon-emoji-satisfied": SwirlIconEmojiSatisfied;
        "swirl-icon-error": SwirlIconError;
        "swirl-icon-expand-less": SwirlIconExpandLess;
        "swirl-icon-expand-more": SwirlIconExpandMore;
        "swirl-icon-file": SwirlIconFile;
        "swirl-icon-filter": SwirlIconFilter;
        "swirl-icon-folder-shared": SwirlIconFolderShared;
        "swirl-icon-fullscreen": SwirlIconFullscreen;
        "swirl-icon-fullscreen-exit": SwirlIconFullscreenExit;
        "swirl-icon-group-assign": SwirlIconGroupAssign;
        "swirl-icon-groups": SwirlIconGroups;
        "swirl-icon-groups-custom": SwirlIconGroupsCustom;
        "swirl-icon-groups-filled": SwirlIconGroupsFilled;
        "swirl-icon-groups-outlined": SwirlIconGroupsOutlined;
        "swirl-icon-help": SwirlIconHelp;
        "swirl-icon-image": SwirlIconImage;
        "swirl-icon-info": SwirlIconInfo;
        "swirl-icon-inventory": SwirlIconInventory;
        "swirl-icon-like": SwirlIconLike;
        "swirl-icon-link": SwirlIconLink;
        "swirl-icon-lock": SwirlIconLock;
        "swirl-icon-logout": SwirlIconLogout;
        "swirl-icon-mail": SwirlIconMail;
        "swirl-icon-manage-accounts": SwirlIconManageAccounts;
        "swirl-icon-mention": SwirlIconMention;
        "swirl-icon-menu": SwirlIconMenu;
        "swirl-icon-menu-filled": SwirlIconMenuFilled;
        "swirl-icon-menu-outlined": SwirlIconMenuOutlined;
        "swirl-icon-message": SwirlIconMessage;
        "swirl-icon-more-horizontal": SwirlIconMoreHorizontal;
        "swirl-icon-more-vertikal": SwirlIconMoreVertikal;
        "swirl-icon-news-filled": SwirlIconNewsFilled;
        "swirl-icon-news-outlined": SwirlIconNewsOutlined;
        "swirl-icon-notifications": SwirlIconNotifications;
        "swirl-icon-notifications-active": SwirlIconNotificationsActive;
        "swirl-icon-notifications-off": SwirlIconNotificationsOff;
        "swirl-icon-open-in-new": SwirlIconOpenInNew;
        "swirl-icon-people-alt": SwirlIconPeopleAlt;
        "swirl-icon-person": SwirlIconPerson;
        "swirl-icon-person-off": SwirlIconPersonOff;
        "swirl-icon-phone": SwirlIconPhone;
        "swirl-icon-poll": SwirlIconPoll;
        "swirl-icon-print": SwirlIconPrint;
        "swirl-icon-recieved": SwirlIconRecieved;
        "swirl-icon-remove": SwirlIconRemove;
        "swirl-icon-search": SwirlIconSearch;
        "swirl-icon-search-strong": SwirlIconSearchStrong;
        "swirl-icon-send": SwirlIconSend;
        "swirl-icon-settings": SwirlIconSettings;
        "swirl-icon-sync": SwirlIconSync;
        "swirl-icon-tasks-filled": SwirlIconTasksFilled;
        "swirl-icon-tasks-outlined": SwirlIconTasksOutlined;
        "swirl-icon-time-filled": SwirlIconTimeFilled;
        "swirl-icon-time-outlined": SwirlIconTimeOutlined;
        "swirl-icon-today": SwirlIconToday;
        "swirl-icon-user-assign": SwirlIconUserAssign;
        "swirl-icon-video-camera": SwirlIconVideoCamera;
        "swirl-icon-visibility": SwirlIconVisibility;
        "swirl-icon-visibility-off": SwirlIconVisibilityOff;
        "swirl-icon-warning": SwirlIconWarning;
        "swirl-inline-error": SwirlInlineError;
        "swirl-lightbox": SwirlLightbox;
        "swirl-link": SwirlLink;
        "swirl-list": SwirlList;
        "swirl-modal": SwirlModal;
        "swirl-option-list": SwirlOptionList;
        "swirl-option-list-item": SwirlOptionListItem;
        "swirl-option-list-section": SwirlOptionListSection;
        "swirl-pagination": SwirlPagination;
        "swirl-pdf-reader": SwirlPdfReader;
        "swirl-popover": SwirlPopover;
        "swirl-progress-indicator": SwirlProgressIndicator;
        "swirl-radio": SwirlRadio;
        "swirl-radio-group": SwirlRadioGroup;
        "swirl-resource-list": SwirlResourceList;
        "swirl-resource-list-file-item": SwirlResourceListFileItem;
        "swirl-resource-list-item": SwirlResourceListItem;
        "swirl-search": SwirlSearch;
        "swirl-select": SwirlSelect;
        "swirl-separator": SwirlSeparator;
        "swirl-skeleton-box": SwirlSkeletonBox;
        "swirl-skeleton-text": SwirlSkeletonText;
        "swirl-spinner": SwirlSpinner;
        "swirl-stack": SwirlStack;
        "swirl-switch": SwirlSwitch;
        "swirl-tab": SwirlTab;
        "swirl-table": SwirlTable;
        "swirl-table-cell": SwirlTableCell;
        "swirl-table-column": SwirlTableColumn;
        "swirl-table-row": SwirlTableRow;
        "swirl-table-row-group": SwirlTableRowGroup;
        "swirl-tabs": SwirlTabs;
        "swirl-tag": SwirlTag;
        "swirl-text": SwirlText;
        "swirl-text-input": SwirlTextInput;
        "swirl-theme-provider": SwirlThemeProvider;
        "swirl-thumbnail": SwirlThumbnail;
        "swirl-toast": SwirlToast;
        "swirl-toast-provider": SwirlToastProvider;
        "swirl-tooltip": SwirlTooltip;
        "swirl-tree-navigation-item": SwirlTreeNavigationItem;
        "swirl-video-thumbnail": SwirlVideoThumbnail;
        "swirl-visually-hidden": SwirlVisuallyHidden;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "file-manager": LocalJSX.FileManager & JSXBase.HTMLAttributes<HTMLFileManagerElement>;
            "swirl-action-list": LocalJSX.SwirlActionList & JSXBase.HTMLAttributes<HTMLSwirlActionListElement>;
            "swirl-action-list-item": LocalJSX.SwirlActionListItem & JSXBase.HTMLAttributes<HTMLSwirlActionListItemElement>;
            "swirl-action-list-section": LocalJSX.SwirlActionListSection & JSXBase.HTMLAttributes<HTMLSwirlActionListSectionElement>;
            "swirl-app-layout": LocalJSX.SwirlAppLayout & JSXBase.HTMLAttributes<HTMLSwirlAppLayoutElement>;
            "swirl-autocomplete": LocalJSX.SwirlAutocomplete & JSXBase.HTMLAttributes<HTMLSwirlAutocompleteElement>;
            "swirl-avatar": LocalJSX.SwirlAvatar & JSXBase.HTMLAttributes<HTMLSwirlAvatarElement>;
            "swirl-avatar-group": LocalJSX.SwirlAvatarGroup & JSXBase.HTMLAttributes<HTMLSwirlAvatarGroupElement>;
            "swirl-badge": LocalJSX.SwirlBadge & JSXBase.HTMLAttributes<HTMLSwirlBadgeElement>;
            "swirl-banner": LocalJSX.SwirlBanner & JSXBase.HTMLAttributes<HTMLSwirlBannerElement>;
            "swirl-box": LocalJSX.SwirlBox & JSXBase.HTMLAttributes<HTMLSwirlBoxElement>;
            "swirl-button": LocalJSX.SwirlButton & JSXBase.HTMLAttributes<HTMLSwirlButtonElement>;
            "swirl-button-group": LocalJSX.SwirlButtonGroup & JSXBase.HTMLAttributes<HTMLSwirlButtonGroupElement>;
            "swirl-card": LocalJSX.SwirlCard & JSXBase.HTMLAttributes<HTMLSwirlCardElement>;
            "swirl-checkbox": LocalJSX.SwirlCheckbox & JSXBase.HTMLAttributes<HTMLSwirlCheckboxElement>;
            "swirl-chip": LocalJSX.SwirlChip & JSXBase.HTMLAttributes<HTMLSwirlChipElement>;
            "swirl-console-layout": LocalJSX.SwirlConsoleLayout & JSXBase.HTMLAttributes<HTMLSwirlConsoleLayoutElement>;
            "swirl-date-input": LocalJSX.SwirlDateInput & JSXBase.HTMLAttributes<HTMLSwirlDateInputElement>;
            "swirl-date-picker": LocalJSX.SwirlDatePicker & JSXBase.HTMLAttributes<HTMLSwirlDatePickerElement>;
            "swirl-description-list": LocalJSX.SwirlDescriptionList & JSXBase.HTMLAttributes<HTMLSwirlDescriptionListElement>;
            "swirl-description-list-item": LocalJSX.SwirlDescriptionListItem & JSXBase.HTMLAttributes<HTMLSwirlDescriptionListItemElement>;
            "swirl-dialog": LocalJSX.SwirlDialog & JSXBase.HTMLAttributes<HTMLSwirlDialogElement>;
            "swirl-empty-state": LocalJSX.SwirlEmptyState & JSXBase.HTMLAttributes<HTMLSwirlEmptyStateElement>;
            "swirl-file-uploader": LocalJSX.SwirlFileUploader & JSXBase.HTMLAttributes<HTMLSwirlFileUploaderElement>;
            "swirl-file-viewer": LocalJSX.SwirlFileViewer & JSXBase.HTMLAttributes<HTMLSwirlFileViewerElement>;
            "swirl-file-viewer-audio": LocalJSX.SwirlFileViewerAudio & JSXBase.HTMLAttributes<HTMLSwirlFileViewerAudioElement>;
            "swirl-file-viewer-csv": LocalJSX.SwirlFileViewerCsv & JSXBase.HTMLAttributes<HTMLSwirlFileViewerCsvElement>;
            "swirl-file-viewer-image": LocalJSX.SwirlFileViewerImage & JSXBase.HTMLAttributes<HTMLSwirlFileViewerImageElement>;
            "swirl-file-viewer-pdf": LocalJSX.SwirlFileViewerPdf & JSXBase.HTMLAttributes<HTMLSwirlFileViewerPdfElement>;
            "swirl-file-viewer-text": LocalJSX.SwirlFileViewerText & JSXBase.HTMLAttributes<HTMLSwirlFileViewerTextElement>;
            "swirl-file-viewer-video": LocalJSX.SwirlFileViewerVideo & JSXBase.HTMLAttributes<HTMLSwirlFileViewerVideoElement>;
            "swirl-form-control": LocalJSX.SwirlFormControl & JSXBase.HTMLAttributes<HTMLSwirlFormControlElement>;
            "swirl-form-group": LocalJSX.SwirlFormGroup & JSXBase.HTMLAttributes<HTMLSwirlFormGroupElement>;
            "swirl-heading": LocalJSX.SwirlHeading & JSXBase.HTMLAttributes<HTMLSwirlHeadingElement>;
            "swirl-icon-add": LocalJSX.SwirlIconAdd & JSXBase.HTMLAttributes<HTMLSwirlIconAddElement>;
            "swirl-icon-add-photo": LocalJSX.SwirlIconAddPhoto & JSXBase.HTMLAttributes<HTMLSwirlIconAddPhotoElement>;
            "swirl-icon-admin-panel-settings": LocalJSX.SwirlIconAdminPanelSettings & JSXBase.HTMLAttributes<HTMLSwirlIconAdminPanelSettingsElement>;
            "swirl-icon-arrow-back": LocalJSX.SwirlIconArrowBack & JSXBase.HTMLAttributes<HTMLSwirlIconArrowBackElement>;
            "swirl-icon-arrow-downward": LocalJSX.SwirlIconArrowDownward & JSXBase.HTMLAttributes<HTMLSwirlIconArrowDownwardElement>;
            "swirl-icon-arrow-forward": LocalJSX.SwirlIconArrowForward & JSXBase.HTMLAttributes<HTMLSwirlIconArrowForwardElement>;
            "swirl-icon-arrow-left": LocalJSX.SwirlIconArrowLeft & JSXBase.HTMLAttributes<HTMLSwirlIconArrowLeftElement>;
            "swirl-icon-arrow-right": LocalJSX.SwirlIconArrowRight & JSXBase.HTMLAttributes<HTMLSwirlIconArrowRightElement>;
            "swirl-icon-arrow-right-small": LocalJSX.SwirlIconArrowRightSmall & JSXBase.HTMLAttributes<HTMLSwirlIconArrowRightSmallElement>;
            "swirl-icon-arrow-upward": LocalJSX.SwirlIconArrowUpward & JSXBase.HTMLAttributes<HTMLSwirlIconArrowUpwardElement>;
            "swirl-icon-attachment": LocalJSX.SwirlIconAttachment & JSXBase.HTMLAttributes<HTMLSwirlIconAttachmentElement>;
            "swirl-icon-block": LocalJSX.SwirlIconBlock & JSXBase.HTMLAttributes<HTMLSwirlIconBlockElement>;
            "swirl-icon-cancel": LocalJSX.SwirlIconCancel & JSXBase.HTMLAttributes<HTMLSwirlIconCancelElement>;
            "swirl-icon-chat-bubble": LocalJSX.SwirlIconChatBubble & JSXBase.HTMLAttributes<HTMLSwirlIconChatBubbleElement>;
            "swirl-icon-chats-filled": LocalJSX.SwirlIconChatsFilled & JSXBase.HTMLAttributes<HTMLSwirlIconChatsFilledElement>;
            "swirl-icon-chats-outlined": LocalJSX.SwirlIconChatsOutlined & JSXBase.HTMLAttributes<HTMLSwirlIconChatsOutlinedElement>;
            "swirl-icon-check": LocalJSX.SwirlIconCheck & JSXBase.HTMLAttributes<HTMLSwirlIconCheckElement>;
            "swirl-icon-check-circle": LocalJSX.SwirlIconCheckCircle & JSXBase.HTMLAttributes<HTMLSwirlIconCheckCircleElement>;
            "swirl-icon-check-small": LocalJSX.SwirlIconCheckSmall & JSXBase.HTMLAttributes<HTMLSwirlIconCheckSmallElement>;
            "swirl-icon-check-strong": LocalJSX.SwirlIconCheckStrong & JSXBase.HTMLAttributes<HTMLSwirlIconCheckStrongElement>;
            "swirl-icon-chevron-left": LocalJSX.SwirlIconChevronLeft & JSXBase.HTMLAttributes<HTMLSwirlIconChevronLeftElement>;
            "swirl-icon-chevron-right": LocalJSX.SwirlIconChevronRight & JSXBase.HTMLAttributes<HTMLSwirlIconChevronRightElement>;
            "swirl-icon-close": LocalJSX.SwirlIconClose & JSXBase.HTMLAttributes<HTMLSwirlIconCloseElement>;
            "swirl-icon-close-small": LocalJSX.SwirlIconCloseSmall & JSXBase.HTMLAttributes<HTMLSwirlIconCloseSmallElement>;
            "swirl-icon-cloud-upload": LocalJSX.SwirlIconCloudUpload & JSXBase.HTMLAttributes<HTMLSwirlIconCloudUploadElement>;
            "swirl-icon-column": LocalJSX.SwirlIconColumn & JSXBase.HTMLAttributes<HTMLSwirlIconColumnElement>;
            "swirl-icon-comment": LocalJSX.SwirlIconComment & JSXBase.HTMLAttributes<HTMLSwirlIconCommentElement>;
            "swirl-icon-copy": LocalJSX.SwirlIconCopy & JSXBase.HTMLAttributes<HTMLSwirlIconCopyElement>;
            "swirl-icon-date-range": LocalJSX.SwirlIconDateRange & JSXBase.HTMLAttributes<HTMLSwirlIconDateRangeElement>;
            "swirl-icon-delete": LocalJSX.SwirlIconDelete & JSXBase.HTMLAttributes<HTMLSwirlIconDeleteElement>;
            "swirl-icon-description": LocalJSX.SwirlIconDescription & JSXBase.HTMLAttributes<HTMLSwirlIconDescriptionElement>;
            "swirl-icon-download": LocalJSX.SwirlIconDownload & JSXBase.HTMLAttributes<HTMLSwirlIconDownloadElement>;
            "swirl-icon-drag-handle": LocalJSX.SwirlIconDragHandle & JSXBase.HTMLAttributes<HTMLSwirlIconDragHandleElement>;
            "swirl-icon-edit": LocalJSX.SwirlIconEdit & JSXBase.HTMLAttributes<HTMLSwirlIconEditElement>;
            "swirl-icon-emoji-mood": LocalJSX.SwirlIconEmojiMood & JSXBase.HTMLAttributes<HTMLSwirlIconEmojiMoodElement>;
            "swirl-icon-emoji-satisfied": LocalJSX.SwirlIconEmojiSatisfied & JSXBase.HTMLAttributes<HTMLSwirlIconEmojiSatisfiedElement>;
            "swirl-icon-error": LocalJSX.SwirlIconError & JSXBase.HTMLAttributes<HTMLSwirlIconErrorElement>;
            "swirl-icon-expand-less": LocalJSX.SwirlIconExpandLess & JSXBase.HTMLAttributes<HTMLSwirlIconExpandLessElement>;
            "swirl-icon-expand-more": LocalJSX.SwirlIconExpandMore & JSXBase.HTMLAttributes<HTMLSwirlIconExpandMoreElement>;
            "swirl-icon-file": LocalJSX.SwirlIconFile & JSXBase.HTMLAttributes<HTMLSwirlIconFileElement>;
            "swirl-icon-filter": LocalJSX.SwirlIconFilter & JSXBase.HTMLAttributes<HTMLSwirlIconFilterElement>;
            "swirl-icon-folder-shared": LocalJSX.SwirlIconFolderShared & JSXBase.HTMLAttributes<HTMLSwirlIconFolderSharedElement>;
            "swirl-icon-fullscreen": LocalJSX.SwirlIconFullscreen & JSXBase.HTMLAttributes<HTMLSwirlIconFullscreenElement>;
            "swirl-icon-fullscreen-exit": LocalJSX.SwirlIconFullscreenExit & JSXBase.HTMLAttributes<HTMLSwirlIconFullscreenExitElement>;
            "swirl-icon-group-assign": LocalJSX.SwirlIconGroupAssign & JSXBase.HTMLAttributes<HTMLSwirlIconGroupAssignElement>;
            "swirl-icon-groups": LocalJSX.SwirlIconGroups & JSXBase.HTMLAttributes<HTMLSwirlIconGroupsElement>;
            "swirl-icon-groups-custom": LocalJSX.SwirlIconGroupsCustom & JSXBase.HTMLAttributes<HTMLSwirlIconGroupsCustomElement>;
            "swirl-icon-groups-filled": LocalJSX.SwirlIconGroupsFilled & JSXBase.HTMLAttributes<HTMLSwirlIconGroupsFilledElement>;
            "swirl-icon-groups-outlined": LocalJSX.SwirlIconGroupsOutlined & JSXBase.HTMLAttributes<HTMLSwirlIconGroupsOutlinedElement>;
            "swirl-icon-help": LocalJSX.SwirlIconHelp & JSXBase.HTMLAttributes<HTMLSwirlIconHelpElement>;
            "swirl-icon-image": LocalJSX.SwirlIconImage & JSXBase.HTMLAttributes<HTMLSwirlIconImageElement>;
            "swirl-icon-info": LocalJSX.SwirlIconInfo & JSXBase.HTMLAttributes<HTMLSwirlIconInfoElement>;
            "swirl-icon-inventory": LocalJSX.SwirlIconInventory & JSXBase.HTMLAttributes<HTMLSwirlIconInventoryElement>;
            "swirl-icon-like": LocalJSX.SwirlIconLike & JSXBase.HTMLAttributes<HTMLSwirlIconLikeElement>;
            "swirl-icon-link": LocalJSX.SwirlIconLink & JSXBase.HTMLAttributes<HTMLSwirlIconLinkElement>;
            "swirl-icon-lock": LocalJSX.SwirlIconLock & JSXBase.HTMLAttributes<HTMLSwirlIconLockElement>;
            "swirl-icon-logout": LocalJSX.SwirlIconLogout & JSXBase.HTMLAttributes<HTMLSwirlIconLogoutElement>;
            "swirl-icon-mail": LocalJSX.SwirlIconMail & JSXBase.HTMLAttributes<HTMLSwirlIconMailElement>;
            "swirl-icon-manage-accounts": LocalJSX.SwirlIconManageAccounts & JSXBase.HTMLAttributes<HTMLSwirlIconManageAccountsElement>;
            "swirl-icon-mention": LocalJSX.SwirlIconMention & JSXBase.HTMLAttributes<HTMLSwirlIconMentionElement>;
            "swirl-icon-menu": LocalJSX.SwirlIconMenu & JSXBase.HTMLAttributes<HTMLSwirlIconMenuElement>;
            "swirl-icon-menu-filled": LocalJSX.SwirlIconMenuFilled & JSXBase.HTMLAttributes<HTMLSwirlIconMenuFilledElement>;
            "swirl-icon-menu-outlined": LocalJSX.SwirlIconMenuOutlined & JSXBase.HTMLAttributes<HTMLSwirlIconMenuOutlinedElement>;
            "swirl-icon-message": LocalJSX.SwirlIconMessage & JSXBase.HTMLAttributes<HTMLSwirlIconMessageElement>;
            "swirl-icon-more-horizontal": LocalJSX.SwirlIconMoreHorizontal & JSXBase.HTMLAttributes<HTMLSwirlIconMoreHorizontalElement>;
            "swirl-icon-more-vertikal": LocalJSX.SwirlIconMoreVertikal & JSXBase.HTMLAttributes<HTMLSwirlIconMoreVertikalElement>;
            "swirl-icon-news-filled": LocalJSX.SwirlIconNewsFilled & JSXBase.HTMLAttributes<HTMLSwirlIconNewsFilledElement>;
            "swirl-icon-news-outlined": LocalJSX.SwirlIconNewsOutlined & JSXBase.HTMLAttributes<HTMLSwirlIconNewsOutlinedElement>;
            "swirl-icon-notifications": LocalJSX.SwirlIconNotifications & JSXBase.HTMLAttributes<HTMLSwirlIconNotificationsElement>;
            "swirl-icon-notifications-active": LocalJSX.SwirlIconNotificationsActive & JSXBase.HTMLAttributes<HTMLSwirlIconNotificationsActiveElement>;
            "swirl-icon-notifications-off": LocalJSX.SwirlIconNotificationsOff & JSXBase.HTMLAttributes<HTMLSwirlIconNotificationsOffElement>;
            "swirl-icon-open-in-new": LocalJSX.SwirlIconOpenInNew & JSXBase.HTMLAttributes<HTMLSwirlIconOpenInNewElement>;
            "swirl-icon-people-alt": LocalJSX.SwirlIconPeopleAlt & JSXBase.HTMLAttributes<HTMLSwirlIconPeopleAltElement>;
            "swirl-icon-person": LocalJSX.SwirlIconPerson & JSXBase.HTMLAttributes<HTMLSwirlIconPersonElement>;
            "swirl-icon-person-off": LocalJSX.SwirlIconPersonOff & JSXBase.HTMLAttributes<HTMLSwirlIconPersonOffElement>;
            "swirl-icon-phone": LocalJSX.SwirlIconPhone & JSXBase.HTMLAttributes<HTMLSwirlIconPhoneElement>;
            "swirl-icon-poll": LocalJSX.SwirlIconPoll & JSXBase.HTMLAttributes<HTMLSwirlIconPollElement>;
            "swirl-icon-print": LocalJSX.SwirlIconPrint & JSXBase.HTMLAttributes<HTMLSwirlIconPrintElement>;
            "swirl-icon-recieved": LocalJSX.SwirlIconRecieved & JSXBase.HTMLAttributes<HTMLSwirlIconRecievedElement>;
            "swirl-icon-remove": LocalJSX.SwirlIconRemove & JSXBase.HTMLAttributes<HTMLSwirlIconRemoveElement>;
            "swirl-icon-search": LocalJSX.SwirlIconSearch & JSXBase.HTMLAttributes<HTMLSwirlIconSearchElement>;
            "swirl-icon-search-strong": LocalJSX.SwirlIconSearchStrong & JSXBase.HTMLAttributes<HTMLSwirlIconSearchStrongElement>;
            "swirl-icon-send": LocalJSX.SwirlIconSend & JSXBase.HTMLAttributes<HTMLSwirlIconSendElement>;
            "swirl-icon-settings": LocalJSX.SwirlIconSettings & JSXBase.HTMLAttributes<HTMLSwirlIconSettingsElement>;
            "swirl-icon-sync": LocalJSX.SwirlIconSync & JSXBase.HTMLAttributes<HTMLSwirlIconSyncElement>;
            "swirl-icon-tasks-filled": LocalJSX.SwirlIconTasksFilled & JSXBase.HTMLAttributes<HTMLSwirlIconTasksFilledElement>;
            "swirl-icon-tasks-outlined": LocalJSX.SwirlIconTasksOutlined & JSXBase.HTMLAttributes<HTMLSwirlIconTasksOutlinedElement>;
            "swirl-icon-time-filled": LocalJSX.SwirlIconTimeFilled & JSXBase.HTMLAttributes<HTMLSwirlIconTimeFilledElement>;
            "swirl-icon-time-outlined": LocalJSX.SwirlIconTimeOutlined & JSXBase.HTMLAttributes<HTMLSwirlIconTimeOutlinedElement>;
            "swirl-icon-today": LocalJSX.SwirlIconToday & JSXBase.HTMLAttributes<HTMLSwirlIconTodayElement>;
            "swirl-icon-user-assign": LocalJSX.SwirlIconUserAssign & JSXBase.HTMLAttributes<HTMLSwirlIconUserAssignElement>;
            "swirl-icon-video-camera": LocalJSX.SwirlIconVideoCamera & JSXBase.HTMLAttributes<HTMLSwirlIconVideoCameraElement>;
            "swirl-icon-visibility": LocalJSX.SwirlIconVisibility & JSXBase.HTMLAttributes<HTMLSwirlIconVisibilityElement>;
            "swirl-icon-visibility-off": LocalJSX.SwirlIconVisibilityOff & JSXBase.HTMLAttributes<HTMLSwirlIconVisibilityOffElement>;
            "swirl-icon-warning": LocalJSX.SwirlIconWarning & JSXBase.HTMLAttributes<HTMLSwirlIconWarningElement>;
            "swirl-inline-error": LocalJSX.SwirlInlineError & JSXBase.HTMLAttributes<HTMLSwirlInlineErrorElement>;
            "swirl-lightbox": LocalJSX.SwirlLightbox & JSXBase.HTMLAttributes<HTMLSwirlLightboxElement>;
            "swirl-link": LocalJSX.SwirlLink & JSXBase.HTMLAttributes<HTMLSwirlLinkElement>;
            "swirl-list": LocalJSX.SwirlList & JSXBase.HTMLAttributes<HTMLSwirlListElement>;
            "swirl-modal": LocalJSX.SwirlModal & JSXBase.HTMLAttributes<HTMLSwirlModalElement>;
            "swirl-option-list": LocalJSX.SwirlOptionList & JSXBase.HTMLAttributes<HTMLSwirlOptionListElement>;
            "swirl-option-list-item": LocalJSX.SwirlOptionListItem & JSXBase.HTMLAttributes<HTMLSwirlOptionListItemElement>;
            "swirl-option-list-section": LocalJSX.SwirlOptionListSection & JSXBase.HTMLAttributes<HTMLSwirlOptionListSectionElement>;
            "swirl-pagination": LocalJSX.SwirlPagination & JSXBase.HTMLAttributes<HTMLSwirlPaginationElement>;
            "swirl-pdf-reader": LocalJSX.SwirlPdfReader & JSXBase.HTMLAttributes<HTMLSwirlPdfReaderElement>;
            "swirl-popover": LocalJSX.SwirlPopover & JSXBase.HTMLAttributes<HTMLSwirlPopoverElement>;
            "swirl-progress-indicator": LocalJSX.SwirlProgressIndicator & JSXBase.HTMLAttributes<HTMLSwirlProgressIndicatorElement>;
            "swirl-radio": LocalJSX.SwirlRadio & JSXBase.HTMLAttributes<HTMLSwirlRadioElement>;
            "swirl-radio-group": LocalJSX.SwirlRadioGroup & JSXBase.HTMLAttributes<HTMLSwirlRadioGroupElement>;
            "swirl-resource-list": LocalJSX.SwirlResourceList & JSXBase.HTMLAttributes<HTMLSwirlResourceListElement>;
            "swirl-resource-list-file-item": LocalJSX.SwirlResourceListFileItem & JSXBase.HTMLAttributes<HTMLSwirlResourceListFileItemElement>;
            "swirl-resource-list-item": LocalJSX.SwirlResourceListItem & JSXBase.HTMLAttributes<HTMLSwirlResourceListItemElement>;
            "swirl-search": LocalJSX.SwirlSearch & JSXBase.HTMLAttributes<HTMLSwirlSearchElement>;
            "swirl-select": LocalJSX.SwirlSelect & JSXBase.HTMLAttributes<HTMLSwirlSelectElement>;
            "swirl-separator": LocalJSX.SwirlSeparator & JSXBase.HTMLAttributes<HTMLSwirlSeparatorElement>;
            "swirl-skeleton-box": LocalJSX.SwirlSkeletonBox & JSXBase.HTMLAttributes<HTMLSwirlSkeletonBoxElement>;
            "swirl-skeleton-text": LocalJSX.SwirlSkeletonText & JSXBase.HTMLAttributes<HTMLSwirlSkeletonTextElement>;
            "swirl-spinner": LocalJSX.SwirlSpinner & JSXBase.HTMLAttributes<HTMLSwirlSpinnerElement>;
            "swirl-stack": LocalJSX.SwirlStack & JSXBase.HTMLAttributes<HTMLSwirlStackElement>;
            "swirl-switch": LocalJSX.SwirlSwitch & JSXBase.HTMLAttributes<HTMLSwirlSwitchElement>;
            "swirl-tab": LocalJSX.SwirlTab & JSXBase.HTMLAttributes<HTMLSwirlTabElement>;
            "swirl-table": LocalJSX.SwirlTable & JSXBase.HTMLAttributes<HTMLSwirlTableElement>;
            "swirl-table-cell": LocalJSX.SwirlTableCell & JSXBase.HTMLAttributes<HTMLSwirlTableCellElement>;
            "swirl-table-column": LocalJSX.SwirlTableColumn & JSXBase.HTMLAttributes<HTMLSwirlTableColumnElement>;
            "swirl-table-row": LocalJSX.SwirlTableRow & JSXBase.HTMLAttributes<HTMLSwirlTableRowElement>;
            "swirl-table-row-group": LocalJSX.SwirlTableRowGroup & JSXBase.HTMLAttributes<HTMLSwirlTableRowGroupElement>;
            "swirl-tabs": LocalJSX.SwirlTabs & JSXBase.HTMLAttributes<HTMLSwirlTabsElement>;
            "swirl-tag": LocalJSX.SwirlTag & JSXBase.HTMLAttributes<HTMLSwirlTagElement>;
            "swirl-text": LocalJSX.SwirlText & JSXBase.HTMLAttributes<HTMLSwirlTextElement>;
            "swirl-text-input": LocalJSX.SwirlTextInput & JSXBase.HTMLAttributes<HTMLSwirlTextInputElement>;
            "swirl-theme-provider": LocalJSX.SwirlThemeProvider & JSXBase.HTMLAttributes<HTMLSwirlThemeProviderElement>;
            "swirl-thumbnail": LocalJSX.SwirlThumbnail & JSXBase.HTMLAttributes<HTMLSwirlThumbnailElement>;
            "swirl-toast": LocalJSX.SwirlToast & JSXBase.HTMLAttributes<HTMLSwirlToastElement>;
            "swirl-toast-provider": LocalJSX.SwirlToastProvider & JSXBase.HTMLAttributes<HTMLSwirlToastProviderElement>;
            "swirl-tooltip": LocalJSX.SwirlTooltip & JSXBase.HTMLAttributes<HTMLSwirlTooltipElement>;
            "swirl-tree-navigation-item": LocalJSX.SwirlTreeNavigationItem & JSXBase.HTMLAttributes<HTMLSwirlTreeNavigationItemElement>;
            "swirl-video-thumbnail": LocalJSX.SwirlVideoThumbnail & JSXBase.HTMLAttributes<HTMLSwirlVideoThumbnailElement>;
            "swirl-visually-hidden": LocalJSX.SwirlVisuallyHidden & JSXBase.HTMLAttributes<HTMLSwirlVisuallyHiddenElement>;
        }
    }
}
