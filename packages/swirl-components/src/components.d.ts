/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FlipActionListItemIntent, FlipActionListItemSize } from "./components/flip-action-list-item/flip-action-list-item";
import { FlipAvatarBadgePosition, FlipAvatarSize, FlipAvatarVariant } from "./components/flip-avatar/flip-avatar";
import { FlipBadgeIntent, FlipBadgeSize, FlipBadgeVariant } from "./components/flip-badge/flip-badge";
import { FlipBannerAriaRole, FlipBannerIntent } from "./components/flip-banner/flip-banner";
import { FlipButtonIconPosition, FlipButtonIntent, FlipButtonSize, FlipButtonType, FlipButtonVariant } from "./components/flip-button/flip-button";
import { FlipButtonGroupOrientation } from "./components/flip-button-group/flip-button-group";
import { FlipCheckboxState } from "./components/flip-checkbox/flip-checkbox";
import { FlipChipIntent } from "./components/flip-chip/flip-chip";
import { AirDatepickerLocale } from "air-datepicker";
import { FlipDialogIntent } from "./components/flip-dialog/flip-dialog";
import { FlipFileViewerPdfZoom } from "./components/flip-file-viewer/viewers/flip-file-viewer-pdf/flip-file-viewer-pdf";
import { FlipFileViewerPdfZoom as FlipFileViewerPdfZoom1 } from "./components/flip-file-viewer/viewers/flip-file-viewer-pdf/flip-file-viewer-pdf";
import { FlipFormGroupOrientation } from "./components/flip-form-group/flip-form-group";
import { FlipHeadingAlign, FlipHeadingLevel, FlipHeadingTag } from "./components/flip-heading/flip-heading";
import { FlipIconSize } from "./components/flip-icon/flip-icon.types";
import { FlipInlineErrorSize } from "./components/flip-inline-error/flip-inline-error";
import { FlipLinkTarget } from "./components/flip-link/flip-link";
import { FlipOptionListItemContext } from "./components/flip-option-list-item/flip-option-list-item";
import { FlipPaginationVariant } from "./components/flip-pagination/flip-pagination";
import { Placement } from "@floating-ui/dom";
import { FlipProgressIndicatorSize, FlipProgressIndicatorVariant } from "./components/flip-progress-indicator/flip-progress-indicator";
import { FlipRadioState } from "./components/flip-radio/flip-radio";
import { FlipSpinnerSize } from "./components/flip-spinner/flip-spinner";
import { FlipStackAlign, FlipStackJustify, FlipStackOrientation, FlipStackSpacing } from "./components/flip-stack/flip-stack";
import { FlipSwitchSize } from "./components/flip-switch/flip-switch";
import { FlipTagIntent } from "./components/flip-tag/flip-tag";
import { FlipTextAlign, FlipTextColor, FlipTextFontStyle, FlipTextSize, FlipTextWeight } from "./components/flip-text/flip-text";
import { FlipTextInputMode, FlipTextInputType } from "./components/flip-text-input/flip-text-input";
import { FlipTheme, FlipThemeProviderConfig } from "./components/flip-theme-provider/flip-theme-provider";
import { FlipThumbnailFormat, FlipThumbnailSize } from "./components/flip-thumbnail/flip-thumbnail";
import { FlipToastIntent } from "./components/flip-toast/flip-toast";
import { FlipToastConfig, FlipToastMessage } from "./components/flip-toast-provider/flip-toast-provider";
import { FlipTooltipPosition } from "./components/flip-tooltip/flip-tooltip";
export namespace Components {
    interface FlipActionList {
    }
    interface FlipActionListItem {
        "description"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "intent"?: FlipActionListItemIntent;
        "label": string;
        "size"?: FlipActionListItemSize;
        "suffix"?: string;
    }
    interface FlipActionListSection {
        "label": string;
    }
    interface FlipAvatar {
        "badge"?: string;
        "badgePosition"?: FlipAvatarBadgePosition;
        "icon"?: string;
        "initials"?: string;
        "interactive"?: boolean;
        "label": string;
        "showLabel"?: boolean;
        "size"?: FlipAvatarSize;
        "src"?: string;
        "variant"?: FlipAvatarVariant;
    }
    interface FlipAvatarGroup {
        "badge"?: string;
    }
    interface FlipBadge {
        "icon"?: string;
        "intent"?: FlipBadgeIntent;
        "label": string;
        "size"?: FlipBadgeSize;
        "variant"?: FlipBadgeVariant;
    }
    interface FlipBanner {
        "actionLabel"?: string;
        "content": string;
        "dismissLabel"?: string;
        "dismissable"?: boolean;
        "importance"?: FlipBannerAriaRole;
        "intent"?: FlipBannerIntent;
        "showIcon"?: boolean;
    }
    interface FlipButton {
        "disabled"?: boolean;
        "download"?: string;
        "flipAriaDescribedby"?: string;
        "flipAriaLabel"?: string;
        "form"?: string;
        "hideLabel"?: boolean;
        "href"?: string;
        "icon"?: string;
        "iconPosition": FlipButtonIconPosition;
        "intent"?: FlipButtonIntent;
        "label": string;
        "name"?: string;
        "size"?: FlipButtonSize;
        "target"?: string;
        "type"?: FlipButtonType;
        "value"?: string;
        "variant"?: FlipButtonVariant;
    }
    interface FlipButtonGroup {
        "orientation": FlipButtonGroupOrientation;
        "stretch": boolean;
        "wrap": boolean;
    }
    interface FlipCheckbox {
        "checked"?: FlipCheckboxState;
        "description"?: string;
        "disabled"?: boolean;
        "flipAriaDescribedby"?: string;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "value"?: string;
    }
    interface FlipChip {
        "avatar"?: string;
        "icon"?: string;
        "intent"?: FlipChipIntent;
        "interactive"?: boolean;
        "label": string;
    }
    interface FlipDateInput {
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "datePickerLabel"?: string;
        "disabled"?: boolean;
        "flipAriaDescribedby"?: string;
        "format"?: string;
        "invalid"?: boolean;
        "locale"?: Partial<AirDatepickerLocale>;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface FlipDatePicker {
        "locale"?: Partial<AirDatepickerLocale>;
        "maxDate"?: Date;
        "minDate"?: Date;
        "range"?: boolean;
        "startDate"?: Date;
        "value"?: Date | Date[];
    }
    interface FlipDescriptionList {
    }
    interface FlipDescriptionListItem {
        "term": string;
    }
    interface FlipDialog {
        /**
          * Close the dialog.
         */
        "close": () => Promise<void>;
        "hideLabel"?: boolean;
        "intent"?: FlipDialogIntent;
        "label": string;
        /**
          * Open the dialog.
         */
        "open": () => Promise<void>;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
    }
    interface FlipEmptyState {
        "heading"?: string;
        "illustration"?: string;
    }
    interface FlipFileUploader {
        "accept"?: string;
        "ctaLabel"?: string;
        "description"?: string;
        "disabled"?: boolean;
        "dragDropLabel"?: string;
        "inputId": string;
        "inputName": string;
        "label": string;
        "multiple"?: boolean;
        /**
          * Reset the file input.
         */
        "reset": () => Promise<void>;
        "showDropzone"?: boolean;
        "uploadButtonLabel"?: string;
    }
    interface FlipFileViewer {
        "active"?: boolean;
        "description"?: string;
        /**
          * Download the file.
         */
        "download": () => Promise<void>;
        "errorMessage"?: string;
        "file": string;
        /**
          * Print the file. Applicable to PDFs only.
         */
        "print": () => Promise<void>;
        "type": string;
        "typeUnsupportedMessage"?: string;
        "zoom"?: FlipFileViewerPdfZoom;
    }
    interface FlipFileViewerAudio {
        "file": string;
        "type": string;
    }
    interface FlipFileViewerCsv {
        "errorMessage"?: string;
        "file": string;
    }
    interface FlipFileViewerImage {
        "description"?: string;
        "errorMessage"?: string;
        "file": string;
    }
    interface FlipFileViewerPdf {
        "errorMessage"?: string;
        "file": string;
        /**
          * Print the file.
         */
        "print": () => Promise<void>;
        "zoom"?: FlipFileViewerPdfZoom;
    }
    interface FlipFileViewerText {
        "errorMessage"?: string;
        "file": string;
    }
    interface FlipFileViewerVideo {
        "file": string;
        "type": string;
    }
    interface FlipFormControl {
        "description"?: string;
        "disabled"?: boolean;
        "errorMessage"?: string;
        "invalid"?: boolean;
        "label": string;
    }
    interface FlipFormGroup {
        "orientation": FlipFormGroupOrientation;
    }
    interface FlipHeading {
        "align"?: FlipHeadingAlign;
        "as"?: FlipHeadingTag;
        "headingId"?: string;
        "level"?: FlipHeadingLevel;
        "text": string;
    }
    interface FlipIconAdd {
        "size": FlipIconSize;
    }
    interface FlipIconAddPhoto {
        "size": FlipIconSize;
    }
    interface FlipIconAdminPanelSettings {
        "size": FlipIconSize;
    }
    interface FlipIconArrowBack {
        "size": FlipIconSize;
    }
    interface FlipIconArrowForward {
        "size": FlipIconSize;
    }
    interface FlipIconArrowLeft {
        "size": FlipIconSize;
    }
    interface FlipIconArrowRight {
        "size": FlipIconSize;
    }
    interface FlipIconArrowRightSmall {
        "size": FlipIconSize;
    }
    interface FlipIconAttachment {
        "size": FlipIconSize;
    }
    interface FlipIconCancel {
        "size": FlipIconSize;
    }
    interface FlipIconChatBubble {
        "size": FlipIconSize;
    }
    interface FlipIconCheck {
        "size": FlipIconSize;
    }
    interface FlipIconCheckCircle {
        "size": FlipIconSize;
    }
    interface FlipIconCheckSmall {
        "size": FlipIconSize;
    }
    interface FlipIconCheckStrong {
        "size": FlipIconSize;
    }
    interface FlipIconChevronLeft {
        "size": FlipIconSize;
    }
    interface FlipIconChevronRight {
        "size": FlipIconSize;
    }
    interface FlipIconClose {
        "size": FlipIconSize;
    }
    interface FlipIconCloseSmall {
        "size": FlipIconSize;
    }
    interface FlipIconCloudUpload {
        "size": FlipIconSize;
    }
    interface FlipIconComment {
        "size": FlipIconSize;
    }
    interface FlipIconCopy {
        "size": FlipIconSize;
    }
    interface FlipIconDateRange {
        "size": FlipIconSize;
    }
    interface FlipIconDelete {
        "size": FlipIconSize;
    }
    interface FlipIconDescription {
        "size": FlipIconSize;
    }
    interface FlipIconDownload {
        "size": FlipIconSize;
    }
    interface FlipIconEdit {
        "size": FlipIconSize;
    }
    interface FlipIconEmojiMood {
        "size": FlipIconSize;
    }
    interface FlipIconEmojiSatisfied {
        "size": FlipIconSize;
    }
    interface FlipIconError {
        "size": FlipIconSize;
    }
    interface FlipIconExpandLess {
        "size": FlipIconSize;
    }
    interface FlipIconExpandMore {
        "size": FlipIconSize;
    }
    interface FlipIconFile {
        "size": FlipIconSize;
    }
    interface FlipIconFolderShared {
        "size": FlipIconSize;
    }
    interface FlipIconFullscreen {
        "size": FlipIconSize;
    }
    interface FlipIconFullscreenExit {
        "size": FlipIconSize;
    }
    interface FlipIconGroupAssign {
        "size": FlipIconSize;
    }
    interface FlipIconGroups {
        "size": FlipIconSize;
    }
    interface FlipIconGroupsCustom {
        "size": FlipIconSize;
    }
    interface FlipIconImage {
        "size": FlipIconSize;
    }
    interface FlipIconInfo {
        "size": FlipIconSize;
    }
    interface FlipIconInventory {
        "size": FlipIconSize;
    }
    interface FlipIconLike {
        "size": FlipIconSize;
    }
    interface FlipIconLink {
        "size": FlipIconSize;
    }
    interface FlipIconLock {
        "size": FlipIconSize;
    }
    interface FlipIconLogout {
        "size": FlipIconSize;
    }
    interface FlipIconMail {
        "size": FlipIconSize;
    }
    interface FlipIconManageAccounts {
        "size": FlipIconSize;
    }
    interface FlipIconMention {
        "size": FlipIconSize;
    }
    interface FlipIconMessage {
        "size": FlipIconSize;
    }
    interface FlipIconMoreHorizontal {
        "size": FlipIconSize;
    }
    interface FlipIconMoreVertikal {
        "size": FlipIconSize;
    }
    interface FlipIconNotifications {
        "size": FlipIconSize;
    }
    interface FlipIconNotificationsActive {
        "size": FlipIconSize;
    }
    interface FlipIconNotificationsOff {
        "size": FlipIconSize;
    }
    interface FlipIconOpenInNew {
        "size": FlipIconSize;
    }
    interface FlipIconPeopleAlt {
        "size": FlipIconSize;
    }
    interface FlipIconPerson {
        "size": FlipIconSize;
    }
    interface FlipIconPersonOff {
        "size": FlipIconSize;
    }
    interface FlipIconPhone {
        "size": FlipIconSize;
    }
    interface FlipIconPoll {
        "size": FlipIconSize;
    }
    interface FlipIconPrint {
        "size": FlipIconSize;
    }
    interface FlipIconRecieved {
        "size": FlipIconSize;
    }
    interface FlipIconRemove {
        "size": FlipIconSize;
    }
    interface FlipIconSearch {
        "size": FlipIconSize;
    }
    interface FlipIconSearchStrong {
        "size": FlipIconSize;
    }
    interface FlipIconSend {
        "size": FlipIconSize;
    }
    interface FlipIconSettings {
        "size": FlipIconSize;
    }
    interface FlipIconTimeFilled {
        "size": FlipIconSize;
    }
    interface FlipIconTimeOutlined {
        "size": FlipIconSize;
    }
    interface FlipIconToday {
        "size": FlipIconSize;
    }
    interface FlipIconUserAssign {
        "size": FlipIconSize;
    }
    interface FlipIconVideoCamera {
        "size": FlipIconSize;
    }
    interface FlipIconVisibility {
        "size": FlipIconSize;
    }
    interface FlipIconVisibilityOff {
        "size": FlipIconSize;
    }
    interface FlipIconWarning {
        "size": FlipIconSize;
    }
    interface FlipInlineError {
        "message": string;
        "size"?: FlipInlineErrorSize;
    }
    interface FlipLightbox {
        /**
          * Activate a slide.
          * @param newActiveSlideIndex
         */
        "activateSlide": (newActiveSlideIndex: number) => Promise<void>;
        /**
          * Close the lightbox.
         */
        "close": () => Promise<void>;
        "closeButtonLabel"?: string;
        "downloadButtonLabel"?: string;
        "label": string;
        "nextSlideButtonLabel"?: string;
        /**
          * Open the lightbox.
         */
        "open": () => Promise<void>;
        "previousSlideButtonLabel"?: string;
    }
    interface FlipLink {
        "href": string;
        "label": string;
        "target"?: FlipLinkTarget;
    }
    interface FlipList {
    }
    interface FlipModal {
        /**
          * Close the modal.
         */
        "close": () => Promise<void>;
        "closeButtonLabel"?: string;
        "label": string;
        /**
          * Open the modal.
         */
        "open": () => Promise<void>;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
    }
    interface FlipOptionList {
        "disabled"?: boolean;
        "label"?: string;
        "multiSelect"?: boolean;
        "value"?: string[];
    }
    interface FlipOptionListItem {
        "context"?: FlipOptionListItemContext;
        "disabled"?: boolean;
        "icon"?: string;
        "label": string;
        "selected"?: boolean;
        "value": string;
    }
    interface FlipOptionListSection {
        "label": string;
    }
    interface FlipPagination {
        "accessibleNextButtonLabel"?: string;
        "accessiblePrevButtonLabel"?: string;
        "label": string;
        "nextButtonLabel"?: string;
        "page": number;
        "pageLabel"?: string;
        "pageSelectLabel"?: string;
        "pages": number;
        "prevButtonLabel"?: string;
        "variant"?: FlipPaginationVariant;
    }
    interface FlipPopover {
        /**
          * Close the popover.
          * @returns
         */
        "close": () => Promise<void>;
        "label": string;
        /**
          * Open the popover.
          * @returns
         */
        "open": () => Promise<void>;
        "placement"?: Placement;
        "popoverId": string;
        "trigger": string;
    }
    interface FlipProgressIndicator {
        "label": string;
        "size"?: FlipProgressIndicatorSize;
        "value"?: number;
        "variant"?: FlipProgressIndicatorVariant;
    }
    interface FlipRadio {
        "checked"?: FlipRadioState;
        "description"?: string;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "value": string;
    }
    interface FlipRadioGroup {
        "flipAriaDescribedby"?: string;
        "value"?: string;
    }
    interface FlipResourceList {
        "label"?: string;
    }
    interface FlipResourceListFileItem {
        "description"?: string;
        "errorMessage"?: string;
        "icon"?: string;
        "label": string;
        "loading": boolean;
        "removable"?: boolean;
        "removeButtonLabel"?: string;
    }
    interface FlipResourceListItem {
        "checked"?: boolean;
        "description"?: string;
        "disabled"?: boolean;
        "hideDivider"?: boolean;
        "href"?: string;
        "label": string;
        "media"?: string;
        "menuTriggerId"?: string;
        "menuTriggerLabel"?: string;
        "meta"?: string;
        "selectable"?: boolean;
        "value"?: string;
    }
    interface FlipSearch {
        "autoFocus"?: boolean;
        "clearButtonLabel"?: string;
        "disabled"?: boolean;
        "inputId"?: string;
        "inputName"?: string;
        "label"?: string;
        "placeholder"?: string;
        "value"?: string;
    }
    interface FlipSpinner {
        "label"?: string;
        "size"?: FlipSpinnerSize;
    }
    interface FlipStack {
        "align"?: FlipStackAlign;
        "as"?: string;
        "justify"?: FlipStackJustify;
        "orientation"?: FlipStackOrientation;
        "spacing"?: FlipStackSpacing;
        "wrap"?: boolean;
    }
    interface FlipSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "label"?: string;
        "size"?: FlipSwitchSize;
        "value"?: string;
    }
    interface FlipTab {
        "active"?: boolean;
        "label": string;
        "tabId": string;
    }
    interface FlipTabs {
        /**
          * Activate a tab.
          * @param tabId
         */
        "activateTab": (tabId: string) => Promise<void>;
        "initialTab"?: string;
        "label": string;
    }
    interface FlipTag {
        "intent"?: FlipTagIntent;
        "label": string;
        "removable"?: boolean;
        "removalButtonLabel"?: string;
    }
    interface FlipText {
        "align"?: FlipTextAlign;
        "as"?: string;
        "color"?: FlipTextColor;
        "fontStyle"?: FlipTextFontStyle;
        "size"?: FlipTextSize;
        "weight"?: FlipTextWeight;
    }
    interface FlipTextInput {
        "autoComplete"?: string;
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "clearButtonLabel"?: string;
        "clearable"?: boolean;
        "disabled"?: boolean;
        "flipAriaDescribedby"?: string;
        "invalid"?: boolean;
        "max"?: number;
        "maxLength"?: number;
        "min"?: number;
        "mode"?: FlipTextInputMode;
        "passwordToggleLabel"?: string;
        "prefixLabel"?: string;
        "required"?: boolean;
        "rows"?: number;
        "showCharacterCounter"?: boolean;
        "spellCheck"?: boolean;
        "step"?: number;
        "suffixLabel"?: string;
        "type"?: FlipTextInputType;
        "value"?: string;
    }
    interface FlipThemeProvider {
        "config": FlipThemeProviderConfig;
        /**
          * Returns the active app theme.
          * @returns FlipTheme
         */
        "getActiveTheme": () => Promise<FlipTheme>;
        /**
          * Returns the user's preferred theme stored in local storage.
          * @returns FlipTheme
         */
        "getPreferredTheme": () => Promise<FlipTheme>;
        /**
          * Resets the user's preferred theme, using the OS theme instead.
         */
        "resetPreferredTheme": () => Promise<void>;
        /**
          * Sets the user's preferred theme and stores it in local storage. Overrides the OS theme.
         */
        "setPreferredTheme": (theme: FlipTheme) => Promise<void>;
    }
    interface FlipThumbnail {
        "alt": string;
        "format"?: FlipThumbnailFormat;
        "size": FlipThumbnailSize;
        "src": string;
    }
    interface FlipToast {
        "accessibleDismissLabel"?: string;
        "content": string;
        "dismissLabel"?: string;
        "duration"?: number;
        "icon"?: string;
        "intent"?: FlipToastIntent;
        "toastId": string;
    }
    interface FlipToastProvider {
        /**
          * Clear all toasts
          * @param newToast
          * @returns
         */
        "clearAll": () => Promise<void>;
        /**
          * Dismiss a toast
          * @param toastId
          * @returns
         */
        "dismiss": (toastId: string) => Promise<void>;
        /**
          * Optional global duration for all toasts. Overrides any durations set via the `toast` method. Set to 0 to disable automatic closing of toasts.
         */
        "globalDuration"?: number;
        /**
          * Create a new toast
          * @param newToast
          * @returns
         */
        "toast": (newToast: FlipToastConfig) => Promise<FlipToastMessage>;
    }
    interface FlipTooltip {
        "content": string;
        "delay"?: number;
        "position"?: FlipTooltipPosition;
    }
    interface FlipVideoThumbnail {
        "duration"?: string;
        "durationLabel"?: string;
        "label": string;
        "src": string;
    }
    interface FlipVisuallyHidden {
    }
}
export interface FlipBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipBannerElement;
}
export interface FlipCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipCheckboxElement;
}
export interface FlipDateInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipDateInputElement;
}
export interface FlipDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipDatePickerElement;
}
export interface FlipDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipDialogElement;
}
export interface FlipFileUploaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipFileUploaderElement;
}
export interface FlipModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipModalElement;
}
export interface FlipOptionListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipOptionListElement;
}
export interface FlipPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipPaginationElement;
}
export interface FlipRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipRadioElement;
}
export interface FlipRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipRadioGroupElement;
}
export interface FlipResourceListFileItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipResourceListFileItemElement;
}
export interface FlipResourceListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipResourceListItemElement;
}
export interface FlipSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipSearchElement;
}
export interface FlipSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipSwitchElement;
}
export interface FlipTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipTabsElement;
}
export interface FlipTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipTagElement;
}
export interface FlipTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipTextInputElement;
}
export interface FlipToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFlipToastElement;
}
declare global {
    interface HTMLFlipActionListElement extends Components.FlipActionList, HTMLStencilElement {
    }
    var HTMLFlipActionListElement: {
        prototype: HTMLFlipActionListElement;
        new (): HTMLFlipActionListElement;
    };
    interface HTMLFlipActionListItemElement extends Components.FlipActionListItem, HTMLStencilElement {
    }
    var HTMLFlipActionListItemElement: {
        prototype: HTMLFlipActionListItemElement;
        new (): HTMLFlipActionListItemElement;
    };
    interface HTMLFlipActionListSectionElement extends Components.FlipActionListSection, HTMLStencilElement {
    }
    var HTMLFlipActionListSectionElement: {
        prototype: HTMLFlipActionListSectionElement;
        new (): HTMLFlipActionListSectionElement;
    };
    interface HTMLFlipAvatarElement extends Components.FlipAvatar, HTMLStencilElement {
    }
    var HTMLFlipAvatarElement: {
        prototype: HTMLFlipAvatarElement;
        new (): HTMLFlipAvatarElement;
    };
    interface HTMLFlipAvatarGroupElement extends Components.FlipAvatarGroup, HTMLStencilElement {
    }
    var HTMLFlipAvatarGroupElement: {
        prototype: HTMLFlipAvatarGroupElement;
        new (): HTMLFlipAvatarGroupElement;
    };
    interface HTMLFlipBadgeElement extends Components.FlipBadge, HTMLStencilElement {
    }
    var HTMLFlipBadgeElement: {
        prototype: HTMLFlipBadgeElement;
        new (): HTMLFlipBadgeElement;
    };
    interface HTMLFlipBannerElement extends Components.FlipBanner, HTMLStencilElement {
    }
    var HTMLFlipBannerElement: {
        prototype: HTMLFlipBannerElement;
        new (): HTMLFlipBannerElement;
    };
    interface HTMLFlipButtonElement extends Components.FlipButton, HTMLStencilElement {
    }
    var HTMLFlipButtonElement: {
        prototype: HTMLFlipButtonElement;
        new (): HTMLFlipButtonElement;
    };
    interface HTMLFlipButtonGroupElement extends Components.FlipButtonGroup, HTMLStencilElement {
    }
    var HTMLFlipButtonGroupElement: {
        prototype: HTMLFlipButtonGroupElement;
        new (): HTMLFlipButtonGroupElement;
    };
    interface HTMLFlipCheckboxElement extends Components.FlipCheckbox, HTMLStencilElement {
    }
    var HTMLFlipCheckboxElement: {
        prototype: HTMLFlipCheckboxElement;
        new (): HTMLFlipCheckboxElement;
    };
    interface HTMLFlipChipElement extends Components.FlipChip, HTMLStencilElement {
    }
    var HTMLFlipChipElement: {
        prototype: HTMLFlipChipElement;
        new (): HTMLFlipChipElement;
    };
    interface HTMLFlipDateInputElement extends Components.FlipDateInput, HTMLStencilElement {
    }
    var HTMLFlipDateInputElement: {
        prototype: HTMLFlipDateInputElement;
        new (): HTMLFlipDateInputElement;
    };
    interface HTMLFlipDatePickerElement extends Components.FlipDatePicker, HTMLStencilElement {
    }
    var HTMLFlipDatePickerElement: {
        prototype: HTMLFlipDatePickerElement;
        new (): HTMLFlipDatePickerElement;
    };
    interface HTMLFlipDescriptionListElement extends Components.FlipDescriptionList, HTMLStencilElement {
    }
    var HTMLFlipDescriptionListElement: {
        prototype: HTMLFlipDescriptionListElement;
        new (): HTMLFlipDescriptionListElement;
    };
    interface HTMLFlipDescriptionListItemElement extends Components.FlipDescriptionListItem, HTMLStencilElement {
    }
    var HTMLFlipDescriptionListItemElement: {
        prototype: HTMLFlipDescriptionListItemElement;
        new (): HTMLFlipDescriptionListItemElement;
    };
    interface HTMLFlipDialogElement extends Components.FlipDialog, HTMLStencilElement {
    }
    var HTMLFlipDialogElement: {
        prototype: HTMLFlipDialogElement;
        new (): HTMLFlipDialogElement;
    };
    interface HTMLFlipEmptyStateElement extends Components.FlipEmptyState, HTMLStencilElement {
    }
    var HTMLFlipEmptyStateElement: {
        prototype: HTMLFlipEmptyStateElement;
        new (): HTMLFlipEmptyStateElement;
    };
    interface HTMLFlipFileUploaderElement extends Components.FlipFileUploader, HTMLStencilElement {
    }
    var HTMLFlipFileUploaderElement: {
        prototype: HTMLFlipFileUploaderElement;
        new (): HTMLFlipFileUploaderElement;
    };
    interface HTMLFlipFileViewerElement extends Components.FlipFileViewer, HTMLStencilElement {
    }
    var HTMLFlipFileViewerElement: {
        prototype: HTMLFlipFileViewerElement;
        new (): HTMLFlipFileViewerElement;
    };
    interface HTMLFlipFileViewerAudioElement extends Components.FlipFileViewerAudio, HTMLStencilElement {
    }
    var HTMLFlipFileViewerAudioElement: {
        prototype: HTMLFlipFileViewerAudioElement;
        new (): HTMLFlipFileViewerAudioElement;
    };
    interface HTMLFlipFileViewerCsvElement extends Components.FlipFileViewerCsv, HTMLStencilElement {
    }
    var HTMLFlipFileViewerCsvElement: {
        prototype: HTMLFlipFileViewerCsvElement;
        new (): HTMLFlipFileViewerCsvElement;
    };
    interface HTMLFlipFileViewerImageElement extends Components.FlipFileViewerImage, HTMLStencilElement {
    }
    var HTMLFlipFileViewerImageElement: {
        prototype: HTMLFlipFileViewerImageElement;
        new (): HTMLFlipFileViewerImageElement;
    };
    interface HTMLFlipFileViewerPdfElement extends Components.FlipFileViewerPdf, HTMLStencilElement {
    }
    var HTMLFlipFileViewerPdfElement: {
        prototype: HTMLFlipFileViewerPdfElement;
        new (): HTMLFlipFileViewerPdfElement;
    };
    interface HTMLFlipFileViewerTextElement extends Components.FlipFileViewerText, HTMLStencilElement {
    }
    var HTMLFlipFileViewerTextElement: {
        prototype: HTMLFlipFileViewerTextElement;
        new (): HTMLFlipFileViewerTextElement;
    };
    interface HTMLFlipFileViewerVideoElement extends Components.FlipFileViewerVideo, HTMLStencilElement {
    }
    var HTMLFlipFileViewerVideoElement: {
        prototype: HTMLFlipFileViewerVideoElement;
        new (): HTMLFlipFileViewerVideoElement;
    };
    interface HTMLFlipFormControlElement extends Components.FlipFormControl, HTMLStencilElement {
    }
    var HTMLFlipFormControlElement: {
        prototype: HTMLFlipFormControlElement;
        new (): HTMLFlipFormControlElement;
    };
    interface HTMLFlipFormGroupElement extends Components.FlipFormGroup, HTMLStencilElement {
    }
    var HTMLFlipFormGroupElement: {
        prototype: HTMLFlipFormGroupElement;
        new (): HTMLFlipFormGroupElement;
    };
    interface HTMLFlipHeadingElement extends Components.FlipHeading, HTMLStencilElement {
    }
    var HTMLFlipHeadingElement: {
        prototype: HTMLFlipHeadingElement;
        new (): HTMLFlipHeadingElement;
    };
    interface HTMLFlipIconAddElement extends Components.FlipIconAdd, HTMLStencilElement {
    }
    var HTMLFlipIconAddElement: {
        prototype: HTMLFlipIconAddElement;
        new (): HTMLFlipIconAddElement;
    };
    interface HTMLFlipIconAddPhotoElement extends Components.FlipIconAddPhoto, HTMLStencilElement {
    }
    var HTMLFlipIconAddPhotoElement: {
        prototype: HTMLFlipIconAddPhotoElement;
        new (): HTMLFlipIconAddPhotoElement;
    };
    interface HTMLFlipIconAdminPanelSettingsElement extends Components.FlipIconAdminPanelSettings, HTMLStencilElement {
    }
    var HTMLFlipIconAdminPanelSettingsElement: {
        prototype: HTMLFlipIconAdminPanelSettingsElement;
        new (): HTMLFlipIconAdminPanelSettingsElement;
    };
    interface HTMLFlipIconArrowBackElement extends Components.FlipIconArrowBack, HTMLStencilElement {
    }
    var HTMLFlipIconArrowBackElement: {
        prototype: HTMLFlipIconArrowBackElement;
        new (): HTMLFlipIconArrowBackElement;
    };
    interface HTMLFlipIconArrowForwardElement extends Components.FlipIconArrowForward, HTMLStencilElement {
    }
    var HTMLFlipIconArrowForwardElement: {
        prototype: HTMLFlipIconArrowForwardElement;
        new (): HTMLFlipIconArrowForwardElement;
    };
    interface HTMLFlipIconArrowLeftElement extends Components.FlipIconArrowLeft, HTMLStencilElement {
    }
    var HTMLFlipIconArrowLeftElement: {
        prototype: HTMLFlipIconArrowLeftElement;
        new (): HTMLFlipIconArrowLeftElement;
    };
    interface HTMLFlipIconArrowRightElement extends Components.FlipIconArrowRight, HTMLStencilElement {
    }
    var HTMLFlipIconArrowRightElement: {
        prototype: HTMLFlipIconArrowRightElement;
        new (): HTMLFlipIconArrowRightElement;
    };
    interface HTMLFlipIconArrowRightSmallElement extends Components.FlipIconArrowRightSmall, HTMLStencilElement {
    }
    var HTMLFlipIconArrowRightSmallElement: {
        prototype: HTMLFlipIconArrowRightSmallElement;
        new (): HTMLFlipIconArrowRightSmallElement;
    };
    interface HTMLFlipIconAttachmentElement extends Components.FlipIconAttachment, HTMLStencilElement {
    }
    var HTMLFlipIconAttachmentElement: {
        prototype: HTMLFlipIconAttachmentElement;
        new (): HTMLFlipIconAttachmentElement;
    };
    interface HTMLFlipIconCancelElement extends Components.FlipIconCancel, HTMLStencilElement {
    }
    var HTMLFlipIconCancelElement: {
        prototype: HTMLFlipIconCancelElement;
        new (): HTMLFlipIconCancelElement;
    };
    interface HTMLFlipIconChatBubbleElement extends Components.FlipIconChatBubble, HTMLStencilElement {
    }
    var HTMLFlipIconChatBubbleElement: {
        prototype: HTMLFlipIconChatBubbleElement;
        new (): HTMLFlipIconChatBubbleElement;
    };
    interface HTMLFlipIconCheckElement extends Components.FlipIconCheck, HTMLStencilElement {
    }
    var HTMLFlipIconCheckElement: {
        prototype: HTMLFlipIconCheckElement;
        new (): HTMLFlipIconCheckElement;
    };
    interface HTMLFlipIconCheckCircleElement extends Components.FlipIconCheckCircle, HTMLStencilElement {
    }
    var HTMLFlipIconCheckCircleElement: {
        prototype: HTMLFlipIconCheckCircleElement;
        new (): HTMLFlipIconCheckCircleElement;
    };
    interface HTMLFlipIconCheckSmallElement extends Components.FlipIconCheckSmall, HTMLStencilElement {
    }
    var HTMLFlipIconCheckSmallElement: {
        prototype: HTMLFlipIconCheckSmallElement;
        new (): HTMLFlipIconCheckSmallElement;
    };
    interface HTMLFlipIconCheckStrongElement extends Components.FlipIconCheckStrong, HTMLStencilElement {
    }
    var HTMLFlipIconCheckStrongElement: {
        prototype: HTMLFlipIconCheckStrongElement;
        new (): HTMLFlipIconCheckStrongElement;
    };
    interface HTMLFlipIconChevronLeftElement extends Components.FlipIconChevronLeft, HTMLStencilElement {
    }
    var HTMLFlipIconChevronLeftElement: {
        prototype: HTMLFlipIconChevronLeftElement;
        new (): HTMLFlipIconChevronLeftElement;
    };
    interface HTMLFlipIconChevronRightElement extends Components.FlipIconChevronRight, HTMLStencilElement {
    }
    var HTMLFlipIconChevronRightElement: {
        prototype: HTMLFlipIconChevronRightElement;
        new (): HTMLFlipIconChevronRightElement;
    };
    interface HTMLFlipIconCloseElement extends Components.FlipIconClose, HTMLStencilElement {
    }
    var HTMLFlipIconCloseElement: {
        prototype: HTMLFlipIconCloseElement;
        new (): HTMLFlipIconCloseElement;
    };
    interface HTMLFlipIconCloseSmallElement extends Components.FlipIconCloseSmall, HTMLStencilElement {
    }
    var HTMLFlipIconCloseSmallElement: {
        prototype: HTMLFlipIconCloseSmallElement;
        new (): HTMLFlipIconCloseSmallElement;
    };
    interface HTMLFlipIconCloudUploadElement extends Components.FlipIconCloudUpload, HTMLStencilElement {
    }
    var HTMLFlipIconCloudUploadElement: {
        prototype: HTMLFlipIconCloudUploadElement;
        new (): HTMLFlipIconCloudUploadElement;
    };
    interface HTMLFlipIconCommentElement extends Components.FlipIconComment, HTMLStencilElement {
    }
    var HTMLFlipIconCommentElement: {
        prototype: HTMLFlipIconCommentElement;
        new (): HTMLFlipIconCommentElement;
    };
    interface HTMLFlipIconCopyElement extends Components.FlipIconCopy, HTMLStencilElement {
    }
    var HTMLFlipIconCopyElement: {
        prototype: HTMLFlipIconCopyElement;
        new (): HTMLFlipIconCopyElement;
    };
    interface HTMLFlipIconDateRangeElement extends Components.FlipIconDateRange, HTMLStencilElement {
    }
    var HTMLFlipIconDateRangeElement: {
        prototype: HTMLFlipIconDateRangeElement;
        new (): HTMLFlipIconDateRangeElement;
    };
    interface HTMLFlipIconDeleteElement extends Components.FlipIconDelete, HTMLStencilElement {
    }
    var HTMLFlipIconDeleteElement: {
        prototype: HTMLFlipIconDeleteElement;
        new (): HTMLFlipIconDeleteElement;
    };
    interface HTMLFlipIconDescriptionElement extends Components.FlipIconDescription, HTMLStencilElement {
    }
    var HTMLFlipIconDescriptionElement: {
        prototype: HTMLFlipIconDescriptionElement;
        new (): HTMLFlipIconDescriptionElement;
    };
    interface HTMLFlipIconDownloadElement extends Components.FlipIconDownload, HTMLStencilElement {
    }
    var HTMLFlipIconDownloadElement: {
        prototype: HTMLFlipIconDownloadElement;
        new (): HTMLFlipIconDownloadElement;
    };
    interface HTMLFlipIconEditElement extends Components.FlipIconEdit, HTMLStencilElement {
    }
    var HTMLFlipIconEditElement: {
        prototype: HTMLFlipIconEditElement;
        new (): HTMLFlipIconEditElement;
    };
    interface HTMLFlipIconEmojiMoodElement extends Components.FlipIconEmojiMood, HTMLStencilElement {
    }
    var HTMLFlipIconEmojiMoodElement: {
        prototype: HTMLFlipIconEmojiMoodElement;
        new (): HTMLFlipIconEmojiMoodElement;
    };
    interface HTMLFlipIconEmojiSatisfiedElement extends Components.FlipIconEmojiSatisfied, HTMLStencilElement {
    }
    var HTMLFlipIconEmojiSatisfiedElement: {
        prototype: HTMLFlipIconEmojiSatisfiedElement;
        new (): HTMLFlipIconEmojiSatisfiedElement;
    };
    interface HTMLFlipIconErrorElement extends Components.FlipIconError, HTMLStencilElement {
    }
    var HTMLFlipIconErrorElement: {
        prototype: HTMLFlipIconErrorElement;
        new (): HTMLFlipIconErrorElement;
    };
    interface HTMLFlipIconExpandLessElement extends Components.FlipIconExpandLess, HTMLStencilElement {
    }
    var HTMLFlipIconExpandLessElement: {
        prototype: HTMLFlipIconExpandLessElement;
        new (): HTMLFlipIconExpandLessElement;
    };
    interface HTMLFlipIconExpandMoreElement extends Components.FlipIconExpandMore, HTMLStencilElement {
    }
    var HTMLFlipIconExpandMoreElement: {
        prototype: HTMLFlipIconExpandMoreElement;
        new (): HTMLFlipIconExpandMoreElement;
    };
    interface HTMLFlipIconFileElement extends Components.FlipIconFile, HTMLStencilElement {
    }
    var HTMLFlipIconFileElement: {
        prototype: HTMLFlipIconFileElement;
        new (): HTMLFlipIconFileElement;
    };
    interface HTMLFlipIconFolderSharedElement extends Components.FlipIconFolderShared, HTMLStencilElement {
    }
    var HTMLFlipIconFolderSharedElement: {
        prototype: HTMLFlipIconFolderSharedElement;
        new (): HTMLFlipIconFolderSharedElement;
    };
    interface HTMLFlipIconFullscreenElement extends Components.FlipIconFullscreen, HTMLStencilElement {
    }
    var HTMLFlipIconFullscreenElement: {
        prototype: HTMLFlipIconFullscreenElement;
        new (): HTMLFlipIconFullscreenElement;
    };
    interface HTMLFlipIconFullscreenExitElement extends Components.FlipIconFullscreenExit, HTMLStencilElement {
    }
    var HTMLFlipIconFullscreenExitElement: {
        prototype: HTMLFlipIconFullscreenExitElement;
        new (): HTMLFlipIconFullscreenExitElement;
    };
    interface HTMLFlipIconGroupAssignElement extends Components.FlipIconGroupAssign, HTMLStencilElement {
    }
    var HTMLFlipIconGroupAssignElement: {
        prototype: HTMLFlipIconGroupAssignElement;
        new (): HTMLFlipIconGroupAssignElement;
    };
    interface HTMLFlipIconGroupsElement extends Components.FlipIconGroups, HTMLStencilElement {
    }
    var HTMLFlipIconGroupsElement: {
        prototype: HTMLFlipIconGroupsElement;
        new (): HTMLFlipIconGroupsElement;
    };
    interface HTMLFlipIconGroupsCustomElement extends Components.FlipIconGroupsCustom, HTMLStencilElement {
    }
    var HTMLFlipIconGroupsCustomElement: {
        prototype: HTMLFlipIconGroupsCustomElement;
        new (): HTMLFlipIconGroupsCustomElement;
    };
    interface HTMLFlipIconImageElement extends Components.FlipIconImage, HTMLStencilElement {
    }
    var HTMLFlipIconImageElement: {
        prototype: HTMLFlipIconImageElement;
        new (): HTMLFlipIconImageElement;
    };
    interface HTMLFlipIconInfoElement extends Components.FlipIconInfo, HTMLStencilElement {
    }
    var HTMLFlipIconInfoElement: {
        prototype: HTMLFlipIconInfoElement;
        new (): HTMLFlipIconInfoElement;
    };
    interface HTMLFlipIconInventoryElement extends Components.FlipIconInventory, HTMLStencilElement {
    }
    var HTMLFlipIconInventoryElement: {
        prototype: HTMLFlipIconInventoryElement;
        new (): HTMLFlipIconInventoryElement;
    };
    interface HTMLFlipIconLikeElement extends Components.FlipIconLike, HTMLStencilElement {
    }
    var HTMLFlipIconLikeElement: {
        prototype: HTMLFlipIconLikeElement;
        new (): HTMLFlipIconLikeElement;
    };
    interface HTMLFlipIconLinkElement extends Components.FlipIconLink, HTMLStencilElement {
    }
    var HTMLFlipIconLinkElement: {
        prototype: HTMLFlipIconLinkElement;
        new (): HTMLFlipIconLinkElement;
    };
    interface HTMLFlipIconLockElement extends Components.FlipIconLock, HTMLStencilElement {
    }
    var HTMLFlipIconLockElement: {
        prototype: HTMLFlipIconLockElement;
        new (): HTMLFlipIconLockElement;
    };
    interface HTMLFlipIconLogoutElement extends Components.FlipIconLogout, HTMLStencilElement {
    }
    var HTMLFlipIconLogoutElement: {
        prototype: HTMLFlipIconLogoutElement;
        new (): HTMLFlipIconLogoutElement;
    };
    interface HTMLFlipIconMailElement extends Components.FlipIconMail, HTMLStencilElement {
    }
    var HTMLFlipIconMailElement: {
        prototype: HTMLFlipIconMailElement;
        new (): HTMLFlipIconMailElement;
    };
    interface HTMLFlipIconManageAccountsElement extends Components.FlipIconManageAccounts, HTMLStencilElement {
    }
    var HTMLFlipIconManageAccountsElement: {
        prototype: HTMLFlipIconManageAccountsElement;
        new (): HTMLFlipIconManageAccountsElement;
    };
    interface HTMLFlipIconMentionElement extends Components.FlipIconMention, HTMLStencilElement {
    }
    var HTMLFlipIconMentionElement: {
        prototype: HTMLFlipIconMentionElement;
        new (): HTMLFlipIconMentionElement;
    };
    interface HTMLFlipIconMessageElement extends Components.FlipIconMessage, HTMLStencilElement {
    }
    var HTMLFlipIconMessageElement: {
        prototype: HTMLFlipIconMessageElement;
        new (): HTMLFlipIconMessageElement;
    };
    interface HTMLFlipIconMoreHorizontalElement extends Components.FlipIconMoreHorizontal, HTMLStencilElement {
    }
    var HTMLFlipIconMoreHorizontalElement: {
        prototype: HTMLFlipIconMoreHorizontalElement;
        new (): HTMLFlipIconMoreHorizontalElement;
    };
    interface HTMLFlipIconMoreVertikalElement extends Components.FlipIconMoreVertikal, HTMLStencilElement {
    }
    var HTMLFlipIconMoreVertikalElement: {
        prototype: HTMLFlipIconMoreVertikalElement;
        new (): HTMLFlipIconMoreVertikalElement;
    };
    interface HTMLFlipIconNotificationsElement extends Components.FlipIconNotifications, HTMLStencilElement {
    }
    var HTMLFlipIconNotificationsElement: {
        prototype: HTMLFlipIconNotificationsElement;
        new (): HTMLFlipIconNotificationsElement;
    };
    interface HTMLFlipIconNotificationsActiveElement extends Components.FlipIconNotificationsActive, HTMLStencilElement {
    }
    var HTMLFlipIconNotificationsActiveElement: {
        prototype: HTMLFlipIconNotificationsActiveElement;
        new (): HTMLFlipIconNotificationsActiveElement;
    };
    interface HTMLFlipIconNotificationsOffElement extends Components.FlipIconNotificationsOff, HTMLStencilElement {
    }
    var HTMLFlipIconNotificationsOffElement: {
        prototype: HTMLFlipIconNotificationsOffElement;
        new (): HTMLFlipIconNotificationsOffElement;
    };
    interface HTMLFlipIconOpenInNewElement extends Components.FlipIconOpenInNew, HTMLStencilElement {
    }
    var HTMLFlipIconOpenInNewElement: {
        prototype: HTMLFlipIconOpenInNewElement;
        new (): HTMLFlipIconOpenInNewElement;
    };
    interface HTMLFlipIconPeopleAltElement extends Components.FlipIconPeopleAlt, HTMLStencilElement {
    }
    var HTMLFlipIconPeopleAltElement: {
        prototype: HTMLFlipIconPeopleAltElement;
        new (): HTMLFlipIconPeopleAltElement;
    };
    interface HTMLFlipIconPersonElement extends Components.FlipIconPerson, HTMLStencilElement {
    }
    var HTMLFlipIconPersonElement: {
        prototype: HTMLFlipIconPersonElement;
        new (): HTMLFlipIconPersonElement;
    };
    interface HTMLFlipIconPersonOffElement extends Components.FlipIconPersonOff, HTMLStencilElement {
    }
    var HTMLFlipIconPersonOffElement: {
        prototype: HTMLFlipIconPersonOffElement;
        new (): HTMLFlipIconPersonOffElement;
    };
    interface HTMLFlipIconPhoneElement extends Components.FlipIconPhone, HTMLStencilElement {
    }
    var HTMLFlipIconPhoneElement: {
        prototype: HTMLFlipIconPhoneElement;
        new (): HTMLFlipIconPhoneElement;
    };
    interface HTMLFlipIconPollElement extends Components.FlipIconPoll, HTMLStencilElement {
    }
    var HTMLFlipIconPollElement: {
        prototype: HTMLFlipIconPollElement;
        new (): HTMLFlipIconPollElement;
    };
    interface HTMLFlipIconPrintElement extends Components.FlipIconPrint, HTMLStencilElement {
    }
    var HTMLFlipIconPrintElement: {
        prototype: HTMLFlipIconPrintElement;
        new (): HTMLFlipIconPrintElement;
    };
    interface HTMLFlipIconRecievedElement extends Components.FlipIconRecieved, HTMLStencilElement {
    }
    var HTMLFlipIconRecievedElement: {
        prototype: HTMLFlipIconRecievedElement;
        new (): HTMLFlipIconRecievedElement;
    };
    interface HTMLFlipIconRemoveElement extends Components.FlipIconRemove, HTMLStencilElement {
    }
    var HTMLFlipIconRemoveElement: {
        prototype: HTMLFlipIconRemoveElement;
        new (): HTMLFlipIconRemoveElement;
    };
    interface HTMLFlipIconSearchElement extends Components.FlipIconSearch, HTMLStencilElement {
    }
    var HTMLFlipIconSearchElement: {
        prototype: HTMLFlipIconSearchElement;
        new (): HTMLFlipIconSearchElement;
    };
    interface HTMLFlipIconSearchStrongElement extends Components.FlipIconSearchStrong, HTMLStencilElement {
    }
    var HTMLFlipIconSearchStrongElement: {
        prototype: HTMLFlipIconSearchStrongElement;
        new (): HTMLFlipIconSearchStrongElement;
    };
    interface HTMLFlipIconSendElement extends Components.FlipIconSend, HTMLStencilElement {
    }
    var HTMLFlipIconSendElement: {
        prototype: HTMLFlipIconSendElement;
        new (): HTMLFlipIconSendElement;
    };
    interface HTMLFlipIconSettingsElement extends Components.FlipIconSettings, HTMLStencilElement {
    }
    var HTMLFlipIconSettingsElement: {
        prototype: HTMLFlipIconSettingsElement;
        new (): HTMLFlipIconSettingsElement;
    };
    interface HTMLFlipIconTimeFilledElement extends Components.FlipIconTimeFilled, HTMLStencilElement {
    }
    var HTMLFlipIconTimeFilledElement: {
        prototype: HTMLFlipIconTimeFilledElement;
        new (): HTMLFlipIconTimeFilledElement;
    };
    interface HTMLFlipIconTimeOutlinedElement extends Components.FlipIconTimeOutlined, HTMLStencilElement {
    }
    var HTMLFlipIconTimeOutlinedElement: {
        prototype: HTMLFlipIconTimeOutlinedElement;
        new (): HTMLFlipIconTimeOutlinedElement;
    };
    interface HTMLFlipIconTodayElement extends Components.FlipIconToday, HTMLStencilElement {
    }
    var HTMLFlipIconTodayElement: {
        prototype: HTMLFlipIconTodayElement;
        new (): HTMLFlipIconTodayElement;
    };
    interface HTMLFlipIconUserAssignElement extends Components.FlipIconUserAssign, HTMLStencilElement {
    }
    var HTMLFlipIconUserAssignElement: {
        prototype: HTMLFlipIconUserAssignElement;
        new (): HTMLFlipIconUserAssignElement;
    };
    interface HTMLFlipIconVideoCameraElement extends Components.FlipIconVideoCamera, HTMLStencilElement {
    }
    var HTMLFlipIconVideoCameraElement: {
        prototype: HTMLFlipIconVideoCameraElement;
        new (): HTMLFlipIconVideoCameraElement;
    };
    interface HTMLFlipIconVisibilityElement extends Components.FlipIconVisibility, HTMLStencilElement {
    }
    var HTMLFlipIconVisibilityElement: {
        prototype: HTMLFlipIconVisibilityElement;
        new (): HTMLFlipIconVisibilityElement;
    };
    interface HTMLFlipIconVisibilityOffElement extends Components.FlipIconVisibilityOff, HTMLStencilElement {
    }
    var HTMLFlipIconVisibilityOffElement: {
        prototype: HTMLFlipIconVisibilityOffElement;
        new (): HTMLFlipIconVisibilityOffElement;
    };
    interface HTMLFlipIconWarningElement extends Components.FlipIconWarning, HTMLStencilElement {
    }
    var HTMLFlipIconWarningElement: {
        prototype: HTMLFlipIconWarningElement;
        new (): HTMLFlipIconWarningElement;
    };
    interface HTMLFlipInlineErrorElement extends Components.FlipInlineError, HTMLStencilElement {
    }
    var HTMLFlipInlineErrorElement: {
        prototype: HTMLFlipInlineErrorElement;
        new (): HTMLFlipInlineErrorElement;
    };
    interface HTMLFlipLightboxElement extends Components.FlipLightbox, HTMLStencilElement {
    }
    var HTMLFlipLightboxElement: {
        prototype: HTMLFlipLightboxElement;
        new (): HTMLFlipLightboxElement;
    };
    interface HTMLFlipLinkElement extends Components.FlipLink, HTMLStencilElement {
    }
    var HTMLFlipLinkElement: {
        prototype: HTMLFlipLinkElement;
        new (): HTMLFlipLinkElement;
    };
    interface HTMLFlipListElement extends Components.FlipList, HTMLStencilElement {
    }
    var HTMLFlipListElement: {
        prototype: HTMLFlipListElement;
        new (): HTMLFlipListElement;
    };
    interface HTMLFlipModalElement extends Components.FlipModal, HTMLStencilElement {
    }
    var HTMLFlipModalElement: {
        prototype: HTMLFlipModalElement;
        new (): HTMLFlipModalElement;
    };
    interface HTMLFlipOptionListElement extends Components.FlipOptionList, HTMLStencilElement {
    }
    var HTMLFlipOptionListElement: {
        prototype: HTMLFlipOptionListElement;
        new (): HTMLFlipOptionListElement;
    };
    interface HTMLFlipOptionListItemElement extends Components.FlipOptionListItem, HTMLStencilElement {
    }
    var HTMLFlipOptionListItemElement: {
        prototype: HTMLFlipOptionListItemElement;
        new (): HTMLFlipOptionListItemElement;
    };
    interface HTMLFlipOptionListSectionElement extends Components.FlipOptionListSection, HTMLStencilElement {
    }
    var HTMLFlipOptionListSectionElement: {
        prototype: HTMLFlipOptionListSectionElement;
        new (): HTMLFlipOptionListSectionElement;
    };
    interface HTMLFlipPaginationElement extends Components.FlipPagination, HTMLStencilElement {
    }
    var HTMLFlipPaginationElement: {
        prototype: HTMLFlipPaginationElement;
        new (): HTMLFlipPaginationElement;
    };
    interface HTMLFlipPopoverElement extends Components.FlipPopover, HTMLStencilElement {
    }
    var HTMLFlipPopoverElement: {
        prototype: HTMLFlipPopoverElement;
        new (): HTMLFlipPopoverElement;
    };
    interface HTMLFlipProgressIndicatorElement extends Components.FlipProgressIndicator, HTMLStencilElement {
    }
    var HTMLFlipProgressIndicatorElement: {
        prototype: HTMLFlipProgressIndicatorElement;
        new (): HTMLFlipProgressIndicatorElement;
    };
    interface HTMLFlipRadioElement extends Components.FlipRadio, HTMLStencilElement {
    }
    var HTMLFlipRadioElement: {
        prototype: HTMLFlipRadioElement;
        new (): HTMLFlipRadioElement;
    };
    interface HTMLFlipRadioGroupElement extends Components.FlipRadioGroup, HTMLStencilElement {
    }
    var HTMLFlipRadioGroupElement: {
        prototype: HTMLFlipRadioGroupElement;
        new (): HTMLFlipRadioGroupElement;
    };
    interface HTMLFlipResourceListElement extends Components.FlipResourceList, HTMLStencilElement {
    }
    var HTMLFlipResourceListElement: {
        prototype: HTMLFlipResourceListElement;
        new (): HTMLFlipResourceListElement;
    };
    interface HTMLFlipResourceListFileItemElement extends Components.FlipResourceListFileItem, HTMLStencilElement {
    }
    var HTMLFlipResourceListFileItemElement: {
        prototype: HTMLFlipResourceListFileItemElement;
        new (): HTMLFlipResourceListFileItemElement;
    };
    interface HTMLFlipResourceListItemElement extends Components.FlipResourceListItem, HTMLStencilElement {
    }
    var HTMLFlipResourceListItemElement: {
        prototype: HTMLFlipResourceListItemElement;
        new (): HTMLFlipResourceListItemElement;
    };
    interface HTMLFlipSearchElement extends Components.FlipSearch, HTMLStencilElement {
    }
    var HTMLFlipSearchElement: {
        prototype: HTMLFlipSearchElement;
        new (): HTMLFlipSearchElement;
    };
    interface HTMLFlipSpinnerElement extends Components.FlipSpinner, HTMLStencilElement {
    }
    var HTMLFlipSpinnerElement: {
        prototype: HTMLFlipSpinnerElement;
        new (): HTMLFlipSpinnerElement;
    };
    interface HTMLFlipStackElement extends Components.FlipStack, HTMLStencilElement {
    }
    var HTMLFlipStackElement: {
        prototype: HTMLFlipStackElement;
        new (): HTMLFlipStackElement;
    };
    interface HTMLFlipSwitchElement extends Components.FlipSwitch, HTMLStencilElement {
    }
    var HTMLFlipSwitchElement: {
        prototype: HTMLFlipSwitchElement;
        new (): HTMLFlipSwitchElement;
    };
    interface HTMLFlipTabElement extends Components.FlipTab, HTMLStencilElement {
    }
    var HTMLFlipTabElement: {
        prototype: HTMLFlipTabElement;
        new (): HTMLFlipTabElement;
    };
    interface HTMLFlipTabsElement extends Components.FlipTabs, HTMLStencilElement {
    }
    var HTMLFlipTabsElement: {
        prototype: HTMLFlipTabsElement;
        new (): HTMLFlipTabsElement;
    };
    interface HTMLFlipTagElement extends Components.FlipTag, HTMLStencilElement {
    }
    var HTMLFlipTagElement: {
        prototype: HTMLFlipTagElement;
        new (): HTMLFlipTagElement;
    };
    interface HTMLFlipTextElement extends Components.FlipText, HTMLStencilElement {
    }
    var HTMLFlipTextElement: {
        prototype: HTMLFlipTextElement;
        new (): HTMLFlipTextElement;
    };
    interface HTMLFlipTextInputElement extends Components.FlipTextInput, HTMLStencilElement {
    }
    var HTMLFlipTextInputElement: {
        prototype: HTMLFlipTextInputElement;
        new (): HTMLFlipTextInputElement;
    };
    interface HTMLFlipThemeProviderElement extends Components.FlipThemeProvider, HTMLStencilElement {
    }
    var HTMLFlipThemeProviderElement: {
        prototype: HTMLFlipThemeProviderElement;
        new (): HTMLFlipThemeProviderElement;
    };
    interface HTMLFlipThumbnailElement extends Components.FlipThumbnail, HTMLStencilElement {
    }
    var HTMLFlipThumbnailElement: {
        prototype: HTMLFlipThumbnailElement;
        new (): HTMLFlipThumbnailElement;
    };
    interface HTMLFlipToastElement extends Components.FlipToast, HTMLStencilElement {
    }
    var HTMLFlipToastElement: {
        prototype: HTMLFlipToastElement;
        new (): HTMLFlipToastElement;
    };
    interface HTMLFlipToastProviderElement extends Components.FlipToastProvider, HTMLStencilElement {
    }
    var HTMLFlipToastProviderElement: {
        prototype: HTMLFlipToastProviderElement;
        new (): HTMLFlipToastProviderElement;
    };
    interface HTMLFlipTooltipElement extends Components.FlipTooltip, HTMLStencilElement {
    }
    var HTMLFlipTooltipElement: {
        prototype: HTMLFlipTooltipElement;
        new (): HTMLFlipTooltipElement;
    };
    interface HTMLFlipVideoThumbnailElement extends Components.FlipVideoThumbnail, HTMLStencilElement {
    }
    var HTMLFlipVideoThumbnailElement: {
        prototype: HTMLFlipVideoThumbnailElement;
        new (): HTMLFlipVideoThumbnailElement;
    };
    interface HTMLFlipVisuallyHiddenElement extends Components.FlipVisuallyHidden, HTMLStencilElement {
    }
    var HTMLFlipVisuallyHiddenElement: {
        prototype: HTMLFlipVisuallyHiddenElement;
        new (): HTMLFlipVisuallyHiddenElement;
    };
    interface HTMLElementTagNameMap {
        "flip-action-list": HTMLFlipActionListElement;
        "flip-action-list-item": HTMLFlipActionListItemElement;
        "flip-action-list-section": HTMLFlipActionListSectionElement;
        "flip-avatar": HTMLFlipAvatarElement;
        "flip-avatar-group": HTMLFlipAvatarGroupElement;
        "flip-badge": HTMLFlipBadgeElement;
        "flip-banner": HTMLFlipBannerElement;
        "flip-button": HTMLFlipButtonElement;
        "flip-button-group": HTMLFlipButtonGroupElement;
        "flip-checkbox": HTMLFlipCheckboxElement;
        "flip-chip": HTMLFlipChipElement;
        "flip-date-input": HTMLFlipDateInputElement;
        "flip-date-picker": HTMLFlipDatePickerElement;
        "flip-description-list": HTMLFlipDescriptionListElement;
        "flip-description-list-item": HTMLFlipDescriptionListItemElement;
        "flip-dialog": HTMLFlipDialogElement;
        "flip-empty-state": HTMLFlipEmptyStateElement;
        "flip-file-uploader": HTMLFlipFileUploaderElement;
        "flip-file-viewer": HTMLFlipFileViewerElement;
        "flip-file-viewer-audio": HTMLFlipFileViewerAudioElement;
        "flip-file-viewer-csv": HTMLFlipFileViewerCsvElement;
        "flip-file-viewer-image": HTMLFlipFileViewerImageElement;
        "flip-file-viewer-pdf": HTMLFlipFileViewerPdfElement;
        "flip-file-viewer-text": HTMLFlipFileViewerTextElement;
        "flip-file-viewer-video": HTMLFlipFileViewerVideoElement;
        "flip-form-control": HTMLFlipFormControlElement;
        "flip-form-group": HTMLFlipFormGroupElement;
        "flip-heading": HTMLFlipHeadingElement;
        "flip-icon-add": HTMLFlipIconAddElement;
        "flip-icon-add-photo": HTMLFlipIconAddPhotoElement;
        "flip-icon-admin-panel-settings": HTMLFlipIconAdminPanelSettingsElement;
        "flip-icon-arrow-back": HTMLFlipIconArrowBackElement;
        "flip-icon-arrow-forward": HTMLFlipIconArrowForwardElement;
        "flip-icon-arrow-left": HTMLFlipIconArrowLeftElement;
        "flip-icon-arrow-right": HTMLFlipIconArrowRightElement;
        "flip-icon-arrow-right-small": HTMLFlipIconArrowRightSmallElement;
        "flip-icon-attachment": HTMLFlipIconAttachmentElement;
        "flip-icon-cancel": HTMLFlipIconCancelElement;
        "flip-icon-chat-bubble": HTMLFlipIconChatBubbleElement;
        "flip-icon-check": HTMLFlipIconCheckElement;
        "flip-icon-check-circle": HTMLFlipIconCheckCircleElement;
        "flip-icon-check-small": HTMLFlipIconCheckSmallElement;
        "flip-icon-check-strong": HTMLFlipIconCheckStrongElement;
        "flip-icon-chevron-left": HTMLFlipIconChevronLeftElement;
        "flip-icon-chevron-right": HTMLFlipIconChevronRightElement;
        "flip-icon-close": HTMLFlipIconCloseElement;
        "flip-icon-close-small": HTMLFlipIconCloseSmallElement;
        "flip-icon-cloud-upload": HTMLFlipIconCloudUploadElement;
        "flip-icon-comment": HTMLFlipIconCommentElement;
        "flip-icon-copy": HTMLFlipIconCopyElement;
        "flip-icon-date-range": HTMLFlipIconDateRangeElement;
        "flip-icon-delete": HTMLFlipIconDeleteElement;
        "flip-icon-description": HTMLFlipIconDescriptionElement;
        "flip-icon-download": HTMLFlipIconDownloadElement;
        "flip-icon-edit": HTMLFlipIconEditElement;
        "flip-icon-emoji-mood": HTMLFlipIconEmojiMoodElement;
        "flip-icon-emoji-satisfied": HTMLFlipIconEmojiSatisfiedElement;
        "flip-icon-error": HTMLFlipIconErrorElement;
        "flip-icon-expand-less": HTMLFlipIconExpandLessElement;
        "flip-icon-expand-more": HTMLFlipIconExpandMoreElement;
        "flip-icon-file": HTMLFlipIconFileElement;
        "flip-icon-folder-shared": HTMLFlipIconFolderSharedElement;
        "flip-icon-fullscreen": HTMLFlipIconFullscreenElement;
        "flip-icon-fullscreen-exit": HTMLFlipIconFullscreenExitElement;
        "flip-icon-group-assign": HTMLFlipIconGroupAssignElement;
        "flip-icon-groups": HTMLFlipIconGroupsElement;
        "flip-icon-groups-custom": HTMLFlipIconGroupsCustomElement;
        "flip-icon-image": HTMLFlipIconImageElement;
        "flip-icon-info": HTMLFlipIconInfoElement;
        "flip-icon-inventory": HTMLFlipIconInventoryElement;
        "flip-icon-like": HTMLFlipIconLikeElement;
        "flip-icon-link": HTMLFlipIconLinkElement;
        "flip-icon-lock": HTMLFlipIconLockElement;
        "flip-icon-logout": HTMLFlipIconLogoutElement;
        "flip-icon-mail": HTMLFlipIconMailElement;
        "flip-icon-manage-accounts": HTMLFlipIconManageAccountsElement;
        "flip-icon-mention": HTMLFlipIconMentionElement;
        "flip-icon-message": HTMLFlipIconMessageElement;
        "flip-icon-more-horizontal": HTMLFlipIconMoreHorizontalElement;
        "flip-icon-more-vertikal": HTMLFlipIconMoreVertikalElement;
        "flip-icon-notifications": HTMLFlipIconNotificationsElement;
        "flip-icon-notifications-active": HTMLFlipIconNotificationsActiveElement;
        "flip-icon-notifications-off": HTMLFlipIconNotificationsOffElement;
        "flip-icon-open-in-new": HTMLFlipIconOpenInNewElement;
        "flip-icon-people-alt": HTMLFlipIconPeopleAltElement;
        "flip-icon-person": HTMLFlipIconPersonElement;
        "flip-icon-person-off": HTMLFlipIconPersonOffElement;
        "flip-icon-phone": HTMLFlipIconPhoneElement;
        "flip-icon-poll": HTMLFlipIconPollElement;
        "flip-icon-print": HTMLFlipIconPrintElement;
        "flip-icon-recieved": HTMLFlipIconRecievedElement;
        "flip-icon-remove": HTMLFlipIconRemoveElement;
        "flip-icon-search": HTMLFlipIconSearchElement;
        "flip-icon-search-strong": HTMLFlipIconSearchStrongElement;
        "flip-icon-send": HTMLFlipIconSendElement;
        "flip-icon-settings": HTMLFlipIconSettingsElement;
        "flip-icon-time-filled": HTMLFlipIconTimeFilledElement;
        "flip-icon-time-outlined": HTMLFlipIconTimeOutlinedElement;
        "flip-icon-today": HTMLFlipIconTodayElement;
        "flip-icon-user-assign": HTMLFlipIconUserAssignElement;
        "flip-icon-video-camera": HTMLFlipIconVideoCameraElement;
        "flip-icon-visibility": HTMLFlipIconVisibilityElement;
        "flip-icon-visibility-off": HTMLFlipIconVisibilityOffElement;
        "flip-icon-warning": HTMLFlipIconWarningElement;
        "flip-inline-error": HTMLFlipInlineErrorElement;
        "flip-lightbox": HTMLFlipLightboxElement;
        "flip-link": HTMLFlipLinkElement;
        "flip-list": HTMLFlipListElement;
        "flip-modal": HTMLFlipModalElement;
        "flip-option-list": HTMLFlipOptionListElement;
        "flip-option-list-item": HTMLFlipOptionListItemElement;
        "flip-option-list-section": HTMLFlipOptionListSectionElement;
        "flip-pagination": HTMLFlipPaginationElement;
        "flip-popover": HTMLFlipPopoverElement;
        "flip-progress-indicator": HTMLFlipProgressIndicatorElement;
        "flip-radio": HTMLFlipRadioElement;
        "flip-radio-group": HTMLFlipRadioGroupElement;
        "flip-resource-list": HTMLFlipResourceListElement;
        "flip-resource-list-file-item": HTMLFlipResourceListFileItemElement;
        "flip-resource-list-item": HTMLFlipResourceListItemElement;
        "flip-search": HTMLFlipSearchElement;
        "flip-spinner": HTMLFlipSpinnerElement;
        "flip-stack": HTMLFlipStackElement;
        "flip-switch": HTMLFlipSwitchElement;
        "flip-tab": HTMLFlipTabElement;
        "flip-tabs": HTMLFlipTabsElement;
        "flip-tag": HTMLFlipTagElement;
        "flip-text": HTMLFlipTextElement;
        "flip-text-input": HTMLFlipTextInputElement;
        "flip-theme-provider": HTMLFlipThemeProviderElement;
        "flip-thumbnail": HTMLFlipThumbnailElement;
        "flip-toast": HTMLFlipToastElement;
        "flip-toast-provider": HTMLFlipToastProviderElement;
        "flip-tooltip": HTMLFlipTooltipElement;
        "flip-video-thumbnail": HTMLFlipVideoThumbnailElement;
        "flip-visually-hidden": HTMLFlipVisuallyHiddenElement;
    }
}
declare namespace LocalJSX {
    interface FlipActionList {
    }
    interface FlipActionListItem {
        "description"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "intent"?: FlipActionListItemIntent;
        "label": string;
        "size"?: FlipActionListItemSize;
        "suffix"?: string;
    }
    interface FlipActionListSection {
        "label": string;
    }
    interface FlipAvatar {
        "badge"?: string;
        "badgePosition"?: FlipAvatarBadgePosition;
        "icon"?: string;
        "initials"?: string;
        "interactive"?: boolean;
        "label": string;
        "showLabel"?: boolean;
        "size"?: FlipAvatarSize;
        "src"?: string;
        "variant"?: FlipAvatarVariant;
    }
    interface FlipAvatarGroup {
        "badge"?: string;
    }
    interface FlipBadge {
        "icon"?: string;
        "intent"?: FlipBadgeIntent;
        "label": string;
        "size"?: FlipBadgeSize;
        "variant"?: FlipBadgeVariant;
    }
    interface FlipBanner {
        "actionLabel"?: string;
        "content": string;
        "dismissLabel"?: string;
        "dismissable"?: boolean;
        "importance"?: FlipBannerAriaRole;
        "intent"?: FlipBannerIntent;
        "onAction"?: (event: FlipBannerCustomEvent<MouseEvent>) => void;
        "onDismiss"?: (event: FlipBannerCustomEvent<MouseEvent>) => void;
        "showIcon"?: boolean;
    }
    interface FlipButton {
        "disabled"?: boolean;
        "download"?: string;
        "flipAriaDescribedby"?: string;
        "flipAriaLabel"?: string;
        "form"?: string;
        "hideLabel"?: boolean;
        "href"?: string;
        "icon"?: string;
        "iconPosition"?: FlipButtonIconPosition;
        "intent"?: FlipButtonIntent;
        "label": string;
        "name"?: string;
        "size"?: FlipButtonSize;
        "target"?: string;
        "type"?: FlipButtonType;
        "value"?: string;
        "variant"?: FlipButtonVariant;
    }
    interface FlipButtonGroup {
        "orientation"?: FlipButtonGroupOrientation;
        "stretch"?: boolean;
        "wrap"?: boolean;
    }
    interface FlipCheckbox {
        "checked"?: FlipCheckboxState;
        "description"?: string;
        "disabled"?: boolean;
        "flipAriaDescribedby"?: string;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "onValueChange"?: (event: FlipCheckboxCustomEvent<boolean>) => void;
        "value"?: string;
    }
    interface FlipChip {
        "avatar"?: string;
        "icon"?: string;
        "intent"?: FlipChipIntent;
        "interactive"?: boolean;
        "label": string;
    }
    interface FlipDateInput {
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "datePickerLabel"?: string;
        "disabled"?: boolean;
        "flipAriaDescribedby"?: string;
        "format"?: string;
        "invalid"?: boolean;
        "locale"?: Partial<AirDatepickerLocale>;
        "onValueChange"?: (event: FlipDateInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: string;
    }
    interface FlipDatePicker {
        "locale"?: Partial<AirDatepickerLocale>;
        "maxDate"?: Date;
        "minDate"?: Date;
        "onValueChange"?: (event: FlipDatePickerCustomEvent<Date | Date[]>) => void;
        "range"?: boolean;
        "startDate"?: Date;
        "value"?: Date | Date[];
    }
    interface FlipDescriptionList {
    }
    interface FlipDescriptionListItem {
        "term": string;
    }
    interface FlipDialog {
        "hideLabel"?: boolean;
        "intent"?: FlipDialogIntent;
        "label": string;
        "onPrimaryAction"?: (event: FlipDialogCustomEvent<MouseEvent>) => void;
        "onSecondaryAction"?: (event: FlipDialogCustomEvent<MouseEvent>) => void;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
    }
    interface FlipEmptyState {
        "heading"?: string;
        "illustration"?: string;
    }
    interface FlipFileUploader {
        "accept"?: string;
        "ctaLabel"?: string;
        "description"?: string;
        "disabled"?: boolean;
        "dragDropLabel"?: string;
        "inputId": string;
        "inputName": string;
        "label": string;
        "multiple"?: boolean;
        "onValueChange"?: (event: FlipFileUploaderCustomEvent<FileList>) => void;
        "showDropzone"?: boolean;
        "uploadButtonLabel"?: string;
    }
    interface FlipFileViewer {
        "active"?: boolean;
        "description"?: string;
        "errorMessage"?: string;
        "file": string;
        "type": string;
        "typeUnsupportedMessage"?: string;
        "zoom"?: FlipFileViewerPdfZoom;
    }
    interface FlipFileViewerAudio {
        "file": string;
        "type": string;
    }
    interface FlipFileViewerCsv {
        "errorMessage"?: string;
        "file": string;
    }
    interface FlipFileViewerImage {
        "description"?: string;
        "errorMessage"?: string;
        "file": string;
    }
    interface FlipFileViewerPdf {
        "errorMessage"?: string;
        "file": string;
        "zoom"?: FlipFileViewerPdfZoom;
    }
    interface FlipFileViewerText {
        "errorMessage"?: string;
        "file": string;
    }
    interface FlipFileViewerVideo {
        "file": string;
        "type": string;
    }
    interface FlipFormControl {
        "description"?: string;
        "disabled"?: boolean;
        "errorMessage"?: string;
        "invalid"?: boolean;
        "label": string;
    }
    interface FlipFormGroup {
        "orientation"?: FlipFormGroupOrientation;
    }
    interface FlipHeading {
        "align"?: FlipHeadingAlign;
        "as"?: FlipHeadingTag;
        "headingId"?: string;
        "level"?: FlipHeadingLevel;
        "text": string;
    }
    interface FlipIconAdd {
        "size"?: FlipIconSize;
    }
    interface FlipIconAddPhoto {
        "size"?: FlipIconSize;
    }
    interface FlipIconAdminPanelSettings {
        "size"?: FlipIconSize;
    }
    interface FlipIconArrowBack {
        "size"?: FlipIconSize;
    }
    interface FlipIconArrowForward {
        "size"?: FlipIconSize;
    }
    interface FlipIconArrowLeft {
        "size"?: FlipIconSize;
    }
    interface FlipIconArrowRight {
        "size"?: FlipIconSize;
    }
    interface FlipIconArrowRightSmall {
        "size"?: FlipIconSize;
    }
    interface FlipIconAttachment {
        "size"?: FlipIconSize;
    }
    interface FlipIconCancel {
        "size"?: FlipIconSize;
    }
    interface FlipIconChatBubble {
        "size"?: FlipIconSize;
    }
    interface FlipIconCheck {
        "size"?: FlipIconSize;
    }
    interface FlipIconCheckCircle {
        "size"?: FlipIconSize;
    }
    interface FlipIconCheckSmall {
        "size"?: FlipIconSize;
    }
    interface FlipIconCheckStrong {
        "size"?: FlipIconSize;
    }
    interface FlipIconChevronLeft {
        "size"?: FlipIconSize;
    }
    interface FlipIconChevronRight {
        "size"?: FlipIconSize;
    }
    interface FlipIconClose {
        "size"?: FlipIconSize;
    }
    interface FlipIconCloseSmall {
        "size"?: FlipIconSize;
    }
    interface FlipIconCloudUpload {
        "size"?: FlipIconSize;
    }
    interface FlipIconComment {
        "size"?: FlipIconSize;
    }
    interface FlipIconCopy {
        "size"?: FlipIconSize;
    }
    interface FlipIconDateRange {
        "size"?: FlipIconSize;
    }
    interface FlipIconDelete {
        "size"?: FlipIconSize;
    }
    interface FlipIconDescription {
        "size"?: FlipIconSize;
    }
    interface FlipIconDownload {
        "size"?: FlipIconSize;
    }
    interface FlipIconEdit {
        "size"?: FlipIconSize;
    }
    interface FlipIconEmojiMood {
        "size"?: FlipIconSize;
    }
    interface FlipIconEmojiSatisfied {
        "size"?: FlipIconSize;
    }
    interface FlipIconError {
        "size"?: FlipIconSize;
    }
    interface FlipIconExpandLess {
        "size"?: FlipIconSize;
    }
    interface FlipIconExpandMore {
        "size"?: FlipIconSize;
    }
    interface FlipIconFile {
        "size"?: FlipIconSize;
    }
    interface FlipIconFolderShared {
        "size"?: FlipIconSize;
    }
    interface FlipIconFullscreen {
        "size"?: FlipIconSize;
    }
    interface FlipIconFullscreenExit {
        "size"?: FlipIconSize;
    }
    interface FlipIconGroupAssign {
        "size"?: FlipIconSize;
    }
    interface FlipIconGroups {
        "size"?: FlipIconSize;
    }
    interface FlipIconGroupsCustom {
        "size"?: FlipIconSize;
    }
    interface FlipIconImage {
        "size"?: FlipIconSize;
    }
    interface FlipIconInfo {
        "size"?: FlipIconSize;
    }
    interface FlipIconInventory {
        "size"?: FlipIconSize;
    }
    interface FlipIconLike {
        "size"?: FlipIconSize;
    }
    interface FlipIconLink {
        "size"?: FlipIconSize;
    }
    interface FlipIconLock {
        "size"?: FlipIconSize;
    }
    interface FlipIconLogout {
        "size"?: FlipIconSize;
    }
    interface FlipIconMail {
        "size"?: FlipIconSize;
    }
    interface FlipIconManageAccounts {
        "size"?: FlipIconSize;
    }
    interface FlipIconMention {
        "size"?: FlipIconSize;
    }
    interface FlipIconMessage {
        "size"?: FlipIconSize;
    }
    interface FlipIconMoreHorizontal {
        "size"?: FlipIconSize;
    }
    interface FlipIconMoreVertikal {
        "size"?: FlipIconSize;
    }
    interface FlipIconNotifications {
        "size"?: FlipIconSize;
    }
    interface FlipIconNotificationsActive {
        "size"?: FlipIconSize;
    }
    interface FlipIconNotificationsOff {
        "size"?: FlipIconSize;
    }
    interface FlipIconOpenInNew {
        "size"?: FlipIconSize;
    }
    interface FlipIconPeopleAlt {
        "size"?: FlipIconSize;
    }
    interface FlipIconPerson {
        "size"?: FlipIconSize;
    }
    interface FlipIconPersonOff {
        "size"?: FlipIconSize;
    }
    interface FlipIconPhone {
        "size"?: FlipIconSize;
    }
    interface FlipIconPoll {
        "size"?: FlipIconSize;
    }
    interface FlipIconPrint {
        "size"?: FlipIconSize;
    }
    interface FlipIconRecieved {
        "size"?: FlipIconSize;
    }
    interface FlipIconRemove {
        "size"?: FlipIconSize;
    }
    interface FlipIconSearch {
        "size"?: FlipIconSize;
    }
    interface FlipIconSearchStrong {
        "size"?: FlipIconSize;
    }
    interface FlipIconSend {
        "size"?: FlipIconSize;
    }
    interface FlipIconSettings {
        "size"?: FlipIconSize;
    }
    interface FlipIconTimeFilled {
        "size"?: FlipIconSize;
    }
    interface FlipIconTimeOutlined {
        "size"?: FlipIconSize;
    }
    interface FlipIconToday {
        "size"?: FlipIconSize;
    }
    interface FlipIconUserAssign {
        "size"?: FlipIconSize;
    }
    interface FlipIconVideoCamera {
        "size"?: FlipIconSize;
    }
    interface FlipIconVisibility {
        "size"?: FlipIconSize;
    }
    interface FlipIconVisibilityOff {
        "size"?: FlipIconSize;
    }
    interface FlipIconWarning {
        "size"?: FlipIconSize;
    }
    interface FlipInlineError {
        "message": string;
        "size"?: FlipInlineErrorSize;
    }
    interface FlipLightbox {
        "closeButtonLabel"?: string;
        "downloadButtonLabel"?: string;
        "label": string;
        "nextSlideButtonLabel"?: string;
        "previousSlideButtonLabel"?: string;
    }
    interface FlipLink {
        "href": string;
        "label": string;
        "target"?: FlipLinkTarget;
    }
    interface FlipList {
    }
    interface FlipModal {
        "closeButtonLabel"?: string;
        "label": string;
        "onPrimaryAction"?: (event: FlipModalCustomEvent<MouseEvent>) => void;
        "onSecondaryAction"?: (event: FlipModalCustomEvent<MouseEvent>) => void;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
    }
    interface FlipOptionList {
        "disabled"?: boolean;
        "label"?: string;
        "multiSelect"?: boolean;
        "onValueChange"?: (event: FlipOptionListCustomEvent<string[]>) => void;
        "value"?: string[];
    }
    interface FlipOptionListItem {
        "context"?: FlipOptionListItemContext;
        "disabled"?: boolean;
        "icon"?: string;
        "label": string;
        "selected"?: boolean;
        "value": string;
    }
    interface FlipOptionListSection {
        "label": string;
    }
    interface FlipPagination {
        "accessibleNextButtonLabel"?: string;
        "accessiblePrevButtonLabel"?: string;
        "label": string;
        "nextButtonLabel"?: string;
        "onSetPage"?: (event: FlipPaginationCustomEvent<number>) => void;
        "page": number;
        "pageLabel"?: string;
        "pageSelectLabel"?: string;
        "pages": number;
        "prevButtonLabel"?: string;
        "variant"?: FlipPaginationVariant;
    }
    interface FlipPopover {
        "label": string;
        "placement"?: Placement;
        "popoverId": string;
        "trigger": string;
    }
    interface FlipProgressIndicator {
        "label": string;
        "size"?: FlipProgressIndicatorSize;
        "value"?: number;
        "variant"?: FlipProgressIndicatorVariant;
    }
    interface FlipRadio {
        "checked"?: FlipRadioState;
        "description"?: string;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "onValueChange"?: (event: FlipRadioCustomEvent<string>) => void;
        "value": string;
    }
    interface FlipRadioGroup {
        "flipAriaDescribedby"?: string;
        "onValueChange"?: (event: FlipRadioGroupCustomEvent<string>) => void;
        "value"?: string;
    }
    interface FlipResourceList {
        "label"?: string;
    }
    interface FlipResourceListFileItem {
        "description"?: string;
        "errorMessage"?: string;
        "icon"?: string;
        "label": string;
        "loading"?: boolean;
        "onRemove"?: (event: FlipResourceListFileItemCustomEvent<MouseEvent>) => void;
        "removable"?: boolean;
        "removeButtonLabel"?: string;
    }
    interface FlipResourceListItem {
        "checked"?: boolean;
        "description"?: string;
        "disabled"?: boolean;
        "hideDivider"?: boolean;
        "href"?: string;
        "label": string;
        "media"?: string;
        "menuTriggerId"?: string;
        "menuTriggerLabel"?: string;
        "meta"?: string;
        "onValueChange"?: (event: FlipResourceListItemCustomEvent<boolean>) => void;
        "selectable"?: boolean;
        "value"?: string;
    }
    interface FlipSearch {
        "autoFocus"?: boolean;
        "clearButtonLabel"?: string;
        "disabled"?: boolean;
        "inputId"?: string;
        "inputName"?: string;
        "label"?: string;
        "onInputBlur"?: (event: FlipSearchCustomEvent<FocusEvent>) => void;
        "onInputFocus"?: (event: FlipSearchCustomEvent<FocusEvent>) => void;
        "onValueChange"?: (event: FlipSearchCustomEvent<string>) => void;
        "placeholder"?: string;
        "value"?: string;
    }
    interface FlipSpinner {
        "label"?: string;
        "size"?: FlipSpinnerSize;
    }
    interface FlipStack {
        "align"?: FlipStackAlign;
        "as"?: string;
        "justify"?: FlipStackJustify;
        "orientation"?: FlipStackOrientation;
        "spacing"?: FlipStackSpacing;
        "wrap"?: boolean;
    }
    interface FlipSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "label"?: string;
        "onValueChange"?: (event: FlipSwitchCustomEvent<boolean>) => void;
        "size"?: FlipSwitchSize;
        "value"?: string;
    }
    interface FlipTab {
        "active"?: boolean;
        "label": string;
        "tabId": string;
    }
    interface FlipTabs {
        "initialTab"?: string;
        "label": string;
        "onTabActivated"?: (event: FlipTabsCustomEvent<HTMLFlipTabElement>) => void;
    }
    interface FlipTag {
        "intent"?: FlipTagIntent;
        "label": string;
        "onRemove"?: (event: FlipTagCustomEvent<MouseEvent>) => void;
        "removable"?: boolean;
        "removalButtonLabel"?: string;
    }
    interface FlipText {
        "align"?: FlipTextAlign;
        "as"?: string;
        "color"?: FlipTextColor;
        "fontStyle"?: FlipTextFontStyle;
        "size"?: FlipTextSize;
        "weight"?: FlipTextWeight;
    }
    interface FlipTextInput {
        "autoComplete"?: string;
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "clearButtonLabel"?: string;
        "clearable"?: boolean;
        "disabled"?: boolean;
        "flipAriaDescribedby"?: string;
        "invalid"?: boolean;
        "max"?: number;
        "maxLength"?: number;
        "min"?: number;
        "mode"?: FlipTextInputMode;
        "onValueChange"?: (event: FlipTextInputCustomEvent<string>) => void;
        "passwordToggleLabel"?: string;
        "prefixLabel"?: string;
        "required"?: boolean;
        "rows"?: number;
        "showCharacterCounter"?: boolean;
        "spellCheck"?: boolean;
        "step"?: number;
        "suffixLabel"?: string;
        "type"?: FlipTextInputType;
        "value"?: string;
    }
    interface FlipThemeProvider {
        "config"?: FlipThemeProviderConfig;
    }
    interface FlipThumbnail {
        "alt": string;
        "format"?: FlipThumbnailFormat;
        "size"?: FlipThumbnailSize;
        "src": string;
    }
    interface FlipToast {
        "accessibleDismissLabel"?: string;
        "content": string;
        "dismissLabel"?: string;
        "duration"?: number;
        "icon"?: string;
        "intent"?: FlipToastIntent;
        "onDismiss"?: (event: FlipToastCustomEvent<string>) => void;
        "toastId": string;
    }
    interface FlipToastProvider {
        /**
          * Optional global duration for all toasts. Overrides any durations set via the `toast` method. Set to 0 to disable automatic closing of toasts.
         */
        "globalDuration"?: number;
    }
    interface FlipTooltip {
        "content": string;
        "delay"?: number;
        "position"?: FlipTooltipPosition;
    }
    interface FlipVideoThumbnail {
        "duration"?: string;
        "durationLabel"?: string;
        "label": string;
        "src": string;
    }
    interface FlipVisuallyHidden {
    }
    interface IntrinsicElements {
        "flip-action-list": FlipActionList;
        "flip-action-list-item": FlipActionListItem;
        "flip-action-list-section": FlipActionListSection;
        "flip-avatar": FlipAvatar;
        "flip-avatar-group": FlipAvatarGroup;
        "flip-badge": FlipBadge;
        "flip-banner": FlipBanner;
        "flip-button": FlipButton;
        "flip-button-group": FlipButtonGroup;
        "flip-checkbox": FlipCheckbox;
        "flip-chip": FlipChip;
        "flip-date-input": FlipDateInput;
        "flip-date-picker": FlipDatePicker;
        "flip-description-list": FlipDescriptionList;
        "flip-description-list-item": FlipDescriptionListItem;
        "flip-dialog": FlipDialog;
        "flip-empty-state": FlipEmptyState;
        "flip-file-uploader": FlipFileUploader;
        "flip-file-viewer": FlipFileViewer;
        "flip-file-viewer-audio": FlipFileViewerAudio;
        "flip-file-viewer-csv": FlipFileViewerCsv;
        "flip-file-viewer-image": FlipFileViewerImage;
        "flip-file-viewer-pdf": FlipFileViewerPdf;
        "flip-file-viewer-text": FlipFileViewerText;
        "flip-file-viewer-video": FlipFileViewerVideo;
        "flip-form-control": FlipFormControl;
        "flip-form-group": FlipFormGroup;
        "flip-heading": FlipHeading;
        "flip-icon-add": FlipIconAdd;
        "flip-icon-add-photo": FlipIconAddPhoto;
        "flip-icon-admin-panel-settings": FlipIconAdminPanelSettings;
        "flip-icon-arrow-back": FlipIconArrowBack;
        "flip-icon-arrow-forward": FlipIconArrowForward;
        "flip-icon-arrow-left": FlipIconArrowLeft;
        "flip-icon-arrow-right": FlipIconArrowRight;
        "flip-icon-arrow-right-small": FlipIconArrowRightSmall;
        "flip-icon-attachment": FlipIconAttachment;
        "flip-icon-cancel": FlipIconCancel;
        "flip-icon-chat-bubble": FlipIconChatBubble;
        "flip-icon-check": FlipIconCheck;
        "flip-icon-check-circle": FlipIconCheckCircle;
        "flip-icon-check-small": FlipIconCheckSmall;
        "flip-icon-check-strong": FlipIconCheckStrong;
        "flip-icon-chevron-left": FlipIconChevronLeft;
        "flip-icon-chevron-right": FlipIconChevronRight;
        "flip-icon-close": FlipIconClose;
        "flip-icon-close-small": FlipIconCloseSmall;
        "flip-icon-cloud-upload": FlipIconCloudUpload;
        "flip-icon-comment": FlipIconComment;
        "flip-icon-copy": FlipIconCopy;
        "flip-icon-date-range": FlipIconDateRange;
        "flip-icon-delete": FlipIconDelete;
        "flip-icon-description": FlipIconDescription;
        "flip-icon-download": FlipIconDownload;
        "flip-icon-edit": FlipIconEdit;
        "flip-icon-emoji-mood": FlipIconEmojiMood;
        "flip-icon-emoji-satisfied": FlipIconEmojiSatisfied;
        "flip-icon-error": FlipIconError;
        "flip-icon-expand-less": FlipIconExpandLess;
        "flip-icon-expand-more": FlipIconExpandMore;
        "flip-icon-file": FlipIconFile;
        "flip-icon-folder-shared": FlipIconFolderShared;
        "flip-icon-fullscreen": FlipIconFullscreen;
        "flip-icon-fullscreen-exit": FlipIconFullscreenExit;
        "flip-icon-group-assign": FlipIconGroupAssign;
        "flip-icon-groups": FlipIconGroups;
        "flip-icon-groups-custom": FlipIconGroupsCustom;
        "flip-icon-image": FlipIconImage;
        "flip-icon-info": FlipIconInfo;
        "flip-icon-inventory": FlipIconInventory;
        "flip-icon-like": FlipIconLike;
        "flip-icon-link": FlipIconLink;
        "flip-icon-lock": FlipIconLock;
        "flip-icon-logout": FlipIconLogout;
        "flip-icon-mail": FlipIconMail;
        "flip-icon-manage-accounts": FlipIconManageAccounts;
        "flip-icon-mention": FlipIconMention;
        "flip-icon-message": FlipIconMessage;
        "flip-icon-more-horizontal": FlipIconMoreHorizontal;
        "flip-icon-more-vertikal": FlipIconMoreVertikal;
        "flip-icon-notifications": FlipIconNotifications;
        "flip-icon-notifications-active": FlipIconNotificationsActive;
        "flip-icon-notifications-off": FlipIconNotificationsOff;
        "flip-icon-open-in-new": FlipIconOpenInNew;
        "flip-icon-people-alt": FlipIconPeopleAlt;
        "flip-icon-person": FlipIconPerson;
        "flip-icon-person-off": FlipIconPersonOff;
        "flip-icon-phone": FlipIconPhone;
        "flip-icon-poll": FlipIconPoll;
        "flip-icon-print": FlipIconPrint;
        "flip-icon-recieved": FlipIconRecieved;
        "flip-icon-remove": FlipIconRemove;
        "flip-icon-search": FlipIconSearch;
        "flip-icon-search-strong": FlipIconSearchStrong;
        "flip-icon-send": FlipIconSend;
        "flip-icon-settings": FlipIconSettings;
        "flip-icon-time-filled": FlipIconTimeFilled;
        "flip-icon-time-outlined": FlipIconTimeOutlined;
        "flip-icon-today": FlipIconToday;
        "flip-icon-user-assign": FlipIconUserAssign;
        "flip-icon-video-camera": FlipIconVideoCamera;
        "flip-icon-visibility": FlipIconVisibility;
        "flip-icon-visibility-off": FlipIconVisibilityOff;
        "flip-icon-warning": FlipIconWarning;
        "flip-inline-error": FlipInlineError;
        "flip-lightbox": FlipLightbox;
        "flip-link": FlipLink;
        "flip-list": FlipList;
        "flip-modal": FlipModal;
        "flip-option-list": FlipOptionList;
        "flip-option-list-item": FlipOptionListItem;
        "flip-option-list-section": FlipOptionListSection;
        "flip-pagination": FlipPagination;
        "flip-popover": FlipPopover;
        "flip-progress-indicator": FlipProgressIndicator;
        "flip-radio": FlipRadio;
        "flip-radio-group": FlipRadioGroup;
        "flip-resource-list": FlipResourceList;
        "flip-resource-list-file-item": FlipResourceListFileItem;
        "flip-resource-list-item": FlipResourceListItem;
        "flip-search": FlipSearch;
        "flip-spinner": FlipSpinner;
        "flip-stack": FlipStack;
        "flip-switch": FlipSwitch;
        "flip-tab": FlipTab;
        "flip-tabs": FlipTabs;
        "flip-tag": FlipTag;
        "flip-text": FlipText;
        "flip-text-input": FlipTextInput;
        "flip-theme-provider": FlipThemeProvider;
        "flip-thumbnail": FlipThumbnail;
        "flip-toast": FlipToast;
        "flip-toast-provider": FlipToastProvider;
        "flip-tooltip": FlipTooltip;
        "flip-video-thumbnail": FlipVideoThumbnail;
        "flip-visually-hidden": FlipVisuallyHidden;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "flip-action-list": LocalJSX.FlipActionList & JSXBase.HTMLAttributes<HTMLFlipActionListElement>;
            "flip-action-list-item": LocalJSX.FlipActionListItem & JSXBase.HTMLAttributes<HTMLFlipActionListItemElement>;
            "flip-action-list-section": LocalJSX.FlipActionListSection & JSXBase.HTMLAttributes<HTMLFlipActionListSectionElement>;
            "flip-avatar": LocalJSX.FlipAvatar & JSXBase.HTMLAttributes<HTMLFlipAvatarElement>;
            "flip-avatar-group": LocalJSX.FlipAvatarGroup & JSXBase.HTMLAttributes<HTMLFlipAvatarGroupElement>;
            "flip-badge": LocalJSX.FlipBadge & JSXBase.HTMLAttributes<HTMLFlipBadgeElement>;
            "flip-banner": LocalJSX.FlipBanner & JSXBase.HTMLAttributes<HTMLFlipBannerElement>;
            "flip-button": LocalJSX.FlipButton & JSXBase.HTMLAttributes<HTMLFlipButtonElement>;
            "flip-button-group": LocalJSX.FlipButtonGroup & JSXBase.HTMLAttributes<HTMLFlipButtonGroupElement>;
            "flip-checkbox": LocalJSX.FlipCheckbox & JSXBase.HTMLAttributes<HTMLFlipCheckboxElement>;
            "flip-chip": LocalJSX.FlipChip & JSXBase.HTMLAttributes<HTMLFlipChipElement>;
            "flip-date-input": LocalJSX.FlipDateInput & JSXBase.HTMLAttributes<HTMLFlipDateInputElement>;
            "flip-date-picker": LocalJSX.FlipDatePicker & JSXBase.HTMLAttributes<HTMLFlipDatePickerElement>;
            "flip-description-list": LocalJSX.FlipDescriptionList & JSXBase.HTMLAttributes<HTMLFlipDescriptionListElement>;
            "flip-description-list-item": LocalJSX.FlipDescriptionListItem & JSXBase.HTMLAttributes<HTMLFlipDescriptionListItemElement>;
            "flip-dialog": LocalJSX.FlipDialog & JSXBase.HTMLAttributes<HTMLFlipDialogElement>;
            "flip-empty-state": LocalJSX.FlipEmptyState & JSXBase.HTMLAttributes<HTMLFlipEmptyStateElement>;
            "flip-file-uploader": LocalJSX.FlipFileUploader & JSXBase.HTMLAttributes<HTMLFlipFileUploaderElement>;
            "flip-file-viewer": LocalJSX.FlipFileViewer & JSXBase.HTMLAttributes<HTMLFlipFileViewerElement>;
            "flip-file-viewer-audio": LocalJSX.FlipFileViewerAudio & JSXBase.HTMLAttributes<HTMLFlipFileViewerAudioElement>;
            "flip-file-viewer-csv": LocalJSX.FlipFileViewerCsv & JSXBase.HTMLAttributes<HTMLFlipFileViewerCsvElement>;
            "flip-file-viewer-image": LocalJSX.FlipFileViewerImage & JSXBase.HTMLAttributes<HTMLFlipFileViewerImageElement>;
            "flip-file-viewer-pdf": LocalJSX.FlipFileViewerPdf & JSXBase.HTMLAttributes<HTMLFlipFileViewerPdfElement>;
            "flip-file-viewer-text": LocalJSX.FlipFileViewerText & JSXBase.HTMLAttributes<HTMLFlipFileViewerTextElement>;
            "flip-file-viewer-video": LocalJSX.FlipFileViewerVideo & JSXBase.HTMLAttributes<HTMLFlipFileViewerVideoElement>;
            "flip-form-control": LocalJSX.FlipFormControl & JSXBase.HTMLAttributes<HTMLFlipFormControlElement>;
            "flip-form-group": LocalJSX.FlipFormGroup & JSXBase.HTMLAttributes<HTMLFlipFormGroupElement>;
            "flip-heading": LocalJSX.FlipHeading & JSXBase.HTMLAttributes<HTMLFlipHeadingElement>;
            "flip-icon-add": LocalJSX.FlipIconAdd & JSXBase.HTMLAttributes<HTMLFlipIconAddElement>;
            "flip-icon-add-photo": LocalJSX.FlipIconAddPhoto & JSXBase.HTMLAttributes<HTMLFlipIconAddPhotoElement>;
            "flip-icon-admin-panel-settings": LocalJSX.FlipIconAdminPanelSettings & JSXBase.HTMLAttributes<HTMLFlipIconAdminPanelSettingsElement>;
            "flip-icon-arrow-back": LocalJSX.FlipIconArrowBack & JSXBase.HTMLAttributes<HTMLFlipIconArrowBackElement>;
            "flip-icon-arrow-forward": LocalJSX.FlipIconArrowForward & JSXBase.HTMLAttributes<HTMLFlipIconArrowForwardElement>;
            "flip-icon-arrow-left": LocalJSX.FlipIconArrowLeft & JSXBase.HTMLAttributes<HTMLFlipIconArrowLeftElement>;
            "flip-icon-arrow-right": LocalJSX.FlipIconArrowRight & JSXBase.HTMLAttributes<HTMLFlipIconArrowRightElement>;
            "flip-icon-arrow-right-small": LocalJSX.FlipIconArrowRightSmall & JSXBase.HTMLAttributes<HTMLFlipIconArrowRightSmallElement>;
            "flip-icon-attachment": LocalJSX.FlipIconAttachment & JSXBase.HTMLAttributes<HTMLFlipIconAttachmentElement>;
            "flip-icon-cancel": LocalJSX.FlipIconCancel & JSXBase.HTMLAttributes<HTMLFlipIconCancelElement>;
            "flip-icon-chat-bubble": LocalJSX.FlipIconChatBubble & JSXBase.HTMLAttributes<HTMLFlipIconChatBubbleElement>;
            "flip-icon-check": LocalJSX.FlipIconCheck & JSXBase.HTMLAttributes<HTMLFlipIconCheckElement>;
            "flip-icon-check-circle": LocalJSX.FlipIconCheckCircle & JSXBase.HTMLAttributes<HTMLFlipIconCheckCircleElement>;
            "flip-icon-check-small": LocalJSX.FlipIconCheckSmall & JSXBase.HTMLAttributes<HTMLFlipIconCheckSmallElement>;
            "flip-icon-check-strong": LocalJSX.FlipIconCheckStrong & JSXBase.HTMLAttributes<HTMLFlipIconCheckStrongElement>;
            "flip-icon-chevron-left": LocalJSX.FlipIconChevronLeft & JSXBase.HTMLAttributes<HTMLFlipIconChevronLeftElement>;
            "flip-icon-chevron-right": LocalJSX.FlipIconChevronRight & JSXBase.HTMLAttributes<HTMLFlipIconChevronRightElement>;
            "flip-icon-close": LocalJSX.FlipIconClose & JSXBase.HTMLAttributes<HTMLFlipIconCloseElement>;
            "flip-icon-close-small": LocalJSX.FlipIconCloseSmall & JSXBase.HTMLAttributes<HTMLFlipIconCloseSmallElement>;
            "flip-icon-cloud-upload": LocalJSX.FlipIconCloudUpload & JSXBase.HTMLAttributes<HTMLFlipIconCloudUploadElement>;
            "flip-icon-comment": LocalJSX.FlipIconComment & JSXBase.HTMLAttributes<HTMLFlipIconCommentElement>;
            "flip-icon-copy": LocalJSX.FlipIconCopy & JSXBase.HTMLAttributes<HTMLFlipIconCopyElement>;
            "flip-icon-date-range": LocalJSX.FlipIconDateRange & JSXBase.HTMLAttributes<HTMLFlipIconDateRangeElement>;
            "flip-icon-delete": LocalJSX.FlipIconDelete & JSXBase.HTMLAttributes<HTMLFlipIconDeleteElement>;
            "flip-icon-description": LocalJSX.FlipIconDescription & JSXBase.HTMLAttributes<HTMLFlipIconDescriptionElement>;
            "flip-icon-download": LocalJSX.FlipIconDownload & JSXBase.HTMLAttributes<HTMLFlipIconDownloadElement>;
            "flip-icon-edit": LocalJSX.FlipIconEdit & JSXBase.HTMLAttributes<HTMLFlipIconEditElement>;
            "flip-icon-emoji-mood": LocalJSX.FlipIconEmojiMood & JSXBase.HTMLAttributes<HTMLFlipIconEmojiMoodElement>;
            "flip-icon-emoji-satisfied": LocalJSX.FlipIconEmojiSatisfied & JSXBase.HTMLAttributes<HTMLFlipIconEmojiSatisfiedElement>;
            "flip-icon-error": LocalJSX.FlipIconError & JSXBase.HTMLAttributes<HTMLFlipIconErrorElement>;
            "flip-icon-expand-less": LocalJSX.FlipIconExpandLess & JSXBase.HTMLAttributes<HTMLFlipIconExpandLessElement>;
            "flip-icon-expand-more": LocalJSX.FlipIconExpandMore & JSXBase.HTMLAttributes<HTMLFlipIconExpandMoreElement>;
            "flip-icon-file": LocalJSX.FlipIconFile & JSXBase.HTMLAttributes<HTMLFlipIconFileElement>;
            "flip-icon-folder-shared": LocalJSX.FlipIconFolderShared & JSXBase.HTMLAttributes<HTMLFlipIconFolderSharedElement>;
            "flip-icon-fullscreen": LocalJSX.FlipIconFullscreen & JSXBase.HTMLAttributes<HTMLFlipIconFullscreenElement>;
            "flip-icon-fullscreen-exit": LocalJSX.FlipIconFullscreenExit & JSXBase.HTMLAttributes<HTMLFlipIconFullscreenExitElement>;
            "flip-icon-group-assign": LocalJSX.FlipIconGroupAssign & JSXBase.HTMLAttributes<HTMLFlipIconGroupAssignElement>;
            "flip-icon-groups": LocalJSX.FlipIconGroups & JSXBase.HTMLAttributes<HTMLFlipIconGroupsElement>;
            "flip-icon-groups-custom": LocalJSX.FlipIconGroupsCustom & JSXBase.HTMLAttributes<HTMLFlipIconGroupsCustomElement>;
            "flip-icon-image": LocalJSX.FlipIconImage & JSXBase.HTMLAttributes<HTMLFlipIconImageElement>;
            "flip-icon-info": LocalJSX.FlipIconInfo & JSXBase.HTMLAttributes<HTMLFlipIconInfoElement>;
            "flip-icon-inventory": LocalJSX.FlipIconInventory & JSXBase.HTMLAttributes<HTMLFlipIconInventoryElement>;
            "flip-icon-like": LocalJSX.FlipIconLike & JSXBase.HTMLAttributes<HTMLFlipIconLikeElement>;
            "flip-icon-link": LocalJSX.FlipIconLink & JSXBase.HTMLAttributes<HTMLFlipIconLinkElement>;
            "flip-icon-lock": LocalJSX.FlipIconLock & JSXBase.HTMLAttributes<HTMLFlipIconLockElement>;
            "flip-icon-logout": LocalJSX.FlipIconLogout & JSXBase.HTMLAttributes<HTMLFlipIconLogoutElement>;
            "flip-icon-mail": LocalJSX.FlipIconMail & JSXBase.HTMLAttributes<HTMLFlipIconMailElement>;
            "flip-icon-manage-accounts": LocalJSX.FlipIconManageAccounts & JSXBase.HTMLAttributes<HTMLFlipIconManageAccountsElement>;
            "flip-icon-mention": LocalJSX.FlipIconMention & JSXBase.HTMLAttributes<HTMLFlipIconMentionElement>;
            "flip-icon-message": LocalJSX.FlipIconMessage & JSXBase.HTMLAttributes<HTMLFlipIconMessageElement>;
            "flip-icon-more-horizontal": LocalJSX.FlipIconMoreHorizontal & JSXBase.HTMLAttributes<HTMLFlipIconMoreHorizontalElement>;
            "flip-icon-more-vertikal": LocalJSX.FlipIconMoreVertikal & JSXBase.HTMLAttributes<HTMLFlipIconMoreVertikalElement>;
            "flip-icon-notifications": LocalJSX.FlipIconNotifications & JSXBase.HTMLAttributes<HTMLFlipIconNotificationsElement>;
            "flip-icon-notifications-active": LocalJSX.FlipIconNotificationsActive & JSXBase.HTMLAttributes<HTMLFlipIconNotificationsActiveElement>;
            "flip-icon-notifications-off": LocalJSX.FlipIconNotificationsOff & JSXBase.HTMLAttributes<HTMLFlipIconNotificationsOffElement>;
            "flip-icon-open-in-new": LocalJSX.FlipIconOpenInNew & JSXBase.HTMLAttributes<HTMLFlipIconOpenInNewElement>;
            "flip-icon-people-alt": LocalJSX.FlipIconPeopleAlt & JSXBase.HTMLAttributes<HTMLFlipIconPeopleAltElement>;
            "flip-icon-person": LocalJSX.FlipIconPerson & JSXBase.HTMLAttributes<HTMLFlipIconPersonElement>;
            "flip-icon-person-off": LocalJSX.FlipIconPersonOff & JSXBase.HTMLAttributes<HTMLFlipIconPersonOffElement>;
            "flip-icon-phone": LocalJSX.FlipIconPhone & JSXBase.HTMLAttributes<HTMLFlipIconPhoneElement>;
            "flip-icon-poll": LocalJSX.FlipIconPoll & JSXBase.HTMLAttributes<HTMLFlipIconPollElement>;
            "flip-icon-print": LocalJSX.FlipIconPrint & JSXBase.HTMLAttributes<HTMLFlipIconPrintElement>;
            "flip-icon-recieved": LocalJSX.FlipIconRecieved & JSXBase.HTMLAttributes<HTMLFlipIconRecievedElement>;
            "flip-icon-remove": LocalJSX.FlipIconRemove & JSXBase.HTMLAttributes<HTMLFlipIconRemoveElement>;
            "flip-icon-search": LocalJSX.FlipIconSearch & JSXBase.HTMLAttributes<HTMLFlipIconSearchElement>;
            "flip-icon-search-strong": LocalJSX.FlipIconSearchStrong & JSXBase.HTMLAttributes<HTMLFlipIconSearchStrongElement>;
            "flip-icon-send": LocalJSX.FlipIconSend & JSXBase.HTMLAttributes<HTMLFlipIconSendElement>;
            "flip-icon-settings": LocalJSX.FlipIconSettings & JSXBase.HTMLAttributes<HTMLFlipIconSettingsElement>;
            "flip-icon-time-filled": LocalJSX.FlipIconTimeFilled & JSXBase.HTMLAttributes<HTMLFlipIconTimeFilledElement>;
            "flip-icon-time-outlined": LocalJSX.FlipIconTimeOutlined & JSXBase.HTMLAttributes<HTMLFlipIconTimeOutlinedElement>;
            "flip-icon-today": LocalJSX.FlipIconToday & JSXBase.HTMLAttributes<HTMLFlipIconTodayElement>;
            "flip-icon-user-assign": LocalJSX.FlipIconUserAssign & JSXBase.HTMLAttributes<HTMLFlipIconUserAssignElement>;
            "flip-icon-video-camera": LocalJSX.FlipIconVideoCamera & JSXBase.HTMLAttributes<HTMLFlipIconVideoCameraElement>;
            "flip-icon-visibility": LocalJSX.FlipIconVisibility & JSXBase.HTMLAttributes<HTMLFlipIconVisibilityElement>;
            "flip-icon-visibility-off": LocalJSX.FlipIconVisibilityOff & JSXBase.HTMLAttributes<HTMLFlipIconVisibilityOffElement>;
            "flip-icon-warning": LocalJSX.FlipIconWarning & JSXBase.HTMLAttributes<HTMLFlipIconWarningElement>;
            "flip-inline-error": LocalJSX.FlipInlineError & JSXBase.HTMLAttributes<HTMLFlipInlineErrorElement>;
            "flip-lightbox": LocalJSX.FlipLightbox & JSXBase.HTMLAttributes<HTMLFlipLightboxElement>;
            "flip-link": LocalJSX.FlipLink & JSXBase.HTMLAttributes<HTMLFlipLinkElement>;
            "flip-list": LocalJSX.FlipList & JSXBase.HTMLAttributes<HTMLFlipListElement>;
            "flip-modal": LocalJSX.FlipModal & JSXBase.HTMLAttributes<HTMLFlipModalElement>;
            "flip-option-list": LocalJSX.FlipOptionList & JSXBase.HTMLAttributes<HTMLFlipOptionListElement>;
            "flip-option-list-item": LocalJSX.FlipOptionListItem & JSXBase.HTMLAttributes<HTMLFlipOptionListItemElement>;
            "flip-option-list-section": LocalJSX.FlipOptionListSection & JSXBase.HTMLAttributes<HTMLFlipOptionListSectionElement>;
            "flip-pagination": LocalJSX.FlipPagination & JSXBase.HTMLAttributes<HTMLFlipPaginationElement>;
            "flip-popover": LocalJSX.FlipPopover & JSXBase.HTMLAttributes<HTMLFlipPopoverElement>;
            "flip-progress-indicator": LocalJSX.FlipProgressIndicator & JSXBase.HTMLAttributes<HTMLFlipProgressIndicatorElement>;
            "flip-radio": LocalJSX.FlipRadio & JSXBase.HTMLAttributes<HTMLFlipRadioElement>;
            "flip-radio-group": LocalJSX.FlipRadioGroup & JSXBase.HTMLAttributes<HTMLFlipRadioGroupElement>;
            "flip-resource-list": LocalJSX.FlipResourceList & JSXBase.HTMLAttributes<HTMLFlipResourceListElement>;
            "flip-resource-list-file-item": LocalJSX.FlipResourceListFileItem & JSXBase.HTMLAttributes<HTMLFlipResourceListFileItemElement>;
            "flip-resource-list-item": LocalJSX.FlipResourceListItem & JSXBase.HTMLAttributes<HTMLFlipResourceListItemElement>;
            "flip-search": LocalJSX.FlipSearch & JSXBase.HTMLAttributes<HTMLFlipSearchElement>;
            "flip-spinner": LocalJSX.FlipSpinner & JSXBase.HTMLAttributes<HTMLFlipSpinnerElement>;
            "flip-stack": LocalJSX.FlipStack & JSXBase.HTMLAttributes<HTMLFlipStackElement>;
            "flip-switch": LocalJSX.FlipSwitch & JSXBase.HTMLAttributes<HTMLFlipSwitchElement>;
            "flip-tab": LocalJSX.FlipTab & JSXBase.HTMLAttributes<HTMLFlipTabElement>;
            "flip-tabs": LocalJSX.FlipTabs & JSXBase.HTMLAttributes<HTMLFlipTabsElement>;
            "flip-tag": LocalJSX.FlipTag & JSXBase.HTMLAttributes<HTMLFlipTagElement>;
            "flip-text": LocalJSX.FlipText & JSXBase.HTMLAttributes<HTMLFlipTextElement>;
            "flip-text-input": LocalJSX.FlipTextInput & JSXBase.HTMLAttributes<HTMLFlipTextInputElement>;
            "flip-theme-provider": LocalJSX.FlipThemeProvider & JSXBase.HTMLAttributes<HTMLFlipThemeProviderElement>;
            "flip-thumbnail": LocalJSX.FlipThumbnail & JSXBase.HTMLAttributes<HTMLFlipThumbnailElement>;
            "flip-toast": LocalJSX.FlipToast & JSXBase.HTMLAttributes<HTMLFlipToastElement>;
            "flip-toast-provider": LocalJSX.FlipToastProvider & JSXBase.HTMLAttributes<HTMLFlipToastProviderElement>;
            "flip-tooltip": LocalJSX.FlipTooltip & JSXBase.HTMLAttributes<HTMLFlipTooltipElement>;
            "flip-video-thumbnail": LocalJSX.FlipVideoThumbnail & JSXBase.HTMLAttributes<HTMLFlipVideoThumbnailElement>;
            "flip-visually-hidden": LocalJSX.FlipVisuallyHidden & JSXBase.HTMLAttributes<HTMLFlipVisuallyHiddenElement>;
        }
    }
}
