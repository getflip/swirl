/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { SwirlHeadingLevel } from "./components/swirl-heading/swirl-heading";
import { SwirlActionListItemIntent, SwirlActionListItemSize } from "./components/swirl-action-list-item/swirl-action-list-item";
import { SwirlAppLayoutMobileView } from "./components/swirl-app-layout/swirl-app-layout";
import { SwirlAutocompleteSuggestion, SwirlAutocompleteValue } from "./components/swirl-autocomplete/swirl-autocomplete";
import { SwirlTextInputMode } from "./components/swirl-text-input/swirl-text-input";
import { SwirlAvatarBadgePosition, SwirlAvatarColor, SwirlAvatarLoading, SwirlAvatarSize, SwirlAvatarToolPosition, SwirlAvatarVariant } from "./components/swirl-avatar/swirl-avatar";
import { SwirlBadgeIntent, SwirlBadgeSize, SwirlBadgeVariant } from "./components/swirl-badge/swirl-badge";
import { SwirlBannerAriaRole, SwirlBannerIntent, SwirlBannerSize } from "./components/swirl-banner/swirl-banner";
import { SwirlBoxOverflow, SwirlBoxPadding, SwirlBoxPosition } from "./components/swirl-box/swirl-box";
import { SwirlButtonIconPosition, SwirlButtonIntent, SwirlButtonSize, SwirlButtonTextAlign, SwirlButtonType, SwirlButtonVariant } from "./components/swirl-button/swirl-button";
import { SwirlButtonGroupOrientation } from "./components/swirl-button-group/swirl-button-group";
import { SwirlCardBorderRadius, SwirlCardElevationLevel, SwirlCardIntent, SwirlCardJustifyContent, SwirlCardOverflow, SwirlCardPadding } from "./components/swirl-card/swirl-card";
import { SwirlCheckboxLabelWeight, SwirlCheckboxState, SwirlCheckboxVariant } from "./components/swirl-checkbox/swirl-checkbox";
import { SwirlChipBorderRadius, SwirlChipIconColor, SwirlChipIntent, SwirlChipSize, SwirlChipVariant } from "./components/swirl-chip/swirl-chip";
import { SwirlColumnsSpacing } from "./components/swirl-columns/swirl-columns";
import { WCDatepickerLabels } from "wc-datepicker/dist/types/components/wc-datepicker/wc-datepicker";
import { SwirlDialogIntent } from "./components/swirl-dialog/swirl-dialog";
import { SwirlEmojiSize } from "./components/swirl-emoji/swirl-emoji.types";
import { SwirlButtonVariant as SwirlButtonVariant1 } from "./components/swirl-button/swirl-button";
import { SwirlFileViewerPdfViewMode, SwirlFileViewerPdfZoom } from "./components/swirl-file-viewer/viewers/swirl-file-viewer-pdf/swirl-file-viewer-pdf";
import { SwirlFileViewerPdfViewMode as SwirlFileViewerPdfViewMode1, SwirlFileViewerPdfZoom as SwirlFileViewerPdfZoom1 } from "./components/swirl-file-viewer/viewers/swirl-file-viewer-pdf/swirl-file-viewer-pdf";
import { SwirlFormControlLabelPosition } from "./components/swirl-form-control/swirl-form-control";
import { SwirlFormGroupOrientation } from "./components/swirl-form-group/swirl-form-group";
import { SwirlHeadingAlign, SwirlHeadingLevel as SwirlHeadingLevel1, SwirlHeadingTag } from "./components/swirl-heading/swirl-heading";
import { SwirlIconColor } from "./components/swirl-icon/swirl-icon";
import { SwirlIconSize } from "./components/swirl-icon/swirl-icon.types";
import { SwirlIconColor as SwirlIconColor1 } from "./components/swirl-icon/swirl-icon";
import { SwirlImageGridItemLoading } from "./components/swirl-image-grid-item/swirl-image-grid-item";
import { SwirlInlineErrorSize } from "./components/swirl-inline-error/swirl-inline-error";
import { SwirlInlineNotificationAriaRole, SwirlInlineNotificationIntent } from "./components/swirl-inline-notification/swirl-inline-notification";
import { SwirlInlineStatusIntent, SwirlInlineStatusSize } from "./components/swirl-inline-status/swirl-inline-status";
import { SwirlLinkColor, SwirlLinkTarget } from "./components/swirl-link/swirl-link";
import { SwirlMenuVariant } from "./components/swirl-menu/swirl-menu";
import { SwirlActionListItemIntent as SwirlActionListItemIntent1 } from "./components/swirl-action-list-item/swirl-action-list-item";
import { SwirlModalVariant } from "./components/swirl-modal/swirl-modal";
import { SwirlOptionListItemContext, SwirlOptionListItemRole } from "./components/swirl-option-list-item/swirl-option-list-item";
import { SwirlPaginationVariant } from "./components/swirl-pagination/swirl-pagination";
import { SwirlPopoverAnimation } from "./components/swirl-popover/swirl-popover";
import { ComputePositionReturn, Placement, Strategy } from "@floating-ui/dom";
import { SwirlProgressIndicatorSize, SwirlProgressIndicatorVariant } from "./components/swirl-progress-indicator/swirl-progress-indicator";
import { SwirlRadioState, SwirlRadioVariant } from "./components/swirl-radio/swirl-radio";
import { SwirlResourceListItemLabelWeight } from "./components/swirl-resource-list-item/swirl-resource-list-item";
import { SwirlSearchVariant } from "./components/swirl-search/swirl-search";
import { SwirlSeparatorBorderColor, SwirlSeparatorOrientation, SwirlSeparatorSpacing } from "./components/swirl-separator/swirl-separator";
import { SwirlSkeletonBoxBorderRadius } from "./components/swirl-skeleton-box/swirl-skeleton-box";
import { SwirlSkeletonTextSize } from "./components/swirl-skeleton-text/swirl-skeleton-text";
import { SwirlSpinnerSize } from "./components/swirl-spinner/swirl-spinner";
import { SwirlStackAlign, SwirlStackJustify, SwirlStackOrientation, SwirlStackSpacing } from "./components/swirl-stack/swirl-stack";
import { SwirlStatusIndicatorIntent } from "./components/swirl-status-indicator/swirl-status-indicator";
import { SwirlSwitchLabelPosition } from "./components/swirl-switch/swirl-switch";
import { SwirlSymbolSize } from "./components/swirl-symbol/swirl-symbol.types";
import { SwirlTabPadding } from "./components/swirl-tab/swirl-tab";
import { SwirlTabBarTab } from "./components/swirl-tab-bar/swirl-tab-bar";
import { SwirlTableColumnSort } from "./components/swirl-table-column/swirl-table-column";
import { SwirlTagIntent, SwirlTagSize } from "./components/swirl-tag/swirl-tag";
import { SwirlTextAlign, SwirlTextColor, SwirlTextFontFamily, SwirlTextFontStyle, SwirlTextSize, SwirlTextTruncateDirection, SwirlTextWeight, SwirlTextWhiteSpace } from "./components/swirl-text/swirl-text";
import { SwirlTextInputMode as SwirlTextInputMode1, SwirlTextInputType } from "./components/swirl-text-input/swirl-text-input";
import { SwirlOSTheme, SwirlOSThemeChangeEventData, SwirlThemeProviderConfig } from "./components/swirl-theme-provider/swirl-theme-provider.types";
import { SwirlThumbnailFormat, SwirlThumbnailSize } from "./components/swirl-thumbnail/swirl-thumbnail";
import { SwirlToastIntent } from "./components/swirl-toast/swirl-toast";
import { SwirlToastConfig, SwirlToastMessage } from "./components/swirl-toast-provider/swirl-toast-provider";
import { SwirlToolbarOrientation } from "./components/swirl-toolbar/swirl-toolbar";
import { SwirlTooltipPosition } from "./components/swirl-tooltip/swirl-tooltip";
export { SwirlHeadingLevel } from "./components/swirl-heading/swirl-heading";
export { SwirlActionListItemIntent, SwirlActionListItemSize } from "./components/swirl-action-list-item/swirl-action-list-item";
export { SwirlAppLayoutMobileView } from "./components/swirl-app-layout/swirl-app-layout";
export { SwirlAutocompleteSuggestion, SwirlAutocompleteValue } from "./components/swirl-autocomplete/swirl-autocomplete";
export { SwirlTextInputMode } from "./components/swirl-text-input/swirl-text-input";
export { SwirlAvatarBadgePosition, SwirlAvatarColor, SwirlAvatarLoading, SwirlAvatarSize, SwirlAvatarToolPosition, SwirlAvatarVariant } from "./components/swirl-avatar/swirl-avatar";
export { SwirlBadgeIntent, SwirlBadgeSize, SwirlBadgeVariant } from "./components/swirl-badge/swirl-badge";
export { SwirlBannerAriaRole, SwirlBannerIntent, SwirlBannerSize } from "./components/swirl-banner/swirl-banner";
export { SwirlBoxOverflow, SwirlBoxPadding, SwirlBoxPosition } from "./components/swirl-box/swirl-box";
export { SwirlButtonIconPosition, SwirlButtonIntent, SwirlButtonSize, SwirlButtonTextAlign, SwirlButtonType, SwirlButtonVariant } from "./components/swirl-button/swirl-button";
export { SwirlButtonGroupOrientation } from "./components/swirl-button-group/swirl-button-group";
export { SwirlCardBorderRadius, SwirlCardElevationLevel, SwirlCardIntent, SwirlCardJustifyContent, SwirlCardOverflow, SwirlCardPadding } from "./components/swirl-card/swirl-card";
export { SwirlCheckboxLabelWeight, SwirlCheckboxState, SwirlCheckboxVariant } from "./components/swirl-checkbox/swirl-checkbox";
export { SwirlChipBorderRadius, SwirlChipIconColor, SwirlChipIntent, SwirlChipSize, SwirlChipVariant } from "./components/swirl-chip/swirl-chip";
export { SwirlColumnsSpacing } from "./components/swirl-columns/swirl-columns";
export { WCDatepickerLabels } from "wc-datepicker/dist/types/components/wc-datepicker/wc-datepicker";
export { SwirlDialogIntent } from "./components/swirl-dialog/swirl-dialog";
export { SwirlEmojiSize } from "./components/swirl-emoji/swirl-emoji.types";
export { SwirlButtonVariant as SwirlButtonVariant1 } from "./components/swirl-button/swirl-button";
export { SwirlFileViewerPdfViewMode, SwirlFileViewerPdfZoom } from "./components/swirl-file-viewer/viewers/swirl-file-viewer-pdf/swirl-file-viewer-pdf";
export { SwirlFileViewerPdfViewMode as SwirlFileViewerPdfViewMode1, SwirlFileViewerPdfZoom as SwirlFileViewerPdfZoom1 } from "./components/swirl-file-viewer/viewers/swirl-file-viewer-pdf/swirl-file-viewer-pdf";
export { SwirlFormControlLabelPosition } from "./components/swirl-form-control/swirl-form-control";
export { SwirlFormGroupOrientation } from "./components/swirl-form-group/swirl-form-group";
export { SwirlHeadingAlign, SwirlHeadingLevel as SwirlHeadingLevel1, SwirlHeadingTag } from "./components/swirl-heading/swirl-heading";
export { SwirlIconColor } from "./components/swirl-icon/swirl-icon";
export { SwirlIconSize } from "./components/swirl-icon/swirl-icon.types";
export { SwirlIconColor as SwirlIconColor1 } from "./components/swirl-icon/swirl-icon";
export { SwirlImageGridItemLoading } from "./components/swirl-image-grid-item/swirl-image-grid-item";
export { SwirlInlineErrorSize } from "./components/swirl-inline-error/swirl-inline-error";
export { SwirlInlineNotificationAriaRole, SwirlInlineNotificationIntent } from "./components/swirl-inline-notification/swirl-inline-notification";
export { SwirlInlineStatusIntent, SwirlInlineStatusSize } from "./components/swirl-inline-status/swirl-inline-status";
export { SwirlLinkColor, SwirlLinkTarget } from "./components/swirl-link/swirl-link";
export { SwirlMenuVariant } from "./components/swirl-menu/swirl-menu";
export { SwirlActionListItemIntent as SwirlActionListItemIntent1 } from "./components/swirl-action-list-item/swirl-action-list-item";
export { SwirlModalVariant } from "./components/swirl-modal/swirl-modal";
export { SwirlOptionListItemContext, SwirlOptionListItemRole } from "./components/swirl-option-list-item/swirl-option-list-item";
export { SwirlPaginationVariant } from "./components/swirl-pagination/swirl-pagination";
export { SwirlPopoverAnimation } from "./components/swirl-popover/swirl-popover";
export { ComputePositionReturn, Placement, Strategy } from "@floating-ui/dom";
export { SwirlProgressIndicatorSize, SwirlProgressIndicatorVariant } from "./components/swirl-progress-indicator/swirl-progress-indicator";
export { SwirlRadioState, SwirlRadioVariant } from "./components/swirl-radio/swirl-radio";
export { SwirlResourceListItemLabelWeight } from "./components/swirl-resource-list-item/swirl-resource-list-item";
export { SwirlSearchVariant } from "./components/swirl-search/swirl-search";
export { SwirlSeparatorBorderColor, SwirlSeparatorOrientation, SwirlSeparatorSpacing } from "./components/swirl-separator/swirl-separator";
export { SwirlSkeletonBoxBorderRadius } from "./components/swirl-skeleton-box/swirl-skeleton-box";
export { SwirlSkeletonTextSize } from "./components/swirl-skeleton-text/swirl-skeleton-text";
export { SwirlSpinnerSize } from "./components/swirl-spinner/swirl-spinner";
export { SwirlStackAlign, SwirlStackJustify, SwirlStackOrientation, SwirlStackSpacing } from "./components/swirl-stack/swirl-stack";
export { SwirlStatusIndicatorIntent } from "./components/swirl-status-indicator/swirl-status-indicator";
export { SwirlSwitchLabelPosition } from "./components/swirl-switch/swirl-switch";
export { SwirlSymbolSize } from "./components/swirl-symbol/swirl-symbol.types";
export { SwirlTabPadding } from "./components/swirl-tab/swirl-tab";
export { SwirlTabBarTab } from "./components/swirl-tab-bar/swirl-tab-bar";
export { SwirlTableColumnSort } from "./components/swirl-table-column/swirl-table-column";
export { SwirlTagIntent, SwirlTagSize } from "./components/swirl-tag/swirl-tag";
export { SwirlTextAlign, SwirlTextColor, SwirlTextFontFamily, SwirlTextFontStyle, SwirlTextSize, SwirlTextTruncateDirection, SwirlTextWeight, SwirlTextWhiteSpace } from "./components/swirl-text/swirl-text";
export { SwirlTextInputMode as SwirlTextInputMode1, SwirlTextInputType } from "./components/swirl-text-input/swirl-text-input";
export { SwirlOSTheme, SwirlOSThemeChangeEventData, SwirlThemeProviderConfig } from "./components/swirl-theme-provider/swirl-theme-provider.types";
export { SwirlThumbnailFormat, SwirlThumbnailSize } from "./components/swirl-thumbnail/swirl-thumbnail";
export { SwirlToastIntent } from "./components/swirl-toast/swirl-toast";
export { SwirlToastConfig, SwirlToastMessage } from "./components/swirl-toast-provider/swirl-toast-provider";
export { SwirlToolbarOrientation } from "./components/swirl-toolbar/swirl-toolbar";
export { SwirlTooltipPosition } from "./components/swirl-tooltip/swirl-tooltip";
export namespace Components {
    interface FileManager {
    }
    interface SwirlAccordion {
        /**
          * Collapses an accordion item.
         */
        "collapseItem": (itemId: string) => Promise<void>;
        /**
          * Expands an accordion item.
         */
        "expandItem": (itemId: string) => Promise<void>;
    }
    interface SwirlAccordionItem {
        /**
          * Collapses the accordion item.
         */
        "collapse": () => Promise<void>;
        "description"?: string;
        "disabled"?: boolean;
        /**
          * Expands the accordion item.
         */
        "expand": () => Promise<void>;
        "heading": string;
        "headingLevel"?: SwirlHeadingLevel;
        "initiallyOpen"?: boolean;
        "itemId"?: string;
        /**
          * Toggles the accordion item.
         */
        "toggle": () => Promise<void>;
    }
    interface SwirlActionList {
    }
    interface SwirlActionListItem {
        "badge"?: string;
        "description"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "intent"?: SwirlActionListItemIntent;
        "label": string;
        "size"?: SwirlActionListItemSize;
        "suffix"?: string;
        "swirlAriaExpanded"?: string;
        "swirlAriaHaspopup"?: string;
    }
    interface SwirlActionListSection {
        "label": string;
    }
    interface SwirlAppBar {
        "backButtonLabel"?: string;
        "closeButtonIcon"?: string;
        "closeButtonLabel"?: string;
        "showBackButton"?: boolean;
        "showCloseButton"?: boolean;
        "showStepperControls"?: boolean;
        "stepDownButtonLabel"?: string;
        "stepUpButtonLabel"?: string;
    }
    interface SwirlAppIcon {
        "icon"?: string;
        "src"?: string;
    }
    interface SwirlAppLayout {
        "appName": string;
        "backToNavigationViewButtonLabel"?: string;
        /**
          * Change the currently displayed view on mobile viewports
          * @param mobileView
         */
        "changeMobileView": (mobileView: SwirlAppLayoutMobileView, transition?: boolean) => Promise<void>;
        "ctaIcon"?: string;
        "ctaLabel"?: string;
        "hasNavigation": boolean;
        "hideAppBar"?: boolean;
        /**
          * Hide the sidebar
         */
        "hideSidebar": () => Promise<void>;
        "navigationBackButtonLabel"?: string;
        "navigationLabel"?: string;
        "showNavigationBackButton"?: boolean;
        /**
          * Show the sidebar
         */
        "showSidebar": () => Promise<void>;
        "sidebarCloseButtonLabel"?: string;
        "sidebarHeading"?: string;
        /**
          * Toggle the sidebar
         */
        "toggleSidebar": () => Promise<void>;
        "transitionStyle"?: string;
    }
    interface SwirlAutocomplete {
        "autoSelect"?: boolean;
        "clearButtonLabel"?: string;
        "clearable"?: boolean;
        "disabled"?: boolean;
        "generateSuggestions"?: (
    term: string
  ) => Promise<SwirlAutocompleteSuggestion[]>;
        "inline"?: boolean;
        "invalid"?: boolean;
        "maxLength"?: number;
        "menuLabel"?: string;
        "mode"?: SwirlTextInputMode;
        "multiSelect"?: boolean;
        "placeholder"?: string;
        "required"?: boolean;
        "spellCheck"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: SwirlAutocompleteValue;
    }
    interface SwirlAvatar {
        "badge"?: string;
        "badgePosition"?: SwirlAvatarBadgePosition;
        "color"?: SwirlAvatarColor;
        "icon"?: string;
        "initials"?: string;
        "interactive"?: boolean;
        "label": string;
        "loading"?: SwirlAvatarLoading;
        "showLabel"?: boolean;
        "size"?: SwirlAvatarSize;
        "src"?: string;
        "toolPosition"?: SwirlAvatarToolPosition;
        "variant"?: SwirlAvatarVariant;
    }
    interface SwirlAvatarGroup {
        "badge"?: string;
    }
    interface SwirlBadge {
        "icon"?: string;
        "intent"?: SwirlBadgeIntent;
        "label": string;
        "size"?: SwirlBadgeSize;
        "variant"?: SwirlBadgeVariant;
    }
    interface SwirlBanner {
        "actionLabel"?: string;
        "content": string;
        "dismissLabel"?: string;
        "dismissable"?: boolean;
        "importance"?: SwirlBannerAriaRole;
        "intent"?: SwirlBannerIntent;
        "showIcon"?: boolean;
        "size"?: SwirlBannerSize;
    }
    interface SwirlBox {
        "basis"?: string;
        "bordered"?: boolean;
        "borderedBlockEnd"?: boolean;
        "borderedBlockStart"?: boolean;
        "borderedInlineEnd"?: boolean;
        "borderedInlineStart"?: boolean;
        "bottom"?: string;
        "centerBlock"?: boolean;
        "centerInline"?: boolean;
        "cover"?: boolean;
        "grow"?: string;
        "height"?: string;
        "left"?: string;
        "maxHeight"?: string;
        "maxWidth"?: string;
        "minHeight"?: string;
        "minWidth"?: string;
        "overflow"?: SwirlBoxOverflow;
        "padding"?: SwirlBoxPadding;
        "paddingBlockEnd"?: SwirlBoxPadding;
        "paddingBlockStart"?: SwirlBoxPadding;
        "paddingInlineEnd"?: SwirlBoxPadding;
        "paddingInlineStart"?: SwirlBoxPadding;
        "position"?: SwirlBoxPosition;
        "right"?: string;
        "shrink"?: string;
        "top"?: string;
        "width"?: string;
        "zIndex"?: string;
    }
    interface SwirlButton {
        "disabled"?: boolean;
        "download"?: string;
        "form"?: string;
        "hideLabel"?: boolean;
        "href"?: string;
        "icon"?: string;
        "iconPosition": SwirlButtonIconPosition;
        "intent"?: SwirlButtonIntent;
        "label": string;
        "name"?: string;
        "pill"?: boolean;
        "pressed"?: boolean;
        "size"?: SwirlButtonSize;
        "swirlAriaControls"?: string;
        "swirlAriaCurrent"?: string;
        "swirlAriaDescribedby"?: string;
        "swirlAriaExpanded"?: string;
        "swirlAriaHaspopup"?: string;
        "swirlAriaLabel"?: string;
        "target"?: string;
        "textAlign"?: SwirlButtonTextAlign;
        "type"?: SwirlButtonType;
        "value"?: string;
        "variant"?: SwirlButtonVariant;
    }
    interface SwirlButtonGroup {
        "orientation"?: SwirlButtonGroupOrientation;
        "segmented"?: boolean;
        "stretch"?: boolean;
        "wrap"?: boolean;
    }
    interface SwirlCard {
        "as"?: string;
        "borderRadius"?: SwirlCardBorderRadius;
        "customBackgroundColor"?: string;
        "elevated"?: boolean;
        "elevationLevel"?: SwirlCardElevationLevel;
        /**
          * Flashes the card to draw focus.
         */
        "flash": (duration?: number) => Promise<void>;
        "height"?: string;
        "highlighted"?: boolean;
        "href"?: string;
        "imageAspectRatio"?: string;
        "intent"?: SwirlCardIntent;
        "interactive"?: boolean;
        "isBorderless"?: boolean;
        "justifyContent"?: SwirlCardJustifyContent;
        "linkTarget"?: string;
        "overflow"?: SwirlCardOverflow;
        "padding"?: SwirlCardPadding;
        "paddingBlockEnd"?: SwirlCardPadding;
        "paddingBlockStart"?: SwirlCardPadding;
        "paddingInlineEnd"?: SwirlCardPadding;
        "paddingInlineStart"?: SwirlCardPadding;
        "swirlAriaLabel"?: string;
        "swirlAriaLabelledby"?: string;
    }
    /**
     * slot - The slides
     */
    interface SwirlCarousel {
        "label": string;
        "loopAround"?: boolean;
        "nextSlideButtonLabel"?: string;
        "previousSlideButtonLabel"?: string;
        /**
          * Scroll to slide with id.
         */
        "scrollToSlide": (id: string) => Promise<void>;
    }
    /**
     * slot - The slide contents
     */
    interface SwirlCarouselSlide {
        "label"?: string;
        "minHeight"?: string;
        "width"?: string;
    }
    interface SwirlCheckbox {
        "checked"?: SwirlCheckboxState;
        "description"?: string;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "labelWeight"?: SwirlCheckboxLabelWeight;
        "swirlAriaDescribedby"?: string;
        "swirlAriaLabel"?: string;
        "value"?: string;
        "variant"?: SwirlCheckboxVariant;
    }
    interface SwirlChip {
        "borderRadius"?: SwirlChipBorderRadius;
        "icon"?: string;
        "iconColor"?: SwirlChipIconColor;
        "intent"?: SwirlChipIntent;
        "interactive"?: boolean;
        "label": string;
        "pressed"?: boolean;
        "progress"?: number;
        "progressBarLabel"?: string;
        "removable"?: boolean;
        "removeButtonLabel"?: string;
        "size"?: SwirlChipSize;
        "variant"?: SwirlChipVariant;
    }
    interface SwirlColorInput {
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "disabled"?: boolean;
        "inline"?: boolean;
        "invalid"?: boolean;
        "pickerButtonLabel"?: string;
        "pickerLabel"?: string;
        "placeholder"?: string;
        "required"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlColumns {
        "columns"?: string;
        "spacing"?: SwirlColumnsSpacing;
    }
    interface SwirlConsoleLayout {
        "appName"?: string;
        "backButonLabel"?: string;
        "heading"?: string;
        "helpButonLabel"?: string;
        "hideNavigationButtonLabel"?: string;
        /**
          * Hide the mobile navigation.
         */
        "hideSidebar": () => Promise<void>;
        "logoText"?: string;
        "maxContentWidth"?: string;
        "navigationLabel"?: string;
        "showBackButton"?: boolean;
        "showHelpButton"?: boolean;
        "showNavigationButtonLabel"?: string;
        /**
          * Show the mobile navigation.
         */
        "showSidebar": () => Promise<void>;
        "subheading"?: string;
        /**
          * Toggle the mobile navigation visibility.
         */
        "toggleSidebar": () => Promise<void>;
    }
    interface SwirlDateInput {
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "datePickerDisableDate"?: (date: Date) => boolean;
        "datePickerLabel"?: string;
        "datePickerTriggerLabel"?: string;
        "disabled"?: boolean;
        "firstDayOfWeek"?: number;
        "format"?: string;
        "inline"?: boolean;
        "invalid"?: boolean;
        "labels"?: WCDatepickerLabels;
        "locale"?: string;
        "placeholder"?: string;
        "preferredInputMode"?: "input" | "pick";
        "required"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlDatePicker {
        "disableDate"?: (date: Date) => boolean;
        "firstDayOfWeek"?: number;
        "labels"?: WCDatepickerLabels;
        "locale"?: string;
        "range"?: boolean;
        "startDate"?: Date;
        "value"?: Date | Date[];
    }
    interface SwirlDescriptionList {
    }
    interface SwirlDescriptionListItem {
        "bordered"?: boolean;
        "maxWidth"?: string;
        "term": string;
        "tooltip"?: string;
    }
    interface SwirlDialog {
        /**
          * Close the dialog.
         */
        "close": () => Promise<void>;
        "hideLabel"?: boolean;
        "intent"?: SwirlDialogIntent;
        "label": string;
        /**
          * Open the dialog.
         */
        "open": () => Promise<void>;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
    }
    interface SwirlEmoji {
        "label"?: string;
        "name": string;
        "size": SwirlEmojiSize;
    }
    interface SwirlEmojiClap {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmojiHappy {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmojiIdea {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmojiLove {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmojiSad {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmojiThumbsUp {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmptyState {
        "heading"?: string;
        "illustration"?: string;
    }
    interface SwirlFileUploader {
        "accept"?: string;
        "ctaLabel"?: string;
        "description"?: string;
        "disabled"?: boolean;
        "dragDropLabel"?: string;
        "inputId": string;
        "inputName": string;
        "label": string;
        "multiple"?: boolean;
        /**
          * Reset the file input.
         */
        "reset": () => Promise<void>;
        "showDropzone"?: boolean;
        "uploadButtonIcon"?: string;
        "uploadButtonLabel"?: string;
        "uploadButtonVariant"?: SwirlButtonVariant1;
    }
    interface SwirlFileViewer {
        "active"?: boolean;
        "autoplay"?: boolean;
        "description"?: string;
        /**
          * Download the file.
         */
        "download": () => Promise<void>;
        "errorMessage"?: string;
        "file": string;
        "fileName"?: string;
        "pdfWorkerSrc"?: string;
        /**
          * Print the file. Applicable to PDFs only.
         */
        "print": () => Promise<void>;
        "thumbnailUrl"?: string;
        "type": string;
        "typeUnsupportedMessage"?: string;
        "viewMode"?: SwirlFileViewerPdfViewMode;
        "zoom"?: SwirlFileViewerPdfZoom;
    }
    interface SwirlFileViewerAudio {
        "autoplay"?: boolean;
        "file": string;
        "type": string;
    }
    interface SwirlFileViewerCsv {
        "errorMessage"?: string;
        "file": string;
    }
    interface SwirlFileViewerImage {
        "description"?: string;
        "errorMessage"?: string;
        "file": string;
        /**
          * Get the current zoom.
          * @returns
         */
        "getZoom": () => Promise<number>;
        "maxZoom"?: number;
        /**
          * Resets the zoom.
          * @returns
         */
        "resetZoom": () => Promise<void>;
    }
    interface SwirlFileViewerPdf {
        "errorMessage"?: string;
        "file": string;
        /**
          * Get thumbnails of all pages.
         */
        "getThumbnails": () => Promise<HTMLCanvasElement[]>;
        /**
          * Navigate to next page, if single page mode is enabled.
         */
        "nextPage": () => Promise<void>;
        /**
          * Navigate to previous page, if single page mode is enabled.
         */
        "previousPage": () => Promise<void>;
        /**
          * Print the file.
         */
        "print": () => Promise<void>;
        /**
          * Navigate to specific page, if single page mode is enabled.
         */
        "setPage": (page: number) => Promise<void>;
        "singlePageMode": boolean;
        "viewMode"?: SwirlFileViewerPdfViewMode1;
        "workerSrc"?: string;
        "zoom"?: SwirlFileViewerPdfZoom1;
    }
    interface SwirlFileViewerText {
        "errorMessage"?: string;
        "file": string;
    }
    interface SwirlFileViewerVideo {
        "autoplay"?: boolean;
        "file": string;
        "type": string;
    }
    interface SwirlFormControl {
        "description"?: string;
        "disabled"?: boolean;
        "errorMessage"?: string;
        "hideLabel"?: boolean;
        "inline"?: boolean;
        "invalid"?: boolean;
        "label": string;
        "labelPosition"?: SwirlFormControlLabelPosition;
        "tooltip"?: string;
    }
    interface SwirlFormGroup {
        "orientation": SwirlFormGroupOrientation;
    }
    interface SwirlHeading {
        "align"?: SwirlHeadingAlign;
        "as"?: SwirlHeadingTag;
        "balance"?: boolean;
        "headingId"?: string;
        "level"?: SwirlHeadingLevel1;
        "lines"?: number;
        "text": string;
        "truncate"?: boolean;
    }
    interface SwirlIcon {
        "color"?: SwirlIconColor;
        "glyph": string;
        "size": SwirlIconSize;
    }
    interface SwirlIconAdd {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconAddModerator {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconAddPhoto {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconAddReaction {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconAdminPanelSettings {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconAi {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconApps {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowBack {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowDownward {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowForward {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowLeft {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowRight {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowRightSmall {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconArrowUpward {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconAttachment {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconBarChart {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconBlock {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconBookmark {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconBookmarkFilled {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconCancel {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconChatBubble {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconChats {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconChatsFilled {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconCheck {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconCheckCircle {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconCheckSmall {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconCheckStrong {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconChevronLeft {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconChevronRight {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconClose {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconCloseSmall {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconCloudUpload {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconColumn {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconComment {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconCopy {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDarkMode {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDateRange {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDelete {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDescription {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDesktop {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDirectory {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDirectoryFilled {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDiscover {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDockLeft {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDot {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDoubleArrowLeft {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDoubleArrowRight {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDownload {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconDragHandle {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconEdit {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconEmojiMood {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconEmojiSatisfied {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconError {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconExpandLess {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconExpandMore {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconFile {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconFileCopy {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconFilter {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconFolder {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconFolderShared {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconFormatHOne {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconFullscreen {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconFullscreenExit {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconGif {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconGroupAdd {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconGroupAssign {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconGroups {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconGroupsFilled {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconHamburgerMenu {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconHelp {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconHighlight {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconHome {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconImage {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconImproveText {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconInfo {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconInsertBelow {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconInsertOnTop {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconInventory {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconKeyboardHide {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconLightMode {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconLike {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconLink {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconLoad {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconLock {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconLockOpen {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconLockPerson {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconLogin {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconLogout {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconLongText {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconMail {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconManageAccounts {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconMarkChatRead {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconMarkChatUnread {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconMention {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconMenu {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconMenuBook {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconMenuFilled {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconMessage {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconMic {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconMoreHorizontal {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconMoreVertikal {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconNews {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconNewsFilled {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconNewsOff {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconNotifications {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconNotificationsActive {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconNotificationsOff {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconOpenInFull {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconOpenInNew {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconPause {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconPauseCircle {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconPeopleAlt {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconPerson {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconPersonOff {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconPhone {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconPhotoCamera {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconPlace {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconPlayArrow {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconPoll {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconPrint {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconRecieved {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconRemove {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconRemoveModerator {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconReply {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconReport {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconRoadmap {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconSearch {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconSearchStrong {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconSecure {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconSend {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconSettings {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconShortText {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconSimplify {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconSpellcheck {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconStop {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconSync {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconTasks {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconTasksFilled {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconTerminal {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconTime {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconTimeFilled {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconToday {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconTodayFilled {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconTranslate {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconTreeStructure {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconUndo {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconUnlockPerson {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconUserAdd {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconUserAssign {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconVideoCamera {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconVideoLibrary {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconVisibility {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconVisibilityOff {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconVoice {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconWarning {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlIconWork {
        "color"?: SwirlIconColor1;
        "size": SwirlIconSize;
    }
    interface SwirlImageGrid {
        "aspectRatio"?: string;
        "label"?: string;
    }
    interface SwirlImageGridItem {
        "alt": string;
        "icon"?: string;
        "interactive"?: boolean;
        "loading"?: SwirlImageGridItemLoading;
        "overlay"?: string;
        "src": string;
    }
    interface SwirlInlineError {
        "message": string;
        "size"?: SwirlInlineErrorSize;
    }
    interface SwirlInlineNotification {
        "heading": string;
        "importance"?: SwirlInlineNotificationAriaRole;
        "intent"?: SwirlInlineNotificationIntent;
    }
    interface SwirlInlineStatus {
        "icon"?: string;
        "intent": SwirlInlineStatusIntent;
        "message": string;
        "size"?: SwirlInlineStatusSize;
    }
    interface SwirlLightbox {
        /**
          * Activate a slide.
          * @param newActiveSlideIndex
         */
        "activateSlide": (newActiveSlideIndex: number) => Promise<void>;
        /**
          * Close the lightbox.
         */
        "close": () => Promise<void>;
        "closeButtonLabel"?: string;
        "downloadButtonEnabled"?: boolean;
        "downloadButtonLabel"?: string;
        "hideMenu"?: boolean;
        "label": string;
        "menuLabel"?: string;
        "menuTriggerLabel"?: string;
        "nextSlideButtonLabel"?: string;
        /**
          * Open the lightbox.
         */
        "open": () => Promise<void>;
        "previousSlideButtonLabel"?: string;
    }
    interface SwirlLink {
        "color"?: SwirlLinkColor;
        "href": string;
        "label": string;
        "target"?: SwirlLinkTarget;
    }
    interface SwirlList {
    }
    interface SwirlMenu {
        /**
          * Activate a menu item with a sub menu. Only callable on a root menu.
          * @returns
         */
        "activateMenuItem": (menuItem: HTMLSwirlMenuItemElement) => Promise<void>;
        "active"?: boolean;
        /**
          * Close and reset the menu. Only callable on a root menu.
          * @returns
         */
        "close": () => Promise<void>;
        /**
          * Focus the first menu item.
          * @returns
         */
        "focusFirstItem": () => Promise<void>;
        /**
          * Focus the menu item at index.
          * @returns
         */
        "focusItemAtIndex": (index: number) => Promise<void>;
        /**
          * Collapse the currently active sub menu. Only callable on a root menu.
          * @returns
         */
        "goBack": () => Promise<void>;
        "label": string;
        "level"?: number;
        "mobileBackButtonLabel"?: string;
        "mobileCloseMenuButtonLabel"?: string;
        "mobileDoneButtonLabel"?: string;
        /**
          * Update the selection of a menu with variant "selection".
          * @returns
         */
        "updateSelection": (item: HTMLSwirlOptionListItemElement) => Promise<void>;
        "value"?: string;
        "variant"?: SwirlMenuVariant;
    }
    interface SwirlMenuItem {
        "description"?: string;
        "disabled"?: boolean;
        "expanded"?: boolean;
        /**
          * Get the items parent menu
         */
        "getParentMenu": () => Promise<HTMLSwirlMenuElement>;
        /**
          * Get the items sub menu
         */
        "getSubMenu": () => Promise<HTMLSwirlMenuElement>;
        "icon"?: string;
        "intent"?: SwirlActionListItemIntent1;
        "label": string;
        "suffix"?: string;
        "value"?: string;
    }
    interface SwirlModal {
        "closable"?: boolean;
        /**
          * Close the modal. Pass `true` to force close even if the modal is not closable.
         */
        "close": (force?: boolean) => Promise<void>;
        "closeButtonLabel"?: string;
        "height"?: string;
        "hideCloseButton"?: boolean;
        "hideLabel"?: boolean;
        "label": string;
        "maxHeight"?: string;
        "maxWidth"?: string;
        /**
          * Open the modal.
         */
        "open": () => Promise<void>;
        "padded"?: boolean;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
        "variant"?: SwirlModalVariant;
    }
    interface SwirlOptionList {
        "allowDeselect"?: boolean;
        "allowDrag"?: boolean;
        "assistiveTextItemGrabbed"?: string;
        "assistiveTextItemMoved"?: string;
        "assistiveTextItemMoving"?: string;
        "disabled"?: boolean;
        "label"?: string;
        "multiSelect"?: boolean;
        "optionListId"?: string;
        "value"?: string[];
    }
    interface SwirlOptionListItem {
        "allowDrag"?: boolean;
        "context"?: SwirlOptionListItemContext;
        "description"?: string;
        "disabled"?: boolean;
        "dragHandleDescription"?: string;
        "dragHandleLabel"?: string;
        "dragging"?: boolean;
        "icon"?: string;
        "label": string;
        "selected"?: boolean;
        "swirlAriaRole"?: SwirlOptionListItemRole;
        "value": string;
    }
    interface SwirlOptionListSection {
        "label": string;
    }
    interface SwirlPagination {
        "firstPageButtonLabel"?: string;
        "label": string;
        "lastPageButtonLabel"?: string;
        "nextButtonLabel"?: string;
        "page": number;
        "pageLabel"?: string;
        "pageSelectLabel"?: string;
        "pageSize"?: number;
        "pageSizeOptions"?: number[];
        "pageSizeSelectLabel"?: string;
        "pages": number;
        "prevButtonLabel"?: string;
        "showPageSizeSelect"?: boolean;
        "variant"?: SwirlPaginationVariant;
    }
    interface SwirlPdfReader {
        "autoZoomLabel"?: string;
        /**
          * Close the reader.
         */
        "close": () => Promise<void>;
        "closeButtonLabel"?: string;
        "downloadButtonEnabled"?: boolean;
        "downloadButtonLabel"?: string;
        "file": string;
        "fileName"?: string;
        "fileTypeLabel"?: string;
        "label": string;
        "menuLabel"?: string;
        "menuTriggerLabel"?: string;
        /**
          * Open the reader.
         */
        "open": () => Promise<void>;
        "pdfWorkerSrc"?: string;
        "printButtonEnabled"?: boolean;
        "printButtonLabel"?: string;
        "sideBySideButtonLabel"?: string;
        "thumbnailButtonLabel"?: string;
        "thumbnailsButtonLabel"?: string;
        "thumbnailsLabel"?: string;
        "zoomInButtonLabel"?: string;
        "zoomOutButtonLabel"?: string;
        "zoomSelectLabel"?: string;
    }
    interface SwirlPopover {
        "animation"?: SwirlPopoverAnimation;
        /**
          * Close the popover.
          * @returns
         */
        "close": (disableFocus?: boolean) => Promise<void>;
        "disableScrollLock"?: boolean;
        "enableFlip"?: boolean;
        "fullscreenBottomSheet"?: boolean;
        "label": string;
        "maxHeight"?: string;
        "offset"?: number | number[];
        /**
          * Open the popover.
          * @returns
         */
        "open": (triggerEl?: HTMLElement, disableFocus?: boolean) => Promise<void>;
        "placement"?: Placement;
        "popoverId"?: string;
        "returnFocusToTrigger"?: boolean;
        "transparent"?: boolean;
        "trigger"?: string | HTMLElement;
        "triggerContainer"?: HTMLElement;
        "useContainerWidth"?: boolean | string;
    }
    interface SwirlPopoverTrigger {
        "hidePopoverWhenInvisible"?: boolean;
        "parentScrollContainer"?: HTMLElement;
        "setAriaAttributes"?: boolean;
        "swirlPopover": string | HTMLSwirlPopoverElement;
        "triggerOnHover"?: boolean;
    }
    interface SwirlProgressIndicator {
        "label": string;
        "size"?: SwirlProgressIndicatorSize;
        "value"?: number;
        "variant"?: SwirlProgressIndicatorVariant;
    }
    interface SwirlRadio {
        "checked"?: SwirlRadioState;
        "description"?: string;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "value": string;
        "variant"?: SwirlRadioVariant;
    }
    interface SwirlRadioGroup {
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlResourceList {
        "allowDrag"?: boolean;
        "assistiveTextItemGrabbed"?: string;
        "assistiveTextItemMoved"?: string;
        "assistiveTextItemMoving"?: string;
        "controllingElement"?: HTMLElement;
        "label"?: string;
    }
    interface SwirlResourceListFileItem {
        "description"?: string;
        "errorMessage"?: string;
        "icon"?: string;
        "label": string;
        "loading": boolean;
        "removable"?: boolean;
        "removeButtonLabel"?: string;
    }
    interface SwirlResourceListItem {
        "active"?: boolean;
        "allowDrag"?: boolean;
        "allowHtml"?: boolean;
        "checked"?: boolean;
        "compact"?: boolean;
        "description"?: string;
        "descriptionWrap"?: boolean;
        "disabled"?: boolean;
        "dragHandleDescription"?: string;
        "dragHandleLabel"?: string;
        "dragging"?: boolean;
        "hideDivider"?: boolean;
        "href"?: string;
        "interactive"?: boolean;
        "label": string;
        "labelWeight"?: SwirlResourceListItemLabelWeight;
        "labelWrap"?: boolean;
        "menuTriggerId"?: string;
        "menuTriggerLabel"?: string;
        "meta"?: string;
        "selectable"?: boolean;
        "value"?: string;
    }
    interface SwirlSearch {
        "autoFocus"?: boolean;
        "clearButtonLabel"?: string;
        "disabled"?: boolean;
        "inputId"?: string;
        "inputName"?: string;
        "label"?: string;
        "placeholder"?: string;
        "value"?: string;
        "variant"?: SwirlSearchVariant;
    }
    interface SwirlSelect {
        "allowDeselect"?: boolean;
        "disabled"?: boolean;
        "emptyListLabel"?: string;
        "inline"?: boolean;
        "invalid"?: boolean;
        "label": string;
        "multiSelect"?: boolean;
        "required"?: boolean;
        "searchInputLabel"?: string;
        "searchLoading"?: boolean;
        "searchPlaceholder"?: string;
        "selectId"?: string;
        "swirlAriaDescribedby"?: string;
        "value"?: string[];
        "withSearch"?: boolean;
    }
    interface SwirlSeparator {
        "borderColor"?: SwirlSeparatorBorderColor;
        "orientation"?: SwirlSeparatorOrientation;
        "spacing"?: SwirlSeparatorSpacing;
    }
    interface SwirlShellLayout {
        "brandedHeader"?: boolean;
        "browserBackButtonLabel"?: string;
        "browserForwardButtonLabel"?: string;
        /**
          * Hides the mobile navigation.
         */
        "hideMobileNavigation": () => Promise<void>;
        "hideMobileNavigationButtonLabel"?: string;
        "navigationLabel"?: string;
        "navigationToggleLabel"?: string;
        /**
          * Opens the mobile navigation.
         */
        "showMobileNavigation": () => Promise<void>;
        "sidebarActive"?: boolean;
        "sidebarToggleBadge"?: string | boolean;
        "sidebarToggleBadgeAriaLabel"?: string;
        "sidebarToggleIcon"?: string;
        "sidebarToggleLabel"?: string;
        "skipLinkLabel"?: string;
    }
    interface SwirlShellNavigationItem {
        "active"?: boolean;
        "badgeLabel"?: string;
        "boxed"?: boolean;
        "href"?: string;
        "label": string;
        "target"?: string;
    }
    interface SwirlSkeletonBox {
        "animated"?: boolean;
        "aspectRatio"?: string;
        "borderRadius"?: SwirlSkeletonBoxBorderRadius;
        "height"?: string;
        "width"?: string;
    }
    interface SwirlSkeletonText {
        "animated"?: boolean;
        "lines"?: number;
        "size"?: SwirlSkeletonTextSize;
    }
    interface SwirlSpinner {
        "label"?: string;
        "size"?: SwirlSpinnerSize;
    }
    interface SwirlStack {
        "align"?: SwirlStackAlign;
        "as"?: string;
        "height"?: string;
        "justify"?: SwirlStackJustify;
        "orientation"?: SwirlStackOrientation;
        "spacing"?: SwirlStackSpacing;
        "wrap"?: boolean;
    }
    interface SwirlStatusIndicator {
        "intent": SwirlStatusIndicatorIntent;
        "label": string;
    }
    interface SwirlSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "hideLabel"?: boolean;
        "inputId": string;
        "inputName": string;
        "label"?: string;
        "labelPosition"?: SwirlSwitchLabelPosition;
        "value"?: string;
    }
    interface SwirlSymbol {
        "glyph": string;
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolAccountCircle {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolAlternateEmail {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolAndroid {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolAnnouncement {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolBackup {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolBeachAccess {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolBookmark {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolCloud {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolCoronavirus {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolDesktopWindows {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolDirectionsCarFilled {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolEditCalendar {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolEmail {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolEmojiFoodBeverage {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolEventMenu {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolFacebook {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolFavorite {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolFitnessCenter {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolFlag {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolFolder {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolGlobe {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolGroups {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolHelp {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolImage {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolInfoMenu {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolInstagram {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolIos {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolLanguage {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolLeaderboard {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolLightbulb {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolLinkedin {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolLocationOn {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolLoyalty {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolMapsHomeWork {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolNotifications {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolOpenInNew {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolPedalBike {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolPinterest {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolPolicy {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolPushPin {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolRedeem {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolReportProblem {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolRestaurant {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolRoadmap {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolRoom {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolSavings {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolSettingsVoice {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolShoppingCart {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolSmartphone {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolStar {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolSupervisorAccount {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolThumbsUpDown {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolTwitter {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolWbSunny {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolWechat {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolWeibo {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolWork {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolXing {
        "size": SwirlSymbolSize;
    }
    interface SwirlSymbolYoutube {
        "size": SwirlSymbolSize;
    }
    interface SwirlTab {
        "active"?: boolean;
        "icon"?: string;
        "label": string;
        "padding"?: SwirlTabPadding;
        "tabId": string;
    }
    interface SwirlTabBar {
        "disableTabSemantics"?: boolean;
        "label": string;
        "tabs": SwirlTabBarTab[];
    }
    interface SwirlTable {
        "caption"?: string;
        "emptyStateLabel"?: string;
        "label": string;
        /**
          * Force a re-render of the table
         */
        "rerender": () => Promise<void>;
    }
    interface SwirlTableCell {
    }
    interface SwirlTableColumn {
        "maxWidth"?: string;
        "minWidth"?: string;
        "sort"?: SwirlTableColumnSort;
        "sortable"?: boolean;
        "sticky"?: boolean;
        "width"?: string;
    }
    interface SwirlTableRow {
        "highlighted"?: boolean;
        "index"?: number;
    }
    interface SwirlTableRowGroup {
        "collapseButtonLabel"?: string;
        "collapsible"?: boolean;
        "label": string;
        "tooltip"?: string;
    }
    interface SwirlTabs {
        /**
          * Activate a tab.
          * @param tabId
         */
        "activateTab": (tabId: string) => Promise<void>;
        "initialTab"?: string;
        "label": string;
    }
    interface SwirlTag {
        "bordered"?: boolean;
        "intent"?: SwirlTagIntent;
        "label": string;
        "removable"?: boolean;
        "removalButtonLabel"?: string;
        "size"?: SwirlTagSize;
    }
    interface SwirlText {
        "align"?: SwirlTextAlign;
        "as"?: string;
        "balance"?: boolean;
        "color"?: SwirlTextColor;
        "fontFamily"?: SwirlTextFontFamily;
        "fontStyle"?: SwirlTextFontStyle;
        "lines"?: number;
        "size"?: SwirlTextSize;
        "truncate"?: boolean;
        "truncateDirection"?: SwirlTextTruncateDirection;
        "weight"?: SwirlTextWeight;
        "whiteSpace"?: SwirlTextWhiteSpace;
    }
    interface SwirlTextInput {
        "autoComplete"?: string;
        "autoFocus"?: boolean;
        "autoGrow"?: boolean;
        "autoSelect"?: boolean;
        "blurInput": () => Promise<void>;
        "clearButtonLabel"?: string;
        "clearable"?: boolean;
        "disableDynamicWidth"?: boolean;
        "disabled"?: boolean;
        "focusInput": () => Promise<void>;
        "inline"?: boolean;
        "invalid"?: boolean;
        "max"?: number;
        "maxLength"?: number;
        "min"?: number;
        "mode"?: SwirlTextInputMode1;
        "passwordToggleLabel"?: string;
        "placeholder"?: string;
        "prefixLabel"?: string;
        "required"?: boolean;
        "rows"?: number;
        "showCharacterCounter"?: boolean;
        "spellCheck"?: boolean;
        "step"?: number;
        "suffixLabel"?: string;
        "swirlAriaAutocomplete"?: string;
        "swirlAriaControls"?: string;
        "swirlAriaDescribedby"?: string;
        "swirlAriaExpanded"?: string;
        "swirlRole"?: string;
        "type"?: SwirlTextInputType;
        "value"?: string;
    }
    interface SwirlThemeProvider {
        "config": SwirlThemeProviderConfig;
        /**
          * Returns the active OS theme.
          * @returns SwirlTheme
         */
        "getActiveOSTheme": () => Promise<SwirlOSTheme>;
        /**
          * Returns the user's preferred OS theme stored in local storage.
          * @returns SwirlTheme
         */
        "getPreferredOSTheme": () => Promise<SwirlOSTheme>;
        /**
          * Resets the user's preferred OS theme, using the system theme instead.
         */
        "resetPreferredOSTheme": () => Promise<void>;
        /**
          * Sets the user's preferred OS theme and stores it in local storage. Overrides the system theme.
         */
        "setPreferredOSTheme": (theme: SwirlOSTheme) => Promise<void>;
    }
    interface SwirlThumbnail {
        "alt": string;
        "format"?: SwirlThumbnailFormat;
        "interactive"?: boolean;
        "progress"?: number;
        "progressLabel"?: string;
        "removeButtonLabel"?: string;
        "showRemoveButton"?: boolean;
        "size"?: SwirlThumbnailSize;
        "src": string;
        "timestamp"?: string;
    }
    interface SwirlTimeInput {
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "disabled"?: boolean;
        "format"?: string;
        "inline"?: boolean;
        "invalid"?: boolean;
        "placeholder"?: string;
        "required"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlToast {
        "accessibleDismissLabel"?: string;
        "content"?: string;
        "dismissLabel"?: string;
        "duration"?: number;
        "icon"?: string;
        "intent"?: SwirlToastIntent;
        "toastId": string;
    }
    interface SwirlToastProvider {
        /**
          * Clear all toasts
          * @param newToast
          * @returns
         */
        "clearAll": () => Promise<void>;
        /**
          * Dismiss a toast
          * @param toastId
          * @returns
         */
        "dismiss": (toastId: string) => Promise<void>;
        /**
          * Optional global duration for all toasts. Overrides any durations set via the `toast` method. Set to 0 to disable automatic closing of toasts.
         */
        "globalDuration"?: number;
        /**
          * Create a new toast
          * @param newToast
          * @returns
         */
        "toast": (newToast: SwirlToastConfig) => Promise<SwirlToastMessage>;
    }
    interface SwirlToolbar {
        "label": string;
        "orientation"?: SwirlToolbarOrientation;
    }
    interface SwirlTooltip {
        "content": string;
        "delay"?: number;
        "position"?: SwirlTooltipPosition;
        "positioning"?: Strategy;
    }
    interface SwirlTreeNavigationItem {
        "active"?: boolean;
        "href"?: string;
        "icon"?: string;
        "label": string;
        "target"?: string;
    }
    interface SwirlVideoThumbnail {
        "duration"?: string;
        "durationLabel"?: string;
        "label": string;
        "src": string;
    }
    interface SwirlVisuallyHidden {
    }
}
export interface SwirlAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlAccordionElement;
}
export interface SwirlAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlAccordionItemElement;
}
export interface SwirlAppBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlAppBarElement;
}
export interface SwirlAppLayoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlAppLayoutElement;
}
export interface SwirlAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlAutocompleteElement;
}
export interface SwirlAvatarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlAvatarElement;
}
export interface SwirlBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlBannerElement;
}
export interface SwirlCarouselCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlCarouselElement;
}
export interface SwirlCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlCheckboxElement;
}
export interface SwirlChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlChipElement;
}
export interface SwirlColorInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlColorInputElement;
}
export interface SwirlConsoleLayoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlConsoleLayoutElement;
}
export interface SwirlDateInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlDateInputElement;
}
export interface SwirlDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlDatePickerElement;
}
export interface SwirlDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlDialogElement;
}
export interface SwirlFileUploaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileUploaderElement;
}
export interface SwirlFileViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerElement;
}
export interface SwirlFileViewerAudioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerAudioElement;
}
export interface SwirlFileViewerCsvCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerCsvElement;
}
export interface SwirlFileViewerImageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerImageElement;
}
export interface SwirlFileViewerPdfCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerPdfElement;
}
export interface SwirlFileViewerTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerTextElement;
}
export interface SwirlFileViewerVideoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlFileViewerVideoElement;
}
export interface SwirlImageGridItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlImageGridItemElement;
}
export interface SwirlMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlMenuElement;
}
export interface SwirlModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlModalElement;
}
export interface SwirlOptionListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlOptionListElement;
}
export interface SwirlOptionListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlOptionListItemElement;
}
export interface SwirlPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlPaginationElement;
}
export interface SwirlPdfReaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlPdfReaderElement;
}
export interface SwirlPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlPopoverElement;
}
export interface SwirlRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlRadioElement;
}
export interface SwirlRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlRadioGroupElement;
}
export interface SwirlResourceListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlResourceListElement;
}
export interface SwirlResourceListFileItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlResourceListFileItemElement;
}
export interface SwirlResourceListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlResourceListItemElement;
}
export interface SwirlSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlSearchElement;
}
export interface SwirlSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlSelectElement;
}
export interface SwirlShellLayoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlShellLayoutElement;
}
export interface SwirlSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlSwitchElement;
}
export interface SwirlTabBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlTabBarElement;
}
export interface SwirlTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlTabsElement;
}
export interface SwirlTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlTagElement;
}
export interface SwirlTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlTextInputElement;
}
export interface SwirlThemeProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlThemeProviderElement;
}
export interface SwirlThumbnailCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlThumbnailElement;
}
export interface SwirlTimeInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlTimeInputElement;
}
export interface SwirlToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwirlToastElement;
}
declare global {
    interface HTMLFileManagerElement extends Components.FileManager, HTMLStencilElement {
    }
    var HTMLFileManagerElement: {
        prototype: HTMLFileManagerElement;
        new (): HTMLFileManagerElement;
    };
    interface HTMLSwirlAccordionElement extends Components.SwirlAccordion, HTMLStencilElement {
    }
    var HTMLSwirlAccordionElement: {
        prototype: HTMLSwirlAccordionElement;
        new (): HTMLSwirlAccordionElement;
    };
    interface HTMLSwirlAccordionItemElement extends Components.SwirlAccordionItem, HTMLStencilElement {
    }
    var HTMLSwirlAccordionItemElement: {
        prototype: HTMLSwirlAccordionItemElement;
        new (): HTMLSwirlAccordionItemElement;
    };
    interface HTMLSwirlActionListElement extends Components.SwirlActionList, HTMLStencilElement {
    }
    var HTMLSwirlActionListElement: {
        prototype: HTMLSwirlActionListElement;
        new (): HTMLSwirlActionListElement;
    };
    interface HTMLSwirlActionListItemElement extends Components.SwirlActionListItem, HTMLStencilElement {
    }
    var HTMLSwirlActionListItemElement: {
        prototype: HTMLSwirlActionListItemElement;
        new (): HTMLSwirlActionListItemElement;
    };
    interface HTMLSwirlActionListSectionElement extends Components.SwirlActionListSection, HTMLStencilElement {
    }
    var HTMLSwirlActionListSectionElement: {
        prototype: HTMLSwirlActionListSectionElement;
        new (): HTMLSwirlActionListSectionElement;
    };
    interface HTMLSwirlAppBarElement extends Components.SwirlAppBar, HTMLStencilElement {
    }
    var HTMLSwirlAppBarElement: {
        prototype: HTMLSwirlAppBarElement;
        new (): HTMLSwirlAppBarElement;
    };
    interface HTMLSwirlAppIconElement extends Components.SwirlAppIcon, HTMLStencilElement {
    }
    var HTMLSwirlAppIconElement: {
        prototype: HTMLSwirlAppIconElement;
        new (): HTMLSwirlAppIconElement;
    };
    interface HTMLSwirlAppLayoutElement extends Components.SwirlAppLayout, HTMLStencilElement {
    }
    var HTMLSwirlAppLayoutElement: {
        prototype: HTMLSwirlAppLayoutElement;
        new (): HTMLSwirlAppLayoutElement;
    };
    interface HTMLSwirlAutocompleteElement extends Components.SwirlAutocomplete, HTMLStencilElement {
    }
    var HTMLSwirlAutocompleteElement: {
        prototype: HTMLSwirlAutocompleteElement;
        new (): HTMLSwirlAutocompleteElement;
    };
    interface HTMLSwirlAvatarElement extends Components.SwirlAvatar, HTMLStencilElement {
    }
    var HTMLSwirlAvatarElement: {
        prototype: HTMLSwirlAvatarElement;
        new (): HTMLSwirlAvatarElement;
    };
    interface HTMLSwirlAvatarGroupElement extends Components.SwirlAvatarGroup, HTMLStencilElement {
    }
    var HTMLSwirlAvatarGroupElement: {
        prototype: HTMLSwirlAvatarGroupElement;
        new (): HTMLSwirlAvatarGroupElement;
    };
    interface HTMLSwirlBadgeElement extends Components.SwirlBadge, HTMLStencilElement {
    }
    var HTMLSwirlBadgeElement: {
        prototype: HTMLSwirlBadgeElement;
        new (): HTMLSwirlBadgeElement;
    };
    interface HTMLSwirlBannerElement extends Components.SwirlBanner, HTMLStencilElement {
    }
    var HTMLSwirlBannerElement: {
        prototype: HTMLSwirlBannerElement;
        new (): HTMLSwirlBannerElement;
    };
    interface HTMLSwirlBoxElement extends Components.SwirlBox, HTMLStencilElement {
    }
    var HTMLSwirlBoxElement: {
        prototype: HTMLSwirlBoxElement;
        new (): HTMLSwirlBoxElement;
    };
    interface HTMLSwirlButtonElement extends Components.SwirlButton, HTMLStencilElement {
    }
    var HTMLSwirlButtonElement: {
        prototype: HTMLSwirlButtonElement;
        new (): HTMLSwirlButtonElement;
    };
    interface HTMLSwirlButtonGroupElement extends Components.SwirlButtonGroup, HTMLStencilElement {
    }
    var HTMLSwirlButtonGroupElement: {
        prototype: HTMLSwirlButtonGroupElement;
        new (): HTMLSwirlButtonGroupElement;
    };
    interface HTMLSwirlCardElement extends Components.SwirlCard, HTMLStencilElement {
    }
    var HTMLSwirlCardElement: {
        prototype: HTMLSwirlCardElement;
        new (): HTMLSwirlCardElement;
    };
    /**
     * slot - The slides
     */
    interface HTMLSwirlCarouselElement extends Components.SwirlCarousel, HTMLStencilElement {
    }
    var HTMLSwirlCarouselElement: {
        prototype: HTMLSwirlCarouselElement;
        new (): HTMLSwirlCarouselElement;
    };
    /**
     * slot - The slide contents
     */
    interface HTMLSwirlCarouselSlideElement extends Components.SwirlCarouselSlide, HTMLStencilElement {
    }
    var HTMLSwirlCarouselSlideElement: {
        prototype: HTMLSwirlCarouselSlideElement;
        new (): HTMLSwirlCarouselSlideElement;
    };
    interface HTMLSwirlCheckboxElement extends Components.SwirlCheckbox, HTMLStencilElement {
    }
    var HTMLSwirlCheckboxElement: {
        prototype: HTMLSwirlCheckboxElement;
        new (): HTMLSwirlCheckboxElement;
    };
    interface HTMLSwirlChipElement extends Components.SwirlChip, HTMLStencilElement {
    }
    var HTMLSwirlChipElement: {
        prototype: HTMLSwirlChipElement;
        new (): HTMLSwirlChipElement;
    };
    interface HTMLSwirlColorInputElement extends Components.SwirlColorInput, HTMLStencilElement {
    }
    var HTMLSwirlColorInputElement: {
        prototype: HTMLSwirlColorInputElement;
        new (): HTMLSwirlColorInputElement;
    };
    interface HTMLSwirlColumnsElement extends Components.SwirlColumns, HTMLStencilElement {
    }
    var HTMLSwirlColumnsElement: {
        prototype: HTMLSwirlColumnsElement;
        new (): HTMLSwirlColumnsElement;
    };
    interface HTMLSwirlConsoleLayoutElement extends Components.SwirlConsoleLayout, HTMLStencilElement {
    }
    var HTMLSwirlConsoleLayoutElement: {
        prototype: HTMLSwirlConsoleLayoutElement;
        new (): HTMLSwirlConsoleLayoutElement;
    };
    interface HTMLSwirlDateInputElement extends Components.SwirlDateInput, HTMLStencilElement {
    }
    var HTMLSwirlDateInputElement: {
        prototype: HTMLSwirlDateInputElement;
        new (): HTMLSwirlDateInputElement;
    };
    interface HTMLSwirlDatePickerElement extends Components.SwirlDatePicker, HTMLStencilElement {
    }
    var HTMLSwirlDatePickerElement: {
        prototype: HTMLSwirlDatePickerElement;
        new (): HTMLSwirlDatePickerElement;
    };
    interface HTMLSwirlDescriptionListElement extends Components.SwirlDescriptionList, HTMLStencilElement {
    }
    var HTMLSwirlDescriptionListElement: {
        prototype: HTMLSwirlDescriptionListElement;
        new (): HTMLSwirlDescriptionListElement;
    };
    interface HTMLSwirlDescriptionListItemElement extends Components.SwirlDescriptionListItem, HTMLStencilElement {
    }
    var HTMLSwirlDescriptionListItemElement: {
        prototype: HTMLSwirlDescriptionListItemElement;
        new (): HTMLSwirlDescriptionListItemElement;
    };
    interface HTMLSwirlDialogElement extends Components.SwirlDialog, HTMLStencilElement {
    }
    var HTMLSwirlDialogElement: {
        prototype: HTMLSwirlDialogElement;
        new (): HTMLSwirlDialogElement;
    };
    interface HTMLSwirlEmojiElement extends Components.SwirlEmoji, HTMLStencilElement {
    }
    var HTMLSwirlEmojiElement: {
        prototype: HTMLSwirlEmojiElement;
        new (): HTMLSwirlEmojiElement;
    };
    interface HTMLSwirlEmojiClapElement extends Components.SwirlEmojiClap, HTMLStencilElement {
    }
    var HTMLSwirlEmojiClapElement: {
        prototype: HTMLSwirlEmojiClapElement;
        new (): HTMLSwirlEmojiClapElement;
    };
    interface HTMLSwirlEmojiHappyElement extends Components.SwirlEmojiHappy, HTMLStencilElement {
    }
    var HTMLSwirlEmojiHappyElement: {
        prototype: HTMLSwirlEmojiHappyElement;
        new (): HTMLSwirlEmojiHappyElement;
    };
    interface HTMLSwirlEmojiIdeaElement extends Components.SwirlEmojiIdea, HTMLStencilElement {
    }
    var HTMLSwirlEmojiIdeaElement: {
        prototype: HTMLSwirlEmojiIdeaElement;
        new (): HTMLSwirlEmojiIdeaElement;
    };
    interface HTMLSwirlEmojiLoveElement extends Components.SwirlEmojiLove, HTMLStencilElement {
    }
    var HTMLSwirlEmojiLoveElement: {
        prototype: HTMLSwirlEmojiLoveElement;
        new (): HTMLSwirlEmojiLoveElement;
    };
    interface HTMLSwirlEmojiSadElement extends Components.SwirlEmojiSad, HTMLStencilElement {
    }
    var HTMLSwirlEmojiSadElement: {
        prototype: HTMLSwirlEmojiSadElement;
        new (): HTMLSwirlEmojiSadElement;
    };
    interface HTMLSwirlEmojiThumbsUpElement extends Components.SwirlEmojiThumbsUp, HTMLStencilElement {
    }
    var HTMLSwirlEmojiThumbsUpElement: {
        prototype: HTMLSwirlEmojiThumbsUpElement;
        new (): HTMLSwirlEmojiThumbsUpElement;
    };
    interface HTMLSwirlEmptyStateElement extends Components.SwirlEmptyState, HTMLStencilElement {
    }
    var HTMLSwirlEmptyStateElement: {
        prototype: HTMLSwirlEmptyStateElement;
        new (): HTMLSwirlEmptyStateElement;
    };
    interface HTMLSwirlFileUploaderElement extends Components.SwirlFileUploader, HTMLStencilElement {
    }
    var HTMLSwirlFileUploaderElement: {
        prototype: HTMLSwirlFileUploaderElement;
        new (): HTMLSwirlFileUploaderElement;
    };
    interface HTMLSwirlFileViewerElement extends Components.SwirlFileViewer, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerElement: {
        prototype: HTMLSwirlFileViewerElement;
        new (): HTMLSwirlFileViewerElement;
    };
    interface HTMLSwirlFileViewerAudioElement extends Components.SwirlFileViewerAudio, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerAudioElement: {
        prototype: HTMLSwirlFileViewerAudioElement;
        new (): HTMLSwirlFileViewerAudioElement;
    };
    interface HTMLSwirlFileViewerCsvElement extends Components.SwirlFileViewerCsv, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerCsvElement: {
        prototype: HTMLSwirlFileViewerCsvElement;
        new (): HTMLSwirlFileViewerCsvElement;
    };
    interface HTMLSwirlFileViewerImageElement extends Components.SwirlFileViewerImage, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerImageElement: {
        prototype: HTMLSwirlFileViewerImageElement;
        new (): HTMLSwirlFileViewerImageElement;
    };
    interface HTMLSwirlFileViewerPdfElement extends Components.SwirlFileViewerPdf, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerPdfElement: {
        prototype: HTMLSwirlFileViewerPdfElement;
        new (): HTMLSwirlFileViewerPdfElement;
    };
    interface HTMLSwirlFileViewerTextElement extends Components.SwirlFileViewerText, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerTextElement: {
        prototype: HTMLSwirlFileViewerTextElement;
        new (): HTMLSwirlFileViewerTextElement;
    };
    interface HTMLSwirlFileViewerVideoElement extends Components.SwirlFileViewerVideo, HTMLStencilElement {
    }
    var HTMLSwirlFileViewerVideoElement: {
        prototype: HTMLSwirlFileViewerVideoElement;
        new (): HTMLSwirlFileViewerVideoElement;
    };
    interface HTMLSwirlFormControlElement extends Components.SwirlFormControl, HTMLStencilElement {
    }
    var HTMLSwirlFormControlElement: {
        prototype: HTMLSwirlFormControlElement;
        new (): HTMLSwirlFormControlElement;
    };
    interface HTMLSwirlFormGroupElement extends Components.SwirlFormGroup, HTMLStencilElement {
    }
    var HTMLSwirlFormGroupElement: {
        prototype: HTMLSwirlFormGroupElement;
        new (): HTMLSwirlFormGroupElement;
    };
    interface HTMLSwirlHeadingElement extends Components.SwirlHeading, HTMLStencilElement {
    }
    var HTMLSwirlHeadingElement: {
        prototype: HTMLSwirlHeadingElement;
        new (): HTMLSwirlHeadingElement;
    };
    interface HTMLSwirlIconElement extends Components.SwirlIcon, HTMLStencilElement {
    }
    var HTMLSwirlIconElement: {
        prototype: HTMLSwirlIconElement;
        new (): HTMLSwirlIconElement;
    };
    interface HTMLSwirlIconAddElement extends Components.SwirlIconAdd, HTMLStencilElement {
    }
    var HTMLSwirlIconAddElement: {
        prototype: HTMLSwirlIconAddElement;
        new (): HTMLSwirlIconAddElement;
    };
    interface HTMLSwirlIconAddModeratorElement extends Components.SwirlIconAddModerator, HTMLStencilElement {
    }
    var HTMLSwirlIconAddModeratorElement: {
        prototype: HTMLSwirlIconAddModeratorElement;
        new (): HTMLSwirlIconAddModeratorElement;
    };
    interface HTMLSwirlIconAddPhotoElement extends Components.SwirlIconAddPhoto, HTMLStencilElement {
    }
    var HTMLSwirlIconAddPhotoElement: {
        prototype: HTMLSwirlIconAddPhotoElement;
        new (): HTMLSwirlIconAddPhotoElement;
    };
    interface HTMLSwirlIconAddReactionElement extends Components.SwirlIconAddReaction, HTMLStencilElement {
    }
    var HTMLSwirlIconAddReactionElement: {
        prototype: HTMLSwirlIconAddReactionElement;
        new (): HTMLSwirlIconAddReactionElement;
    };
    interface HTMLSwirlIconAdminPanelSettingsElement extends Components.SwirlIconAdminPanelSettings, HTMLStencilElement {
    }
    var HTMLSwirlIconAdminPanelSettingsElement: {
        prototype: HTMLSwirlIconAdminPanelSettingsElement;
        new (): HTMLSwirlIconAdminPanelSettingsElement;
    };
    interface HTMLSwirlIconAiElement extends Components.SwirlIconAi, HTMLStencilElement {
    }
    var HTMLSwirlIconAiElement: {
        prototype: HTMLSwirlIconAiElement;
        new (): HTMLSwirlIconAiElement;
    };
    interface HTMLSwirlIconAppsElement extends Components.SwirlIconApps, HTMLStencilElement {
    }
    var HTMLSwirlIconAppsElement: {
        prototype: HTMLSwirlIconAppsElement;
        new (): HTMLSwirlIconAppsElement;
    };
    interface HTMLSwirlIconArrowBackElement extends Components.SwirlIconArrowBack, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowBackElement: {
        prototype: HTMLSwirlIconArrowBackElement;
        new (): HTMLSwirlIconArrowBackElement;
    };
    interface HTMLSwirlIconArrowDownwardElement extends Components.SwirlIconArrowDownward, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowDownwardElement: {
        prototype: HTMLSwirlIconArrowDownwardElement;
        new (): HTMLSwirlIconArrowDownwardElement;
    };
    interface HTMLSwirlIconArrowForwardElement extends Components.SwirlIconArrowForward, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowForwardElement: {
        prototype: HTMLSwirlIconArrowForwardElement;
        new (): HTMLSwirlIconArrowForwardElement;
    };
    interface HTMLSwirlIconArrowLeftElement extends Components.SwirlIconArrowLeft, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowLeftElement: {
        prototype: HTMLSwirlIconArrowLeftElement;
        new (): HTMLSwirlIconArrowLeftElement;
    };
    interface HTMLSwirlIconArrowRightElement extends Components.SwirlIconArrowRight, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowRightElement: {
        prototype: HTMLSwirlIconArrowRightElement;
        new (): HTMLSwirlIconArrowRightElement;
    };
    interface HTMLSwirlIconArrowRightSmallElement extends Components.SwirlIconArrowRightSmall, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowRightSmallElement: {
        prototype: HTMLSwirlIconArrowRightSmallElement;
        new (): HTMLSwirlIconArrowRightSmallElement;
    };
    interface HTMLSwirlIconArrowUpwardElement extends Components.SwirlIconArrowUpward, HTMLStencilElement {
    }
    var HTMLSwirlIconArrowUpwardElement: {
        prototype: HTMLSwirlIconArrowUpwardElement;
        new (): HTMLSwirlIconArrowUpwardElement;
    };
    interface HTMLSwirlIconAttachmentElement extends Components.SwirlIconAttachment, HTMLStencilElement {
    }
    var HTMLSwirlIconAttachmentElement: {
        prototype: HTMLSwirlIconAttachmentElement;
        new (): HTMLSwirlIconAttachmentElement;
    };
    interface HTMLSwirlIconBarChartElement extends Components.SwirlIconBarChart, HTMLStencilElement {
    }
    var HTMLSwirlIconBarChartElement: {
        prototype: HTMLSwirlIconBarChartElement;
        new (): HTMLSwirlIconBarChartElement;
    };
    interface HTMLSwirlIconBlockElement extends Components.SwirlIconBlock, HTMLStencilElement {
    }
    var HTMLSwirlIconBlockElement: {
        prototype: HTMLSwirlIconBlockElement;
        new (): HTMLSwirlIconBlockElement;
    };
    interface HTMLSwirlIconBookmarkElement extends Components.SwirlIconBookmark, HTMLStencilElement {
    }
    var HTMLSwirlIconBookmarkElement: {
        prototype: HTMLSwirlIconBookmarkElement;
        new (): HTMLSwirlIconBookmarkElement;
    };
    interface HTMLSwirlIconBookmarkFilledElement extends Components.SwirlIconBookmarkFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconBookmarkFilledElement: {
        prototype: HTMLSwirlIconBookmarkFilledElement;
        new (): HTMLSwirlIconBookmarkFilledElement;
    };
    interface HTMLSwirlIconCancelElement extends Components.SwirlIconCancel, HTMLStencilElement {
    }
    var HTMLSwirlIconCancelElement: {
        prototype: HTMLSwirlIconCancelElement;
        new (): HTMLSwirlIconCancelElement;
    };
    interface HTMLSwirlIconChatBubbleElement extends Components.SwirlIconChatBubble, HTMLStencilElement {
    }
    var HTMLSwirlIconChatBubbleElement: {
        prototype: HTMLSwirlIconChatBubbleElement;
        new (): HTMLSwirlIconChatBubbleElement;
    };
    interface HTMLSwirlIconChatsElement extends Components.SwirlIconChats, HTMLStencilElement {
    }
    var HTMLSwirlIconChatsElement: {
        prototype: HTMLSwirlIconChatsElement;
        new (): HTMLSwirlIconChatsElement;
    };
    interface HTMLSwirlIconChatsFilledElement extends Components.SwirlIconChatsFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconChatsFilledElement: {
        prototype: HTMLSwirlIconChatsFilledElement;
        new (): HTMLSwirlIconChatsFilledElement;
    };
    interface HTMLSwirlIconCheckElement extends Components.SwirlIconCheck, HTMLStencilElement {
    }
    var HTMLSwirlIconCheckElement: {
        prototype: HTMLSwirlIconCheckElement;
        new (): HTMLSwirlIconCheckElement;
    };
    interface HTMLSwirlIconCheckCircleElement extends Components.SwirlIconCheckCircle, HTMLStencilElement {
    }
    var HTMLSwirlIconCheckCircleElement: {
        prototype: HTMLSwirlIconCheckCircleElement;
        new (): HTMLSwirlIconCheckCircleElement;
    };
    interface HTMLSwirlIconCheckSmallElement extends Components.SwirlIconCheckSmall, HTMLStencilElement {
    }
    var HTMLSwirlIconCheckSmallElement: {
        prototype: HTMLSwirlIconCheckSmallElement;
        new (): HTMLSwirlIconCheckSmallElement;
    };
    interface HTMLSwirlIconCheckStrongElement extends Components.SwirlIconCheckStrong, HTMLStencilElement {
    }
    var HTMLSwirlIconCheckStrongElement: {
        prototype: HTMLSwirlIconCheckStrongElement;
        new (): HTMLSwirlIconCheckStrongElement;
    };
    interface HTMLSwirlIconChevronLeftElement extends Components.SwirlIconChevronLeft, HTMLStencilElement {
    }
    var HTMLSwirlIconChevronLeftElement: {
        prototype: HTMLSwirlIconChevronLeftElement;
        new (): HTMLSwirlIconChevronLeftElement;
    };
    interface HTMLSwirlIconChevronRightElement extends Components.SwirlIconChevronRight, HTMLStencilElement {
    }
    var HTMLSwirlIconChevronRightElement: {
        prototype: HTMLSwirlIconChevronRightElement;
        new (): HTMLSwirlIconChevronRightElement;
    };
    interface HTMLSwirlIconCloseElement extends Components.SwirlIconClose, HTMLStencilElement {
    }
    var HTMLSwirlIconCloseElement: {
        prototype: HTMLSwirlIconCloseElement;
        new (): HTMLSwirlIconCloseElement;
    };
    interface HTMLSwirlIconCloseSmallElement extends Components.SwirlIconCloseSmall, HTMLStencilElement {
    }
    var HTMLSwirlIconCloseSmallElement: {
        prototype: HTMLSwirlIconCloseSmallElement;
        new (): HTMLSwirlIconCloseSmallElement;
    };
    interface HTMLSwirlIconCloudUploadElement extends Components.SwirlIconCloudUpload, HTMLStencilElement {
    }
    var HTMLSwirlIconCloudUploadElement: {
        prototype: HTMLSwirlIconCloudUploadElement;
        new (): HTMLSwirlIconCloudUploadElement;
    };
    interface HTMLSwirlIconColumnElement extends Components.SwirlIconColumn, HTMLStencilElement {
    }
    var HTMLSwirlIconColumnElement: {
        prototype: HTMLSwirlIconColumnElement;
        new (): HTMLSwirlIconColumnElement;
    };
    interface HTMLSwirlIconCommentElement extends Components.SwirlIconComment, HTMLStencilElement {
    }
    var HTMLSwirlIconCommentElement: {
        prototype: HTMLSwirlIconCommentElement;
        new (): HTMLSwirlIconCommentElement;
    };
    interface HTMLSwirlIconCopyElement extends Components.SwirlIconCopy, HTMLStencilElement {
    }
    var HTMLSwirlIconCopyElement: {
        prototype: HTMLSwirlIconCopyElement;
        new (): HTMLSwirlIconCopyElement;
    };
    interface HTMLSwirlIconDarkModeElement extends Components.SwirlIconDarkMode, HTMLStencilElement {
    }
    var HTMLSwirlIconDarkModeElement: {
        prototype: HTMLSwirlIconDarkModeElement;
        new (): HTMLSwirlIconDarkModeElement;
    };
    interface HTMLSwirlIconDateRangeElement extends Components.SwirlIconDateRange, HTMLStencilElement {
    }
    var HTMLSwirlIconDateRangeElement: {
        prototype: HTMLSwirlIconDateRangeElement;
        new (): HTMLSwirlIconDateRangeElement;
    };
    interface HTMLSwirlIconDeleteElement extends Components.SwirlIconDelete, HTMLStencilElement {
    }
    var HTMLSwirlIconDeleteElement: {
        prototype: HTMLSwirlIconDeleteElement;
        new (): HTMLSwirlIconDeleteElement;
    };
    interface HTMLSwirlIconDescriptionElement extends Components.SwirlIconDescription, HTMLStencilElement {
    }
    var HTMLSwirlIconDescriptionElement: {
        prototype: HTMLSwirlIconDescriptionElement;
        new (): HTMLSwirlIconDescriptionElement;
    };
    interface HTMLSwirlIconDesktopElement extends Components.SwirlIconDesktop, HTMLStencilElement {
    }
    var HTMLSwirlIconDesktopElement: {
        prototype: HTMLSwirlIconDesktopElement;
        new (): HTMLSwirlIconDesktopElement;
    };
    interface HTMLSwirlIconDirectoryElement extends Components.SwirlIconDirectory, HTMLStencilElement {
    }
    var HTMLSwirlIconDirectoryElement: {
        prototype: HTMLSwirlIconDirectoryElement;
        new (): HTMLSwirlIconDirectoryElement;
    };
    interface HTMLSwirlIconDirectoryFilledElement extends Components.SwirlIconDirectoryFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconDirectoryFilledElement: {
        prototype: HTMLSwirlIconDirectoryFilledElement;
        new (): HTMLSwirlIconDirectoryFilledElement;
    };
    interface HTMLSwirlIconDiscoverElement extends Components.SwirlIconDiscover, HTMLStencilElement {
    }
    var HTMLSwirlIconDiscoverElement: {
        prototype: HTMLSwirlIconDiscoverElement;
        new (): HTMLSwirlIconDiscoverElement;
    };
    interface HTMLSwirlIconDockLeftElement extends Components.SwirlIconDockLeft, HTMLStencilElement {
    }
    var HTMLSwirlIconDockLeftElement: {
        prototype: HTMLSwirlIconDockLeftElement;
        new (): HTMLSwirlIconDockLeftElement;
    };
    interface HTMLSwirlIconDotElement extends Components.SwirlIconDot, HTMLStencilElement {
    }
    var HTMLSwirlIconDotElement: {
        prototype: HTMLSwirlIconDotElement;
        new (): HTMLSwirlIconDotElement;
    };
    interface HTMLSwirlIconDoubleArrowLeftElement extends Components.SwirlIconDoubleArrowLeft, HTMLStencilElement {
    }
    var HTMLSwirlIconDoubleArrowLeftElement: {
        prototype: HTMLSwirlIconDoubleArrowLeftElement;
        new (): HTMLSwirlIconDoubleArrowLeftElement;
    };
    interface HTMLSwirlIconDoubleArrowRightElement extends Components.SwirlIconDoubleArrowRight, HTMLStencilElement {
    }
    var HTMLSwirlIconDoubleArrowRightElement: {
        prototype: HTMLSwirlIconDoubleArrowRightElement;
        new (): HTMLSwirlIconDoubleArrowRightElement;
    };
    interface HTMLSwirlIconDownloadElement extends Components.SwirlIconDownload, HTMLStencilElement {
    }
    var HTMLSwirlIconDownloadElement: {
        prototype: HTMLSwirlIconDownloadElement;
        new (): HTMLSwirlIconDownloadElement;
    };
    interface HTMLSwirlIconDragHandleElement extends Components.SwirlIconDragHandle, HTMLStencilElement {
    }
    var HTMLSwirlIconDragHandleElement: {
        prototype: HTMLSwirlIconDragHandleElement;
        new (): HTMLSwirlIconDragHandleElement;
    };
    interface HTMLSwirlIconEditElement extends Components.SwirlIconEdit, HTMLStencilElement {
    }
    var HTMLSwirlIconEditElement: {
        prototype: HTMLSwirlIconEditElement;
        new (): HTMLSwirlIconEditElement;
    };
    interface HTMLSwirlIconEmojiMoodElement extends Components.SwirlIconEmojiMood, HTMLStencilElement {
    }
    var HTMLSwirlIconEmojiMoodElement: {
        prototype: HTMLSwirlIconEmojiMoodElement;
        new (): HTMLSwirlIconEmojiMoodElement;
    };
    interface HTMLSwirlIconEmojiSatisfiedElement extends Components.SwirlIconEmojiSatisfied, HTMLStencilElement {
    }
    var HTMLSwirlIconEmojiSatisfiedElement: {
        prototype: HTMLSwirlIconEmojiSatisfiedElement;
        new (): HTMLSwirlIconEmojiSatisfiedElement;
    };
    interface HTMLSwirlIconErrorElement extends Components.SwirlIconError, HTMLStencilElement {
    }
    var HTMLSwirlIconErrorElement: {
        prototype: HTMLSwirlIconErrorElement;
        new (): HTMLSwirlIconErrorElement;
    };
    interface HTMLSwirlIconExpandLessElement extends Components.SwirlIconExpandLess, HTMLStencilElement {
    }
    var HTMLSwirlIconExpandLessElement: {
        prototype: HTMLSwirlIconExpandLessElement;
        new (): HTMLSwirlIconExpandLessElement;
    };
    interface HTMLSwirlIconExpandMoreElement extends Components.SwirlIconExpandMore, HTMLStencilElement {
    }
    var HTMLSwirlIconExpandMoreElement: {
        prototype: HTMLSwirlIconExpandMoreElement;
        new (): HTMLSwirlIconExpandMoreElement;
    };
    interface HTMLSwirlIconFileElement extends Components.SwirlIconFile, HTMLStencilElement {
    }
    var HTMLSwirlIconFileElement: {
        prototype: HTMLSwirlIconFileElement;
        new (): HTMLSwirlIconFileElement;
    };
    interface HTMLSwirlIconFileCopyElement extends Components.SwirlIconFileCopy, HTMLStencilElement {
    }
    var HTMLSwirlIconFileCopyElement: {
        prototype: HTMLSwirlIconFileCopyElement;
        new (): HTMLSwirlIconFileCopyElement;
    };
    interface HTMLSwirlIconFilterElement extends Components.SwirlIconFilter, HTMLStencilElement {
    }
    var HTMLSwirlIconFilterElement: {
        prototype: HTMLSwirlIconFilterElement;
        new (): HTMLSwirlIconFilterElement;
    };
    interface HTMLSwirlIconFolderElement extends Components.SwirlIconFolder, HTMLStencilElement {
    }
    var HTMLSwirlIconFolderElement: {
        prototype: HTMLSwirlIconFolderElement;
        new (): HTMLSwirlIconFolderElement;
    };
    interface HTMLSwirlIconFolderSharedElement extends Components.SwirlIconFolderShared, HTMLStencilElement {
    }
    var HTMLSwirlIconFolderSharedElement: {
        prototype: HTMLSwirlIconFolderSharedElement;
        new (): HTMLSwirlIconFolderSharedElement;
    };
    interface HTMLSwirlIconFormatHOneElement extends Components.SwirlIconFormatHOne, HTMLStencilElement {
    }
    var HTMLSwirlIconFormatHOneElement: {
        prototype: HTMLSwirlIconFormatHOneElement;
        new (): HTMLSwirlIconFormatHOneElement;
    };
    interface HTMLSwirlIconFullscreenElement extends Components.SwirlIconFullscreen, HTMLStencilElement {
    }
    var HTMLSwirlIconFullscreenElement: {
        prototype: HTMLSwirlIconFullscreenElement;
        new (): HTMLSwirlIconFullscreenElement;
    };
    interface HTMLSwirlIconFullscreenExitElement extends Components.SwirlIconFullscreenExit, HTMLStencilElement {
    }
    var HTMLSwirlIconFullscreenExitElement: {
        prototype: HTMLSwirlIconFullscreenExitElement;
        new (): HTMLSwirlIconFullscreenExitElement;
    };
    interface HTMLSwirlIconGifElement extends Components.SwirlIconGif, HTMLStencilElement {
    }
    var HTMLSwirlIconGifElement: {
        prototype: HTMLSwirlIconGifElement;
        new (): HTMLSwirlIconGifElement;
    };
    interface HTMLSwirlIconGroupAddElement extends Components.SwirlIconGroupAdd, HTMLStencilElement {
    }
    var HTMLSwirlIconGroupAddElement: {
        prototype: HTMLSwirlIconGroupAddElement;
        new (): HTMLSwirlIconGroupAddElement;
    };
    interface HTMLSwirlIconGroupAssignElement extends Components.SwirlIconGroupAssign, HTMLStencilElement {
    }
    var HTMLSwirlIconGroupAssignElement: {
        prototype: HTMLSwirlIconGroupAssignElement;
        new (): HTMLSwirlIconGroupAssignElement;
    };
    interface HTMLSwirlIconGroupsElement extends Components.SwirlIconGroups, HTMLStencilElement {
    }
    var HTMLSwirlIconGroupsElement: {
        prototype: HTMLSwirlIconGroupsElement;
        new (): HTMLSwirlIconGroupsElement;
    };
    interface HTMLSwirlIconGroupsFilledElement extends Components.SwirlIconGroupsFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconGroupsFilledElement: {
        prototype: HTMLSwirlIconGroupsFilledElement;
        new (): HTMLSwirlIconGroupsFilledElement;
    };
    interface HTMLSwirlIconHamburgerMenuElement extends Components.SwirlIconHamburgerMenu, HTMLStencilElement {
    }
    var HTMLSwirlIconHamburgerMenuElement: {
        prototype: HTMLSwirlIconHamburgerMenuElement;
        new (): HTMLSwirlIconHamburgerMenuElement;
    };
    interface HTMLSwirlIconHelpElement extends Components.SwirlIconHelp, HTMLStencilElement {
    }
    var HTMLSwirlIconHelpElement: {
        prototype: HTMLSwirlIconHelpElement;
        new (): HTMLSwirlIconHelpElement;
    };
    interface HTMLSwirlIconHighlightElement extends Components.SwirlIconHighlight, HTMLStencilElement {
    }
    var HTMLSwirlIconHighlightElement: {
        prototype: HTMLSwirlIconHighlightElement;
        new (): HTMLSwirlIconHighlightElement;
    };
    interface HTMLSwirlIconHomeElement extends Components.SwirlIconHome, HTMLStencilElement {
    }
    var HTMLSwirlIconHomeElement: {
        prototype: HTMLSwirlIconHomeElement;
        new (): HTMLSwirlIconHomeElement;
    };
    interface HTMLSwirlIconImageElement extends Components.SwirlIconImage, HTMLStencilElement {
    }
    var HTMLSwirlIconImageElement: {
        prototype: HTMLSwirlIconImageElement;
        new (): HTMLSwirlIconImageElement;
    };
    interface HTMLSwirlIconImproveTextElement extends Components.SwirlIconImproveText, HTMLStencilElement {
    }
    var HTMLSwirlIconImproveTextElement: {
        prototype: HTMLSwirlIconImproveTextElement;
        new (): HTMLSwirlIconImproveTextElement;
    };
    interface HTMLSwirlIconInfoElement extends Components.SwirlIconInfo, HTMLStencilElement {
    }
    var HTMLSwirlIconInfoElement: {
        prototype: HTMLSwirlIconInfoElement;
        new (): HTMLSwirlIconInfoElement;
    };
    interface HTMLSwirlIconInsertBelowElement extends Components.SwirlIconInsertBelow, HTMLStencilElement {
    }
    var HTMLSwirlIconInsertBelowElement: {
        prototype: HTMLSwirlIconInsertBelowElement;
        new (): HTMLSwirlIconInsertBelowElement;
    };
    interface HTMLSwirlIconInsertOnTopElement extends Components.SwirlIconInsertOnTop, HTMLStencilElement {
    }
    var HTMLSwirlIconInsertOnTopElement: {
        prototype: HTMLSwirlIconInsertOnTopElement;
        new (): HTMLSwirlIconInsertOnTopElement;
    };
    interface HTMLSwirlIconInventoryElement extends Components.SwirlIconInventory, HTMLStencilElement {
    }
    var HTMLSwirlIconInventoryElement: {
        prototype: HTMLSwirlIconInventoryElement;
        new (): HTMLSwirlIconInventoryElement;
    };
    interface HTMLSwirlIconKeyboardHideElement extends Components.SwirlIconKeyboardHide, HTMLStencilElement {
    }
    var HTMLSwirlIconKeyboardHideElement: {
        prototype: HTMLSwirlIconKeyboardHideElement;
        new (): HTMLSwirlIconKeyboardHideElement;
    };
    interface HTMLSwirlIconLightModeElement extends Components.SwirlIconLightMode, HTMLStencilElement {
    }
    var HTMLSwirlIconLightModeElement: {
        prototype: HTMLSwirlIconLightModeElement;
        new (): HTMLSwirlIconLightModeElement;
    };
    interface HTMLSwirlIconLikeElement extends Components.SwirlIconLike, HTMLStencilElement {
    }
    var HTMLSwirlIconLikeElement: {
        prototype: HTMLSwirlIconLikeElement;
        new (): HTMLSwirlIconLikeElement;
    };
    interface HTMLSwirlIconLinkElement extends Components.SwirlIconLink, HTMLStencilElement {
    }
    var HTMLSwirlIconLinkElement: {
        prototype: HTMLSwirlIconLinkElement;
        new (): HTMLSwirlIconLinkElement;
    };
    interface HTMLSwirlIconLoadElement extends Components.SwirlIconLoad, HTMLStencilElement {
    }
    var HTMLSwirlIconLoadElement: {
        prototype: HTMLSwirlIconLoadElement;
        new (): HTMLSwirlIconLoadElement;
    };
    interface HTMLSwirlIconLockElement extends Components.SwirlIconLock, HTMLStencilElement {
    }
    var HTMLSwirlIconLockElement: {
        prototype: HTMLSwirlIconLockElement;
        new (): HTMLSwirlIconLockElement;
    };
    interface HTMLSwirlIconLockOpenElement extends Components.SwirlIconLockOpen, HTMLStencilElement {
    }
    var HTMLSwirlIconLockOpenElement: {
        prototype: HTMLSwirlIconLockOpenElement;
        new (): HTMLSwirlIconLockOpenElement;
    };
    interface HTMLSwirlIconLockPersonElement extends Components.SwirlIconLockPerson, HTMLStencilElement {
    }
    var HTMLSwirlIconLockPersonElement: {
        prototype: HTMLSwirlIconLockPersonElement;
        new (): HTMLSwirlIconLockPersonElement;
    };
    interface HTMLSwirlIconLoginElement extends Components.SwirlIconLogin, HTMLStencilElement {
    }
    var HTMLSwirlIconLoginElement: {
        prototype: HTMLSwirlIconLoginElement;
        new (): HTMLSwirlIconLoginElement;
    };
    interface HTMLSwirlIconLogoutElement extends Components.SwirlIconLogout, HTMLStencilElement {
    }
    var HTMLSwirlIconLogoutElement: {
        prototype: HTMLSwirlIconLogoutElement;
        new (): HTMLSwirlIconLogoutElement;
    };
    interface HTMLSwirlIconLongTextElement extends Components.SwirlIconLongText, HTMLStencilElement {
    }
    var HTMLSwirlIconLongTextElement: {
        prototype: HTMLSwirlIconLongTextElement;
        new (): HTMLSwirlIconLongTextElement;
    };
    interface HTMLSwirlIconMailElement extends Components.SwirlIconMail, HTMLStencilElement {
    }
    var HTMLSwirlIconMailElement: {
        prototype: HTMLSwirlIconMailElement;
        new (): HTMLSwirlIconMailElement;
    };
    interface HTMLSwirlIconManageAccountsElement extends Components.SwirlIconManageAccounts, HTMLStencilElement {
    }
    var HTMLSwirlIconManageAccountsElement: {
        prototype: HTMLSwirlIconManageAccountsElement;
        new (): HTMLSwirlIconManageAccountsElement;
    };
    interface HTMLSwirlIconMarkChatReadElement extends Components.SwirlIconMarkChatRead, HTMLStencilElement {
    }
    var HTMLSwirlIconMarkChatReadElement: {
        prototype: HTMLSwirlIconMarkChatReadElement;
        new (): HTMLSwirlIconMarkChatReadElement;
    };
    interface HTMLSwirlIconMarkChatUnreadElement extends Components.SwirlIconMarkChatUnread, HTMLStencilElement {
    }
    var HTMLSwirlIconMarkChatUnreadElement: {
        prototype: HTMLSwirlIconMarkChatUnreadElement;
        new (): HTMLSwirlIconMarkChatUnreadElement;
    };
    interface HTMLSwirlIconMentionElement extends Components.SwirlIconMention, HTMLStencilElement {
    }
    var HTMLSwirlIconMentionElement: {
        prototype: HTMLSwirlIconMentionElement;
        new (): HTMLSwirlIconMentionElement;
    };
    interface HTMLSwirlIconMenuElement extends Components.SwirlIconMenu, HTMLStencilElement {
    }
    var HTMLSwirlIconMenuElement: {
        prototype: HTMLSwirlIconMenuElement;
        new (): HTMLSwirlIconMenuElement;
    };
    interface HTMLSwirlIconMenuBookElement extends Components.SwirlIconMenuBook, HTMLStencilElement {
    }
    var HTMLSwirlIconMenuBookElement: {
        prototype: HTMLSwirlIconMenuBookElement;
        new (): HTMLSwirlIconMenuBookElement;
    };
    interface HTMLSwirlIconMenuFilledElement extends Components.SwirlIconMenuFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconMenuFilledElement: {
        prototype: HTMLSwirlIconMenuFilledElement;
        new (): HTMLSwirlIconMenuFilledElement;
    };
    interface HTMLSwirlIconMessageElement extends Components.SwirlIconMessage, HTMLStencilElement {
    }
    var HTMLSwirlIconMessageElement: {
        prototype: HTMLSwirlIconMessageElement;
        new (): HTMLSwirlIconMessageElement;
    };
    interface HTMLSwirlIconMicElement extends Components.SwirlIconMic, HTMLStencilElement {
    }
    var HTMLSwirlIconMicElement: {
        prototype: HTMLSwirlIconMicElement;
        new (): HTMLSwirlIconMicElement;
    };
    interface HTMLSwirlIconMoreHorizontalElement extends Components.SwirlIconMoreHorizontal, HTMLStencilElement {
    }
    var HTMLSwirlIconMoreHorizontalElement: {
        prototype: HTMLSwirlIconMoreHorizontalElement;
        new (): HTMLSwirlIconMoreHorizontalElement;
    };
    interface HTMLSwirlIconMoreVertikalElement extends Components.SwirlIconMoreVertikal, HTMLStencilElement {
    }
    var HTMLSwirlIconMoreVertikalElement: {
        prototype: HTMLSwirlIconMoreVertikalElement;
        new (): HTMLSwirlIconMoreVertikalElement;
    };
    interface HTMLSwirlIconNewsElement extends Components.SwirlIconNews, HTMLStencilElement {
    }
    var HTMLSwirlIconNewsElement: {
        prototype: HTMLSwirlIconNewsElement;
        new (): HTMLSwirlIconNewsElement;
    };
    interface HTMLSwirlIconNewsFilledElement extends Components.SwirlIconNewsFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconNewsFilledElement: {
        prototype: HTMLSwirlIconNewsFilledElement;
        new (): HTMLSwirlIconNewsFilledElement;
    };
    interface HTMLSwirlIconNewsOffElement extends Components.SwirlIconNewsOff, HTMLStencilElement {
    }
    var HTMLSwirlIconNewsOffElement: {
        prototype: HTMLSwirlIconNewsOffElement;
        new (): HTMLSwirlIconNewsOffElement;
    };
    interface HTMLSwirlIconNotificationsElement extends Components.SwirlIconNotifications, HTMLStencilElement {
    }
    var HTMLSwirlIconNotificationsElement: {
        prototype: HTMLSwirlIconNotificationsElement;
        new (): HTMLSwirlIconNotificationsElement;
    };
    interface HTMLSwirlIconNotificationsActiveElement extends Components.SwirlIconNotificationsActive, HTMLStencilElement {
    }
    var HTMLSwirlIconNotificationsActiveElement: {
        prototype: HTMLSwirlIconNotificationsActiveElement;
        new (): HTMLSwirlIconNotificationsActiveElement;
    };
    interface HTMLSwirlIconNotificationsOffElement extends Components.SwirlIconNotificationsOff, HTMLStencilElement {
    }
    var HTMLSwirlIconNotificationsOffElement: {
        prototype: HTMLSwirlIconNotificationsOffElement;
        new (): HTMLSwirlIconNotificationsOffElement;
    };
    interface HTMLSwirlIconOpenInFullElement extends Components.SwirlIconOpenInFull, HTMLStencilElement {
    }
    var HTMLSwirlIconOpenInFullElement: {
        prototype: HTMLSwirlIconOpenInFullElement;
        new (): HTMLSwirlIconOpenInFullElement;
    };
    interface HTMLSwirlIconOpenInNewElement extends Components.SwirlIconOpenInNew, HTMLStencilElement {
    }
    var HTMLSwirlIconOpenInNewElement: {
        prototype: HTMLSwirlIconOpenInNewElement;
        new (): HTMLSwirlIconOpenInNewElement;
    };
    interface HTMLSwirlIconPauseElement extends Components.SwirlIconPause, HTMLStencilElement {
    }
    var HTMLSwirlIconPauseElement: {
        prototype: HTMLSwirlIconPauseElement;
        new (): HTMLSwirlIconPauseElement;
    };
    interface HTMLSwirlIconPauseCircleElement extends Components.SwirlIconPauseCircle, HTMLStencilElement {
    }
    var HTMLSwirlIconPauseCircleElement: {
        prototype: HTMLSwirlIconPauseCircleElement;
        new (): HTMLSwirlIconPauseCircleElement;
    };
    interface HTMLSwirlIconPeopleAltElement extends Components.SwirlIconPeopleAlt, HTMLStencilElement {
    }
    var HTMLSwirlIconPeopleAltElement: {
        prototype: HTMLSwirlIconPeopleAltElement;
        new (): HTMLSwirlIconPeopleAltElement;
    };
    interface HTMLSwirlIconPersonElement extends Components.SwirlIconPerson, HTMLStencilElement {
    }
    var HTMLSwirlIconPersonElement: {
        prototype: HTMLSwirlIconPersonElement;
        new (): HTMLSwirlIconPersonElement;
    };
    interface HTMLSwirlIconPersonOffElement extends Components.SwirlIconPersonOff, HTMLStencilElement {
    }
    var HTMLSwirlIconPersonOffElement: {
        prototype: HTMLSwirlIconPersonOffElement;
        new (): HTMLSwirlIconPersonOffElement;
    };
    interface HTMLSwirlIconPhoneElement extends Components.SwirlIconPhone, HTMLStencilElement {
    }
    var HTMLSwirlIconPhoneElement: {
        prototype: HTMLSwirlIconPhoneElement;
        new (): HTMLSwirlIconPhoneElement;
    };
    interface HTMLSwirlIconPhotoCameraElement extends Components.SwirlIconPhotoCamera, HTMLStencilElement {
    }
    var HTMLSwirlIconPhotoCameraElement: {
        prototype: HTMLSwirlIconPhotoCameraElement;
        new (): HTMLSwirlIconPhotoCameraElement;
    };
    interface HTMLSwirlIconPlaceElement extends Components.SwirlIconPlace, HTMLStencilElement {
    }
    var HTMLSwirlIconPlaceElement: {
        prototype: HTMLSwirlIconPlaceElement;
        new (): HTMLSwirlIconPlaceElement;
    };
    interface HTMLSwirlIconPlayArrowElement extends Components.SwirlIconPlayArrow, HTMLStencilElement {
    }
    var HTMLSwirlIconPlayArrowElement: {
        prototype: HTMLSwirlIconPlayArrowElement;
        new (): HTMLSwirlIconPlayArrowElement;
    };
    interface HTMLSwirlIconPollElement extends Components.SwirlIconPoll, HTMLStencilElement {
    }
    var HTMLSwirlIconPollElement: {
        prototype: HTMLSwirlIconPollElement;
        new (): HTMLSwirlIconPollElement;
    };
    interface HTMLSwirlIconPrintElement extends Components.SwirlIconPrint, HTMLStencilElement {
    }
    var HTMLSwirlIconPrintElement: {
        prototype: HTMLSwirlIconPrintElement;
        new (): HTMLSwirlIconPrintElement;
    };
    interface HTMLSwirlIconRecievedElement extends Components.SwirlIconRecieved, HTMLStencilElement {
    }
    var HTMLSwirlIconRecievedElement: {
        prototype: HTMLSwirlIconRecievedElement;
        new (): HTMLSwirlIconRecievedElement;
    };
    interface HTMLSwirlIconRemoveElement extends Components.SwirlIconRemove, HTMLStencilElement {
    }
    var HTMLSwirlIconRemoveElement: {
        prototype: HTMLSwirlIconRemoveElement;
        new (): HTMLSwirlIconRemoveElement;
    };
    interface HTMLSwirlIconRemoveModeratorElement extends Components.SwirlIconRemoveModerator, HTMLStencilElement {
    }
    var HTMLSwirlIconRemoveModeratorElement: {
        prototype: HTMLSwirlIconRemoveModeratorElement;
        new (): HTMLSwirlIconRemoveModeratorElement;
    };
    interface HTMLSwirlIconReplyElement extends Components.SwirlIconReply, HTMLStencilElement {
    }
    var HTMLSwirlIconReplyElement: {
        prototype: HTMLSwirlIconReplyElement;
        new (): HTMLSwirlIconReplyElement;
    };
    interface HTMLSwirlIconReportElement extends Components.SwirlIconReport, HTMLStencilElement {
    }
    var HTMLSwirlIconReportElement: {
        prototype: HTMLSwirlIconReportElement;
        new (): HTMLSwirlIconReportElement;
    };
    interface HTMLSwirlIconRoadmapElement extends Components.SwirlIconRoadmap, HTMLStencilElement {
    }
    var HTMLSwirlIconRoadmapElement: {
        prototype: HTMLSwirlIconRoadmapElement;
        new (): HTMLSwirlIconRoadmapElement;
    };
    interface HTMLSwirlIconSearchElement extends Components.SwirlIconSearch, HTMLStencilElement {
    }
    var HTMLSwirlIconSearchElement: {
        prototype: HTMLSwirlIconSearchElement;
        new (): HTMLSwirlIconSearchElement;
    };
    interface HTMLSwirlIconSearchStrongElement extends Components.SwirlIconSearchStrong, HTMLStencilElement {
    }
    var HTMLSwirlIconSearchStrongElement: {
        prototype: HTMLSwirlIconSearchStrongElement;
        new (): HTMLSwirlIconSearchStrongElement;
    };
    interface HTMLSwirlIconSecureElement extends Components.SwirlIconSecure, HTMLStencilElement {
    }
    var HTMLSwirlIconSecureElement: {
        prototype: HTMLSwirlIconSecureElement;
        new (): HTMLSwirlIconSecureElement;
    };
    interface HTMLSwirlIconSendElement extends Components.SwirlIconSend, HTMLStencilElement {
    }
    var HTMLSwirlIconSendElement: {
        prototype: HTMLSwirlIconSendElement;
        new (): HTMLSwirlIconSendElement;
    };
    interface HTMLSwirlIconSettingsElement extends Components.SwirlIconSettings, HTMLStencilElement {
    }
    var HTMLSwirlIconSettingsElement: {
        prototype: HTMLSwirlIconSettingsElement;
        new (): HTMLSwirlIconSettingsElement;
    };
    interface HTMLSwirlIconShortTextElement extends Components.SwirlIconShortText, HTMLStencilElement {
    }
    var HTMLSwirlIconShortTextElement: {
        prototype: HTMLSwirlIconShortTextElement;
        new (): HTMLSwirlIconShortTextElement;
    };
    interface HTMLSwirlIconSimplifyElement extends Components.SwirlIconSimplify, HTMLStencilElement {
    }
    var HTMLSwirlIconSimplifyElement: {
        prototype: HTMLSwirlIconSimplifyElement;
        new (): HTMLSwirlIconSimplifyElement;
    };
    interface HTMLSwirlIconSpellcheckElement extends Components.SwirlIconSpellcheck, HTMLStencilElement {
    }
    var HTMLSwirlIconSpellcheckElement: {
        prototype: HTMLSwirlIconSpellcheckElement;
        new (): HTMLSwirlIconSpellcheckElement;
    };
    interface HTMLSwirlIconStopElement extends Components.SwirlIconStop, HTMLStencilElement {
    }
    var HTMLSwirlIconStopElement: {
        prototype: HTMLSwirlIconStopElement;
        new (): HTMLSwirlIconStopElement;
    };
    interface HTMLSwirlIconSyncElement extends Components.SwirlIconSync, HTMLStencilElement {
    }
    var HTMLSwirlIconSyncElement: {
        prototype: HTMLSwirlIconSyncElement;
        new (): HTMLSwirlIconSyncElement;
    };
    interface HTMLSwirlIconTasksElement extends Components.SwirlIconTasks, HTMLStencilElement {
    }
    var HTMLSwirlIconTasksElement: {
        prototype: HTMLSwirlIconTasksElement;
        new (): HTMLSwirlIconTasksElement;
    };
    interface HTMLSwirlIconTasksFilledElement extends Components.SwirlIconTasksFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconTasksFilledElement: {
        prototype: HTMLSwirlIconTasksFilledElement;
        new (): HTMLSwirlIconTasksFilledElement;
    };
    interface HTMLSwirlIconTerminalElement extends Components.SwirlIconTerminal, HTMLStencilElement {
    }
    var HTMLSwirlIconTerminalElement: {
        prototype: HTMLSwirlIconTerminalElement;
        new (): HTMLSwirlIconTerminalElement;
    };
    interface HTMLSwirlIconTimeElement extends Components.SwirlIconTime, HTMLStencilElement {
    }
    var HTMLSwirlIconTimeElement: {
        prototype: HTMLSwirlIconTimeElement;
        new (): HTMLSwirlIconTimeElement;
    };
    interface HTMLSwirlIconTimeFilledElement extends Components.SwirlIconTimeFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconTimeFilledElement: {
        prototype: HTMLSwirlIconTimeFilledElement;
        new (): HTMLSwirlIconTimeFilledElement;
    };
    interface HTMLSwirlIconTodayElement extends Components.SwirlIconToday, HTMLStencilElement {
    }
    var HTMLSwirlIconTodayElement: {
        prototype: HTMLSwirlIconTodayElement;
        new (): HTMLSwirlIconTodayElement;
    };
    interface HTMLSwirlIconTodayFilledElement extends Components.SwirlIconTodayFilled, HTMLStencilElement {
    }
    var HTMLSwirlIconTodayFilledElement: {
        prototype: HTMLSwirlIconTodayFilledElement;
        new (): HTMLSwirlIconTodayFilledElement;
    };
    interface HTMLSwirlIconTranslateElement extends Components.SwirlIconTranslate, HTMLStencilElement {
    }
    var HTMLSwirlIconTranslateElement: {
        prototype: HTMLSwirlIconTranslateElement;
        new (): HTMLSwirlIconTranslateElement;
    };
    interface HTMLSwirlIconTreeStructureElement extends Components.SwirlIconTreeStructure, HTMLStencilElement {
    }
    var HTMLSwirlIconTreeStructureElement: {
        prototype: HTMLSwirlIconTreeStructureElement;
        new (): HTMLSwirlIconTreeStructureElement;
    };
    interface HTMLSwirlIconUndoElement extends Components.SwirlIconUndo, HTMLStencilElement {
    }
    var HTMLSwirlIconUndoElement: {
        prototype: HTMLSwirlIconUndoElement;
        new (): HTMLSwirlIconUndoElement;
    };
    interface HTMLSwirlIconUnlockPersonElement extends Components.SwirlIconUnlockPerson, HTMLStencilElement {
    }
    var HTMLSwirlIconUnlockPersonElement: {
        prototype: HTMLSwirlIconUnlockPersonElement;
        new (): HTMLSwirlIconUnlockPersonElement;
    };
    interface HTMLSwirlIconUserAddElement extends Components.SwirlIconUserAdd, HTMLStencilElement {
    }
    var HTMLSwirlIconUserAddElement: {
        prototype: HTMLSwirlIconUserAddElement;
        new (): HTMLSwirlIconUserAddElement;
    };
    interface HTMLSwirlIconUserAssignElement extends Components.SwirlIconUserAssign, HTMLStencilElement {
    }
    var HTMLSwirlIconUserAssignElement: {
        prototype: HTMLSwirlIconUserAssignElement;
        new (): HTMLSwirlIconUserAssignElement;
    };
    interface HTMLSwirlIconVideoCameraElement extends Components.SwirlIconVideoCamera, HTMLStencilElement {
    }
    var HTMLSwirlIconVideoCameraElement: {
        prototype: HTMLSwirlIconVideoCameraElement;
        new (): HTMLSwirlIconVideoCameraElement;
    };
    interface HTMLSwirlIconVideoLibraryElement extends Components.SwirlIconVideoLibrary, HTMLStencilElement {
    }
    var HTMLSwirlIconVideoLibraryElement: {
        prototype: HTMLSwirlIconVideoLibraryElement;
        new (): HTMLSwirlIconVideoLibraryElement;
    };
    interface HTMLSwirlIconVisibilityElement extends Components.SwirlIconVisibility, HTMLStencilElement {
    }
    var HTMLSwirlIconVisibilityElement: {
        prototype: HTMLSwirlIconVisibilityElement;
        new (): HTMLSwirlIconVisibilityElement;
    };
    interface HTMLSwirlIconVisibilityOffElement extends Components.SwirlIconVisibilityOff, HTMLStencilElement {
    }
    var HTMLSwirlIconVisibilityOffElement: {
        prototype: HTMLSwirlIconVisibilityOffElement;
        new (): HTMLSwirlIconVisibilityOffElement;
    };
    interface HTMLSwirlIconVoiceElement extends Components.SwirlIconVoice, HTMLStencilElement {
    }
    var HTMLSwirlIconVoiceElement: {
        prototype: HTMLSwirlIconVoiceElement;
        new (): HTMLSwirlIconVoiceElement;
    };
    interface HTMLSwirlIconWarningElement extends Components.SwirlIconWarning, HTMLStencilElement {
    }
    var HTMLSwirlIconWarningElement: {
        prototype: HTMLSwirlIconWarningElement;
        new (): HTMLSwirlIconWarningElement;
    };
    interface HTMLSwirlIconWorkElement extends Components.SwirlIconWork, HTMLStencilElement {
    }
    var HTMLSwirlIconWorkElement: {
        prototype: HTMLSwirlIconWorkElement;
        new (): HTMLSwirlIconWorkElement;
    };
    interface HTMLSwirlImageGridElement extends Components.SwirlImageGrid, HTMLStencilElement {
    }
    var HTMLSwirlImageGridElement: {
        prototype: HTMLSwirlImageGridElement;
        new (): HTMLSwirlImageGridElement;
    };
    interface HTMLSwirlImageGridItemElement extends Components.SwirlImageGridItem, HTMLStencilElement {
    }
    var HTMLSwirlImageGridItemElement: {
        prototype: HTMLSwirlImageGridItemElement;
        new (): HTMLSwirlImageGridItemElement;
    };
    interface HTMLSwirlInlineErrorElement extends Components.SwirlInlineError, HTMLStencilElement {
    }
    var HTMLSwirlInlineErrorElement: {
        prototype: HTMLSwirlInlineErrorElement;
        new (): HTMLSwirlInlineErrorElement;
    };
    interface HTMLSwirlInlineNotificationElement extends Components.SwirlInlineNotification, HTMLStencilElement {
    }
    var HTMLSwirlInlineNotificationElement: {
        prototype: HTMLSwirlInlineNotificationElement;
        new (): HTMLSwirlInlineNotificationElement;
    };
    interface HTMLSwirlInlineStatusElement extends Components.SwirlInlineStatus, HTMLStencilElement {
    }
    var HTMLSwirlInlineStatusElement: {
        prototype: HTMLSwirlInlineStatusElement;
        new (): HTMLSwirlInlineStatusElement;
    };
    interface HTMLSwirlLightboxElement extends Components.SwirlLightbox, HTMLStencilElement {
    }
    var HTMLSwirlLightboxElement: {
        prototype: HTMLSwirlLightboxElement;
        new (): HTMLSwirlLightboxElement;
    };
    interface HTMLSwirlLinkElement extends Components.SwirlLink, HTMLStencilElement {
    }
    var HTMLSwirlLinkElement: {
        prototype: HTMLSwirlLinkElement;
        new (): HTMLSwirlLinkElement;
    };
    interface HTMLSwirlListElement extends Components.SwirlList, HTMLStencilElement {
    }
    var HTMLSwirlListElement: {
        prototype: HTMLSwirlListElement;
        new (): HTMLSwirlListElement;
    };
    interface HTMLSwirlMenuElement extends Components.SwirlMenu, HTMLStencilElement {
    }
    var HTMLSwirlMenuElement: {
        prototype: HTMLSwirlMenuElement;
        new (): HTMLSwirlMenuElement;
    };
    interface HTMLSwirlMenuItemElement extends Components.SwirlMenuItem, HTMLStencilElement {
    }
    var HTMLSwirlMenuItemElement: {
        prototype: HTMLSwirlMenuItemElement;
        new (): HTMLSwirlMenuItemElement;
    };
    interface HTMLSwirlModalElement extends Components.SwirlModal, HTMLStencilElement {
    }
    var HTMLSwirlModalElement: {
        prototype: HTMLSwirlModalElement;
        new (): HTMLSwirlModalElement;
    };
    interface HTMLSwirlOptionListElement extends Components.SwirlOptionList, HTMLStencilElement {
    }
    var HTMLSwirlOptionListElement: {
        prototype: HTMLSwirlOptionListElement;
        new (): HTMLSwirlOptionListElement;
    };
    interface HTMLSwirlOptionListItemElement extends Components.SwirlOptionListItem, HTMLStencilElement {
    }
    var HTMLSwirlOptionListItemElement: {
        prototype: HTMLSwirlOptionListItemElement;
        new (): HTMLSwirlOptionListItemElement;
    };
    interface HTMLSwirlOptionListSectionElement extends Components.SwirlOptionListSection, HTMLStencilElement {
    }
    var HTMLSwirlOptionListSectionElement: {
        prototype: HTMLSwirlOptionListSectionElement;
        new (): HTMLSwirlOptionListSectionElement;
    };
    interface HTMLSwirlPaginationElement extends Components.SwirlPagination, HTMLStencilElement {
    }
    var HTMLSwirlPaginationElement: {
        prototype: HTMLSwirlPaginationElement;
        new (): HTMLSwirlPaginationElement;
    };
    interface HTMLSwirlPdfReaderElement extends Components.SwirlPdfReader, HTMLStencilElement {
    }
    var HTMLSwirlPdfReaderElement: {
        prototype: HTMLSwirlPdfReaderElement;
        new (): HTMLSwirlPdfReaderElement;
    };
    interface HTMLSwirlPopoverElement extends Components.SwirlPopover, HTMLStencilElement {
    }
    var HTMLSwirlPopoverElement: {
        prototype: HTMLSwirlPopoverElement;
        new (): HTMLSwirlPopoverElement;
    };
    interface HTMLSwirlPopoverTriggerElement extends Components.SwirlPopoverTrigger, HTMLStencilElement {
    }
    var HTMLSwirlPopoverTriggerElement: {
        prototype: HTMLSwirlPopoverTriggerElement;
        new (): HTMLSwirlPopoverTriggerElement;
    };
    interface HTMLSwirlProgressIndicatorElement extends Components.SwirlProgressIndicator, HTMLStencilElement {
    }
    var HTMLSwirlProgressIndicatorElement: {
        prototype: HTMLSwirlProgressIndicatorElement;
        new (): HTMLSwirlProgressIndicatorElement;
    };
    interface HTMLSwirlRadioElement extends Components.SwirlRadio, HTMLStencilElement {
    }
    var HTMLSwirlRadioElement: {
        prototype: HTMLSwirlRadioElement;
        new (): HTMLSwirlRadioElement;
    };
    interface HTMLSwirlRadioGroupElement extends Components.SwirlRadioGroup, HTMLStencilElement {
    }
    var HTMLSwirlRadioGroupElement: {
        prototype: HTMLSwirlRadioGroupElement;
        new (): HTMLSwirlRadioGroupElement;
    };
    interface HTMLSwirlResourceListElement extends Components.SwirlResourceList, HTMLStencilElement {
    }
    var HTMLSwirlResourceListElement: {
        prototype: HTMLSwirlResourceListElement;
        new (): HTMLSwirlResourceListElement;
    };
    interface HTMLSwirlResourceListFileItemElement extends Components.SwirlResourceListFileItem, HTMLStencilElement {
    }
    var HTMLSwirlResourceListFileItemElement: {
        prototype: HTMLSwirlResourceListFileItemElement;
        new (): HTMLSwirlResourceListFileItemElement;
    };
    interface HTMLSwirlResourceListItemElement extends Components.SwirlResourceListItem, HTMLStencilElement {
    }
    var HTMLSwirlResourceListItemElement: {
        prototype: HTMLSwirlResourceListItemElement;
        new (): HTMLSwirlResourceListItemElement;
    };
    interface HTMLSwirlSearchElement extends Components.SwirlSearch, HTMLStencilElement {
    }
    var HTMLSwirlSearchElement: {
        prototype: HTMLSwirlSearchElement;
        new (): HTMLSwirlSearchElement;
    };
    interface HTMLSwirlSelectElement extends Components.SwirlSelect, HTMLStencilElement {
    }
    var HTMLSwirlSelectElement: {
        prototype: HTMLSwirlSelectElement;
        new (): HTMLSwirlSelectElement;
    };
    interface HTMLSwirlSeparatorElement extends Components.SwirlSeparator, HTMLStencilElement {
    }
    var HTMLSwirlSeparatorElement: {
        prototype: HTMLSwirlSeparatorElement;
        new (): HTMLSwirlSeparatorElement;
    };
    interface HTMLSwirlShellLayoutElement extends Components.SwirlShellLayout, HTMLStencilElement {
    }
    var HTMLSwirlShellLayoutElement: {
        prototype: HTMLSwirlShellLayoutElement;
        new (): HTMLSwirlShellLayoutElement;
    };
    interface HTMLSwirlShellNavigationItemElement extends Components.SwirlShellNavigationItem, HTMLStencilElement {
    }
    var HTMLSwirlShellNavigationItemElement: {
        prototype: HTMLSwirlShellNavigationItemElement;
        new (): HTMLSwirlShellNavigationItemElement;
    };
    interface HTMLSwirlSkeletonBoxElement extends Components.SwirlSkeletonBox, HTMLStencilElement {
    }
    var HTMLSwirlSkeletonBoxElement: {
        prototype: HTMLSwirlSkeletonBoxElement;
        new (): HTMLSwirlSkeletonBoxElement;
    };
    interface HTMLSwirlSkeletonTextElement extends Components.SwirlSkeletonText, HTMLStencilElement {
    }
    var HTMLSwirlSkeletonTextElement: {
        prototype: HTMLSwirlSkeletonTextElement;
        new (): HTMLSwirlSkeletonTextElement;
    };
    interface HTMLSwirlSpinnerElement extends Components.SwirlSpinner, HTMLStencilElement {
    }
    var HTMLSwirlSpinnerElement: {
        prototype: HTMLSwirlSpinnerElement;
        new (): HTMLSwirlSpinnerElement;
    };
    interface HTMLSwirlStackElement extends Components.SwirlStack, HTMLStencilElement {
    }
    var HTMLSwirlStackElement: {
        prototype: HTMLSwirlStackElement;
        new (): HTMLSwirlStackElement;
    };
    interface HTMLSwirlStatusIndicatorElement extends Components.SwirlStatusIndicator, HTMLStencilElement {
    }
    var HTMLSwirlStatusIndicatorElement: {
        prototype: HTMLSwirlStatusIndicatorElement;
        new (): HTMLSwirlStatusIndicatorElement;
    };
    interface HTMLSwirlSwitchElement extends Components.SwirlSwitch, HTMLStencilElement {
    }
    var HTMLSwirlSwitchElement: {
        prototype: HTMLSwirlSwitchElement;
        new (): HTMLSwirlSwitchElement;
    };
    interface HTMLSwirlSymbolElement extends Components.SwirlSymbol, HTMLStencilElement {
    }
    var HTMLSwirlSymbolElement: {
        prototype: HTMLSwirlSymbolElement;
        new (): HTMLSwirlSymbolElement;
    };
    interface HTMLSwirlSymbolAccountCircleElement extends Components.SwirlSymbolAccountCircle, HTMLStencilElement {
    }
    var HTMLSwirlSymbolAccountCircleElement: {
        prototype: HTMLSwirlSymbolAccountCircleElement;
        new (): HTMLSwirlSymbolAccountCircleElement;
    };
    interface HTMLSwirlSymbolAlternateEmailElement extends Components.SwirlSymbolAlternateEmail, HTMLStencilElement {
    }
    var HTMLSwirlSymbolAlternateEmailElement: {
        prototype: HTMLSwirlSymbolAlternateEmailElement;
        new (): HTMLSwirlSymbolAlternateEmailElement;
    };
    interface HTMLSwirlSymbolAndroidElement extends Components.SwirlSymbolAndroid, HTMLStencilElement {
    }
    var HTMLSwirlSymbolAndroidElement: {
        prototype: HTMLSwirlSymbolAndroidElement;
        new (): HTMLSwirlSymbolAndroidElement;
    };
    interface HTMLSwirlSymbolAnnouncementElement extends Components.SwirlSymbolAnnouncement, HTMLStencilElement {
    }
    var HTMLSwirlSymbolAnnouncementElement: {
        prototype: HTMLSwirlSymbolAnnouncementElement;
        new (): HTMLSwirlSymbolAnnouncementElement;
    };
    interface HTMLSwirlSymbolBackupElement extends Components.SwirlSymbolBackup, HTMLStencilElement {
    }
    var HTMLSwirlSymbolBackupElement: {
        prototype: HTMLSwirlSymbolBackupElement;
        new (): HTMLSwirlSymbolBackupElement;
    };
    interface HTMLSwirlSymbolBeachAccessElement extends Components.SwirlSymbolBeachAccess, HTMLStencilElement {
    }
    var HTMLSwirlSymbolBeachAccessElement: {
        prototype: HTMLSwirlSymbolBeachAccessElement;
        new (): HTMLSwirlSymbolBeachAccessElement;
    };
    interface HTMLSwirlSymbolBookmarkElement extends Components.SwirlSymbolBookmark, HTMLStencilElement {
    }
    var HTMLSwirlSymbolBookmarkElement: {
        prototype: HTMLSwirlSymbolBookmarkElement;
        new (): HTMLSwirlSymbolBookmarkElement;
    };
    interface HTMLSwirlSymbolCloudElement extends Components.SwirlSymbolCloud, HTMLStencilElement {
    }
    var HTMLSwirlSymbolCloudElement: {
        prototype: HTMLSwirlSymbolCloudElement;
        new (): HTMLSwirlSymbolCloudElement;
    };
    interface HTMLSwirlSymbolCoronavirusElement extends Components.SwirlSymbolCoronavirus, HTMLStencilElement {
    }
    var HTMLSwirlSymbolCoronavirusElement: {
        prototype: HTMLSwirlSymbolCoronavirusElement;
        new (): HTMLSwirlSymbolCoronavirusElement;
    };
    interface HTMLSwirlSymbolDesktopWindowsElement extends Components.SwirlSymbolDesktopWindows, HTMLStencilElement {
    }
    var HTMLSwirlSymbolDesktopWindowsElement: {
        prototype: HTMLSwirlSymbolDesktopWindowsElement;
        new (): HTMLSwirlSymbolDesktopWindowsElement;
    };
    interface HTMLSwirlSymbolDirectionsCarFilledElement extends Components.SwirlSymbolDirectionsCarFilled, HTMLStencilElement {
    }
    var HTMLSwirlSymbolDirectionsCarFilledElement: {
        prototype: HTMLSwirlSymbolDirectionsCarFilledElement;
        new (): HTMLSwirlSymbolDirectionsCarFilledElement;
    };
    interface HTMLSwirlSymbolEditCalendarElement extends Components.SwirlSymbolEditCalendar, HTMLStencilElement {
    }
    var HTMLSwirlSymbolEditCalendarElement: {
        prototype: HTMLSwirlSymbolEditCalendarElement;
        new (): HTMLSwirlSymbolEditCalendarElement;
    };
    interface HTMLSwirlSymbolEmailElement extends Components.SwirlSymbolEmail, HTMLStencilElement {
    }
    var HTMLSwirlSymbolEmailElement: {
        prototype: HTMLSwirlSymbolEmailElement;
        new (): HTMLSwirlSymbolEmailElement;
    };
    interface HTMLSwirlSymbolEmojiFoodBeverageElement extends Components.SwirlSymbolEmojiFoodBeverage, HTMLStencilElement {
    }
    var HTMLSwirlSymbolEmojiFoodBeverageElement: {
        prototype: HTMLSwirlSymbolEmojiFoodBeverageElement;
        new (): HTMLSwirlSymbolEmojiFoodBeverageElement;
    };
    interface HTMLSwirlSymbolEventMenuElement extends Components.SwirlSymbolEventMenu, HTMLStencilElement {
    }
    var HTMLSwirlSymbolEventMenuElement: {
        prototype: HTMLSwirlSymbolEventMenuElement;
        new (): HTMLSwirlSymbolEventMenuElement;
    };
    interface HTMLSwirlSymbolFacebookElement extends Components.SwirlSymbolFacebook, HTMLStencilElement {
    }
    var HTMLSwirlSymbolFacebookElement: {
        prototype: HTMLSwirlSymbolFacebookElement;
        new (): HTMLSwirlSymbolFacebookElement;
    };
    interface HTMLSwirlSymbolFavoriteElement extends Components.SwirlSymbolFavorite, HTMLStencilElement {
    }
    var HTMLSwirlSymbolFavoriteElement: {
        prototype: HTMLSwirlSymbolFavoriteElement;
        new (): HTMLSwirlSymbolFavoriteElement;
    };
    interface HTMLSwirlSymbolFitnessCenterElement extends Components.SwirlSymbolFitnessCenter, HTMLStencilElement {
    }
    var HTMLSwirlSymbolFitnessCenterElement: {
        prototype: HTMLSwirlSymbolFitnessCenterElement;
        new (): HTMLSwirlSymbolFitnessCenterElement;
    };
    interface HTMLSwirlSymbolFlagElement extends Components.SwirlSymbolFlag, HTMLStencilElement {
    }
    var HTMLSwirlSymbolFlagElement: {
        prototype: HTMLSwirlSymbolFlagElement;
        new (): HTMLSwirlSymbolFlagElement;
    };
    interface HTMLSwirlSymbolFolderElement extends Components.SwirlSymbolFolder, HTMLStencilElement {
    }
    var HTMLSwirlSymbolFolderElement: {
        prototype: HTMLSwirlSymbolFolderElement;
        new (): HTMLSwirlSymbolFolderElement;
    };
    interface HTMLSwirlSymbolGlobeElement extends Components.SwirlSymbolGlobe, HTMLStencilElement {
    }
    var HTMLSwirlSymbolGlobeElement: {
        prototype: HTMLSwirlSymbolGlobeElement;
        new (): HTMLSwirlSymbolGlobeElement;
    };
    interface HTMLSwirlSymbolGroupsElement extends Components.SwirlSymbolGroups, HTMLStencilElement {
    }
    var HTMLSwirlSymbolGroupsElement: {
        prototype: HTMLSwirlSymbolGroupsElement;
        new (): HTMLSwirlSymbolGroupsElement;
    };
    interface HTMLSwirlSymbolHelpElement extends Components.SwirlSymbolHelp, HTMLStencilElement {
    }
    var HTMLSwirlSymbolHelpElement: {
        prototype: HTMLSwirlSymbolHelpElement;
        new (): HTMLSwirlSymbolHelpElement;
    };
    interface HTMLSwirlSymbolImageElement extends Components.SwirlSymbolImage, HTMLStencilElement {
    }
    var HTMLSwirlSymbolImageElement: {
        prototype: HTMLSwirlSymbolImageElement;
        new (): HTMLSwirlSymbolImageElement;
    };
    interface HTMLSwirlSymbolInfoMenuElement extends Components.SwirlSymbolInfoMenu, HTMLStencilElement {
    }
    var HTMLSwirlSymbolInfoMenuElement: {
        prototype: HTMLSwirlSymbolInfoMenuElement;
        new (): HTMLSwirlSymbolInfoMenuElement;
    };
    interface HTMLSwirlSymbolInstagramElement extends Components.SwirlSymbolInstagram, HTMLStencilElement {
    }
    var HTMLSwirlSymbolInstagramElement: {
        prototype: HTMLSwirlSymbolInstagramElement;
        new (): HTMLSwirlSymbolInstagramElement;
    };
    interface HTMLSwirlSymbolIosElement extends Components.SwirlSymbolIos, HTMLStencilElement {
    }
    var HTMLSwirlSymbolIosElement: {
        prototype: HTMLSwirlSymbolIosElement;
        new (): HTMLSwirlSymbolIosElement;
    };
    interface HTMLSwirlSymbolLanguageElement extends Components.SwirlSymbolLanguage, HTMLStencilElement {
    }
    var HTMLSwirlSymbolLanguageElement: {
        prototype: HTMLSwirlSymbolLanguageElement;
        new (): HTMLSwirlSymbolLanguageElement;
    };
    interface HTMLSwirlSymbolLeaderboardElement extends Components.SwirlSymbolLeaderboard, HTMLStencilElement {
    }
    var HTMLSwirlSymbolLeaderboardElement: {
        prototype: HTMLSwirlSymbolLeaderboardElement;
        new (): HTMLSwirlSymbolLeaderboardElement;
    };
    interface HTMLSwirlSymbolLightbulbElement extends Components.SwirlSymbolLightbulb, HTMLStencilElement {
    }
    var HTMLSwirlSymbolLightbulbElement: {
        prototype: HTMLSwirlSymbolLightbulbElement;
        new (): HTMLSwirlSymbolLightbulbElement;
    };
    interface HTMLSwirlSymbolLinkedinElement extends Components.SwirlSymbolLinkedin, HTMLStencilElement {
    }
    var HTMLSwirlSymbolLinkedinElement: {
        prototype: HTMLSwirlSymbolLinkedinElement;
        new (): HTMLSwirlSymbolLinkedinElement;
    };
    interface HTMLSwirlSymbolLocationOnElement extends Components.SwirlSymbolLocationOn, HTMLStencilElement {
    }
    var HTMLSwirlSymbolLocationOnElement: {
        prototype: HTMLSwirlSymbolLocationOnElement;
        new (): HTMLSwirlSymbolLocationOnElement;
    };
    interface HTMLSwirlSymbolLoyaltyElement extends Components.SwirlSymbolLoyalty, HTMLStencilElement {
    }
    var HTMLSwirlSymbolLoyaltyElement: {
        prototype: HTMLSwirlSymbolLoyaltyElement;
        new (): HTMLSwirlSymbolLoyaltyElement;
    };
    interface HTMLSwirlSymbolMapsHomeWorkElement extends Components.SwirlSymbolMapsHomeWork, HTMLStencilElement {
    }
    var HTMLSwirlSymbolMapsHomeWorkElement: {
        prototype: HTMLSwirlSymbolMapsHomeWorkElement;
        new (): HTMLSwirlSymbolMapsHomeWorkElement;
    };
    interface HTMLSwirlSymbolNotificationsElement extends Components.SwirlSymbolNotifications, HTMLStencilElement {
    }
    var HTMLSwirlSymbolNotificationsElement: {
        prototype: HTMLSwirlSymbolNotificationsElement;
        new (): HTMLSwirlSymbolNotificationsElement;
    };
    interface HTMLSwirlSymbolOpenInNewElement extends Components.SwirlSymbolOpenInNew, HTMLStencilElement {
    }
    var HTMLSwirlSymbolOpenInNewElement: {
        prototype: HTMLSwirlSymbolOpenInNewElement;
        new (): HTMLSwirlSymbolOpenInNewElement;
    };
    interface HTMLSwirlSymbolPedalBikeElement extends Components.SwirlSymbolPedalBike, HTMLStencilElement {
    }
    var HTMLSwirlSymbolPedalBikeElement: {
        prototype: HTMLSwirlSymbolPedalBikeElement;
        new (): HTMLSwirlSymbolPedalBikeElement;
    };
    interface HTMLSwirlSymbolPinterestElement extends Components.SwirlSymbolPinterest, HTMLStencilElement {
    }
    var HTMLSwirlSymbolPinterestElement: {
        prototype: HTMLSwirlSymbolPinterestElement;
        new (): HTMLSwirlSymbolPinterestElement;
    };
    interface HTMLSwirlSymbolPolicyElement extends Components.SwirlSymbolPolicy, HTMLStencilElement {
    }
    var HTMLSwirlSymbolPolicyElement: {
        prototype: HTMLSwirlSymbolPolicyElement;
        new (): HTMLSwirlSymbolPolicyElement;
    };
    interface HTMLSwirlSymbolPushPinElement extends Components.SwirlSymbolPushPin, HTMLStencilElement {
    }
    var HTMLSwirlSymbolPushPinElement: {
        prototype: HTMLSwirlSymbolPushPinElement;
        new (): HTMLSwirlSymbolPushPinElement;
    };
    interface HTMLSwirlSymbolRedeemElement extends Components.SwirlSymbolRedeem, HTMLStencilElement {
    }
    var HTMLSwirlSymbolRedeemElement: {
        prototype: HTMLSwirlSymbolRedeemElement;
        new (): HTMLSwirlSymbolRedeemElement;
    };
    interface HTMLSwirlSymbolReportProblemElement extends Components.SwirlSymbolReportProblem, HTMLStencilElement {
    }
    var HTMLSwirlSymbolReportProblemElement: {
        prototype: HTMLSwirlSymbolReportProblemElement;
        new (): HTMLSwirlSymbolReportProblemElement;
    };
    interface HTMLSwirlSymbolRestaurantElement extends Components.SwirlSymbolRestaurant, HTMLStencilElement {
    }
    var HTMLSwirlSymbolRestaurantElement: {
        prototype: HTMLSwirlSymbolRestaurantElement;
        new (): HTMLSwirlSymbolRestaurantElement;
    };
    interface HTMLSwirlSymbolRoadmapElement extends Components.SwirlSymbolRoadmap, HTMLStencilElement {
    }
    var HTMLSwirlSymbolRoadmapElement: {
        prototype: HTMLSwirlSymbolRoadmapElement;
        new (): HTMLSwirlSymbolRoadmapElement;
    };
    interface HTMLSwirlSymbolRoomElement extends Components.SwirlSymbolRoom, HTMLStencilElement {
    }
    var HTMLSwirlSymbolRoomElement: {
        prototype: HTMLSwirlSymbolRoomElement;
        new (): HTMLSwirlSymbolRoomElement;
    };
    interface HTMLSwirlSymbolSavingsElement extends Components.SwirlSymbolSavings, HTMLStencilElement {
    }
    var HTMLSwirlSymbolSavingsElement: {
        prototype: HTMLSwirlSymbolSavingsElement;
        new (): HTMLSwirlSymbolSavingsElement;
    };
    interface HTMLSwirlSymbolSettingsVoiceElement extends Components.SwirlSymbolSettingsVoice, HTMLStencilElement {
    }
    var HTMLSwirlSymbolSettingsVoiceElement: {
        prototype: HTMLSwirlSymbolSettingsVoiceElement;
        new (): HTMLSwirlSymbolSettingsVoiceElement;
    };
    interface HTMLSwirlSymbolShoppingCartElement extends Components.SwirlSymbolShoppingCart, HTMLStencilElement {
    }
    var HTMLSwirlSymbolShoppingCartElement: {
        prototype: HTMLSwirlSymbolShoppingCartElement;
        new (): HTMLSwirlSymbolShoppingCartElement;
    };
    interface HTMLSwirlSymbolSmartphoneElement extends Components.SwirlSymbolSmartphone, HTMLStencilElement {
    }
    var HTMLSwirlSymbolSmartphoneElement: {
        prototype: HTMLSwirlSymbolSmartphoneElement;
        new (): HTMLSwirlSymbolSmartphoneElement;
    };
    interface HTMLSwirlSymbolStarElement extends Components.SwirlSymbolStar, HTMLStencilElement {
    }
    var HTMLSwirlSymbolStarElement: {
        prototype: HTMLSwirlSymbolStarElement;
        new (): HTMLSwirlSymbolStarElement;
    };
    interface HTMLSwirlSymbolSupervisorAccountElement extends Components.SwirlSymbolSupervisorAccount, HTMLStencilElement {
    }
    var HTMLSwirlSymbolSupervisorAccountElement: {
        prototype: HTMLSwirlSymbolSupervisorAccountElement;
        new (): HTMLSwirlSymbolSupervisorAccountElement;
    };
    interface HTMLSwirlSymbolThumbsUpDownElement extends Components.SwirlSymbolThumbsUpDown, HTMLStencilElement {
    }
    var HTMLSwirlSymbolThumbsUpDownElement: {
        prototype: HTMLSwirlSymbolThumbsUpDownElement;
        new (): HTMLSwirlSymbolThumbsUpDownElement;
    };
    interface HTMLSwirlSymbolTwitterElement extends Components.SwirlSymbolTwitter, HTMLStencilElement {
    }
    var HTMLSwirlSymbolTwitterElement: {
        prototype: HTMLSwirlSymbolTwitterElement;
        new (): HTMLSwirlSymbolTwitterElement;
    };
    interface HTMLSwirlSymbolWbSunnyElement extends Components.SwirlSymbolWbSunny, HTMLStencilElement {
    }
    var HTMLSwirlSymbolWbSunnyElement: {
        prototype: HTMLSwirlSymbolWbSunnyElement;
        new (): HTMLSwirlSymbolWbSunnyElement;
    };
    interface HTMLSwirlSymbolWechatElement extends Components.SwirlSymbolWechat, HTMLStencilElement {
    }
    var HTMLSwirlSymbolWechatElement: {
        prototype: HTMLSwirlSymbolWechatElement;
        new (): HTMLSwirlSymbolWechatElement;
    };
    interface HTMLSwirlSymbolWeiboElement extends Components.SwirlSymbolWeibo, HTMLStencilElement {
    }
    var HTMLSwirlSymbolWeiboElement: {
        prototype: HTMLSwirlSymbolWeiboElement;
        new (): HTMLSwirlSymbolWeiboElement;
    };
    interface HTMLSwirlSymbolWorkElement extends Components.SwirlSymbolWork, HTMLStencilElement {
    }
    var HTMLSwirlSymbolWorkElement: {
        prototype: HTMLSwirlSymbolWorkElement;
        new (): HTMLSwirlSymbolWorkElement;
    };
    interface HTMLSwirlSymbolXingElement extends Components.SwirlSymbolXing, HTMLStencilElement {
    }
    var HTMLSwirlSymbolXingElement: {
        prototype: HTMLSwirlSymbolXingElement;
        new (): HTMLSwirlSymbolXingElement;
    };
    interface HTMLSwirlSymbolYoutubeElement extends Components.SwirlSymbolYoutube, HTMLStencilElement {
    }
    var HTMLSwirlSymbolYoutubeElement: {
        prototype: HTMLSwirlSymbolYoutubeElement;
        new (): HTMLSwirlSymbolYoutubeElement;
    };
    interface HTMLSwirlTabElement extends Components.SwirlTab, HTMLStencilElement {
    }
    var HTMLSwirlTabElement: {
        prototype: HTMLSwirlTabElement;
        new (): HTMLSwirlTabElement;
    };
    interface HTMLSwirlTabBarElement extends Components.SwirlTabBar, HTMLStencilElement {
    }
    var HTMLSwirlTabBarElement: {
        prototype: HTMLSwirlTabBarElement;
        new (): HTMLSwirlTabBarElement;
    };
    interface HTMLSwirlTableElement extends Components.SwirlTable, HTMLStencilElement {
    }
    var HTMLSwirlTableElement: {
        prototype: HTMLSwirlTableElement;
        new (): HTMLSwirlTableElement;
    };
    interface HTMLSwirlTableCellElement extends Components.SwirlTableCell, HTMLStencilElement {
    }
    var HTMLSwirlTableCellElement: {
        prototype: HTMLSwirlTableCellElement;
        new (): HTMLSwirlTableCellElement;
    };
    interface HTMLSwirlTableColumnElement extends Components.SwirlTableColumn, HTMLStencilElement {
    }
    var HTMLSwirlTableColumnElement: {
        prototype: HTMLSwirlTableColumnElement;
        new (): HTMLSwirlTableColumnElement;
    };
    interface HTMLSwirlTableRowElement extends Components.SwirlTableRow, HTMLStencilElement {
    }
    var HTMLSwirlTableRowElement: {
        prototype: HTMLSwirlTableRowElement;
        new (): HTMLSwirlTableRowElement;
    };
    interface HTMLSwirlTableRowGroupElement extends Components.SwirlTableRowGroup, HTMLStencilElement {
    }
    var HTMLSwirlTableRowGroupElement: {
        prototype: HTMLSwirlTableRowGroupElement;
        new (): HTMLSwirlTableRowGroupElement;
    };
    interface HTMLSwirlTabsElement extends Components.SwirlTabs, HTMLStencilElement {
    }
    var HTMLSwirlTabsElement: {
        prototype: HTMLSwirlTabsElement;
        new (): HTMLSwirlTabsElement;
    };
    interface HTMLSwirlTagElement extends Components.SwirlTag, HTMLStencilElement {
    }
    var HTMLSwirlTagElement: {
        prototype: HTMLSwirlTagElement;
        new (): HTMLSwirlTagElement;
    };
    interface HTMLSwirlTextElement extends Components.SwirlText, HTMLStencilElement {
    }
    var HTMLSwirlTextElement: {
        prototype: HTMLSwirlTextElement;
        new (): HTMLSwirlTextElement;
    };
    interface HTMLSwirlTextInputElement extends Components.SwirlTextInput, HTMLStencilElement {
    }
    var HTMLSwirlTextInputElement: {
        prototype: HTMLSwirlTextInputElement;
        new (): HTMLSwirlTextInputElement;
    };
    interface HTMLSwirlThemeProviderElement extends Components.SwirlThemeProvider, HTMLStencilElement {
    }
    var HTMLSwirlThemeProviderElement: {
        prototype: HTMLSwirlThemeProviderElement;
        new (): HTMLSwirlThemeProviderElement;
    };
    interface HTMLSwirlThumbnailElement extends Components.SwirlThumbnail, HTMLStencilElement {
    }
    var HTMLSwirlThumbnailElement: {
        prototype: HTMLSwirlThumbnailElement;
        new (): HTMLSwirlThumbnailElement;
    };
    interface HTMLSwirlTimeInputElement extends Components.SwirlTimeInput, HTMLStencilElement {
    }
    var HTMLSwirlTimeInputElement: {
        prototype: HTMLSwirlTimeInputElement;
        new (): HTMLSwirlTimeInputElement;
    };
    interface HTMLSwirlToastElement extends Components.SwirlToast, HTMLStencilElement {
    }
    var HTMLSwirlToastElement: {
        prototype: HTMLSwirlToastElement;
        new (): HTMLSwirlToastElement;
    };
    interface HTMLSwirlToastProviderElement extends Components.SwirlToastProvider, HTMLStencilElement {
    }
    var HTMLSwirlToastProviderElement: {
        prototype: HTMLSwirlToastProviderElement;
        new (): HTMLSwirlToastProviderElement;
    };
    interface HTMLSwirlToolbarElement extends Components.SwirlToolbar, HTMLStencilElement {
    }
    var HTMLSwirlToolbarElement: {
        prototype: HTMLSwirlToolbarElement;
        new (): HTMLSwirlToolbarElement;
    };
    interface HTMLSwirlTooltipElement extends Components.SwirlTooltip, HTMLStencilElement {
    }
    var HTMLSwirlTooltipElement: {
        prototype: HTMLSwirlTooltipElement;
        new (): HTMLSwirlTooltipElement;
    };
    interface HTMLSwirlTreeNavigationItemElement extends Components.SwirlTreeNavigationItem, HTMLStencilElement {
    }
    var HTMLSwirlTreeNavigationItemElement: {
        prototype: HTMLSwirlTreeNavigationItemElement;
        new (): HTMLSwirlTreeNavigationItemElement;
    };
    interface HTMLSwirlVideoThumbnailElement extends Components.SwirlVideoThumbnail, HTMLStencilElement {
    }
    var HTMLSwirlVideoThumbnailElement: {
        prototype: HTMLSwirlVideoThumbnailElement;
        new (): HTMLSwirlVideoThumbnailElement;
    };
    interface HTMLSwirlVisuallyHiddenElement extends Components.SwirlVisuallyHidden, HTMLStencilElement {
    }
    var HTMLSwirlVisuallyHiddenElement: {
        prototype: HTMLSwirlVisuallyHiddenElement;
        new (): HTMLSwirlVisuallyHiddenElement;
    };
    interface HTMLElementTagNameMap {
        "file-manager": HTMLFileManagerElement;
        "swirl-accordion": HTMLSwirlAccordionElement;
        "swirl-accordion-item": HTMLSwirlAccordionItemElement;
        "swirl-action-list": HTMLSwirlActionListElement;
        "swirl-action-list-item": HTMLSwirlActionListItemElement;
        "swirl-action-list-section": HTMLSwirlActionListSectionElement;
        "swirl-app-bar": HTMLSwirlAppBarElement;
        "swirl-app-icon": HTMLSwirlAppIconElement;
        "swirl-app-layout": HTMLSwirlAppLayoutElement;
        "swirl-autocomplete": HTMLSwirlAutocompleteElement;
        "swirl-avatar": HTMLSwirlAvatarElement;
        "swirl-avatar-group": HTMLSwirlAvatarGroupElement;
        "swirl-badge": HTMLSwirlBadgeElement;
        "swirl-banner": HTMLSwirlBannerElement;
        "swirl-box": HTMLSwirlBoxElement;
        "swirl-button": HTMLSwirlButtonElement;
        "swirl-button-group": HTMLSwirlButtonGroupElement;
        "swirl-card": HTMLSwirlCardElement;
        "swirl-carousel": HTMLSwirlCarouselElement;
        "swirl-carousel-slide": HTMLSwirlCarouselSlideElement;
        "swirl-checkbox": HTMLSwirlCheckboxElement;
        "swirl-chip": HTMLSwirlChipElement;
        "swirl-color-input": HTMLSwirlColorInputElement;
        "swirl-columns": HTMLSwirlColumnsElement;
        "swirl-console-layout": HTMLSwirlConsoleLayoutElement;
        "swirl-date-input": HTMLSwirlDateInputElement;
        "swirl-date-picker": HTMLSwirlDatePickerElement;
        "swirl-description-list": HTMLSwirlDescriptionListElement;
        "swirl-description-list-item": HTMLSwirlDescriptionListItemElement;
        "swirl-dialog": HTMLSwirlDialogElement;
        "swirl-emoji": HTMLSwirlEmojiElement;
        "swirl-emoji-clap": HTMLSwirlEmojiClapElement;
        "swirl-emoji-happy": HTMLSwirlEmojiHappyElement;
        "swirl-emoji-idea": HTMLSwirlEmojiIdeaElement;
        "swirl-emoji-love": HTMLSwirlEmojiLoveElement;
        "swirl-emoji-sad": HTMLSwirlEmojiSadElement;
        "swirl-emoji-thumbs-up": HTMLSwirlEmojiThumbsUpElement;
        "swirl-empty-state": HTMLSwirlEmptyStateElement;
        "swirl-file-uploader": HTMLSwirlFileUploaderElement;
        "swirl-file-viewer": HTMLSwirlFileViewerElement;
        "swirl-file-viewer-audio": HTMLSwirlFileViewerAudioElement;
        "swirl-file-viewer-csv": HTMLSwirlFileViewerCsvElement;
        "swirl-file-viewer-image": HTMLSwirlFileViewerImageElement;
        "swirl-file-viewer-pdf": HTMLSwirlFileViewerPdfElement;
        "swirl-file-viewer-text": HTMLSwirlFileViewerTextElement;
        "swirl-file-viewer-video": HTMLSwirlFileViewerVideoElement;
        "swirl-form-control": HTMLSwirlFormControlElement;
        "swirl-form-group": HTMLSwirlFormGroupElement;
        "swirl-heading": HTMLSwirlHeadingElement;
        "swirl-icon": HTMLSwirlIconElement;
        "swirl-icon-add": HTMLSwirlIconAddElement;
        "swirl-icon-add-moderator": HTMLSwirlIconAddModeratorElement;
        "swirl-icon-add-photo": HTMLSwirlIconAddPhotoElement;
        "swirl-icon-add-reaction": HTMLSwirlIconAddReactionElement;
        "swirl-icon-admin-panel-settings": HTMLSwirlIconAdminPanelSettingsElement;
        "swirl-icon-ai": HTMLSwirlIconAiElement;
        "swirl-icon-apps": HTMLSwirlIconAppsElement;
        "swirl-icon-arrow-back": HTMLSwirlIconArrowBackElement;
        "swirl-icon-arrow-downward": HTMLSwirlIconArrowDownwardElement;
        "swirl-icon-arrow-forward": HTMLSwirlIconArrowForwardElement;
        "swirl-icon-arrow-left": HTMLSwirlIconArrowLeftElement;
        "swirl-icon-arrow-right": HTMLSwirlIconArrowRightElement;
        "swirl-icon-arrow-right-small": HTMLSwirlIconArrowRightSmallElement;
        "swirl-icon-arrow-upward": HTMLSwirlIconArrowUpwardElement;
        "swirl-icon-attachment": HTMLSwirlIconAttachmentElement;
        "swirl-icon-bar-chart": HTMLSwirlIconBarChartElement;
        "swirl-icon-block": HTMLSwirlIconBlockElement;
        "swirl-icon-bookmark": HTMLSwirlIconBookmarkElement;
        "swirl-icon-bookmark-filled": HTMLSwirlIconBookmarkFilledElement;
        "swirl-icon-cancel": HTMLSwirlIconCancelElement;
        "swirl-icon-chat-bubble": HTMLSwirlIconChatBubbleElement;
        "swirl-icon-chats": HTMLSwirlIconChatsElement;
        "swirl-icon-chats-filled": HTMLSwirlIconChatsFilledElement;
        "swirl-icon-check": HTMLSwirlIconCheckElement;
        "swirl-icon-check-circle": HTMLSwirlIconCheckCircleElement;
        "swirl-icon-check-small": HTMLSwirlIconCheckSmallElement;
        "swirl-icon-check-strong": HTMLSwirlIconCheckStrongElement;
        "swirl-icon-chevron-left": HTMLSwirlIconChevronLeftElement;
        "swirl-icon-chevron-right": HTMLSwirlIconChevronRightElement;
        "swirl-icon-close": HTMLSwirlIconCloseElement;
        "swirl-icon-close-small": HTMLSwirlIconCloseSmallElement;
        "swirl-icon-cloud-upload": HTMLSwirlIconCloudUploadElement;
        "swirl-icon-column": HTMLSwirlIconColumnElement;
        "swirl-icon-comment": HTMLSwirlIconCommentElement;
        "swirl-icon-copy": HTMLSwirlIconCopyElement;
        "swirl-icon-dark-mode": HTMLSwirlIconDarkModeElement;
        "swirl-icon-date-range": HTMLSwirlIconDateRangeElement;
        "swirl-icon-delete": HTMLSwirlIconDeleteElement;
        "swirl-icon-description": HTMLSwirlIconDescriptionElement;
        "swirl-icon-desktop": HTMLSwirlIconDesktopElement;
        "swirl-icon-directory": HTMLSwirlIconDirectoryElement;
        "swirl-icon-directory-filled": HTMLSwirlIconDirectoryFilledElement;
        "swirl-icon-discover": HTMLSwirlIconDiscoverElement;
        "swirl-icon-dock-left": HTMLSwirlIconDockLeftElement;
        "swirl-icon-dot": HTMLSwirlIconDotElement;
        "swirl-icon-double-arrow-left": HTMLSwirlIconDoubleArrowLeftElement;
        "swirl-icon-double-arrow-right": HTMLSwirlIconDoubleArrowRightElement;
        "swirl-icon-download": HTMLSwirlIconDownloadElement;
        "swirl-icon-drag-handle": HTMLSwirlIconDragHandleElement;
        "swirl-icon-edit": HTMLSwirlIconEditElement;
        "swirl-icon-emoji-mood": HTMLSwirlIconEmojiMoodElement;
        "swirl-icon-emoji-satisfied": HTMLSwirlIconEmojiSatisfiedElement;
        "swirl-icon-error": HTMLSwirlIconErrorElement;
        "swirl-icon-expand-less": HTMLSwirlIconExpandLessElement;
        "swirl-icon-expand-more": HTMLSwirlIconExpandMoreElement;
        "swirl-icon-file": HTMLSwirlIconFileElement;
        "swirl-icon-file-copy": HTMLSwirlIconFileCopyElement;
        "swirl-icon-filter": HTMLSwirlIconFilterElement;
        "swirl-icon-folder": HTMLSwirlIconFolderElement;
        "swirl-icon-folder-shared": HTMLSwirlIconFolderSharedElement;
        "swirl-icon-format-h-one": HTMLSwirlIconFormatHOneElement;
        "swirl-icon-fullscreen": HTMLSwirlIconFullscreenElement;
        "swirl-icon-fullscreen-exit": HTMLSwirlIconFullscreenExitElement;
        "swirl-icon-gif": HTMLSwirlIconGifElement;
        "swirl-icon-group-add": HTMLSwirlIconGroupAddElement;
        "swirl-icon-group-assign": HTMLSwirlIconGroupAssignElement;
        "swirl-icon-groups": HTMLSwirlIconGroupsElement;
        "swirl-icon-groups-filled": HTMLSwirlIconGroupsFilledElement;
        "swirl-icon-hamburger-menu": HTMLSwirlIconHamburgerMenuElement;
        "swirl-icon-help": HTMLSwirlIconHelpElement;
        "swirl-icon-highlight": HTMLSwirlIconHighlightElement;
        "swirl-icon-home": HTMLSwirlIconHomeElement;
        "swirl-icon-image": HTMLSwirlIconImageElement;
        "swirl-icon-improve-text": HTMLSwirlIconImproveTextElement;
        "swirl-icon-info": HTMLSwirlIconInfoElement;
        "swirl-icon-insert-below": HTMLSwirlIconInsertBelowElement;
        "swirl-icon-insert-on-top": HTMLSwirlIconInsertOnTopElement;
        "swirl-icon-inventory": HTMLSwirlIconInventoryElement;
        "swirl-icon-keyboard-hide": HTMLSwirlIconKeyboardHideElement;
        "swirl-icon-light-mode": HTMLSwirlIconLightModeElement;
        "swirl-icon-like": HTMLSwirlIconLikeElement;
        "swirl-icon-link": HTMLSwirlIconLinkElement;
        "swirl-icon-load": HTMLSwirlIconLoadElement;
        "swirl-icon-lock": HTMLSwirlIconLockElement;
        "swirl-icon-lock-open": HTMLSwirlIconLockOpenElement;
        "swirl-icon-lock-person": HTMLSwirlIconLockPersonElement;
        "swirl-icon-login": HTMLSwirlIconLoginElement;
        "swirl-icon-logout": HTMLSwirlIconLogoutElement;
        "swirl-icon-long-text": HTMLSwirlIconLongTextElement;
        "swirl-icon-mail": HTMLSwirlIconMailElement;
        "swirl-icon-manage-accounts": HTMLSwirlIconManageAccountsElement;
        "swirl-icon-mark-chat-read": HTMLSwirlIconMarkChatReadElement;
        "swirl-icon-mark-chat-unread": HTMLSwirlIconMarkChatUnreadElement;
        "swirl-icon-mention": HTMLSwirlIconMentionElement;
        "swirl-icon-menu": HTMLSwirlIconMenuElement;
        "swirl-icon-menu-book": HTMLSwirlIconMenuBookElement;
        "swirl-icon-menu-filled": HTMLSwirlIconMenuFilledElement;
        "swirl-icon-message": HTMLSwirlIconMessageElement;
        "swirl-icon-mic": HTMLSwirlIconMicElement;
        "swirl-icon-more-horizontal": HTMLSwirlIconMoreHorizontalElement;
        "swirl-icon-more-vertikal": HTMLSwirlIconMoreVertikalElement;
        "swirl-icon-news": HTMLSwirlIconNewsElement;
        "swirl-icon-news-filled": HTMLSwirlIconNewsFilledElement;
        "swirl-icon-news-off": HTMLSwirlIconNewsOffElement;
        "swirl-icon-notifications": HTMLSwirlIconNotificationsElement;
        "swirl-icon-notifications-active": HTMLSwirlIconNotificationsActiveElement;
        "swirl-icon-notifications-off": HTMLSwirlIconNotificationsOffElement;
        "swirl-icon-open-in-full": HTMLSwirlIconOpenInFullElement;
        "swirl-icon-open-in-new": HTMLSwirlIconOpenInNewElement;
        "swirl-icon-pause": HTMLSwirlIconPauseElement;
        "swirl-icon-pause-circle": HTMLSwirlIconPauseCircleElement;
        "swirl-icon-people-alt": HTMLSwirlIconPeopleAltElement;
        "swirl-icon-person": HTMLSwirlIconPersonElement;
        "swirl-icon-person-off": HTMLSwirlIconPersonOffElement;
        "swirl-icon-phone": HTMLSwirlIconPhoneElement;
        "swirl-icon-photo-camera": HTMLSwirlIconPhotoCameraElement;
        "swirl-icon-place": HTMLSwirlIconPlaceElement;
        "swirl-icon-play-arrow": HTMLSwirlIconPlayArrowElement;
        "swirl-icon-poll": HTMLSwirlIconPollElement;
        "swirl-icon-print": HTMLSwirlIconPrintElement;
        "swirl-icon-recieved": HTMLSwirlIconRecievedElement;
        "swirl-icon-remove": HTMLSwirlIconRemoveElement;
        "swirl-icon-remove-moderator": HTMLSwirlIconRemoveModeratorElement;
        "swirl-icon-reply": HTMLSwirlIconReplyElement;
        "swirl-icon-report": HTMLSwirlIconReportElement;
        "swirl-icon-roadmap": HTMLSwirlIconRoadmapElement;
        "swirl-icon-search": HTMLSwirlIconSearchElement;
        "swirl-icon-search-strong": HTMLSwirlIconSearchStrongElement;
        "swirl-icon-secure": HTMLSwirlIconSecureElement;
        "swirl-icon-send": HTMLSwirlIconSendElement;
        "swirl-icon-settings": HTMLSwirlIconSettingsElement;
        "swirl-icon-short-text": HTMLSwirlIconShortTextElement;
        "swirl-icon-simplify": HTMLSwirlIconSimplifyElement;
        "swirl-icon-spellcheck": HTMLSwirlIconSpellcheckElement;
        "swirl-icon-stop": HTMLSwirlIconStopElement;
        "swirl-icon-sync": HTMLSwirlIconSyncElement;
        "swirl-icon-tasks": HTMLSwirlIconTasksElement;
        "swirl-icon-tasks-filled": HTMLSwirlIconTasksFilledElement;
        "swirl-icon-terminal": HTMLSwirlIconTerminalElement;
        "swirl-icon-time": HTMLSwirlIconTimeElement;
        "swirl-icon-time-filled": HTMLSwirlIconTimeFilledElement;
        "swirl-icon-today": HTMLSwirlIconTodayElement;
        "swirl-icon-today-filled": HTMLSwirlIconTodayFilledElement;
        "swirl-icon-translate": HTMLSwirlIconTranslateElement;
        "swirl-icon-tree-structure": HTMLSwirlIconTreeStructureElement;
        "swirl-icon-undo": HTMLSwirlIconUndoElement;
        "swirl-icon-unlock-person": HTMLSwirlIconUnlockPersonElement;
        "swirl-icon-user-add": HTMLSwirlIconUserAddElement;
        "swirl-icon-user-assign": HTMLSwirlIconUserAssignElement;
        "swirl-icon-video-camera": HTMLSwirlIconVideoCameraElement;
        "swirl-icon-video-library": HTMLSwirlIconVideoLibraryElement;
        "swirl-icon-visibility": HTMLSwirlIconVisibilityElement;
        "swirl-icon-visibility-off": HTMLSwirlIconVisibilityOffElement;
        "swirl-icon-voice": HTMLSwirlIconVoiceElement;
        "swirl-icon-warning": HTMLSwirlIconWarningElement;
        "swirl-icon-work": HTMLSwirlIconWorkElement;
        "swirl-image-grid": HTMLSwirlImageGridElement;
        "swirl-image-grid-item": HTMLSwirlImageGridItemElement;
        "swirl-inline-error": HTMLSwirlInlineErrorElement;
        "swirl-inline-notification": HTMLSwirlInlineNotificationElement;
        "swirl-inline-status": HTMLSwirlInlineStatusElement;
        "swirl-lightbox": HTMLSwirlLightboxElement;
        "swirl-link": HTMLSwirlLinkElement;
        "swirl-list": HTMLSwirlListElement;
        "swirl-menu": HTMLSwirlMenuElement;
        "swirl-menu-item": HTMLSwirlMenuItemElement;
        "swirl-modal": HTMLSwirlModalElement;
        "swirl-option-list": HTMLSwirlOptionListElement;
        "swirl-option-list-item": HTMLSwirlOptionListItemElement;
        "swirl-option-list-section": HTMLSwirlOptionListSectionElement;
        "swirl-pagination": HTMLSwirlPaginationElement;
        "swirl-pdf-reader": HTMLSwirlPdfReaderElement;
        "swirl-popover": HTMLSwirlPopoverElement;
        "swirl-popover-trigger": HTMLSwirlPopoverTriggerElement;
        "swirl-progress-indicator": HTMLSwirlProgressIndicatorElement;
        "swirl-radio": HTMLSwirlRadioElement;
        "swirl-radio-group": HTMLSwirlRadioGroupElement;
        "swirl-resource-list": HTMLSwirlResourceListElement;
        "swirl-resource-list-file-item": HTMLSwirlResourceListFileItemElement;
        "swirl-resource-list-item": HTMLSwirlResourceListItemElement;
        "swirl-search": HTMLSwirlSearchElement;
        "swirl-select": HTMLSwirlSelectElement;
        "swirl-separator": HTMLSwirlSeparatorElement;
        "swirl-shell-layout": HTMLSwirlShellLayoutElement;
        "swirl-shell-navigation-item": HTMLSwirlShellNavigationItemElement;
        "swirl-skeleton-box": HTMLSwirlSkeletonBoxElement;
        "swirl-skeleton-text": HTMLSwirlSkeletonTextElement;
        "swirl-spinner": HTMLSwirlSpinnerElement;
        "swirl-stack": HTMLSwirlStackElement;
        "swirl-status-indicator": HTMLSwirlStatusIndicatorElement;
        "swirl-switch": HTMLSwirlSwitchElement;
        "swirl-symbol": HTMLSwirlSymbolElement;
        "swirl-symbol-account-circle": HTMLSwirlSymbolAccountCircleElement;
        "swirl-symbol-alternate-email": HTMLSwirlSymbolAlternateEmailElement;
        "swirl-symbol-android": HTMLSwirlSymbolAndroidElement;
        "swirl-symbol-announcement": HTMLSwirlSymbolAnnouncementElement;
        "swirl-symbol-backup": HTMLSwirlSymbolBackupElement;
        "swirl-symbol-beach-access": HTMLSwirlSymbolBeachAccessElement;
        "swirl-symbol-bookmark": HTMLSwirlSymbolBookmarkElement;
        "swirl-symbol-cloud": HTMLSwirlSymbolCloudElement;
        "swirl-symbol-coronavirus": HTMLSwirlSymbolCoronavirusElement;
        "swirl-symbol-desktop-windows": HTMLSwirlSymbolDesktopWindowsElement;
        "swirl-symbol-directions-car-filled": HTMLSwirlSymbolDirectionsCarFilledElement;
        "swirl-symbol-edit-calendar": HTMLSwirlSymbolEditCalendarElement;
        "swirl-symbol-email": HTMLSwirlSymbolEmailElement;
        "swirl-symbol-emoji-food-beverage": HTMLSwirlSymbolEmojiFoodBeverageElement;
        "swirl-symbol-event-menu": HTMLSwirlSymbolEventMenuElement;
        "swirl-symbol-facebook": HTMLSwirlSymbolFacebookElement;
        "swirl-symbol-favorite": HTMLSwirlSymbolFavoriteElement;
        "swirl-symbol-fitness-center": HTMLSwirlSymbolFitnessCenterElement;
        "swirl-symbol-flag": HTMLSwirlSymbolFlagElement;
        "swirl-symbol-folder": HTMLSwirlSymbolFolderElement;
        "swirl-symbol-globe": HTMLSwirlSymbolGlobeElement;
        "swirl-symbol-groups": HTMLSwirlSymbolGroupsElement;
        "swirl-symbol-help": HTMLSwirlSymbolHelpElement;
        "swirl-symbol-image": HTMLSwirlSymbolImageElement;
        "swirl-symbol-info-menu": HTMLSwirlSymbolInfoMenuElement;
        "swirl-symbol-instagram": HTMLSwirlSymbolInstagramElement;
        "swirl-symbol-ios": HTMLSwirlSymbolIosElement;
        "swirl-symbol-language": HTMLSwirlSymbolLanguageElement;
        "swirl-symbol-leaderboard": HTMLSwirlSymbolLeaderboardElement;
        "swirl-symbol-lightbulb": HTMLSwirlSymbolLightbulbElement;
        "swirl-symbol-linkedin": HTMLSwirlSymbolLinkedinElement;
        "swirl-symbol-location-on": HTMLSwirlSymbolLocationOnElement;
        "swirl-symbol-loyalty": HTMLSwirlSymbolLoyaltyElement;
        "swirl-symbol-maps-home-work": HTMLSwirlSymbolMapsHomeWorkElement;
        "swirl-symbol-notifications": HTMLSwirlSymbolNotificationsElement;
        "swirl-symbol-open-in-new": HTMLSwirlSymbolOpenInNewElement;
        "swirl-symbol-pedal-bike": HTMLSwirlSymbolPedalBikeElement;
        "swirl-symbol-pinterest": HTMLSwirlSymbolPinterestElement;
        "swirl-symbol-policy": HTMLSwirlSymbolPolicyElement;
        "swirl-symbol-push-pin": HTMLSwirlSymbolPushPinElement;
        "swirl-symbol-redeem": HTMLSwirlSymbolRedeemElement;
        "swirl-symbol-report-problem": HTMLSwirlSymbolReportProblemElement;
        "swirl-symbol-restaurant": HTMLSwirlSymbolRestaurantElement;
        "swirl-symbol-roadmap": HTMLSwirlSymbolRoadmapElement;
        "swirl-symbol-room": HTMLSwirlSymbolRoomElement;
        "swirl-symbol-savings": HTMLSwirlSymbolSavingsElement;
        "swirl-symbol-settings-voice": HTMLSwirlSymbolSettingsVoiceElement;
        "swirl-symbol-shopping-cart": HTMLSwirlSymbolShoppingCartElement;
        "swirl-symbol-smartphone": HTMLSwirlSymbolSmartphoneElement;
        "swirl-symbol-star": HTMLSwirlSymbolStarElement;
        "swirl-symbol-supervisor-account": HTMLSwirlSymbolSupervisorAccountElement;
        "swirl-symbol-thumbs-up-down": HTMLSwirlSymbolThumbsUpDownElement;
        "swirl-symbol-twitter": HTMLSwirlSymbolTwitterElement;
        "swirl-symbol-wb-sunny": HTMLSwirlSymbolWbSunnyElement;
        "swirl-symbol-wechat": HTMLSwirlSymbolWechatElement;
        "swirl-symbol-weibo": HTMLSwirlSymbolWeiboElement;
        "swirl-symbol-work": HTMLSwirlSymbolWorkElement;
        "swirl-symbol-xing": HTMLSwirlSymbolXingElement;
        "swirl-symbol-youtube": HTMLSwirlSymbolYoutubeElement;
        "swirl-tab": HTMLSwirlTabElement;
        "swirl-tab-bar": HTMLSwirlTabBarElement;
        "swirl-table": HTMLSwirlTableElement;
        "swirl-table-cell": HTMLSwirlTableCellElement;
        "swirl-table-column": HTMLSwirlTableColumnElement;
        "swirl-table-row": HTMLSwirlTableRowElement;
        "swirl-table-row-group": HTMLSwirlTableRowGroupElement;
        "swirl-tabs": HTMLSwirlTabsElement;
        "swirl-tag": HTMLSwirlTagElement;
        "swirl-text": HTMLSwirlTextElement;
        "swirl-text-input": HTMLSwirlTextInputElement;
        "swirl-theme-provider": HTMLSwirlThemeProviderElement;
        "swirl-thumbnail": HTMLSwirlThumbnailElement;
        "swirl-time-input": HTMLSwirlTimeInputElement;
        "swirl-toast": HTMLSwirlToastElement;
        "swirl-toast-provider": HTMLSwirlToastProviderElement;
        "swirl-toolbar": HTMLSwirlToolbarElement;
        "swirl-tooltip": HTMLSwirlTooltipElement;
        "swirl-tree-navigation-item": HTMLSwirlTreeNavigationItemElement;
        "swirl-video-thumbnail": HTMLSwirlVideoThumbnailElement;
        "swirl-visually-hidden": HTMLSwirlVisuallyHiddenElement;
    }
}
declare namespace LocalJSX {
    interface FileManager {
    }
    interface SwirlAccordion {
        "onExpandedItemChange"?: (event: SwirlAccordionCustomEvent<string>) => void;
    }
    interface SwirlAccordionItem {
        "description"?: string;
        "disabled"?: boolean;
        "heading": string;
        "headingLevel"?: SwirlHeadingLevel;
        "initiallyOpen"?: boolean;
        "itemId"?: string;
        "onExpansionChange"?: (event: SwirlAccordionItemCustomEvent<boolean>) => void;
    }
    interface SwirlActionList {
    }
    interface SwirlActionListItem {
        "badge"?: string;
        "description"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "intent"?: SwirlActionListItemIntent;
        "label": string;
        "size"?: SwirlActionListItemSize;
        "suffix"?: string;
        "swirlAriaExpanded"?: string;
        "swirlAriaHaspopup"?: string;
    }
    interface SwirlActionListSection {
        "label": string;
    }
    interface SwirlAppBar {
        "backButtonLabel"?: string;
        "closeButtonIcon"?: string;
        "closeButtonLabel"?: string;
        "onBackButtonClick"?: (event: SwirlAppBarCustomEvent<MouseEvent>) => void;
        "onCloseButtonClick"?: (event: SwirlAppBarCustomEvent<MouseEvent>) => void;
        "onStepDownButtonClick"?: (event: SwirlAppBarCustomEvent<MouseEvent>) => void;
        "onStepUpButtonClick"?: (event: SwirlAppBarCustomEvent<MouseEvent>) => void;
        "showBackButton"?: boolean;
        "showCloseButton"?: boolean;
        "showStepperControls"?: boolean;
        "stepDownButtonLabel"?: string;
        "stepUpButtonLabel"?: string;
    }
    interface SwirlAppIcon {
        "icon"?: string;
        "src"?: string;
    }
    interface SwirlAppLayout {
        "appName": string;
        "backToNavigationViewButtonLabel"?: string;
        "ctaIcon"?: string;
        "ctaLabel"?: string;
        "hasNavigation"?: boolean;
        "hideAppBar"?: boolean;
        "navigationBackButtonLabel"?: string;
        "navigationLabel"?: string;
        "onCtaClick"?: (event: SwirlAppLayoutCustomEvent<MouseEvent>) => void;
        "onMobileViewChange"?: (event: SwirlAppLayoutCustomEvent<SwirlAppLayoutMobileView>) => void;
        "onNavigationBackButtonClick"?: (event: SwirlAppLayoutCustomEvent<MouseEvent>) => void;
        "onSidebarToggle"?: (event: SwirlAppLayoutCustomEvent<boolean>) => void;
        "showNavigationBackButton"?: boolean;
        "sidebarCloseButtonLabel"?: string;
        "sidebarHeading"?: string;
        "transitionStyle"?: string;
    }
    interface SwirlAutocomplete {
        "autoSelect"?: boolean;
        "clearButtonLabel"?: string;
        "clearable"?: boolean;
        "disabled"?: boolean;
        "generateSuggestions"?: (
    term: string
  ) => Promise<SwirlAutocompleteSuggestion[]>;
        "inline"?: boolean;
        "invalid"?: boolean;
        "maxLength"?: number;
        "menuLabel"?: string;
        "mode"?: SwirlTextInputMode;
        "multiSelect"?: boolean;
        "onValueChange"?: (event: SwirlAutocompleteCustomEvent<SwirlAutocompleteValue>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "spellCheck"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: SwirlAutocompleteValue;
    }
    interface SwirlAvatar {
        "badge"?: string;
        "badgePosition"?: SwirlAvatarBadgePosition;
        "color"?: SwirlAvatarColor;
        "icon"?: string;
        "initials"?: string;
        "interactive"?: boolean;
        "label": string;
        "loading"?: SwirlAvatarLoading;
        "onImageError"?: (event: SwirlAvatarCustomEvent<void>) => void;
        "onImageLoad"?: (event: SwirlAvatarCustomEvent<void>) => void;
        "showLabel"?: boolean;
        "size"?: SwirlAvatarSize;
        "src"?: string;
        "toolPosition"?: SwirlAvatarToolPosition;
        "variant"?: SwirlAvatarVariant;
    }
    interface SwirlAvatarGroup {
        "badge"?: string;
    }
    interface SwirlBadge {
        "icon"?: string;
        "intent"?: SwirlBadgeIntent;
        "label": string;
        "size"?: SwirlBadgeSize;
        "variant"?: SwirlBadgeVariant;
    }
    interface SwirlBanner {
        "actionLabel"?: string;
        "content": string;
        "dismissLabel"?: string;
        "dismissable"?: boolean;
        "importance"?: SwirlBannerAriaRole;
        "intent"?: SwirlBannerIntent;
        "onAction"?: (event: SwirlBannerCustomEvent<MouseEvent>) => void;
        "onDismiss"?: (event: SwirlBannerCustomEvent<MouseEvent>) => void;
        "showIcon"?: boolean;
        "size"?: SwirlBannerSize;
    }
    interface SwirlBox {
        "basis"?: string;
        "bordered"?: boolean;
        "borderedBlockEnd"?: boolean;
        "borderedBlockStart"?: boolean;
        "borderedInlineEnd"?: boolean;
        "borderedInlineStart"?: boolean;
        "bottom"?: string;
        "centerBlock"?: boolean;
        "centerInline"?: boolean;
        "cover"?: boolean;
        "grow"?: string;
        "height"?: string;
        "left"?: string;
        "maxHeight"?: string;
        "maxWidth"?: string;
        "minHeight"?: string;
        "minWidth"?: string;
        "overflow"?: SwirlBoxOverflow;
        "padding"?: SwirlBoxPadding;
        "paddingBlockEnd"?: SwirlBoxPadding;
        "paddingBlockStart"?: SwirlBoxPadding;
        "paddingInlineEnd"?: SwirlBoxPadding;
        "paddingInlineStart"?: SwirlBoxPadding;
        "position"?: SwirlBoxPosition;
        "right"?: string;
        "shrink"?: string;
        "top"?: string;
        "width"?: string;
        "zIndex"?: string;
    }
    interface SwirlButton {
        "disabled"?: boolean;
        "download"?: string;
        "form"?: string;
        "hideLabel"?: boolean;
        "href"?: string;
        "icon"?: string;
        "iconPosition"?: SwirlButtonIconPosition;
        "intent"?: SwirlButtonIntent;
        "label": string;
        "name"?: string;
        "pill"?: boolean;
        "pressed"?: boolean;
        "size"?: SwirlButtonSize;
        "swirlAriaControls"?: string;
        "swirlAriaCurrent"?: string;
        "swirlAriaDescribedby"?: string;
        "swirlAriaExpanded"?: string;
        "swirlAriaHaspopup"?: string;
        "swirlAriaLabel"?: string;
        "target"?: string;
        "textAlign"?: SwirlButtonTextAlign;
        "type"?: SwirlButtonType;
        "value"?: string;
        "variant"?: SwirlButtonVariant;
    }
    interface SwirlButtonGroup {
        "orientation"?: SwirlButtonGroupOrientation;
        "segmented"?: boolean;
        "stretch"?: boolean;
        "wrap"?: boolean;
    }
    interface SwirlCard {
        "as"?: string;
        "borderRadius"?: SwirlCardBorderRadius;
        "customBackgroundColor"?: string;
        "elevated"?: boolean;
        "elevationLevel"?: SwirlCardElevationLevel;
        "height"?: string;
        "highlighted"?: boolean;
        "href"?: string;
        "imageAspectRatio"?: string;
        "intent"?: SwirlCardIntent;
        "interactive"?: boolean;
        "isBorderless"?: boolean;
        "justifyContent"?: SwirlCardJustifyContent;
        "linkTarget"?: string;
        "overflow"?: SwirlCardOverflow;
        "padding"?: SwirlCardPadding;
        "paddingBlockEnd"?: SwirlCardPadding;
        "paddingBlockStart"?: SwirlCardPadding;
        "paddingInlineEnd"?: SwirlCardPadding;
        "paddingInlineStart"?: SwirlCardPadding;
        "swirlAriaLabel"?: string;
        "swirlAriaLabelledby"?: string;
    }
    /**
     * slot - The slides
     */
    interface SwirlCarousel {
        "label": string;
        "loopAround"?: boolean;
        "nextSlideButtonLabel"?: string;
        "onActiveSlidesChange"?: (event: SwirlCarouselCustomEvent<HTMLSwirlCarouselSlideElement[]>) => void;
        "previousSlideButtonLabel"?: string;
    }
    /**
     * slot - The slide contents
     */
    interface SwirlCarouselSlide {
        "label"?: string;
        "minHeight"?: string;
        "width"?: string;
    }
    interface SwirlCheckbox {
        "checked"?: SwirlCheckboxState;
        "description"?: string;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "labelWeight"?: SwirlCheckboxLabelWeight;
        "onValueChange"?: (event: SwirlCheckboxCustomEvent<boolean>) => void;
        "swirlAriaDescribedby"?: string;
        "swirlAriaLabel"?: string;
        "value"?: string;
        "variant"?: SwirlCheckboxVariant;
    }
    interface SwirlChip {
        "borderRadius"?: SwirlChipBorderRadius;
        "icon"?: string;
        "iconColor"?: SwirlChipIconColor;
        "intent"?: SwirlChipIntent;
        "interactive"?: boolean;
        "label": string;
        "onRemove"?: (event: SwirlChipCustomEvent<MouseEvent>) => void;
        "pressed"?: boolean;
        "progress"?: number;
        "progressBarLabel"?: string;
        "removable"?: boolean;
        "removeButtonLabel"?: string;
        "size"?: SwirlChipSize;
        "variant"?: SwirlChipVariant;
    }
    interface SwirlColorInput {
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "disabled"?: boolean;
        "inline"?: boolean;
        "invalid"?: boolean;
        "onInputBlur"?: (event: SwirlColorInputCustomEvent<FocusEvent>) => void;
        "onInputFocus"?: (event: SwirlColorInputCustomEvent<FocusEvent>) => void;
        "onValueChange"?: (event: SwirlColorInputCustomEvent<string>) => void;
        "pickerButtonLabel"?: string;
        "pickerLabel"?: string;
        "placeholder"?: string;
        "required"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlColumns {
        "columns"?: string;
        "spacing"?: SwirlColumnsSpacing;
    }
    interface SwirlConsoleLayout {
        "appName"?: string;
        "backButonLabel"?: string;
        "heading"?: string;
        "helpButonLabel"?: string;
        "hideNavigationButtonLabel"?: string;
        "logoText"?: string;
        "maxContentWidth"?: string;
        "navigationLabel"?: string;
        "onBackButtonClick"?: (event: SwirlConsoleLayoutCustomEvent<MouseEvent>) => void;
        "onHelpButtonClick"?: (event: SwirlConsoleLayoutCustomEvent<MouseEvent>) => void;
        "showBackButton"?: boolean;
        "showHelpButton"?: boolean;
        "showNavigationButtonLabel"?: string;
        "subheading"?: string;
    }
    interface SwirlDateInput {
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "datePickerDisableDate"?: (date: Date) => boolean;
        "datePickerLabel"?: string;
        "datePickerTriggerLabel"?: string;
        "disabled"?: boolean;
        "firstDayOfWeek"?: number;
        "format"?: string;
        "inline"?: boolean;
        "invalid"?: boolean;
        "labels"?: WCDatepickerLabels;
        "locale"?: string;
        "onInvalidInput"?: (event: SwirlDateInputCustomEvent<string>) => void;
        "onValueChange"?: (event: SwirlDateInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "preferredInputMode"?: "input" | "pick";
        "required"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlDatePicker {
        "disableDate"?: (date: Date) => boolean;
        "firstDayOfWeek"?: number;
        "labels"?: WCDatepickerLabels;
        "locale"?: string;
        "onValueChange"?: (event: SwirlDatePickerCustomEvent<Date | Date[]>) => void;
        "range"?: boolean;
        "startDate"?: Date;
        "value"?: Date | Date[];
    }
    interface SwirlDescriptionList {
    }
    interface SwirlDescriptionListItem {
        "bordered"?: boolean;
        "maxWidth"?: string;
        "term": string;
        "tooltip"?: string;
    }
    interface SwirlDialog {
        "hideLabel"?: boolean;
        "intent"?: SwirlDialogIntent;
        "label": string;
        "onDialogClose"?: (event: SwirlDialogCustomEvent<void>) => void;
        "onDialogOpen"?: (event: SwirlDialogCustomEvent<void>) => void;
        "onPrimaryAction"?: (event: SwirlDialogCustomEvent<MouseEvent>) => void;
        "onSecondaryAction"?: (event: SwirlDialogCustomEvent<MouseEvent>) => void;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
    }
    interface SwirlEmoji {
        "label"?: string;
        "name": string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmojiClap {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmojiHappy {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmojiIdea {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmojiLove {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmojiSad {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmojiThumbsUp {
        "label"?: string;
        "size"?: SwirlEmojiSize;
    }
    interface SwirlEmptyState {
        "heading"?: string;
        "illustration"?: string;
    }
    interface SwirlFileUploader {
        "accept"?: string;
        "ctaLabel"?: string;
        "description"?: string;
        "disabled"?: boolean;
        "dragDropLabel"?: string;
        "inputId": string;
        "inputName": string;
        "label": string;
        "multiple"?: boolean;
        "onValueChange"?: (event: SwirlFileUploaderCustomEvent<FileList>) => void;
        "showDropzone"?: boolean;
        "uploadButtonIcon"?: string;
        "uploadButtonLabel"?: string;
        "uploadButtonVariant"?: SwirlButtonVariant1;
    }
    interface SwirlFileViewer {
        "active"?: boolean;
        "autoplay"?: boolean;
        "description"?: string;
        "errorMessage"?: string;
        "file": string;
        "fileName"?: string;
        "onActivate"?: (event: SwirlFileViewerCustomEvent<HTMLElement>) => void;
        "onVisiblePagesChange"?: (event: SwirlFileViewerCustomEvent<number[]>) => void;
        "pdfWorkerSrc"?: string;
        "thumbnailUrl"?: string;
        "type": string;
        "typeUnsupportedMessage"?: string;
        "viewMode"?: SwirlFileViewerPdfViewMode;
        "zoom"?: SwirlFileViewerPdfZoom;
    }
    interface SwirlFileViewerAudio {
        "autoplay"?: boolean;
        "file": string;
        "onActivate"?: (event: SwirlFileViewerAudioCustomEvent<HTMLElement>) => void;
        "type": string;
    }
    interface SwirlFileViewerCsv {
        "errorMessage"?: string;
        "file": string;
        "onActivate"?: (event: SwirlFileViewerCsvCustomEvent<HTMLElement>) => void;
    }
    interface SwirlFileViewerImage {
        "description"?: string;
        "errorMessage"?: string;
        "file": string;
        "maxZoom"?: number;
        "onActivate"?: (event: SwirlFileViewerImageCustomEvent<HTMLElement>) => void;
    }
    interface SwirlFileViewerPdf {
        "errorMessage"?: string;
        "file": string;
        "onActivate"?: (event: SwirlFileViewerPdfCustomEvent<HTMLElement>) => void;
        "onVisiblePagesChange"?: (event: SwirlFileViewerPdfCustomEvent<number[]>) => void;
        "singlePageMode"?: boolean;
        "viewMode"?: SwirlFileViewerPdfViewMode1;
        "workerSrc"?: string;
        "zoom"?: SwirlFileViewerPdfZoom1;
    }
    interface SwirlFileViewerText {
        "errorMessage"?: string;
        "file": string;
        "onActivate"?: (event: SwirlFileViewerTextCustomEvent<HTMLElement>) => void;
    }
    interface SwirlFileViewerVideo {
        "autoplay"?: boolean;
        "file": string;
        "onActivate"?: (event: SwirlFileViewerVideoCustomEvent<HTMLElement>) => void;
        "type": string;
    }
    interface SwirlFormControl {
        "description"?: string;
        "disabled"?: boolean;
        "errorMessage"?: string;
        "hideLabel"?: boolean;
        "inline"?: boolean;
        "invalid"?: boolean;
        "label": string;
        "labelPosition"?: SwirlFormControlLabelPosition;
        "tooltip"?: string;
    }
    interface SwirlFormGroup {
        "orientation"?: SwirlFormGroupOrientation;
    }
    interface SwirlHeading {
        "align"?: SwirlHeadingAlign;
        "as"?: SwirlHeadingTag;
        "balance"?: boolean;
        "headingId"?: string;
        "level"?: SwirlHeadingLevel1;
        "lines"?: number;
        "text": string;
        "truncate"?: boolean;
    }
    interface SwirlIcon {
        "color"?: SwirlIconColor;
        "glyph": string;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconAdd {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconAddModerator {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconAddPhoto {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconAddReaction {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconAdminPanelSettings {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconAi {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconApps {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowBack {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowDownward {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowForward {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowLeft {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowRight {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowRightSmall {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconArrowUpward {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconAttachment {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconBarChart {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconBlock {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconBookmark {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconBookmarkFilled {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCancel {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconChatBubble {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconChats {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconChatsFilled {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCheck {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCheckCircle {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCheckSmall {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCheckStrong {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconChevronLeft {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconChevronRight {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconClose {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCloseSmall {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCloudUpload {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconColumn {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconComment {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconCopy {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDarkMode {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDateRange {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDelete {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDescription {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDesktop {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDirectory {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDirectoryFilled {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDiscover {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDockLeft {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDot {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDoubleArrowLeft {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDoubleArrowRight {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDownload {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconDragHandle {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconEdit {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconEmojiMood {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconEmojiSatisfied {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconError {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconExpandLess {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconExpandMore {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFile {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFileCopy {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFilter {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFolder {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFolderShared {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFormatHOne {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFullscreen {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconFullscreenExit {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconGif {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconGroupAdd {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconGroupAssign {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconGroups {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconGroupsFilled {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconHamburgerMenu {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconHelp {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconHighlight {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconHome {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconImage {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconImproveText {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconInfo {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconInsertBelow {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconInsertOnTop {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconInventory {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconKeyboardHide {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLightMode {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLike {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLink {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLoad {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLock {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLockOpen {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLockPerson {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLogin {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLogout {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconLongText {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMail {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconManageAccounts {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMarkChatRead {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMarkChatUnread {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMention {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMenu {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMenuBook {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMenuFilled {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMessage {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMic {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMoreHorizontal {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconMoreVertikal {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconNews {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconNewsFilled {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconNewsOff {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconNotifications {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconNotificationsActive {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconNotificationsOff {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconOpenInFull {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconOpenInNew {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPause {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPauseCircle {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPeopleAlt {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPerson {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPersonOff {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPhone {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPhotoCamera {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPlace {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPlayArrow {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPoll {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconPrint {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconRecieved {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconRemove {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconRemoveModerator {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconReply {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconReport {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconRoadmap {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSearch {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSearchStrong {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSecure {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSend {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSettings {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconShortText {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSimplify {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSpellcheck {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconStop {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconSync {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTasks {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTasksFilled {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTerminal {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTime {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTimeFilled {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconToday {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTodayFilled {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTranslate {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconTreeStructure {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconUndo {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconUnlockPerson {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconUserAdd {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconUserAssign {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconVideoCamera {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconVideoLibrary {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconVisibility {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconVisibilityOff {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconVoice {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconWarning {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlIconWork {
        "color"?: SwirlIconColor1;
        "size"?: SwirlIconSize;
    }
    interface SwirlImageGrid {
        "aspectRatio"?: string;
        "label"?: string;
    }
    interface SwirlImageGridItem {
        "alt": string;
        "icon"?: string;
        "interactive"?: boolean;
        "loading"?: SwirlImageGridItemLoading;
        "onImageError"?: (event: SwirlImageGridItemCustomEvent<void>) => void;
        "onImageLoad"?: (event: SwirlImageGridItemCustomEvent<void>) => void;
        "overlay"?: string;
        "src": string;
    }
    interface SwirlInlineError {
        "message": string;
        "size"?: SwirlInlineErrorSize;
    }
    interface SwirlInlineNotification {
        "heading": string;
        "importance"?: SwirlInlineNotificationAriaRole;
        "intent"?: SwirlInlineNotificationIntent;
    }
    interface SwirlInlineStatus {
        "icon"?: string;
        "intent": SwirlInlineStatusIntent;
        "message": string;
        "size"?: SwirlInlineStatusSize;
    }
    interface SwirlLightbox {
        "closeButtonLabel"?: string;
        "downloadButtonEnabled"?: boolean;
        "downloadButtonLabel"?: string;
        "hideMenu"?: boolean;
        "label": string;
        "menuLabel"?: string;
        "menuTriggerLabel"?: string;
        "nextSlideButtonLabel"?: string;
        "previousSlideButtonLabel"?: string;
    }
    interface SwirlLink {
        "color"?: SwirlLinkColor;
        "href": string;
        "label": string;
        "target"?: SwirlLinkTarget;
    }
    interface SwirlList {
    }
    interface SwirlMenu {
        "active"?: boolean;
        "label": string;
        "level"?: number;
        "mobileBackButtonLabel"?: string;
        "mobileCloseMenuButtonLabel"?: string;
        "mobileDoneButtonLabel"?: string;
        "onDone"?: (event: SwirlMenuCustomEvent<void>) => void;
        "onValueChange"?: (event: SwirlMenuCustomEvent<string>) => void;
        "value"?: string;
        "variant"?: SwirlMenuVariant;
    }
    interface SwirlMenuItem {
        "description"?: string;
        "disabled"?: boolean;
        "expanded"?: boolean;
        "icon"?: string;
        "intent"?: SwirlActionListItemIntent1;
        "label": string;
        "suffix"?: string;
        "value"?: string;
    }
    interface SwirlModal {
        "closable"?: boolean;
        "closeButtonLabel"?: string;
        "height"?: string;
        "hideCloseButton"?: boolean;
        "hideLabel"?: boolean;
        "label": string;
        "maxHeight"?: string;
        "maxWidth"?: string;
        "onModalClose"?: (event: SwirlModalCustomEvent<void>) => void;
        "onModalOpen"?: (event: SwirlModalCustomEvent<void>) => void;
        "onPrimaryAction"?: (event: SwirlModalCustomEvent<MouseEvent>) => void;
        "onRequestModalClose"?: (event: SwirlModalCustomEvent<void>) => void;
        "onSecondaryAction"?: (event: SwirlModalCustomEvent<MouseEvent>) => void;
        "padded"?: boolean;
        "primaryActionLabel"?: string;
        "secondaryActionLabel"?: string;
        "variant"?: SwirlModalVariant;
    }
    interface SwirlOptionList {
        "allowDeselect"?: boolean;
        "allowDrag"?: boolean;
        "assistiveTextItemGrabbed"?: string;
        "assistiveTextItemMoved"?: string;
        "assistiveTextItemMoving"?: string;
        "disabled"?: boolean;
        "label"?: string;
        "multiSelect"?: boolean;
        "onItemDrop"?: (event: SwirlOptionListCustomEvent<{
    item: HTMLSwirlOptionListItemElement;
    oldIndex: number;
    newIndex: number;
  }>) => void;
        "onValueChange"?: (event: SwirlOptionListCustomEvent<string[]>) => void;
        "optionListId"?: string;
        "value"?: string[];
    }
    interface SwirlOptionListItem {
        "allowDrag"?: boolean;
        "context"?: SwirlOptionListItemContext;
        "description"?: string;
        "disabled"?: boolean;
        "dragHandleDescription"?: string;
        "dragHandleLabel"?: string;
        "dragging"?: boolean;
        "icon"?: string;
        "label": string;
        "onToggleDrag"?: (event: SwirlOptionListItemCustomEvent<HTMLSwirlOptionListItemElement>) => void;
        "selected"?: boolean;
        "swirlAriaRole"?: SwirlOptionListItemRole;
        "value": string;
    }
    interface SwirlOptionListSection {
        "label": string;
    }
    interface SwirlPagination {
        "firstPageButtonLabel"?: string;
        "label": string;
        "lastPageButtonLabel"?: string;
        "nextButtonLabel"?: string;
        "onSetPage"?: (event: SwirlPaginationCustomEvent<number>) => void;
        "onSetPageSize"?: (event: SwirlPaginationCustomEvent<number>) => void;
        "page": number;
        "pageLabel"?: string;
        "pageSelectLabel"?: string;
        "pageSize"?: number;
        "pageSizeOptions"?: number[];
        "pageSizeSelectLabel"?: string;
        "pages": number;
        "prevButtonLabel"?: string;
        "showPageSizeSelect"?: boolean;
        "variant"?: SwirlPaginationVariant;
    }
    interface SwirlPdfReader {
        "autoZoomLabel"?: string;
        "closeButtonLabel"?: string;
        "downloadButtonEnabled"?: boolean;
        "downloadButtonLabel"?: string;
        "file": string;
        "fileName"?: string;
        "fileTypeLabel"?: string;
        "label": string;
        "menuLabel"?: string;
        "menuTriggerLabel"?: string;
        "onModalClose"?: (event: SwirlPdfReaderCustomEvent<void>) => void;
        "onModalOpen"?: (event: SwirlPdfReaderCustomEvent<void>) => void;
        "pdfWorkerSrc"?: string;
        "printButtonEnabled"?: boolean;
        "printButtonLabel"?: string;
        "sideBySideButtonLabel"?: string;
        "thumbnailButtonLabel"?: string;
        "thumbnailsButtonLabel"?: string;
        "thumbnailsLabel"?: string;
        "zoomInButtonLabel"?: string;
        "zoomOutButtonLabel"?: string;
        "zoomSelectLabel"?: string;
    }
    interface SwirlPopover {
        "animation"?: SwirlPopoverAnimation;
        "disableScrollLock"?: boolean;
        "enableFlip"?: boolean;
        "fullscreenBottomSheet"?: boolean;
        "label": string;
        "maxHeight"?: string;
        "offset"?: number | number[];
        "onPopoverClose"?: (event: SwirlPopoverCustomEvent<void>) => void;
        "onPopoverOpen"?: (event: SwirlPopoverCustomEvent<{ position: ComputePositionReturn }>) => void;
        "placement"?: Placement;
        "popoverId"?: string;
        "returnFocusToTrigger"?: boolean;
        "transparent"?: boolean;
        "trigger"?: string | HTMLElement;
        "triggerContainer"?: HTMLElement;
        "useContainerWidth"?: boolean | string;
    }
    interface SwirlPopoverTrigger {
        "hidePopoverWhenInvisible"?: boolean;
        "parentScrollContainer"?: HTMLElement;
        "setAriaAttributes"?: boolean;
        "swirlPopover": string | HTMLSwirlPopoverElement;
        "triggerOnHover"?: boolean;
    }
    interface SwirlProgressIndicator {
        "label": string;
        "size"?: SwirlProgressIndicatorSize;
        "value"?: number;
        "variant"?: SwirlProgressIndicatorVariant;
    }
    interface SwirlRadio {
        "checked"?: SwirlRadioState;
        "description"?: string;
        "disabled"?: boolean;
        "inputId": string;
        "inputName": string;
        "invalid"?: boolean;
        "label"?: string;
        "onValueChange"?: (event: SwirlRadioCustomEvent<string>) => void;
        "value": string;
        "variant"?: SwirlRadioVariant;
    }
    interface SwirlRadioGroup {
        "onValueChange"?: (event: SwirlRadioGroupCustomEvent<string>) => void;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlResourceList {
        "allowDrag"?: boolean;
        "assistiveTextItemGrabbed"?: string;
        "assistiveTextItemMoved"?: string;
        "assistiveTextItemMoving"?: string;
        "controllingElement"?: HTMLElement;
        "label"?: string;
        "onItemDrop"?: (event: SwirlResourceListCustomEvent<{
    item: HTMLSwirlResourceListItemElement;
    oldIndex: number;
    newIndex: number;
  }>) => void;
    }
    interface SwirlResourceListFileItem {
        "description"?: string;
        "errorMessage"?: string;
        "icon"?: string;
        "label": string;
        "loading"?: boolean;
        "onRemove"?: (event: SwirlResourceListFileItemCustomEvent<MouseEvent>) => void;
        "removable"?: boolean;
        "removeButtonLabel"?: string;
    }
    interface SwirlResourceListItem {
        "active"?: boolean;
        "allowDrag"?: boolean;
        "allowHtml"?: boolean;
        "checked"?: boolean;
        "compact"?: boolean;
        "description"?: string;
        "descriptionWrap"?: boolean;
        "disabled"?: boolean;
        "dragHandleDescription"?: string;
        "dragHandleLabel"?: string;
        "dragging"?: boolean;
        "hideDivider"?: boolean;
        "href"?: string;
        "interactive"?: boolean;
        "label": string;
        "labelWeight"?: SwirlResourceListItemLabelWeight;
        "labelWrap"?: boolean;
        "menuTriggerId"?: string;
        "menuTriggerLabel"?: string;
        "meta"?: string;
        "onToggleDrag"?: (event: SwirlResourceListItemCustomEvent<HTMLSwirlResourceListItemElement>) => void;
        "onValueChange"?: (event: SwirlResourceListItemCustomEvent<boolean>) => void;
        "selectable"?: boolean;
        "value"?: string;
    }
    interface SwirlSearch {
        "autoFocus"?: boolean;
        "clearButtonLabel"?: string;
        "disabled"?: boolean;
        "inputId"?: string;
        "inputName"?: string;
        "label"?: string;
        "onInputBlur"?: (event: SwirlSearchCustomEvent<FocusEvent>) => void;
        "onInputFocus"?: (event: SwirlSearchCustomEvent<FocusEvent>) => void;
        "onInputInput"?: (event: SwirlSearchCustomEvent<string>) => void;
        "onValueChange"?: (event: SwirlSearchCustomEvent<string>) => void;
        "placeholder"?: string;
        "value"?: string;
        "variant"?: SwirlSearchVariant;
    }
    interface SwirlSelect {
        "allowDeselect"?: boolean;
        "disabled"?: boolean;
        "emptyListLabel"?: string;
        "inline"?: boolean;
        "invalid"?: boolean;
        "label": string;
        "multiSelect"?: boolean;
        "onSearchChange"?: (event: SwirlSelectCustomEvent<string>) => void;
        "onValueChange"?: (event: SwirlSelectCustomEvent<string[]>) => void;
        "required"?: boolean;
        "searchInputLabel"?: string;
        "searchLoading"?: boolean;
        "searchPlaceholder"?: string;
        "selectId"?: string;
        "swirlAriaDescribedby"?: string;
        "value"?: string[];
        "withSearch"?: boolean;
    }
    interface SwirlSeparator {
        "borderColor"?: SwirlSeparatorBorderColor;
        "orientation"?: SwirlSeparatorOrientation;
        "spacing"?: SwirlSeparatorSpacing;
    }
    interface SwirlShellLayout {
        "brandedHeader"?: boolean;
        "browserBackButtonLabel"?: string;
        "browserForwardButtonLabel"?: string;
        "hideMobileNavigationButtonLabel"?: string;
        "navigationLabel"?: string;
        "navigationToggleLabel"?: string;
        "onSidebarToggleClick"?: (event: SwirlShellLayoutCustomEvent<MouseEvent>) => void;
        "onSkipLinkClick"?: (event: SwirlShellLayoutCustomEvent<MouseEvent>) => void;
        "sidebarActive"?: boolean;
        "sidebarToggleBadge"?: string | boolean;
        "sidebarToggleBadgeAriaLabel"?: string;
        "sidebarToggleIcon"?: string;
        "sidebarToggleLabel"?: string;
        "skipLinkLabel"?: string;
    }
    interface SwirlShellNavigationItem {
        "active"?: boolean;
        "badgeLabel"?: string;
        "boxed"?: boolean;
        "href"?: string;
        "label": string;
        "target"?: string;
    }
    interface SwirlSkeletonBox {
        "animated"?: boolean;
        "aspectRatio"?: string;
        "borderRadius"?: SwirlSkeletonBoxBorderRadius;
        "height"?: string;
        "width"?: string;
    }
    interface SwirlSkeletonText {
        "animated"?: boolean;
        "lines"?: number;
        "size"?: SwirlSkeletonTextSize;
    }
    interface SwirlSpinner {
        "label"?: string;
        "size"?: SwirlSpinnerSize;
    }
    interface SwirlStack {
        "align"?: SwirlStackAlign;
        "as"?: string;
        "height"?: string;
        "justify"?: SwirlStackJustify;
        "orientation"?: SwirlStackOrientation;
        "spacing"?: SwirlStackSpacing;
        "wrap"?: boolean;
    }
    interface SwirlStatusIndicator {
        "intent": SwirlStatusIndicatorIntent;
        "label": string;
    }
    interface SwirlSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "hideLabel"?: boolean;
        "inputId": string;
        "inputName": string;
        "label"?: string;
        "labelPosition"?: SwirlSwitchLabelPosition;
        "onValueChange"?: (event: SwirlSwitchCustomEvent<boolean>) => void;
        "value"?: string;
    }
    interface SwirlSymbol {
        "glyph": string;
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolAccountCircle {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolAlternateEmail {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolAndroid {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolAnnouncement {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolBackup {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolBeachAccess {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolBookmark {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolCloud {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolCoronavirus {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolDesktopWindows {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolDirectionsCarFilled {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolEditCalendar {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolEmail {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolEmojiFoodBeverage {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolEventMenu {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolFacebook {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolFavorite {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolFitnessCenter {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolFlag {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolFolder {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolGlobe {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolGroups {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolHelp {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolImage {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolInfoMenu {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolInstagram {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolIos {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolLanguage {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolLeaderboard {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolLightbulb {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolLinkedin {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolLocationOn {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolLoyalty {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolMapsHomeWork {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolNotifications {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolOpenInNew {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolPedalBike {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolPinterest {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolPolicy {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolPushPin {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolRedeem {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolReportProblem {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolRestaurant {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolRoadmap {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolRoom {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolSavings {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolSettingsVoice {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolShoppingCart {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolSmartphone {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolStar {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolSupervisorAccount {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolThumbsUpDown {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolTwitter {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolWbSunny {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolWechat {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolWeibo {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolWork {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolXing {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlSymbolYoutube {
        "size"?: SwirlSymbolSize;
    }
    interface SwirlTab {
        "active"?: boolean;
        "icon"?: string;
        "label": string;
        "padding"?: SwirlTabPadding;
        "tabId": string;
    }
    interface SwirlTabBar {
        "disableTabSemantics"?: boolean;
        "label": string;
        "onActivateNextTab"?: (event: SwirlTabBarCustomEvent<void>) => void;
        "onActivatePreviousTab"?: (event: SwirlTabBarCustomEvent<void>) => void;
        "onActivateTab"?: (event: SwirlTabBarCustomEvent<string>) => void;
        "tabs"?: SwirlTabBarTab[];
    }
    interface SwirlTable {
        "caption"?: string;
        "emptyStateLabel"?: string;
        "label": string;
    }
    interface SwirlTableCell {
    }
    interface SwirlTableColumn {
        "maxWidth"?: string;
        "minWidth"?: string;
        "sort"?: SwirlTableColumnSort;
        "sortable"?: boolean;
        "sticky"?: boolean;
        "width"?: string;
    }
    interface SwirlTableRow {
        "highlighted"?: boolean;
        "index"?: number;
    }
    interface SwirlTableRowGroup {
        "collapseButtonLabel"?: string;
        "collapsible"?: boolean;
        "label": string;
        "tooltip"?: string;
    }
    interface SwirlTabs {
        "initialTab"?: string;
        "label": string;
        "onTabActivated"?: (event: SwirlTabsCustomEvent<HTMLSwirlTabElement>) => void;
    }
    interface SwirlTag {
        "bordered"?: boolean;
        "intent"?: SwirlTagIntent;
        "label": string;
        "onRemove"?: (event: SwirlTagCustomEvent<MouseEvent>) => void;
        "removable"?: boolean;
        "removalButtonLabel"?: string;
        "size"?: SwirlTagSize;
    }
    interface SwirlText {
        "align"?: SwirlTextAlign;
        "as"?: string;
        "balance"?: boolean;
        "color"?: SwirlTextColor;
        "fontFamily"?: SwirlTextFontFamily;
        "fontStyle"?: SwirlTextFontStyle;
        "lines"?: number;
        "size"?: SwirlTextSize;
        "truncate"?: boolean;
        "truncateDirection"?: SwirlTextTruncateDirection;
        "weight"?: SwirlTextWeight;
        "whiteSpace"?: SwirlTextWhiteSpace;
    }
    interface SwirlTextInput {
        "autoComplete"?: string;
        "autoFocus"?: boolean;
        "autoGrow"?: boolean;
        "autoSelect"?: boolean;
        "clearButtonLabel"?: string;
        "clearable"?: boolean;
        "disableDynamicWidth"?: boolean;
        "disabled"?: boolean;
        "inline"?: boolean;
        "invalid"?: boolean;
        "max"?: number;
        "maxLength"?: number;
        "min"?: number;
        "mode"?: SwirlTextInputMode1;
        "onInputBlur"?: (event: SwirlTextInputCustomEvent<FocusEvent>) => void;
        "onInputFocus"?: (event: SwirlTextInputCustomEvent<FocusEvent>) => void;
        "onValueChange"?: (event: SwirlTextInputCustomEvent<string>) => void;
        "passwordToggleLabel"?: string;
        "placeholder"?: string;
        "prefixLabel"?: string;
        "required"?: boolean;
        "rows"?: number;
        "showCharacterCounter"?: boolean;
        "spellCheck"?: boolean;
        "step"?: number;
        "suffixLabel"?: string;
        "swirlAriaAutocomplete"?: string;
        "swirlAriaControls"?: string;
        "swirlAriaDescribedby"?: string;
        "swirlAriaExpanded"?: string;
        "swirlRole"?: string;
        "type"?: SwirlTextInputType;
        "value"?: string;
    }
    interface SwirlThemeProvider {
        "config"?: SwirlThemeProviderConfig;
        "onAppThemeUpdated"?: (event: SwirlThemeProviderCustomEvent<void>) => void;
        "onThemeChange"?: (event: SwirlThemeProviderCustomEvent<SwirlOSThemeChangeEventData>) => void;
    }
    interface SwirlThumbnail {
        "alt": string;
        "format"?: SwirlThumbnailFormat;
        "interactive"?: boolean;
        "onRemove"?: (event: SwirlThumbnailCustomEvent<MouseEvent>) => void;
        "progress"?: number;
        "progressLabel"?: string;
        "removeButtonLabel"?: string;
        "showRemoveButton"?: boolean;
        "size"?: SwirlThumbnailSize;
        "src": string;
        "timestamp"?: string;
    }
    interface SwirlTimeInput {
        "autoFocus"?: boolean;
        "autoSelect"?: boolean;
        "disabled"?: boolean;
        "format"?: string;
        "inline"?: boolean;
        "invalid"?: boolean;
        "onInputBlur"?: (event: SwirlTimeInputCustomEvent<FocusEvent>) => void;
        "onInputFocus"?: (event: SwirlTimeInputCustomEvent<FocusEvent>) => void;
        "onValueChange"?: (event: SwirlTimeInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "required"?: boolean;
        "swirlAriaDescribedby"?: string;
        "value"?: string;
    }
    interface SwirlToast {
        "accessibleDismissLabel"?: string;
        "content"?: string;
        "dismissLabel"?: string;
        "duration"?: number;
        "icon"?: string;
        "intent"?: SwirlToastIntent;
        "onDismiss"?: (event: SwirlToastCustomEvent<string>) => void;
        "toastId": string;
    }
    interface SwirlToastProvider {
        /**
          * Optional global duration for all toasts. Overrides any durations set via the `toast` method. Set to 0 to disable automatic closing of toasts.
         */
        "globalDuration"?: number;
    }
    interface SwirlToolbar {
        "label"?: string;
        "orientation"?: SwirlToolbarOrientation;
    }
    interface SwirlTooltip {
        "content": string;
        "delay"?: number;
        "position"?: SwirlTooltipPosition;
        "positioning"?: Strategy;
    }
    interface SwirlTreeNavigationItem {
        "active"?: boolean;
        "href"?: string;
        "icon"?: string;
        "label": string;
        "target"?: string;
    }
    interface SwirlVideoThumbnail {
        "duration"?: string;
        "durationLabel"?: string;
        "label": string;
        "src": string;
    }
    interface SwirlVisuallyHidden {
    }
    interface IntrinsicElements {
        "file-manager": FileManager;
        "swirl-accordion": SwirlAccordion;
        "swirl-accordion-item": SwirlAccordionItem;
        "swirl-action-list": SwirlActionList;
        "swirl-action-list-item": SwirlActionListItem;
        "swirl-action-list-section": SwirlActionListSection;
        "swirl-app-bar": SwirlAppBar;
        "swirl-app-icon": SwirlAppIcon;
        "swirl-app-layout": SwirlAppLayout;
        "swirl-autocomplete": SwirlAutocomplete;
        "swirl-avatar": SwirlAvatar;
        "swirl-avatar-group": SwirlAvatarGroup;
        "swirl-badge": SwirlBadge;
        "swirl-banner": SwirlBanner;
        "swirl-box": SwirlBox;
        "swirl-button": SwirlButton;
        "swirl-button-group": SwirlButtonGroup;
        "swirl-card": SwirlCard;
        "swirl-carousel": SwirlCarousel;
        "swirl-carousel-slide": SwirlCarouselSlide;
        "swirl-checkbox": SwirlCheckbox;
        "swirl-chip": SwirlChip;
        "swirl-color-input": SwirlColorInput;
        "swirl-columns": SwirlColumns;
        "swirl-console-layout": SwirlConsoleLayout;
        "swirl-date-input": SwirlDateInput;
        "swirl-date-picker": SwirlDatePicker;
        "swirl-description-list": SwirlDescriptionList;
        "swirl-description-list-item": SwirlDescriptionListItem;
        "swirl-dialog": SwirlDialog;
        "swirl-emoji": SwirlEmoji;
        "swirl-emoji-clap": SwirlEmojiClap;
        "swirl-emoji-happy": SwirlEmojiHappy;
        "swirl-emoji-idea": SwirlEmojiIdea;
        "swirl-emoji-love": SwirlEmojiLove;
        "swirl-emoji-sad": SwirlEmojiSad;
        "swirl-emoji-thumbs-up": SwirlEmojiThumbsUp;
        "swirl-empty-state": SwirlEmptyState;
        "swirl-file-uploader": SwirlFileUploader;
        "swirl-file-viewer": SwirlFileViewer;
        "swirl-file-viewer-audio": SwirlFileViewerAudio;
        "swirl-file-viewer-csv": SwirlFileViewerCsv;
        "swirl-file-viewer-image": SwirlFileViewerImage;
        "swirl-file-viewer-pdf": SwirlFileViewerPdf;
        "swirl-file-viewer-text": SwirlFileViewerText;
        "swirl-file-viewer-video": SwirlFileViewerVideo;
        "swirl-form-control": SwirlFormControl;
        "swirl-form-group": SwirlFormGroup;
        "swirl-heading": SwirlHeading;
        "swirl-icon": SwirlIcon;
        "swirl-icon-add": SwirlIconAdd;
        "swirl-icon-add-moderator": SwirlIconAddModerator;
        "swirl-icon-add-photo": SwirlIconAddPhoto;
        "swirl-icon-add-reaction": SwirlIconAddReaction;
        "swirl-icon-admin-panel-settings": SwirlIconAdminPanelSettings;
        "swirl-icon-ai": SwirlIconAi;
        "swirl-icon-apps": SwirlIconApps;
        "swirl-icon-arrow-back": SwirlIconArrowBack;
        "swirl-icon-arrow-downward": SwirlIconArrowDownward;
        "swirl-icon-arrow-forward": SwirlIconArrowForward;
        "swirl-icon-arrow-left": SwirlIconArrowLeft;
        "swirl-icon-arrow-right": SwirlIconArrowRight;
        "swirl-icon-arrow-right-small": SwirlIconArrowRightSmall;
        "swirl-icon-arrow-upward": SwirlIconArrowUpward;
        "swirl-icon-attachment": SwirlIconAttachment;
        "swirl-icon-bar-chart": SwirlIconBarChart;
        "swirl-icon-block": SwirlIconBlock;
        "swirl-icon-bookmark": SwirlIconBookmark;
        "swirl-icon-bookmark-filled": SwirlIconBookmarkFilled;
        "swirl-icon-cancel": SwirlIconCancel;
        "swirl-icon-chat-bubble": SwirlIconChatBubble;
        "swirl-icon-chats": SwirlIconChats;
        "swirl-icon-chats-filled": SwirlIconChatsFilled;
        "swirl-icon-check": SwirlIconCheck;
        "swirl-icon-check-circle": SwirlIconCheckCircle;
        "swirl-icon-check-small": SwirlIconCheckSmall;
        "swirl-icon-check-strong": SwirlIconCheckStrong;
        "swirl-icon-chevron-left": SwirlIconChevronLeft;
        "swirl-icon-chevron-right": SwirlIconChevronRight;
        "swirl-icon-close": SwirlIconClose;
        "swirl-icon-close-small": SwirlIconCloseSmall;
        "swirl-icon-cloud-upload": SwirlIconCloudUpload;
        "swirl-icon-column": SwirlIconColumn;
        "swirl-icon-comment": SwirlIconComment;
        "swirl-icon-copy": SwirlIconCopy;
        "swirl-icon-dark-mode": SwirlIconDarkMode;
        "swirl-icon-date-range": SwirlIconDateRange;
        "swirl-icon-delete": SwirlIconDelete;
        "swirl-icon-description": SwirlIconDescription;
        "swirl-icon-desktop": SwirlIconDesktop;
        "swirl-icon-directory": SwirlIconDirectory;
        "swirl-icon-directory-filled": SwirlIconDirectoryFilled;
        "swirl-icon-discover": SwirlIconDiscover;
        "swirl-icon-dock-left": SwirlIconDockLeft;
        "swirl-icon-dot": SwirlIconDot;
        "swirl-icon-double-arrow-left": SwirlIconDoubleArrowLeft;
        "swirl-icon-double-arrow-right": SwirlIconDoubleArrowRight;
        "swirl-icon-download": SwirlIconDownload;
        "swirl-icon-drag-handle": SwirlIconDragHandle;
        "swirl-icon-edit": SwirlIconEdit;
        "swirl-icon-emoji-mood": SwirlIconEmojiMood;
        "swirl-icon-emoji-satisfied": SwirlIconEmojiSatisfied;
        "swirl-icon-error": SwirlIconError;
        "swirl-icon-expand-less": SwirlIconExpandLess;
        "swirl-icon-expand-more": SwirlIconExpandMore;
        "swirl-icon-file": SwirlIconFile;
        "swirl-icon-file-copy": SwirlIconFileCopy;
        "swirl-icon-filter": SwirlIconFilter;
        "swirl-icon-folder": SwirlIconFolder;
        "swirl-icon-folder-shared": SwirlIconFolderShared;
        "swirl-icon-format-h-one": SwirlIconFormatHOne;
        "swirl-icon-fullscreen": SwirlIconFullscreen;
        "swirl-icon-fullscreen-exit": SwirlIconFullscreenExit;
        "swirl-icon-gif": SwirlIconGif;
        "swirl-icon-group-add": SwirlIconGroupAdd;
        "swirl-icon-group-assign": SwirlIconGroupAssign;
        "swirl-icon-groups": SwirlIconGroups;
        "swirl-icon-groups-filled": SwirlIconGroupsFilled;
        "swirl-icon-hamburger-menu": SwirlIconHamburgerMenu;
        "swirl-icon-help": SwirlIconHelp;
        "swirl-icon-highlight": SwirlIconHighlight;
        "swirl-icon-home": SwirlIconHome;
        "swirl-icon-image": SwirlIconImage;
        "swirl-icon-improve-text": SwirlIconImproveText;
        "swirl-icon-info": SwirlIconInfo;
        "swirl-icon-insert-below": SwirlIconInsertBelow;
        "swirl-icon-insert-on-top": SwirlIconInsertOnTop;
        "swirl-icon-inventory": SwirlIconInventory;
        "swirl-icon-keyboard-hide": SwirlIconKeyboardHide;
        "swirl-icon-light-mode": SwirlIconLightMode;
        "swirl-icon-like": SwirlIconLike;
        "swirl-icon-link": SwirlIconLink;
        "swirl-icon-load": SwirlIconLoad;
        "swirl-icon-lock": SwirlIconLock;
        "swirl-icon-lock-open": SwirlIconLockOpen;
        "swirl-icon-lock-person": SwirlIconLockPerson;
        "swirl-icon-login": SwirlIconLogin;
        "swirl-icon-logout": SwirlIconLogout;
        "swirl-icon-long-text": SwirlIconLongText;
        "swirl-icon-mail": SwirlIconMail;
        "swirl-icon-manage-accounts": SwirlIconManageAccounts;
        "swirl-icon-mark-chat-read": SwirlIconMarkChatRead;
        "swirl-icon-mark-chat-unread": SwirlIconMarkChatUnread;
        "swirl-icon-mention": SwirlIconMention;
        "swirl-icon-menu": SwirlIconMenu;
        "swirl-icon-menu-book": SwirlIconMenuBook;
        "swirl-icon-menu-filled": SwirlIconMenuFilled;
        "swirl-icon-message": SwirlIconMessage;
        "swirl-icon-mic": SwirlIconMic;
        "swirl-icon-more-horizontal": SwirlIconMoreHorizontal;
        "swirl-icon-more-vertikal": SwirlIconMoreVertikal;
        "swirl-icon-news": SwirlIconNews;
        "swirl-icon-news-filled": SwirlIconNewsFilled;
        "swirl-icon-news-off": SwirlIconNewsOff;
        "swirl-icon-notifications": SwirlIconNotifications;
        "swirl-icon-notifications-active": SwirlIconNotificationsActive;
        "swirl-icon-notifications-off": SwirlIconNotificationsOff;
        "swirl-icon-open-in-full": SwirlIconOpenInFull;
        "swirl-icon-open-in-new": SwirlIconOpenInNew;
        "swirl-icon-pause": SwirlIconPause;
        "swirl-icon-pause-circle": SwirlIconPauseCircle;
        "swirl-icon-people-alt": SwirlIconPeopleAlt;
        "swirl-icon-person": SwirlIconPerson;
        "swirl-icon-person-off": SwirlIconPersonOff;
        "swirl-icon-phone": SwirlIconPhone;
        "swirl-icon-photo-camera": SwirlIconPhotoCamera;
        "swirl-icon-place": SwirlIconPlace;
        "swirl-icon-play-arrow": SwirlIconPlayArrow;
        "swirl-icon-poll": SwirlIconPoll;
        "swirl-icon-print": SwirlIconPrint;
        "swirl-icon-recieved": SwirlIconRecieved;
        "swirl-icon-remove": SwirlIconRemove;
        "swirl-icon-remove-moderator": SwirlIconRemoveModerator;
        "swirl-icon-reply": SwirlIconReply;
        "swirl-icon-report": SwirlIconReport;
        "swirl-icon-roadmap": SwirlIconRoadmap;
        "swirl-icon-search": SwirlIconSearch;
        "swirl-icon-search-strong": SwirlIconSearchStrong;
        "swirl-icon-secure": SwirlIconSecure;
        "swirl-icon-send": SwirlIconSend;
        "swirl-icon-settings": SwirlIconSettings;
        "swirl-icon-short-text": SwirlIconShortText;
        "swirl-icon-simplify": SwirlIconSimplify;
        "swirl-icon-spellcheck": SwirlIconSpellcheck;
        "swirl-icon-stop": SwirlIconStop;
        "swirl-icon-sync": SwirlIconSync;
        "swirl-icon-tasks": SwirlIconTasks;
        "swirl-icon-tasks-filled": SwirlIconTasksFilled;
        "swirl-icon-terminal": SwirlIconTerminal;
        "swirl-icon-time": SwirlIconTime;
        "swirl-icon-time-filled": SwirlIconTimeFilled;
        "swirl-icon-today": SwirlIconToday;
        "swirl-icon-today-filled": SwirlIconTodayFilled;
        "swirl-icon-translate": SwirlIconTranslate;
        "swirl-icon-tree-structure": SwirlIconTreeStructure;
        "swirl-icon-undo": SwirlIconUndo;
        "swirl-icon-unlock-person": SwirlIconUnlockPerson;
        "swirl-icon-user-add": SwirlIconUserAdd;
        "swirl-icon-user-assign": SwirlIconUserAssign;
        "swirl-icon-video-camera": SwirlIconVideoCamera;
        "swirl-icon-video-library": SwirlIconVideoLibrary;
        "swirl-icon-visibility": SwirlIconVisibility;
        "swirl-icon-visibility-off": SwirlIconVisibilityOff;
        "swirl-icon-voice": SwirlIconVoice;
        "swirl-icon-warning": SwirlIconWarning;
        "swirl-icon-work": SwirlIconWork;
        "swirl-image-grid": SwirlImageGrid;
        "swirl-image-grid-item": SwirlImageGridItem;
        "swirl-inline-error": SwirlInlineError;
        "swirl-inline-notification": SwirlInlineNotification;
        "swirl-inline-status": SwirlInlineStatus;
        "swirl-lightbox": SwirlLightbox;
        "swirl-link": SwirlLink;
        "swirl-list": SwirlList;
        "swirl-menu": SwirlMenu;
        "swirl-menu-item": SwirlMenuItem;
        "swirl-modal": SwirlModal;
        "swirl-option-list": SwirlOptionList;
        "swirl-option-list-item": SwirlOptionListItem;
        "swirl-option-list-section": SwirlOptionListSection;
        "swirl-pagination": SwirlPagination;
        "swirl-pdf-reader": SwirlPdfReader;
        "swirl-popover": SwirlPopover;
        "swirl-popover-trigger": SwirlPopoverTrigger;
        "swirl-progress-indicator": SwirlProgressIndicator;
        "swirl-radio": SwirlRadio;
        "swirl-radio-group": SwirlRadioGroup;
        "swirl-resource-list": SwirlResourceList;
        "swirl-resource-list-file-item": SwirlResourceListFileItem;
        "swirl-resource-list-item": SwirlResourceListItem;
        "swirl-search": SwirlSearch;
        "swirl-select": SwirlSelect;
        "swirl-separator": SwirlSeparator;
        "swirl-shell-layout": SwirlShellLayout;
        "swirl-shell-navigation-item": SwirlShellNavigationItem;
        "swirl-skeleton-box": SwirlSkeletonBox;
        "swirl-skeleton-text": SwirlSkeletonText;
        "swirl-spinner": SwirlSpinner;
        "swirl-stack": SwirlStack;
        "swirl-status-indicator": SwirlStatusIndicator;
        "swirl-switch": SwirlSwitch;
        "swirl-symbol": SwirlSymbol;
        "swirl-symbol-account-circle": SwirlSymbolAccountCircle;
        "swirl-symbol-alternate-email": SwirlSymbolAlternateEmail;
        "swirl-symbol-android": SwirlSymbolAndroid;
        "swirl-symbol-announcement": SwirlSymbolAnnouncement;
        "swirl-symbol-backup": SwirlSymbolBackup;
        "swirl-symbol-beach-access": SwirlSymbolBeachAccess;
        "swirl-symbol-bookmark": SwirlSymbolBookmark;
        "swirl-symbol-cloud": SwirlSymbolCloud;
        "swirl-symbol-coronavirus": SwirlSymbolCoronavirus;
        "swirl-symbol-desktop-windows": SwirlSymbolDesktopWindows;
        "swirl-symbol-directions-car-filled": SwirlSymbolDirectionsCarFilled;
        "swirl-symbol-edit-calendar": SwirlSymbolEditCalendar;
        "swirl-symbol-email": SwirlSymbolEmail;
        "swirl-symbol-emoji-food-beverage": SwirlSymbolEmojiFoodBeverage;
        "swirl-symbol-event-menu": SwirlSymbolEventMenu;
        "swirl-symbol-facebook": SwirlSymbolFacebook;
        "swirl-symbol-favorite": SwirlSymbolFavorite;
        "swirl-symbol-fitness-center": SwirlSymbolFitnessCenter;
        "swirl-symbol-flag": SwirlSymbolFlag;
        "swirl-symbol-folder": SwirlSymbolFolder;
        "swirl-symbol-globe": SwirlSymbolGlobe;
        "swirl-symbol-groups": SwirlSymbolGroups;
        "swirl-symbol-help": SwirlSymbolHelp;
        "swirl-symbol-image": SwirlSymbolImage;
        "swirl-symbol-info-menu": SwirlSymbolInfoMenu;
        "swirl-symbol-instagram": SwirlSymbolInstagram;
        "swirl-symbol-ios": SwirlSymbolIos;
        "swirl-symbol-language": SwirlSymbolLanguage;
        "swirl-symbol-leaderboard": SwirlSymbolLeaderboard;
        "swirl-symbol-lightbulb": SwirlSymbolLightbulb;
        "swirl-symbol-linkedin": SwirlSymbolLinkedin;
        "swirl-symbol-location-on": SwirlSymbolLocationOn;
        "swirl-symbol-loyalty": SwirlSymbolLoyalty;
        "swirl-symbol-maps-home-work": SwirlSymbolMapsHomeWork;
        "swirl-symbol-notifications": SwirlSymbolNotifications;
        "swirl-symbol-open-in-new": SwirlSymbolOpenInNew;
        "swirl-symbol-pedal-bike": SwirlSymbolPedalBike;
        "swirl-symbol-pinterest": SwirlSymbolPinterest;
        "swirl-symbol-policy": SwirlSymbolPolicy;
        "swirl-symbol-push-pin": SwirlSymbolPushPin;
        "swirl-symbol-redeem": SwirlSymbolRedeem;
        "swirl-symbol-report-problem": SwirlSymbolReportProblem;
        "swirl-symbol-restaurant": SwirlSymbolRestaurant;
        "swirl-symbol-roadmap": SwirlSymbolRoadmap;
        "swirl-symbol-room": SwirlSymbolRoom;
        "swirl-symbol-savings": SwirlSymbolSavings;
        "swirl-symbol-settings-voice": SwirlSymbolSettingsVoice;
        "swirl-symbol-shopping-cart": SwirlSymbolShoppingCart;
        "swirl-symbol-smartphone": SwirlSymbolSmartphone;
        "swirl-symbol-star": SwirlSymbolStar;
        "swirl-symbol-supervisor-account": SwirlSymbolSupervisorAccount;
        "swirl-symbol-thumbs-up-down": SwirlSymbolThumbsUpDown;
        "swirl-symbol-twitter": SwirlSymbolTwitter;
        "swirl-symbol-wb-sunny": SwirlSymbolWbSunny;
        "swirl-symbol-wechat": SwirlSymbolWechat;
        "swirl-symbol-weibo": SwirlSymbolWeibo;
        "swirl-symbol-work": SwirlSymbolWork;
        "swirl-symbol-xing": SwirlSymbolXing;
        "swirl-symbol-youtube": SwirlSymbolYoutube;
        "swirl-tab": SwirlTab;
        "swirl-tab-bar": SwirlTabBar;
        "swirl-table": SwirlTable;
        "swirl-table-cell": SwirlTableCell;
        "swirl-table-column": SwirlTableColumn;
        "swirl-table-row": SwirlTableRow;
        "swirl-table-row-group": SwirlTableRowGroup;
        "swirl-tabs": SwirlTabs;
        "swirl-tag": SwirlTag;
        "swirl-text": SwirlText;
        "swirl-text-input": SwirlTextInput;
        "swirl-theme-provider": SwirlThemeProvider;
        "swirl-thumbnail": SwirlThumbnail;
        "swirl-time-input": SwirlTimeInput;
        "swirl-toast": SwirlToast;
        "swirl-toast-provider": SwirlToastProvider;
        "swirl-toolbar": SwirlToolbar;
        "swirl-tooltip": SwirlTooltip;
        "swirl-tree-navigation-item": SwirlTreeNavigationItem;
        "swirl-video-thumbnail": SwirlVideoThumbnail;
        "swirl-visually-hidden": SwirlVisuallyHidden;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "file-manager": LocalJSX.FileManager & JSXBase.HTMLAttributes<HTMLFileManagerElement>;
            "swirl-accordion": LocalJSX.SwirlAccordion & JSXBase.HTMLAttributes<HTMLSwirlAccordionElement>;
            "swirl-accordion-item": LocalJSX.SwirlAccordionItem & JSXBase.HTMLAttributes<HTMLSwirlAccordionItemElement>;
            "swirl-action-list": LocalJSX.SwirlActionList & JSXBase.HTMLAttributes<HTMLSwirlActionListElement>;
            "swirl-action-list-item": LocalJSX.SwirlActionListItem & JSXBase.HTMLAttributes<HTMLSwirlActionListItemElement>;
            "swirl-action-list-section": LocalJSX.SwirlActionListSection & JSXBase.HTMLAttributes<HTMLSwirlActionListSectionElement>;
            "swirl-app-bar": LocalJSX.SwirlAppBar & JSXBase.HTMLAttributes<HTMLSwirlAppBarElement>;
            "swirl-app-icon": LocalJSX.SwirlAppIcon & JSXBase.HTMLAttributes<HTMLSwirlAppIconElement>;
            "swirl-app-layout": LocalJSX.SwirlAppLayout & JSXBase.HTMLAttributes<HTMLSwirlAppLayoutElement>;
            "swirl-autocomplete": LocalJSX.SwirlAutocomplete & JSXBase.HTMLAttributes<HTMLSwirlAutocompleteElement>;
            "swirl-avatar": LocalJSX.SwirlAvatar & JSXBase.HTMLAttributes<HTMLSwirlAvatarElement>;
            "swirl-avatar-group": LocalJSX.SwirlAvatarGroup & JSXBase.HTMLAttributes<HTMLSwirlAvatarGroupElement>;
            "swirl-badge": LocalJSX.SwirlBadge & JSXBase.HTMLAttributes<HTMLSwirlBadgeElement>;
            "swirl-banner": LocalJSX.SwirlBanner & JSXBase.HTMLAttributes<HTMLSwirlBannerElement>;
            "swirl-box": LocalJSX.SwirlBox & JSXBase.HTMLAttributes<HTMLSwirlBoxElement>;
            "swirl-button": LocalJSX.SwirlButton & JSXBase.HTMLAttributes<HTMLSwirlButtonElement>;
            "swirl-button-group": LocalJSX.SwirlButtonGroup & JSXBase.HTMLAttributes<HTMLSwirlButtonGroupElement>;
            "swirl-card": LocalJSX.SwirlCard & JSXBase.HTMLAttributes<HTMLSwirlCardElement>;
            /**
             * slot - The slides
             */
            "swirl-carousel": LocalJSX.SwirlCarousel & JSXBase.HTMLAttributes<HTMLSwirlCarouselElement>;
            /**
             * slot - The slide contents
             */
            "swirl-carousel-slide": LocalJSX.SwirlCarouselSlide & JSXBase.HTMLAttributes<HTMLSwirlCarouselSlideElement>;
            "swirl-checkbox": LocalJSX.SwirlCheckbox & JSXBase.HTMLAttributes<HTMLSwirlCheckboxElement>;
            "swirl-chip": LocalJSX.SwirlChip & JSXBase.HTMLAttributes<HTMLSwirlChipElement>;
            "swirl-color-input": LocalJSX.SwirlColorInput & JSXBase.HTMLAttributes<HTMLSwirlColorInputElement>;
            "swirl-columns": LocalJSX.SwirlColumns & JSXBase.HTMLAttributes<HTMLSwirlColumnsElement>;
            "swirl-console-layout": LocalJSX.SwirlConsoleLayout & JSXBase.HTMLAttributes<HTMLSwirlConsoleLayoutElement>;
            "swirl-date-input": LocalJSX.SwirlDateInput & JSXBase.HTMLAttributes<HTMLSwirlDateInputElement>;
            "swirl-date-picker": LocalJSX.SwirlDatePicker & JSXBase.HTMLAttributes<HTMLSwirlDatePickerElement>;
            "swirl-description-list": LocalJSX.SwirlDescriptionList & JSXBase.HTMLAttributes<HTMLSwirlDescriptionListElement>;
            "swirl-description-list-item": LocalJSX.SwirlDescriptionListItem & JSXBase.HTMLAttributes<HTMLSwirlDescriptionListItemElement>;
            "swirl-dialog": LocalJSX.SwirlDialog & JSXBase.HTMLAttributes<HTMLSwirlDialogElement>;
            "swirl-emoji": LocalJSX.SwirlEmoji & JSXBase.HTMLAttributes<HTMLSwirlEmojiElement>;
            "swirl-emoji-clap": LocalJSX.SwirlEmojiClap & JSXBase.HTMLAttributes<HTMLSwirlEmojiClapElement>;
            "swirl-emoji-happy": LocalJSX.SwirlEmojiHappy & JSXBase.HTMLAttributes<HTMLSwirlEmojiHappyElement>;
            "swirl-emoji-idea": LocalJSX.SwirlEmojiIdea & JSXBase.HTMLAttributes<HTMLSwirlEmojiIdeaElement>;
            "swirl-emoji-love": LocalJSX.SwirlEmojiLove & JSXBase.HTMLAttributes<HTMLSwirlEmojiLoveElement>;
            "swirl-emoji-sad": LocalJSX.SwirlEmojiSad & JSXBase.HTMLAttributes<HTMLSwirlEmojiSadElement>;
            "swirl-emoji-thumbs-up": LocalJSX.SwirlEmojiThumbsUp & JSXBase.HTMLAttributes<HTMLSwirlEmojiThumbsUpElement>;
            "swirl-empty-state": LocalJSX.SwirlEmptyState & JSXBase.HTMLAttributes<HTMLSwirlEmptyStateElement>;
            "swirl-file-uploader": LocalJSX.SwirlFileUploader & JSXBase.HTMLAttributes<HTMLSwirlFileUploaderElement>;
            "swirl-file-viewer": LocalJSX.SwirlFileViewer & JSXBase.HTMLAttributes<HTMLSwirlFileViewerElement>;
            "swirl-file-viewer-audio": LocalJSX.SwirlFileViewerAudio & JSXBase.HTMLAttributes<HTMLSwirlFileViewerAudioElement>;
            "swirl-file-viewer-csv": LocalJSX.SwirlFileViewerCsv & JSXBase.HTMLAttributes<HTMLSwirlFileViewerCsvElement>;
            "swirl-file-viewer-image": LocalJSX.SwirlFileViewerImage & JSXBase.HTMLAttributes<HTMLSwirlFileViewerImageElement>;
            "swirl-file-viewer-pdf": LocalJSX.SwirlFileViewerPdf & JSXBase.HTMLAttributes<HTMLSwirlFileViewerPdfElement>;
            "swirl-file-viewer-text": LocalJSX.SwirlFileViewerText & JSXBase.HTMLAttributes<HTMLSwirlFileViewerTextElement>;
            "swirl-file-viewer-video": LocalJSX.SwirlFileViewerVideo & JSXBase.HTMLAttributes<HTMLSwirlFileViewerVideoElement>;
            "swirl-form-control": LocalJSX.SwirlFormControl & JSXBase.HTMLAttributes<HTMLSwirlFormControlElement>;
            "swirl-form-group": LocalJSX.SwirlFormGroup & JSXBase.HTMLAttributes<HTMLSwirlFormGroupElement>;
            "swirl-heading": LocalJSX.SwirlHeading & JSXBase.HTMLAttributes<HTMLSwirlHeadingElement>;
            "swirl-icon": LocalJSX.SwirlIcon & JSXBase.HTMLAttributes<HTMLSwirlIconElement>;
            "swirl-icon-add": LocalJSX.SwirlIconAdd & JSXBase.HTMLAttributes<HTMLSwirlIconAddElement>;
            "swirl-icon-add-moderator": LocalJSX.SwirlIconAddModerator & JSXBase.HTMLAttributes<HTMLSwirlIconAddModeratorElement>;
            "swirl-icon-add-photo": LocalJSX.SwirlIconAddPhoto & JSXBase.HTMLAttributes<HTMLSwirlIconAddPhotoElement>;
            "swirl-icon-add-reaction": LocalJSX.SwirlIconAddReaction & JSXBase.HTMLAttributes<HTMLSwirlIconAddReactionElement>;
            "swirl-icon-admin-panel-settings": LocalJSX.SwirlIconAdminPanelSettings & JSXBase.HTMLAttributes<HTMLSwirlIconAdminPanelSettingsElement>;
            "swirl-icon-ai": LocalJSX.SwirlIconAi & JSXBase.HTMLAttributes<HTMLSwirlIconAiElement>;
            "swirl-icon-apps": LocalJSX.SwirlIconApps & JSXBase.HTMLAttributes<HTMLSwirlIconAppsElement>;
            "swirl-icon-arrow-back": LocalJSX.SwirlIconArrowBack & JSXBase.HTMLAttributes<HTMLSwirlIconArrowBackElement>;
            "swirl-icon-arrow-downward": LocalJSX.SwirlIconArrowDownward & JSXBase.HTMLAttributes<HTMLSwirlIconArrowDownwardElement>;
            "swirl-icon-arrow-forward": LocalJSX.SwirlIconArrowForward & JSXBase.HTMLAttributes<HTMLSwirlIconArrowForwardElement>;
            "swirl-icon-arrow-left": LocalJSX.SwirlIconArrowLeft & JSXBase.HTMLAttributes<HTMLSwirlIconArrowLeftElement>;
            "swirl-icon-arrow-right": LocalJSX.SwirlIconArrowRight & JSXBase.HTMLAttributes<HTMLSwirlIconArrowRightElement>;
            "swirl-icon-arrow-right-small": LocalJSX.SwirlIconArrowRightSmall & JSXBase.HTMLAttributes<HTMLSwirlIconArrowRightSmallElement>;
            "swirl-icon-arrow-upward": LocalJSX.SwirlIconArrowUpward & JSXBase.HTMLAttributes<HTMLSwirlIconArrowUpwardElement>;
            "swirl-icon-attachment": LocalJSX.SwirlIconAttachment & JSXBase.HTMLAttributes<HTMLSwirlIconAttachmentElement>;
            "swirl-icon-bar-chart": LocalJSX.SwirlIconBarChart & JSXBase.HTMLAttributes<HTMLSwirlIconBarChartElement>;
            "swirl-icon-block": LocalJSX.SwirlIconBlock & JSXBase.HTMLAttributes<HTMLSwirlIconBlockElement>;
            "swirl-icon-bookmark": LocalJSX.SwirlIconBookmark & JSXBase.HTMLAttributes<HTMLSwirlIconBookmarkElement>;
            "swirl-icon-bookmark-filled": LocalJSX.SwirlIconBookmarkFilled & JSXBase.HTMLAttributes<HTMLSwirlIconBookmarkFilledElement>;
            "swirl-icon-cancel": LocalJSX.SwirlIconCancel & JSXBase.HTMLAttributes<HTMLSwirlIconCancelElement>;
            "swirl-icon-chat-bubble": LocalJSX.SwirlIconChatBubble & JSXBase.HTMLAttributes<HTMLSwirlIconChatBubbleElement>;
            "swirl-icon-chats": LocalJSX.SwirlIconChats & JSXBase.HTMLAttributes<HTMLSwirlIconChatsElement>;
            "swirl-icon-chats-filled": LocalJSX.SwirlIconChatsFilled & JSXBase.HTMLAttributes<HTMLSwirlIconChatsFilledElement>;
            "swirl-icon-check": LocalJSX.SwirlIconCheck & JSXBase.HTMLAttributes<HTMLSwirlIconCheckElement>;
            "swirl-icon-check-circle": LocalJSX.SwirlIconCheckCircle & JSXBase.HTMLAttributes<HTMLSwirlIconCheckCircleElement>;
            "swirl-icon-check-small": LocalJSX.SwirlIconCheckSmall & JSXBase.HTMLAttributes<HTMLSwirlIconCheckSmallElement>;
            "swirl-icon-check-strong": LocalJSX.SwirlIconCheckStrong & JSXBase.HTMLAttributes<HTMLSwirlIconCheckStrongElement>;
            "swirl-icon-chevron-left": LocalJSX.SwirlIconChevronLeft & JSXBase.HTMLAttributes<HTMLSwirlIconChevronLeftElement>;
            "swirl-icon-chevron-right": LocalJSX.SwirlIconChevronRight & JSXBase.HTMLAttributes<HTMLSwirlIconChevronRightElement>;
            "swirl-icon-close": LocalJSX.SwirlIconClose & JSXBase.HTMLAttributes<HTMLSwirlIconCloseElement>;
            "swirl-icon-close-small": LocalJSX.SwirlIconCloseSmall & JSXBase.HTMLAttributes<HTMLSwirlIconCloseSmallElement>;
            "swirl-icon-cloud-upload": LocalJSX.SwirlIconCloudUpload & JSXBase.HTMLAttributes<HTMLSwirlIconCloudUploadElement>;
            "swirl-icon-column": LocalJSX.SwirlIconColumn & JSXBase.HTMLAttributes<HTMLSwirlIconColumnElement>;
            "swirl-icon-comment": LocalJSX.SwirlIconComment & JSXBase.HTMLAttributes<HTMLSwirlIconCommentElement>;
            "swirl-icon-copy": LocalJSX.SwirlIconCopy & JSXBase.HTMLAttributes<HTMLSwirlIconCopyElement>;
            "swirl-icon-dark-mode": LocalJSX.SwirlIconDarkMode & JSXBase.HTMLAttributes<HTMLSwirlIconDarkModeElement>;
            "swirl-icon-date-range": LocalJSX.SwirlIconDateRange & JSXBase.HTMLAttributes<HTMLSwirlIconDateRangeElement>;
            "swirl-icon-delete": LocalJSX.SwirlIconDelete & JSXBase.HTMLAttributes<HTMLSwirlIconDeleteElement>;
            "swirl-icon-description": LocalJSX.SwirlIconDescription & JSXBase.HTMLAttributes<HTMLSwirlIconDescriptionElement>;
            "swirl-icon-desktop": LocalJSX.SwirlIconDesktop & JSXBase.HTMLAttributes<HTMLSwirlIconDesktopElement>;
            "swirl-icon-directory": LocalJSX.SwirlIconDirectory & JSXBase.HTMLAttributes<HTMLSwirlIconDirectoryElement>;
            "swirl-icon-directory-filled": LocalJSX.SwirlIconDirectoryFilled & JSXBase.HTMLAttributes<HTMLSwirlIconDirectoryFilledElement>;
            "swirl-icon-discover": LocalJSX.SwirlIconDiscover & JSXBase.HTMLAttributes<HTMLSwirlIconDiscoverElement>;
            "swirl-icon-dock-left": LocalJSX.SwirlIconDockLeft & JSXBase.HTMLAttributes<HTMLSwirlIconDockLeftElement>;
            "swirl-icon-dot": LocalJSX.SwirlIconDot & JSXBase.HTMLAttributes<HTMLSwirlIconDotElement>;
            "swirl-icon-double-arrow-left": LocalJSX.SwirlIconDoubleArrowLeft & JSXBase.HTMLAttributes<HTMLSwirlIconDoubleArrowLeftElement>;
            "swirl-icon-double-arrow-right": LocalJSX.SwirlIconDoubleArrowRight & JSXBase.HTMLAttributes<HTMLSwirlIconDoubleArrowRightElement>;
            "swirl-icon-download": LocalJSX.SwirlIconDownload & JSXBase.HTMLAttributes<HTMLSwirlIconDownloadElement>;
            "swirl-icon-drag-handle": LocalJSX.SwirlIconDragHandle & JSXBase.HTMLAttributes<HTMLSwirlIconDragHandleElement>;
            "swirl-icon-edit": LocalJSX.SwirlIconEdit & JSXBase.HTMLAttributes<HTMLSwirlIconEditElement>;
            "swirl-icon-emoji-mood": LocalJSX.SwirlIconEmojiMood & JSXBase.HTMLAttributes<HTMLSwirlIconEmojiMoodElement>;
            "swirl-icon-emoji-satisfied": LocalJSX.SwirlIconEmojiSatisfied & JSXBase.HTMLAttributes<HTMLSwirlIconEmojiSatisfiedElement>;
            "swirl-icon-error": LocalJSX.SwirlIconError & JSXBase.HTMLAttributes<HTMLSwirlIconErrorElement>;
            "swirl-icon-expand-less": LocalJSX.SwirlIconExpandLess & JSXBase.HTMLAttributes<HTMLSwirlIconExpandLessElement>;
            "swirl-icon-expand-more": LocalJSX.SwirlIconExpandMore & JSXBase.HTMLAttributes<HTMLSwirlIconExpandMoreElement>;
            "swirl-icon-file": LocalJSX.SwirlIconFile & JSXBase.HTMLAttributes<HTMLSwirlIconFileElement>;
            "swirl-icon-file-copy": LocalJSX.SwirlIconFileCopy & JSXBase.HTMLAttributes<HTMLSwirlIconFileCopyElement>;
            "swirl-icon-filter": LocalJSX.SwirlIconFilter & JSXBase.HTMLAttributes<HTMLSwirlIconFilterElement>;
            "swirl-icon-folder": LocalJSX.SwirlIconFolder & JSXBase.HTMLAttributes<HTMLSwirlIconFolderElement>;
            "swirl-icon-folder-shared": LocalJSX.SwirlIconFolderShared & JSXBase.HTMLAttributes<HTMLSwirlIconFolderSharedElement>;
            "swirl-icon-format-h-one": LocalJSX.SwirlIconFormatHOne & JSXBase.HTMLAttributes<HTMLSwirlIconFormatHOneElement>;
            "swirl-icon-fullscreen": LocalJSX.SwirlIconFullscreen & JSXBase.HTMLAttributes<HTMLSwirlIconFullscreenElement>;
            "swirl-icon-fullscreen-exit": LocalJSX.SwirlIconFullscreenExit & JSXBase.HTMLAttributes<HTMLSwirlIconFullscreenExitElement>;
            "swirl-icon-gif": LocalJSX.SwirlIconGif & JSXBase.HTMLAttributes<HTMLSwirlIconGifElement>;
            "swirl-icon-group-add": LocalJSX.SwirlIconGroupAdd & JSXBase.HTMLAttributes<HTMLSwirlIconGroupAddElement>;
            "swirl-icon-group-assign": LocalJSX.SwirlIconGroupAssign & JSXBase.HTMLAttributes<HTMLSwirlIconGroupAssignElement>;
            "swirl-icon-groups": LocalJSX.SwirlIconGroups & JSXBase.HTMLAttributes<HTMLSwirlIconGroupsElement>;
            "swirl-icon-groups-filled": LocalJSX.SwirlIconGroupsFilled & JSXBase.HTMLAttributes<HTMLSwirlIconGroupsFilledElement>;
            "swirl-icon-hamburger-menu": LocalJSX.SwirlIconHamburgerMenu & JSXBase.HTMLAttributes<HTMLSwirlIconHamburgerMenuElement>;
            "swirl-icon-help": LocalJSX.SwirlIconHelp & JSXBase.HTMLAttributes<HTMLSwirlIconHelpElement>;
            "swirl-icon-highlight": LocalJSX.SwirlIconHighlight & JSXBase.HTMLAttributes<HTMLSwirlIconHighlightElement>;
            "swirl-icon-home": LocalJSX.SwirlIconHome & JSXBase.HTMLAttributes<HTMLSwirlIconHomeElement>;
            "swirl-icon-image": LocalJSX.SwirlIconImage & JSXBase.HTMLAttributes<HTMLSwirlIconImageElement>;
            "swirl-icon-improve-text": LocalJSX.SwirlIconImproveText & JSXBase.HTMLAttributes<HTMLSwirlIconImproveTextElement>;
            "swirl-icon-info": LocalJSX.SwirlIconInfo & JSXBase.HTMLAttributes<HTMLSwirlIconInfoElement>;
            "swirl-icon-insert-below": LocalJSX.SwirlIconInsertBelow & JSXBase.HTMLAttributes<HTMLSwirlIconInsertBelowElement>;
            "swirl-icon-insert-on-top": LocalJSX.SwirlIconInsertOnTop & JSXBase.HTMLAttributes<HTMLSwirlIconInsertOnTopElement>;
            "swirl-icon-inventory": LocalJSX.SwirlIconInventory & JSXBase.HTMLAttributes<HTMLSwirlIconInventoryElement>;
            "swirl-icon-keyboard-hide": LocalJSX.SwirlIconKeyboardHide & JSXBase.HTMLAttributes<HTMLSwirlIconKeyboardHideElement>;
            "swirl-icon-light-mode": LocalJSX.SwirlIconLightMode & JSXBase.HTMLAttributes<HTMLSwirlIconLightModeElement>;
            "swirl-icon-like": LocalJSX.SwirlIconLike & JSXBase.HTMLAttributes<HTMLSwirlIconLikeElement>;
            "swirl-icon-link": LocalJSX.SwirlIconLink & JSXBase.HTMLAttributes<HTMLSwirlIconLinkElement>;
            "swirl-icon-load": LocalJSX.SwirlIconLoad & JSXBase.HTMLAttributes<HTMLSwirlIconLoadElement>;
            "swirl-icon-lock": LocalJSX.SwirlIconLock & JSXBase.HTMLAttributes<HTMLSwirlIconLockElement>;
            "swirl-icon-lock-open": LocalJSX.SwirlIconLockOpen & JSXBase.HTMLAttributes<HTMLSwirlIconLockOpenElement>;
            "swirl-icon-lock-person": LocalJSX.SwirlIconLockPerson & JSXBase.HTMLAttributes<HTMLSwirlIconLockPersonElement>;
            "swirl-icon-login": LocalJSX.SwirlIconLogin & JSXBase.HTMLAttributes<HTMLSwirlIconLoginElement>;
            "swirl-icon-logout": LocalJSX.SwirlIconLogout & JSXBase.HTMLAttributes<HTMLSwirlIconLogoutElement>;
            "swirl-icon-long-text": LocalJSX.SwirlIconLongText & JSXBase.HTMLAttributes<HTMLSwirlIconLongTextElement>;
            "swirl-icon-mail": LocalJSX.SwirlIconMail & JSXBase.HTMLAttributes<HTMLSwirlIconMailElement>;
            "swirl-icon-manage-accounts": LocalJSX.SwirlIconManageAccounts & JSXBase.HTMLAttributes<HTMLSwirlIconManageAccountsElement>;
            "swirl-icon-mark-chat-read": LocalJSX.SwirlIconMarkChatRead & JSXBase.HTMLAttributes<HTMLSwirlIconMarkChatReadElement>;
            "swirl-icon-mark-chat-unread": LocalJSX.SwirlIconMarkChatUnread & JSXBase.HTMLAttributes<HTMLSwirlIconMarkChatUnreadElement>;
            "swirl-icon-mention": LocalJSX.SwirlIconMention & JSXBase.HTMLAttributes<HTMLSwirlIconMentionElement>;
            "swirl-icon-menu": LocalJSX.SwirlIconMenu & JSXBase.HTMLAttributes<HTMLSwirlIconMenuElement>;
            "swirl-icon-menu-book": LocalJSX.SwirlIconMenuBook & JSXBase.HTMLAttributes<HTMLSwirlIconMenuBookElement>;
            "swirl-icon-menu-filled": LocalJSX.SwirlIconMenuFilled & JSXBase.HTMLAttributes<HTMLSwirlIconMenuFilledElement>;
            "swirl-icon-message": LocalJSX.SwirlIconMessage & JSXBase.HTMLAttributes<HTMLSwirlIconMessageElement>;
            "swirl-icon-mic": LocalJSX.SwirlIconMic & JSXBase.HTMLAttributes<HTMLSwirlIconMicElement>;
            "swirl-icon-more-horizontal": LocalJSX.SwirlIconMoreHorizontal & JSXBase.HTMLAttributes<HTMLSwirlIconMoreHorizontalElement>;
            "swirl-icon-more-vertikal": LocalJSX.SwirlIconMoreVertikal & JSXBase.HTMLAttributes<HTMLSwirlIconMoreVertikalElement>;
            "swirl-icon-news": LocalJSX.SwirlIconNews & JSXBase.HTMLAttributes<HTMLSwirlIconNewsElement>;
            "swirl-icon-news-filled": LocalJSX.SwirlIconNewsFilled & JSXBase.HTMLAttributes<HTMLSwirlIconNewsFilledElement>;
            "swirl-icon-news-off": LocalJSX.SwirlIconNewsOff & JSXBase.HTMLAttributes<HTMLSwirlIconNewsOffElement>;
            "swirl-icon-notifications": LocalJSX.SwirlIconNotifications & JSXBase.HTMLAttributes<HTMLSwirlIconNotificationsElement>;
            "swirl-icon-notifications-active": LocalJSX.SwirlIconNotificationsActive & JSXBase.HTMLAttributes<HTMLSwirlIconNotificationsActiveElement>;
            "swirl-icon-notifications-off": LocalJSX.SwirlIconNotificationsOff & JSXBase.HTMLAttributes<HTMLSwirlIconNotificationsOffElement>;
            "swirl-icon-open-in-full": LocalJSX.SwirlIconOpenInFull & JSXBase.HTMLAttributes<HTMLSwirlIconOpenInFullElement>;
            "swirl-icon-open-in-new": LocalJSX.SwirlIconOpenInNew & JSXBase.HTMLAttributes<HTMLSwirlIconOpenInNewElement>;
            "swirl-icon-pause": LocalJSX.SwirlIconPause & JSXBase.HTMLAttributes<HTMLSwirlIconPauseElement>;
            "swirl-icon-pause-circle": LocalJSX.SwirlIconPauseCircle & JSXBase.HTMLAttributes<HTMLSwirlIconPauseCircleElement>;
            "swirl-icon-people-alt": LocalJSX.SwirlIconPeopleAlt & JSXBase.HTMLAttributes<HTMLSwirlIconPeopleAltElement>;
            "swirl-icon-person": LocalJSX.SwirlIconPerson & JSXBase.HTMLAttributes<HTMLSwirlIconPersonElement>;
            "swirl-icon-person-off": LocalJSX.SwirlIconPersonOff & JSXBase.HTMLAttributes<HTMLSwirlIconPersonOffElement>;
            "swirl-icon-phone": LocalJSX.SwirlIconPhone & JSXBase.HTMLAttributes<HTMLSwirlIconPhoneElement>;
            "swirl-icon-photo-camera": LocalJSX.SwirlIconPhotoCamera & JSXBase.HTMLAttributes<HTMLSwirlIconPhotoCameraElement>;
            "swirl-icon-place": LocalJSX.SwirlIconPlace & JSXBase.HTMLAttributes<HTMLSwirlIconPlaceElement>;
            "swirl-icon-play-arrow": LocalJSX.SwirlIconPlayArrow & JSXBase.HTMLAttributes<HTMLSwirlIconPlayArrowElement>;
            "swirl-icon-poll": LocalJSX.SwirlIconPoll & JSXBase.HTMLAttributes<HTMLSwirlIconPollElement>;
            "swirl-icon-print": LocalJSX.SwirlIconPrint & JSXBase.HTMLAttributes<HTMLSwirlIconPrintElement>;
            "swirl-icon-recieved": LocalJSX.SwirlIconRecieved & JSXBase.HTMLAttributes<HTMLSwirlIconRecievedElement>;
            "swirl-icon-remove": LocalJSX.SwirlIconRemove & JSXBase.HTMLAttributes<HTMLSwirlIconRemoveElement>;
            "swirl-icon-remove-moderator": LocalJSX.SwirlIconRemoveModerator & JSXBase.HTMLAttributes<HTMLSwirlIconRemoveModeratorElement>;
            "swirl-icon-reply": LocalJSX.SwirlIconReply & JSXBase.HTMLAttributes<HTMLSwirlIconReplyElement>;
            "swirl-icon-report": LocalJSX.SwirlIconReport & JSXBase.HTMLAttributes<HTMLSwirlIconReportElement>;
            "swirl-icon-roadmap": LocalJSX.SwirlIconRoadmap & JSXBase.HTMLAttributes<HTMLSwirlIconRoadmapElement>;
            "swirl-icon-search": LocalJSX.SwirlIconSearch & JSXBase.HTMLAttributes<HTMLSwirlIconSearchElement>;
            "swirl-icon-search-strong": LocalJSX.SwirlIconSearchStrong & JSXBase.HTMLAttributes<HTMLSwirlIconSearchStrongElement>;
            "swirl-icon-secure": LocalJSX.SwirlIconSecure & JSXBase.HTMLAttributes<HTMLSwirlIconSecureElement>;
            "swirl-icon-send": LocalJSX.SwirlIconSend & JSXBase.HTMLAttributes<HTMLSwirlIconSendElement>;
            "swirl-icon-settings": LocalJSX.SwirlIconSettings & JSXBase.HTMLAttributes<HTMLSwirlIconSettingsElement>;
            "swirl-icon-short-text": LocalJSX.SwirlIconShortText & JSXBase.HTMLAttributes<HTMLSwirlIconShortTextElement>;
            "swirl-icon-simplify": LocalJSX.SwirlIconSimplify & JSXBase.HTMLAttributes<HTMLSwirlIconSimplifyElement>;
            "swirl-icon-spellcheck": LocalJSX.SwirlIconSpellcheck & JSXBase.HTMLAttributes<HTMLSwirlIconSpellcheckElement>;
            "swirl-icon-stop": LocalJSX.SwirlIconStop & JSXBase.HTMLAttributes<HTMLSwirlIconStopElement>;
            "swirl-icon-sync": LocalJSX.SwirlIconSync & JSXBase.HTMLAttributes<HTMLSwirlIconSyncElement>;
            "swirl-icon-tasks": LocalJSX.SwirlIconTasks & JSXBase.HTMLAttributes<HTMLSwirlIconTasksElement>;
            "swirl-icon-tasks-filled": LocalJSX.SwirlIconTasksFilled & JSXBase.HTMLAttributes<HTMLSwirlIconTasksFilledElement>;
            "swirl-icon-terminal": LocalJSX.SwirlIconTerminal & JSXBase.HTMLAttributes<HTMLSwirlIconTerminalElement>;
            "swirl-icon-time": LocalJSX.SwirlIconTime & JSXBase.HTMLAttributes<HTMLSwirlIconTimeElement>;
            "swirl-icon-time-filled": LocalJSX.SwirlIconTimeFilled & JSXBase.HTMLAttributes<HTMLSwirlIconTimeFilledElement>;
            "swirl-icon-today": LocalJSX.SwirlIconToday & JSXBase.HTMLAttributes<HTMLSwirlIconTodayElement>;
            "swirl-icon-today-filled": LocalJSX.SwirlIconTodayFilled & JSXBase.HTMLAttributes<HTMLSwirlIconTodayFilledElement>;
            "swirl-icon-translate": LocalJSX.SwirlIconTranslate & JSXBase.HTMLAttributes<HTMLSwirlIconTranslateElement>;
            "swirl-icon-tree-structure": LocalJSX.SwirlIconTreeStructure & JSXBase.HTMLAttributes<HTMLSwirlIconTreeStructureElement>;
            "swirl-icon-undo": LocalJSX.SwirlIconUndo & JSXBase.HTMLAttributes<HTMLSwirlIconUndoElement>;
            "swirl-icon-unlock-person": LocalJSX.SwirlIconUnlockPerson & JSXBase.HTMLAttributes<HTMLSwirlIconUnlockPersonElement>;
            "swirl-icon-user-add": LocalJSX.SwirlIconUserAdd & JSXBase.HTMLAttributes<HTMLSwirlIconUserAddElement>;
            "swirl-icon-user-assign": LocalJSX.SwirlIconUserAssign & JSXBase.HTMLAttributes<HTMLSwirlIconUserAssignElement>;
            "swirl-icon-video-camera": LocalJSX.SwirlIconVideoCamera & JSXBase.HTMLAttributes<HTMLSwirlIconVideoCameraElement>;
            "swirl-icon-video-library": LocalJSX.SwirlIconVideoLibrary & JSXBase.HTMLAttributes<HTMLSwirlIconVideoLibraryElement>;
            "swirl-icon-visibility": LocalJSX.SwirlIconVisibility & JSXBase.HTMLAttributes<HTMLSwirlIconVisibilityElement>;
            "swirl-icon-visibility-off": LocalJSX.SwirlIconVisibilityOff & JSXBase.HTMLAttributes<HTMLSwirlIconVisibilityOffElement>;
            "swirl-icon-voice": LocalJSX.SwirlIconVoice & JSXBase.HTMLAttributes<HTMLSwirlIconVoiceElement>;
            "swirl-icon-warning": LocalJSX.SwirlIconWarning & JSXBase.HTMLAttributes<HTMLSwirlIconWarningElement>;
            "swirl-icon-work": LocalJSX.SwirlIconWork & JSXBase.HTMLAttributes<HTMLSwirlIconWorkElement>;
            "swirl-image-grid": LocalJSX.SwirlImageGrid & JSXBase.HTMLAttributes<HTMLSwirlImageGridElement>;
            "swirl-image-grid-item": LocalJSX.SwirlImageGridItem & JSXBase.HTMLAttributes<HTMLSwirlImageGridItemElement>;
            "swirl-inline-error": LocalJSX.SwirlInlineError & JSXBase.HTMLAttributes<HTMLSwirlInlineErrorElement>;
            "swirl-inline-notification": LocalJSX.SwirlInlineNotification & JSXBase.HTMLAttributes<HTMLSwirlInlineNotificationElement>;
            "swirl-inline-status": LocalJSX.SwirlInlineStatus & JSXBase.HTMLAttributes<HTMLSwirlInlineStatusElement>;
            "swirl-lightbox": LocalJSX.SwirlLightbox & JSXBase.HTMLAttributes<HTMLSwirlLightboxElement>;
            "swirl-link": LocalJSX.SwirlLink & JSXBase.HTMLAttributes<HTMLSwirlLinkElement>;
            "swirl-list": LocalJSX.SwirlList & JSXBase.HTMLAttributes<HTMLSwirlListElement>;
            "swirl-menu": LocalJSX.SwirlMenu & JSXBase.HTMLAttributes<HTMLSwirlMenuElement>;
            "swirl-menu-item": LocalJSX.SwirlMenuItem & JSXBase.HTMLAttributes<HTMLSwirlMenuItemElement>;
            "swirl-modal": LocalJSX.SwirlModal & JSXBase.HTMLAttributes<HTMLSwirlModalElement>;
            "swirl-option-list": LocalJSX.SwirlOptionList & JSXBase.HTMLAttributes<HTMLSwirlOptionListElement>;
            "swirl-option-list-item": LocalJSX.SwirlOptionListItem & JSXBase.HTMLAttributes<HTMLSwirlOptionListItemElement>;
            "swirl-option-list-section": LocalJSX.SwirlOptionListSection & JSXBase.HTMLAttributes<HTMLSwirlOptionListSectionElement>;
            "swirl-pagination": LocalJSX.SwirlPagination & JSXBase.HTMLAttributes<HTMLSwirlPaginationElement>;
            "swirl-pdf-reader": LocalJSX.SwirlPdfReader & JSXBase.HTMLAttributes<HTMLSwirlPdfReaderElement>;
            "swirl-popover": LocalJSX.SwirlPopover & JSXBase.HTMLAttributes<HTMLSwirlPopoverElement>;
            "swirl-popover-trigger": LocalJSX.SwirlPopoverTrigger & JSXBase.HTMLAttributes<HTMLSwirlPopoverTriggerElement>;
            "swirl-progress-indicator": LocalJSX.SwirlProgressIndicator & JSXBase.HTMLAttributes<HTMLSwirlProgressIndicatorElement>;
            "swirl-radio": LocalJSX.SwirlRadio & JSXBase.HTMLAttributes<HTMLSwirlRadioElement>;
            "swirl-radio-group": LocalJSX.SwirlRadioGroup & JSXBase.HTMLAttributes<HTMLSwirlRadioGroupElement>;
            "swirl-resource-list": LocalJSX.SwirlResourceList & JSXBase.HTMLAttributes<HTMLSwirlResourceListElement>;
            "swirl-resource-list-file-item": LocalJSX.SwirlResourceListFileItem & JSXBase.HTMLAttributes<HTMLSwirlResourceListFileItemElement>;
            "swirl-resource-list-item": LocalJSX.SwirlResourceListItem & JSXBase.HTMLAttributes<HTMLSwirlResourceListItemElement>;
            "swirl-search": LocalJSX.SwirlSearch & JSXBase.HTMLAttributes<HTMLSwirlSearchElement>;
            "swirl-select": LocalJSX.SwirlSelect & JSXBase.HTMLAttributes<HTMLSwirlSelectElement>;
            "swirl-separator": LocalJSX.SwirlSeparator & JSXBase.HTMLAttributes<HTMLSwirlSeparatorElement>;
            "swirl-shell-layout": LocalJSX.SwirlShellLayout & JSXBase.HTMLAttributes<HTMLSwirlShellLayoutElement>;
            "swirl-shell-navigation-item": LocalJSX.SwirlShellNavigationItem & JSXBase.HTMLAttributes<HTMLSwirlShellNavigationItemElement>;
            "swirl-skeleton-box": LocalJSX.SwirlSkeletonBox & JSXBase.HTMLAttributes<HTMLSwirlSkeletonBoxElement>;
            "swirl-skeleton-text": LocalJSX.SwirlSkeletonText & JSXBase.HTMLAttributes<HTMLSwirlSkeletonTextElement>;
            "swirl-spinner": LocalJSX.SwirlSpinner & JSXBase.HTMLAttributes<HTMLSwirlSpinnerElement>;
            "swirl-stack": LocalJSX.SwirlStack & JSXBase.HTMLAttributes<HTMLSwirlStackElement>;
            "swirl-status-indicator": LocalJSX.SwirlStatusIndicator & JSXBase.HTMLAttributes<HTMLSwirlStatusIndicatorElement>;
            "swirl-switch": LocalJSX.SwirlSwitch & JSXBase.HTMLAttributes<HTMLSwirlSwitchElement>;
            "swirl-symbol": LocalJSX.SwirlSymbol & JSXBase.HTMLAttributes<HTMLSwirlSymbolElement>;
            "swirl-symbol-account-circle": LocalJSX.SwirlSymbolAccountCircle & JSXBase.HTMLAttributes<HTMLSwirlSymbolAccountCircleElement>;
            "swirl-symbol-alternate-email": LocalJSX.SwirlSymbolAlternateEmail & JSXBase.HTMLAttributes<HTMLSwirlSymbolAlternateEmailElement>;
            "swirl-symbol-android": LocalJSX.SwirlSymbolAndroid & JSXBase.HTMLAttributes<HTMLSwirlSymbolAndroidElement>;
            "swirl-symbol-announcement": LocalJSX.SwirlSymbolAnnouncement & JSXBase.HTMLAttributes<HTMLSwirlSymbolAnnouncementElement>;
            "swirl-symbol-backup": LocalJSX.SwirlSymbolBackup & JSXBase.HTMLAttributes<HTMLSwirlSymbolBackupElement>;
            "swirl-symbol-beach-access": LocalJSX.SwirlSymbolBeachAccess & JSXBase.HTMLAttributes<HTMLSwirlSymbolBeachAccessElement>;
            "swirl-symbol-bookmark": LocalJSX.SwirlSymbolBookmark & JSXBase.HTMLAttributes<HTMLSwirlSymbolBookmarkElement>;
            "swirl-symbol-cloud": LocalJSX.SwirlSymbolCloud & JSXBase.HTMLAttributes<HTMLSwirlSymbolCloudElement>;
            "swirl-symbol-coronavirus": LocalJSX.SwirlSymbolCoronavirus & JSXBase.HTMLAttributes<HTMLSwirlSymbolCoronavirusElement>;
            "swirl-symbol-desktop-windows": LocalJSX.SwirlSymbolDesktopWindows & JSXBase.HTMLAttributes<HTMLSwirlSymbolDesktopWindowsElement>;
            "swirl-symbol-directions-car-filled": LocalJSX.SwirlSymbolDirectionsCarFilled & JSXBase.HTMLAttributes<HTMLSwirlSymbolDirectionsCarFilledElement>;
            "swirl-symbol-edit-calendar": LocalJSX.SwirlSymbolEditCalendar & JSXBase.HTMLAttributes<HTMLSwirlSymbolEditCalendarElement>;
            "swirl-symbol-email": LocalJSX.SwirlSymbolEmail & JSXBase.HTMLAttributes<HTMLSwirlSymbolEmailElement>;
            "swirl-symbol-emoji-food-beverage": LocalJSX.SwirlSymbolEmojiFoodBeverage & JSXBase.HTMLAttributes<HTMLSwirlSymbolEmojiFoodBeverageElement>;
            "swirl-symbol-event-menu": LocalJSX.SwirlSymbolEventMenu & JSXBase.HTMLAttributes<HTMLSwirlSymbolEventMenuElement>;
            "swirl-symbol-facebook": LocalJSX.SwirlSymbolFacebook & JSXBase.HTMLAttributes<HTMLSwirlSymbolFacebookElement>;
            "swirl-symbol-favorite": LocalJSX.SwirlSymbolFavorite & JSXBase.HTMLAttributes<HTMLSwirlSymbolFavoriteElement>;
            "swirl-symbol-fitness-center": LocalJSX.SwirlSymbolFitnessCenter & JSXBase.HTMLAttributes<HTMLSwirlSymbolFitnessCenterElement>;
            "swirl-symbol-flag": LocalJSX.SwirlSymbolFlag & JSXBase.HTMLAttributes<HTMLSwirlSymbolFlagElement>;
            "swirl-symbol-folder": LocalJSX.SwirlSymbolFolder & JSXBase.HTMLAttributes<HTMLSwirlSymbolFolderElement>;
            "swirl-symbol-globe": LocalJSX.SwirlSymbolGlobe & JSXBase.HTMLAttributes<HTMLSwirlSymbolGlobeElement>;
            "swirl-symbol-groups": LocalJSX.SwirlSymbolGroups & JSXBase.HTMLAttributes<HTMLSwirlSymbolGroupsElement>;
            "swirl-symbol-help": LocalJSX.SwirlSymbolHelp & JSXBase.HTMLAttributes<HTMLSwirlSymbolHelpElement>;
            "swirl-symbol-image": LocalJSX.SwirlSymbolImage & JSXBase.HTMLAttributes<HTMLSwirlSymbolImageElement>;
            "swirl-symbol-info-menu": LocalJSX.SwirlSymbolInfoMenu & JSXBase.HTMLAttributes<HTMLSwirlSymbolInfoMenuElement>;
            "swirl-symbol-instagram": LocalJSX.SwirlSymbolInstagram & JSXBase.HTMLAttributes<HTMLSwirlSymbolInstagramElement>;
            "swirl-symbol-ios": LocalJSX.SwirlSymbolIos & JSXBase.HTMLAttributes<HTMLSwirlSymbolIosElement>;
            "swirl-symbol-language": LocalJSX.SwirlSymbolLanguage & JSXBase.HTMLAttributes<HTMLSwirlSymbolLanguageElement>;
            "swirl-symbol-leaderboard": LocalJSX.SwirlSymbolLeaderboard & JSXBase.HTMLAttributes<HTMLSwirlSymbolLeaderboardElement>;
            "swirl-symbol-lightbulb": LocalJSX.SwirlSymbolLightbulb & JSXBase.HTMLAttributes<HTMLSwirlSymbolLightbulbElement>;
            "swirl-symbol-linkedin": LocalJSX.SwirlSymbolLinkedin & JSXBase.HTMLAttributes<HTMLSwirlSymbolLinkedinElement>;
            "swirl-symbol-location-on": LocalJSX.SwirlSymbolLocationOn & JSXBase.HTMLAttributes<HTMLSwirlSymbolLocationOnElement>;
            "swirl-symbol-loyalty": LocalJSX.SwirlSymbolLoyalty & JSXBase.HTMLAttributes<HTMLSwirlSymbolLoyaltyElement>;
            "swirl-symbol-maps-home-work": LocalJSX.SwirlSymbolMapsHomeWork & JSXBase.HTMLAttributes<HTMLSwirlSymbolMapsHomeWorkElement>;
            "swirl-symbol-notifications": LocalJSX.SwirlSymbolNotifications & JSXBase.HTMLAttributes<HTMLSwirlSymbolNotificationsElement>;
            "swirl-symbol-open-in-new": LocalJSX.SwirlSymbolOpenInNew & JSXBase.HTMLAttributes<HTMLSwirlSymbolOpenInNewElement>;
            "swirl-symbol-pedal-bike": LocalJSX.SwirlSymbolPedalBike & JSXBase.HTMLAttributes<HTMLSwirlSymbolPedalBikeElement>;
            "swirl-symbol-pinterest": LocalJSX.SwirlSymbolPinterest & JSXBase.HTMLAttributes<HTMLSwirlSymbolPinterestElement>;
            "swirl-symbol-policy": LocalJSX.SwirlSymbolPolicy & JSXBase.HTMLAttributes<HTMLSwirlSymbolPolicyElement>;
            "swirl-symbol-push-pin": LocalJSX.SwirlSymbolPushPin & JSXBase.HTMLAttributes<HTMLSwirlSymbolPushPinElement>;
            "swirl-symbol-redeem": LocalJSX.SwirlSymbolRedeem & JSXBase.HTMLAttributes<HTMLSwirlSymbolRedeemElement>;
            "swirl-symbol-report-problem": LocalJSX.SwirlSymbolReportProblem & JSXBase.HTMLAttributes<HTMLSwirlSymbolReportProblemElement>;
            "swirl-symbol-restaurant": LocalJSX.SwirlSymbolRestaurant & JSXBase.HTMLAttributes<HTMLSwirlSymbolRestaurantElement>;
            "swirl-symbol-roadmap": LocalJSX.SwirlSymbolRoadmap & JSXBase.HTMLAttributes<HTMLSwirlSymbolRoadmapElement>;
            "swirl-symbol-room": LocalJSX.SwirlSymbolRoom & JSXBase.HTMLAttributes<HTMLSwirlSymbolRoomElement>;
            "swirl-symbol-savings": LocalJSX.SwirlSymbolSavings & JSXBase.HTMLAttributes<HTMLSwirlSymbolSavingsElement>;
            "swirl-symbol-settings-voice": LocalJSX.SwirlSymbolSettingsVoice & JSXBase.HTMLAttributes<HTMLSwirlSymbolSettingsVoiceElement>;
            "swirl-symbol-shopping-cart": LocalJSX.SwirlSymbolShoppingCart & JSXBase.HTMLAttributes<HTMLSwirlSymbolShoppingCartElement>;
            "swirl-symbol-smartphone": LocalJSX.SwirlSymbolSmartphone & JSXBase.HTMLAttributes<HTMLSwirlSymbolSmartphoneElement>;
            "swirl-symbol-star": LocalJSX.SwirlSymbolStar & JSXBase.HTMLAttributes<HTMLSwirlSymbolStarElement>;
            "swirl-symbol-supervisor-account": LocalJSX.SwirlSymbolSupervisorAccount & JSXBase.HTMLAttributes<HTMLSwirlSymbolSupervisorAccountElement>;
            "swirl-symbol-thumbs-up-down": LocalJSX.SwirlSymbolThumbsUpDown & JSXBase.HTMLAttributes<HTMLSwirlSymbolThumbsUpDownElement>;
            "swirl-symbol-twitter": LocalJSX.SwirlSymbolTwitter & JSXBase.HTMLAttributes<HTMLSwirlSymbolTwitterElement>;
            "swirl-symbol-wb-sunny": LocalJSX.SwirlSymbolWbSunny & JSXBase.HTMLAttributes<HTMLSwirlSymbolWbSunnyElement>;
            "swirl-symbol-wechat": LocalJSX.SwirlSymbolWechat & JSXBase.HTMLAttributes<HTMLSwirlSymbolWechatElement>;
            "swirl-symbol-weibo": LocalJSX.SwirlSymbolWeibo & JSXBase.HTMLAttributes<HTMLSwirlSymbolWeiboElement>;
            "swirl-symbol-work": LocalJSX.SwirlSymbolWork & JSXBase.HTMLAttributes<HTMLSwirlSymbolWorkElement>;
            "swirl-symbol-xing": LocalJSX.SwirlSymbolXing & JSXBase.HTMLAttributes<HTMLSwirlSymbolXingElement>;
            "swirl-symbol-youtube": LocalJSX.SwirlSymbolYoutube & JSXBase.HTMLAttributes<HTMLSwirlSymbolYoutubeElement>;
            "swirl-tab": LocalJSX.SwirlTab & JSXBase.HTMLAttributes<HTMLSwirlTabElement>;
            "swirl-tab-bar": LocalJSX.SwirlTabBar & JSXBase.HTMLAttributes<HTMLSwirlTabBarElement>;
            "swirl-table": LocalJSX.SwirlTable & JSXBase.HTMLAttributes<HTMLSwirlTableElement>;
            "swirl-table-cell": LocalJSX.SwirlTableCell & JSXBase.HTMLAttributes<HTMLSwirlTableCellElement>;
            "swirl-table-column": LocalJSX.SwirlTableColumn & JSXBase.HTMLAttributes<HTMLSwirlTableColumnElement>;
            "swirl-table-row": LocalJSX.SwirlTableRow & JSXBase.HTMLAttributes<HTMLSwirlTableRowElement>;
            "swirl-table-row-group": LocalJSX.SwirlTableRowGroup & JSXBase.HTMLAttributes<HTMLSwirlTableRowGroupElement>;
            "swirl-tabs": LocalJSX.SwirlTabs & JSXBase.HTMLAttributes<HTMLSwirlTabsElement>;
            "swirl-tag": LocalJSX.SwirlTag & JSXBase.HTMLAttributes<HTMLSwirlTagElement>;
            "swirl-text": LocalJSX.SwirlText & JSXBase.HTMLAttributes<HTMLSwirlTextElement>;
            "swirl-text-input": LocalJSX.SwirlTextInput & JSXBase.HTMLAttributes<HTMLSwirlTextInputElement>;
            "swirl-theme-provider": LocalJSX.SwirlThemeProvider & JSXBase.HTMLAttributes<HTMLSwirlThemeProviderElement>;
            "swirl-thumbnail": LocalJSX.SwirlThumbnail & JSXBase.HTMLAttributes<HTMLSwirlThumbnailElement>;
            "swirl-time-input": LocalJSX.SwirlTimeInput & JSXBase.HTMLAttributes<HTMLSwirlTimeInputElement>;
            "swirl-toast": LocalJSX.SwirlToast & JSXBase.HTMLAttributes<HTMLSwirlToastElement>;
            "swirl-toast-provider": LocalJSX.SwirlToastProvider & JSXBase.HTMLAttributes<HTMLSwirlToastProviderElement>;
            "swirl-toolbar": LocalJSX.SwirlToolbar & JSXBase.HTMLAttributes<HTMLSwirlToolbarElement>;
            "swirl-tooltip": LocalJSX.SwirlTooltip & JSXBase.HTMLAttributes<HTMLSwirlTooltipElement>;
            "swirl-tree-navigation-item": LocalJSX.SwirlTreeNavigationItem & JSXBase.HTMLAttributes<HTMLSwirlTreeNavigationItemElement>;
            "swirl-video-thumbnail": LocalJSX.SwirlVideoThumbnail & JSXBase.HTMLAttributes<HTMLSwirlVideoThumbnailElement>;
            "swirl-visually-hidden": LocalJSX.SwirlVisuallyHidden & JSXBase.HTMLAttributes<HTMLSwirlVisuallyHiddenElement>;
        }
    }
}
