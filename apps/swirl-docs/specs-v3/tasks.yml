openapi: 3.0.0
info:
  title: Tasks
  version: '3.0'
  contact:
    name: Flip
    url: 'https://www.getflip.com'
  description: API for tasks and any related operations
servers: [ ]
paths:
  /api/v3/tasks:
    get:
      x-experimental: true
      tags:
        - tasks
      summary: Get all tasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTasksResponse'
      operationId: get-tasks
      description: Retrieves a list of all tasks visible to the acting user.
      parameters:
        - name: received_tasks_progress_status
          in: query
          allowEmptyValue: true
          schema:
            $ref: '#/components/schemas/ReceivedTasksProgressStatus'
        - name: distributed_tasks_progress_status
          in: query
          allowEmptyValue: true
          schema:
            $ref: '#/components/schemas/DistributedTasksProgressStatus'
        - schema:
            type: integer
            format: int32
            minimum: 0
          in: query
          name: _page_limit
          description: The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.
        - $ref: 'shared.yml#/components/parameters/_page_cursor'
        - $ref: 'shared.yml#/components/parameters/external_id'
        - $ref: 'shared.yml#/components/parameters/_sort'
    post:
      x-experimental: true
      tags:
        - tasks
      summary: Create a new task
      operationId: create-task
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInformation'
      description: Creates a new task with the acting user as author.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreation'
        description: ''
  /api/v3/tasks/count:
    get:
      x-experimental: true
      tags:
        - tasks
      summary: Get number of tasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksCounter'
      operationId: get-tasks-count
      description: Retrieve a count of the number of tasks by their assignment progress status of the acting user.
      parameters: [ ]
  '/api/v3/tasks/{task_id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: task_id
        in: path
        required: true
        description: The primary identifier of the task to access.
    delete:
      x-experimental: true
      tags:
        - tasks
      summary: Delete a task
      operationId: delete-task
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInformation'
      description: Deletes the task with this id.
    patch:
      x-experimental: true
      tags:
        - tasks
      summary: Modify/Update existing task
      operationId: update-task
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInformation'
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateTask'
      description: 'Modifies certain contents or settings of a previously created task. To change the assignments of a task, see the `/tasks/{task_id}/assignments` path.'
  '/api/v3/tasks/{task_id}/assignments':
    parameters:
      - schema:
          type: string
          format: uuid
        name: task_id
        in: path
        required: true
        description: The primary identifier of the task to access.
    get:
      x-experimental: true
      tags:
        - tasks
      summary: Get all task assignments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskAssignmentsResponse'
      operationId: get-task-assignments
      description: Retrieves a list of all assignments of a specific task.
      parameters:
        - schema:
            type: string
          name: _embed
          in: query
          required: false
          description: Defines the values to embed into the response body. Refer to our general "embedment" concept for more information.
        - $ref: 'shared.yml#/components/parameters/_page_cursor'
        - schema:
            type: integer
            default: 25
            example: 42
            minimum: 1
            maximum: 100
          in: query
          name: _page_limit
          description: The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.
        - schema:
            type: string
            pattern: ^\+|\-$
            default: '+'
          in: query
          name: _sort
          description: Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.
          examples:
            standard:
              value: '+'
            reversed:
              value: '-'
    post:
      x-experimental: true
      tags:
        - tasks
      summary: Create new task assignment
      operationId: create-task-assignment
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTaskAssignmentsResponse'
      description: Assigns a task to a new user or group.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTaskAssignmentsRequest'
        description: ''
  '/api/v3/tasks/assignments/{assignment_id}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: assignment_id
        in: path
        required: true
        description: The primary identifier of the assignment to access.
    delete:
      x-experimental: true
      tags:
        - tasks
      summary: Delete existing task assignment
      operationId: delete-task-assignment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTaskAssignmentsResponse'
      description: Removes an assignment from a task.
  '/api/v3/tasks/{task_id}/assignments/batch':
    parameters:
      - schema:
          type: string
          format: uuid
        name: task_id
        in: path
        required: true
        description: The primary identifier of the task to access.
    post:
      x-experimental: true
      tags:
        - tasks
      summary: Create multiple task assignments
      operationId: batch-create-task-assignment
      responses:
        '200':
          description: OK
          content: { }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTaskAssignmentsRequest'
      description: Creates multiple assignments on a task at once.
    delete:
      x-experimental: true
      tags:
        - tasks
      summary: Delete multiple task assignments
      description: Removes multiple assignments from a task at once.
      operationId: batch-delete-task-assignments
      responses:
        '200':
          description: OK
          content: { }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTaskAssignmentsRequest'
  '/api/v3/tasks/{task_id}/comments':
    parameters:
      - schema:
          type: string
        name: task_id
        in: path
        required: true
    get:
      x-experimental: true
      summary: Get all task comments
      operationId: get-tasks-comments
      tags:
        - tasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskCommentsResponse'

      description: Retrieves a list of all comments on a specific task.
      parameters:
        - $ref: 'shared.yml#/components/parameters/_page_cursor'
        - $ref: 'shared.yml#/components/parameters/_page_limit'
        - $ref: 'shared.yml#/components/parameters/_sort'
    post:
      x-experimental: true
      tags:
        - tasks
      summary: Create a task comment
      operationId: create-task-comment
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskComment'

      description: Adds a new comment to a task.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCommentCreation'
        description: ''
  '/api/v3/tasks/comments/{comment_id}':
    parameters:
      - schema:
          type: string
        name: comment_id
        in: path
        required: true
    delete:
      x-experimental: true
      tags:
        - tasks
      summary: Delete existing task comment
      operationId: delete-task-comment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTaskCommentsResponse'
      description: Removes a comment from a task or marks it as "deleted".
  '/api/v3/tasks/comments/{comment_id}/reactions':
    parameters:
      - schema:
          type: string
        name: comment_id
        in: path
        required: true
    get:
      x-experimental: true
      tags:
        - tasks
      summary: Get all task reactions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskCommentsReactionsResponse'
      operationId: get-task-comment-reactions
      description: Gets all Reactions of a task comment
      parameters:
        - schema:
            type: string
          name: _embed
          in: query
          required: false
          description: Defines the values to embed into the response body. Refer to our general "embedment" concept for more information.
        - schema:
            type: array
            items:
              $ref: 'shared.yml#/components/schemas/ReactionType'
          in: query
          name: type_filter
          description: The Reaction Types to get
        - $ref: 'shared.yml#/components/parameters/_page_cursor'
        - $ref: 'shared.yml#/components/parameters/_page_limit'
        - $ref: 'shared.yml#/components/parameters/_sort'
    post:
      x-experimental: true
      tags:
        - tasks
      summary: Create new task comment reaction
      operationId: create-task-comment-reaction
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTaskCommentsReactionsResponse'
      description: Reacts to a task comment.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostTaskCommentsReactionsRequest'
  '/api/v3/tasks/comments/{comment_id}/reactions/{user_id}':
    parameters:
      - schema:
          type: string
        name: comment_id
        in: path
        required: true
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    delete:
      x-experimental: true
      tags:
        - tasks
      summary: Delete task comment reaction
      operationId: delete-task-comment-reaction
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTaskCommentsReactionsResponse'
      description: Removes the reaction from a task comment.
components:
  schemas:
    ReceivedTasksProgressStatus:
      title: ReceivedTasksProgressStatus
      description: Only return tasks that have been assigned to the acting user and have their assignment progress status set to one of the given arguments.
      type: string
      items:
        type: string
        enum:
          - OPEN
          - NEW
          - FINISHED
    DistributedTasksProgressStatus:
      title: DistributedTasksProgressStatus
      description: Only return tasks that have been assigned by the acting user and have their task progress status set to one of the given arguments.
      type: string
      items:
        type: string
        enum:
          - OPEN
          - IN_PROGRESS
          - FINISHED
          - CANCELLED
    Tasks:
      title: Tasks
      type: object
      additionalProperties: false
      properties:
        tasks:
          type: array
          description: 'An array of all retrieved tasks, according to the pagination and sort arguments.'
          items:
            $ref: '#/components/schemas/TaskInformation'
        _pagination:
          $ref: 'shared.yml#/components/schemas/CursorPagination'
      description: Representation of a collection of tasks.
      x-examples:
        Example 1:
          tasks:
            - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              external_id: string
              author_id: 78424c75-5c41-4b25-9735-3c9f7d05c59e
              title: Wet-clean all aisles
              body:
                raw_text: 'Hey @2b2b2af0-9644-4c0e-a606-5c3aa6ec1004, can you please clean the aisles until tomorrow?'
                html_body: 'Hey @2b2b2af0-9644-4c0e-a606-5c3aa6ec1004, can you please clean the aisles <b>until tomorrow</b>?'
              created_at: '2019-08-24T14:15:22Z'
              updated_at: '2019-08-24T14:15:22Z'
              is_deleted: false
              language: en-US
              settings:
                comments_enabled: true
              comments_count: 0
              due_at:
                date: '2019-08-25'
                discriminator: DATE
              attachments:
                - id: string
              progress_status: OPEN
              mentions:
                - id: 2b2b2af0-9644-4c0e-a606-5c3aa6ec1004
                  is_deleted: false
                  username: Peter M.
              distribution_kind: DISTRIBUTED_WITHOUT_AUTHOR
              distribution_summary:
                new_count: 1
                open_count: 0
                finished_count: 0
          _pagination:
            next_cursor: Zm9vYmFyMTIz
            has_more: false
    TaskInformation:
      title: TaskInformation
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the task.
        external_id:
          $ref: 'shared.yml#/components/schemas/ExternalId'
        author_id:
          type: string
          format: uuid
          description: The unique identifier of the user that created this task.
        title:
          type: string
          maxLength: 150
          example: Wet-clean all aisles
          description: A short descriptive title of the task.
        body:
          $ref: '#/components/schemas/TaskBody'
        created_at:
          type: string
          format: date-time
          description: |-
            The point in time at which this task was created.
            Only visible to the author of the task.
          nullable: true
        modified_at:
          type: string
          format: date-time
          description: |-
            The point in time at which this task was last modified.
            Only visible to the author of the task.
          nullable: true
        is_deleted:
          type: boolean
          description: Whether the task has been marked as deleted. Note that it is not guaranteed for deleted tasks to be accessible at all.
        language:
          type: string
          format: bcp47
          example: en-US
          description: The detected language of the task.
        settings:
          type: object
          description: A collection of settings configured for a task.
          properties:
            comments_enabled:
              type: boolean
              description: Whether comments can be created on this task.
        comments_count:
          type: integer
          description: The total number of non-deleted comments on this task.
          format: int32
        due_at:
          $ref: '#/components/schemas/TaskDueAt'
          description: The point in time by which this task should be completed before being marked as overdue.
        attachments:
          type: array
          description: An array of attachments contained in the body of a task. Refer to our general "attachment" concept for mo
          items:
            $ref: 'shared.yml#/components/schemas/EmbeddedAttachment'
        progress_status:
          type: string
          description: |-
            The progress status of the task, describing accumulated assignment statuses.
            * `OPEN`: No assignee has made any progress on the task yet.
            * `IN_PROGRESS`: At least one assignee has finished the task.
            * `FINISHED`: All assignees have finished the task.
            * `CANCELLED`: The author has cancelled the task.

            Only visible to the author of the task.
          enum:
            - OPEN
            - IN_PROGRESS
            - FINISHED
            - CANCELLED
          nullable: true
#        mentions:
#          type: array
#          description: A list of users that have been "mentioned" in the body of this task. Refer to our general "mentions" concept for more information.
#          items:
#            $ref: 'shared.yml#/components/schemas/EmbeddedUser'
        distribution_kind:
          type: string
          enum:
            - PERSONAL
            - DISTRIBUTED_WITHOUT_AUTHOR
          description: |-
            Describes how the task was distributed by the author.
            * `PERSONAL`: Only the author is assigned to the task.
            * `DISTRIBUTED_WITHOUT_AUTHOR`: Only users other than the author are assigned to the task.

            Only visible to the author of the task.
          nullable: true
        distribution_summary:
          type: object
          description: |-
            Aggregated data about assignments of the task.

            Only visible to the author of the task.
          nullable: true
          properties:
            new_count:
              type: integer
              minimum: 0
              description: The number of assignments of the task that have progress status `NEW`.
              format: int32
            open_count:
              type: integer
              minimum: 0
              description: The number of assignments of the task that have progress status `OPEN`.
              format: int32
            finished_count:
              type: integer
              minimum: 0
              description: The number of assignments of the task that have progress status `FINISHED`.
              format: int32
      description: Representation of a single task.
      x-examples:
        Example:
          $ref: '#/components/examples/TaskInformationExample'
    TaskAssignments:
      title: TaskAssignments
      type: object
      properties:
        assignments:
          type: array
          description: 'An array of all retrieved assignments, according to the pagination and sort arguments.'
          items:
            $ref: '#/components/schemas/TaskAssignment'
        _pagination:
          $ref: 'shared.yml#/components/schemas/CursorPagination'
      description: Representation of a collection of tasks.
    TaskAssignment:
      title: TaskAssignment
      type: object
      additionalProperties: false
      description: Representation of a single task which is assigned to a particular recipient.
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the assignment.
        user_id:
          type: string
          format: uuid
          description: The unique identifier of the assignee (user).
        task_id:
          type: string
          format: uuid
          description: The unique identifier of the parent task.
        progress_status:
          type: string
          enum:
            - NEW
            - OPEN
            - FINISHED
          nullable: true
          description: |-
            The progress status of the individual assignment.
            * `NEW`: The assignee has never seen the task before.
            * `OPEN`: The assignee has seen but not finished the task.
            * `FINISHED`: The assignee has finished the task.

            Only visible to the author of the task and the assignee.
        created_at:
          type: string
          format: date-time
          description: |-
            The point in time at which this assignment was created.

            Only visible to the author of the task and the assignee.
          nullable: true
        updated_at:
          type: string
          format: date-time
          description: |-
            The point in time at which this assignment was last modified.

            Only visible to the author of the task and the assignee.
          nullable: true
        deletion_status:
          type: string
          enum:
            - NOT_DELETED
            - DELETED
            - TASK_DELETED
          description: |-
            The deletion status of the assignment. Note that it is not guaranteed for deleted tasks to be accessible at all.
            * `NOT_DELETED`: The assignment is available and not deleted.
            * `DELETED`: The assignment has been deleted individually.
            * `TASK_DELETED`: The assignment has been deleted by consequence of the task itself being deleted.

            Only visible to the author of the task and the assignee.
          nullable: true
        assignee:
          nullable: true
          description: Information about the assigned user. Is only present if requested by the `_embed` parameter. Refer to our general "embedment" concept for more information.
          $ref: 'shared.yml#/components/schemas/EmbeddedUser'
    GetTasksResponse:
      title: GetTasksResponse
      allOf:
        - $ref: '#/components/schemas/Tasks'
      additionalProperties: false
    TaskCreation:
      title: TaskCreation
      type: object
      required:
        - title
        - settings
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the task.
          nullable: true
        external_id:
          $ref: 'shared.yml#/components/schemas/ExternalId'
        title:
          type: string
          maxLength: 150
          example: Wet-clean all aisles
          description: A short descriptive title of the task.
        body:
          $ref: '#/components/schemas/TaskBody'
        settings:
          type: object
          description: A collection of settings configured for a task.
          required:
            - comments_enabled
          properties:
            comments_enabled:
              type: boolean
              description: Whether comments can be created on this task.
        due_at:
          $ref: '#/components/schemas/TaskDueAt'
          description: The point in time by which this task should be completed before being marked as overdue.
        attachments:
          type: array
          description: An array of attachments contained in the body of a task. Refer to our general "attachment" concept for mo
          maxItems: 10
          items:
            $ref: 'shared.yml#/components/schemas/EmbeddedAttachment'
        assignments:
          type: object
          description: Users and user groups which are marked as assignees to this task.
          properties:
            recipient_user_ids:
              type: array
              maxItems: 100
              description: An array of user IDs.
              items:
                type: string
                format: uuid
            recipient_group_ids:
              type: array
              maxItems: 10
              description: An array of group IDs.
              items:
                type: string
                format: uuid
      additionalProperties: false
    UpdateTaskMentions:
      type: object
      description: A list of users that have been "mentioned" in the body of this task. Refer to our general "mentions" concept for more information.
      properties:
        user_ids:
          type: array
          maxItems: 10
          items:
            type: string
            format: uuid
    UpdateTask:
      title: UpdateTask
      type: object
      x-json-merge-patch: true
      properties:
        external_id:
          $ref: 'shared.yml#/components/schemas/ExternalId'
        title:
          type: string
          maxLength: 150
          example: Wet-clean all aisles
          description: A short descriptive title of the task.
        body:
          $ref: '#/components/schemas/TaskBody'
        settings:
          type: object
          description: A collection of settings configured for a task.
          properties:
            comments_enabled:
              type: boolean
              description: Whether comments can be created on this task.
        due_at:
          $ref: '#/components/schemas/TaskDueAt'
          description: The point in time by which this task should be completed before being marked as overdue.
        attachments:
          type: array
          description: An array of attachments contained in the body of a task. Refer to our general "attachment" concept for mo
          maxItems: 10
          items:
            $ref: 'shared.yml#/components/schemas/EmbeddedAttachment'
        mentions:
          $ref: '#/components/schemas/UpdateTaskMentions'
    TaskBody:
      type: object
      nullable: true
      properties:
        raw_text:
          type: string
          maxLength: 100000
          description: The content body of the task as unformatted raw text.
        delta_body:
          type: string
          maxLength: 100000
          description: The content body of the task formatted as Quill delta format.
          nullable: true
        html_body:
          type: string
          maxLength: 100000
          description: The content body of the task formatted as HTML.
          nullable: true
    TasksCounter:
      title: GetTasksCountResponse
      type: object
      properties:
        open_tasks:
          type: integer
          format: int32
          minimum: 0
          description: The number of tasks of this user with assignment progress status `OPEN`.
        new_tasks:
          type: integer
          format: int32
          minimum: 0
          description: The number of tasks of this user with assignment progress status `NEW`.
    TaskDueAt:
      title: TaskDueAt
      type: object
      discriminator:
        propertyName: due_at_type
        mapping:
          DATE: '#/components/schemas/TaskDueAtDate'
          DATE_TIME: '#/components/schemas/TaskDueAtDateTime'
      properties:
        due_at_type:
          type: string
          enum:
            - DATE
            - DATE_TIME
    TaskDueAtDate:
      title: TaskDueAt with date
      allOf:
        - $ref: '#/components/schemas/TaskDueAt'
        - type: object
          required:
            - due_at_type
          properties:
            date:
              type: string
              format: date
            due_at_type:
              type: string
              enum:
                - DATE
          x-stoplight:
            id: faa524874c08f
    TaskDueAtDateTime:
      title: TaskDueAt with date-time
      allOf:
        - $ref: '#/components/schemas/TaskDueAt'
        - type: object
          required:
            - due_at_type
          properties:
            date_time:
              type: string
              format: date-time
            due_at_type:
              type: string
              enum:
                - DATE_TIME
          x-stoplight:
            id: 129a9c55d0b62
    GetTaskAssignmentsResponse:
      title: GetTaskAssignmentsResponse
      allOf:
        - $ref: '#/components/schemas/TaskAssignments'
    DeleteTaskAssignmentsRequest:
      title: DeleteTaskAssignmentsRequest
      type: object
      description: Deletes multiple assignments on a task at once.
      properties:
        assignment_ids:
          type: array
          maxItems: 100
          items:
            type: string
            format: uuid
    PostTaskAssignmentsRequest:
      title: PostTaskAssignmentsRequest
      type: object
      description: Creates multiple assignments on a task at once.
      properties:
        assignees:
          type: array
          maxItems: 100
          items:
            $ref: '#/components/schemas/NewAssignee'
    PostTaskAssignmentsResponse:
      title: PostTaskAssignmentsResponse
      allOf:
        - $ref: '#/components/schemas/TaskAssignment'
    DeleteTaskCommentsResponse:
      title: DeleteTaskCommentsResponse
      allOf:
        - $ref: '#/components/schemas/TaskComment'
    DeleteTaskAssignmentsResponse:
      title: DeleteTaskAssignmentsResponse
      allOf:
        - $ref: '#/components/schemas/TaskAssignment'
    NewAssignee:
      title: NewAssignee
      anyOf:
        - $ref: '#/components/schemas/NewAssigneeUser'
        - $ref: '#/components/schemas/NewAssigneeGroup'
      discriminator:
        propertyName: assignee_type
        mapping:
          DATE: '#/components/schemas/NewAssigneeUser'
          DATE_TIME: '#/components/schemas/NewAssigneeGroup'
    NewAssigneeUser:
      title: NewAssignee for a user
      type: object
      required:
        - assignee_type
      properties:
        user_id:
          type: string
          format: uuid
        assignee_type:
          enum:
            - USER
    NewAssigneeGroup:
      title: NewAssignee for a group
      type: object
      required:
        - assignee_type
      properties:
        group_id:
          type: string
          format: uuid
        assignee_type:
          enum:
            - GROUP
    TaskComment:
      type: object
      description: Representation of a single task comment.
      required:
        - id
        - task_id
        - author_id
        - created_at
        - is_deleted
        - sequence_number
      properties:
        id:
          type: string
          format: uuid
        task_id:
          type: string
          format: uuid
        author_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_deleted:
          type: boolean
        sequence_number:
          type: integer
          format: int32
          minimum: 0
        body:
          type: object
          properties:
            raw_text:
              type: string
        language:
          type: string
          format: bcp47
          example: en-US
          nullable: true
        mentions:
          type: array
          items:
            $ref: 'shared.yml#/components/schemas/EmbeddedUser'
        reactions_count:
          type: object
          properties:
            thumbs_up_count:
              type: integer
              format: int32
              minimum: 0
            sad_count:
              type: integer
              format: int32
              minimum: 0
            happy_count:
              type: integer
              format: int32
              minimum: 0
            inspiring_count:
              type: integer
              format: int32
              minimum: 0
            heart_count:
              type: integer
              format: int32
              minimum: 0
          description: The number of reactions on this comment grouped by the reaction type.
    GetTaskCommentsResponse:
      title: ''
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/TaskComment'
        next_cursor:
          type: string
        has_more:
          type: boolean
      description: ''
    TaskCommentReaction:
      type: object
      properties:
        type:
          $ref: 'shared.yml#/components/schemas/ReactionType'
        comment_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        is_deleted:
          type: boolean
        user:
          $ref: 'shared.yml#/components/schemas/EmbeddedUser'
          nullable: true
          description: Information about the user who reacted. Is only present if requested by the `_embed` parameter. Refer to our general "embedment" concept for more information.
    TaskCommentsReactingUsers:
      title: TaskCommentsReactingUsers
      type: object
      properties:
        reactions:
          $ref: '#/components/schemas/TaskCommentReaction'
        _pagination:
          $ref: 'shared.yml#/components/schemas/CursorPagination'
    GetTaskCommentsReactionsResponse:
      $ref: '#/components/schemas/TaskCommentsReactingUsers'
    DeleteTaskCommentsReactionsResponse:
      title: DeleteTaskCommentsReactionsResponse
      allOf:
        - $ref: '#/components/schemas/TaskCommentReaction'
    PostTaskCommentsReactionsRequest:
      title: PostTaskCommentsReactionsRequest
      type: object
      properties:
        type:
          $ref: 'shared.yml#/components/schemas/ReactionsType'
        author_id:
          type: string
          format: uuid
    PostTaskCommentsReactionsResponse:
      $ref: '#/components/schemas/TaskCommentReaction'
    TaskCommentCreation:
      type: object
      required:
        - body
      properties:
        id:
          type: string
          format: uuid
        body:
          type: string
        attachments:
          type: array
          items: { }
        mentions:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
  examples:
    TaskInformationExample:
      value:
        id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
        external_id: string
        author_id: 78424c75-5c41-4b25-9735-3c9f7d05c59e
        title: Wet-clean all aisles
        body:
          raw_text: 'Hey @2b2b2af0-9644-4c0e-a606-5c3aa6ec1004, can you please clean the aisles until tomorrow?'
          html_body: 'Hey @2b2b2af0-9644-4c0e-a606-5c3aa6ec1004, can you please clean the aisles <b>until tomorrow</b>?'
        created_at: '2019-08-24T14:15:22Z'
        updated_at: '2019-08-24T14:15:22Z'
        is_deleted: false
        language: en-US
        settings:
          comments_enabled: true
        comments_count: 0
        due_at:
          date: '2019-08-25'
          discriminator: DATE
        attachments:
          - id: string
        progress_status: OPEN
        mentions:
          - id: 2b2b2af0-9644-4c0e-a606-5c3aa6ec1004
            is_deleted: false
            username: Peter M.
        distribution_kind: DISTRIBUTED_WITHOUT_AUTHOR
        distribution_summary:
          new_count: 1
          open_count: 13
          finished_count: 0
