import { ApiDocumentation } from "@swirl/lib/docs";

export const apiEndpointDocumentation = [
  {
    id: "branding-admin",
    title: "Branding Admin",
    resources: [
      {
        id: "theme",
        title: "Theme",
        shortDescription: "",
        endpoints: [
          {
            id: "search-themes",
            title: "List of themes",
            description: "List and search themes.",
            path: "/api/admin/branding/v4/themes",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "type",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      "Defines the order in which the themes are returned.",
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "UPDATED_AT_ASC",
                        "UPDATED_AT_DESC",
                        "CREATED_AT_ASC",
                        "CREATED_AT_DESC",
                      ],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "embed",
                    type: "array",
                    description:
                      "Embed related resources and more details in the response.",
                    required: false,
                    items: { type: "string", enum: ["USER_GROUP"] },
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "themes",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "object",
                          properties: {
                            user_group_id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            theme_type: {
                              type: "string",
                              enum: ["LIGHT", "DARK"],
                            },
                          },
                          required: ["user_group_id", "theme_type"],
                        },
                        user_group: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            title: {
                              type: "object",
                              properties: {
                                language: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                text: {
                                  type: "string",
                                  description: "Title of the User Group",
                                  maxLength: 120,
                                  example: "Marketing",
                                },
                              },
                              required: ["language", "text"],
                            },
                            status: {
                              type: "string",
                              enum: ["ACTIVE", "ARCHIVED"],
                            },
                          },
                          required: ["id", "title", "status"],
                        },
                        settings: {
                          type: "object",
                          properties: {
                            favicon: {
                              type: "object",
                              properties: {
                                id: { type: "string", format: "uuid" },
                                link: {
                                  type: "string",
                                  pattern:
                                    "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                },
                                file_name: { type: "string" },
                              },
                              required: ["id", "link", "file_name"],
                            },
                            company_icon: {
                              type: "object",
                              properties: {
                                id: { type: "string", format: "uuid" },
                                link: {
                                  type: "string",
                                  pattern:
                                    "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                },
                                file_name: { type: "string" },
                              },
                              required: ["id", "link", "file_name"],
                            },
                            company_logo: {
                              type: "object",
                              properties: {
                                id: { type: "string", format: "uuid" },
                                link: {
                                  type: "string",
                                  pattern:
                                    "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                },
                                file_name: { type: "string" },
                              },
                              required: ["id", "link", "file_name"],
                            },
                            primary: {
                              type: "object",
                              properties: {
                                default_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                                hovered_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                                pressed_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                                foreground: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                              },
                              required: [
                                "default_state",
                                "hovered_state",
                                "pressed_state",
                                "foreground",
                              ],
                            },
                            primary_text: {
                              type: "object",
                              properties: {
                                default_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                                hovered_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                                pressed_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                              },
                              required: [
                                "default_state",
                                "hovered_state",
                                "pressed_state",
                              ],
                            },
                            secondary: {
                              type: "object",
                              properties: {
                                default_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                                hovered_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                                pressed_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                                foreground: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                              },
                              required: [
                                "default_state",
                                "hovered_state",
                                "pressed_state",
                                "foreground",
                              ],
                            },
                            secondary_text: {
                              type: "object",
                              properties: {
                                default_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                                hovered_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                                pressed_state: {
                                  description:
                                    "A hex encoded 3 component color (rgb) value.",
                                  type: "string",
                                  pattern: "^\\#[0-9a-fA-F]{6}$",
                                  example: "#000000",
                                },
                              },
                              required: [
                                "default_state",
                                "hovered_state",
                                "pressed_state",
                              ],
                            },
                          },
                          required: [
                            "favicon",
                            "company_icon",
                            "company_logo",
                            "primary",
                            "primary_text",
                            "secondary",
                            "secondary_text",
                          ],
                        },
                      },
                      required: ["id", "settings"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/branding/v4/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/branding/v4/themes" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/branding/v4/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/branding/v4/themes");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/branding/v4/themes HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/branding/v4/themes"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/branding/v4/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/branding/v4/themes', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/branding/v4/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/branding/v4/themes';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/branding/v4/themes"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/branding/v4/themes" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/branding/v4/themes', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/branding/v4/themes\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/branding/v4/themes"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/branding/v4/themes"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/branding/v4/themes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/branding/v4/themes \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/branding/v4/themes")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/branding/v4/themes",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "themes": [\n    {\n      "id": {\n        "user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "theme_type": "LIGHT"\n      },\n      "user_group": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "title": {\n          "language": "en-GB",\n          "text": "Marketing"\n        },\n        "status": "ACTIVE"\n      },\n      "settings": {\n        "favicon": {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "link": "string",\n          "file_name": "string"\n        },\n        "company_icon": {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "link": "string",\n          "file_name": "string"\n        },\n        "company_logo": {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "link": "string",\n          "file_name": "string"\n        },\n        "primary": {\n          "default_state": "#000000",\n          "hovered_state": "#000000",\n          "pressed_state": "#000000",\n          "foreground": "#000000"\n        },\n        "primary_text": {\n          "default_state": "#000000",\n          "hovered_state": "#000000",\n          "pressed_state": "#000000"\n        },\n        "secondary": {\n          "default_state": "#000000",\n          "hovered_state": "#000000",\n          "pressed_state": "#000000",\n          "foreground": "#000000"\n        },\n        "secondary_text": {\n          "default_state": "#000000",\n          "hovered_state": "#000000",\n          "pressed_state": "#000000"\n        }\n      }\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    themes: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "object",
                            properties: {
                              user_group_id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              theme_type: {
                                type: "string",
                                enum: ["LIGHT", "DARK"],
                              },
                            },
                            required: ["user_group_id", "theme_type"],
                          },
                          user_group: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the User Group",
                                    maxLength: 120,
                                    example: "Marketing",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              status: {
                                type: "string",
                                enum: ["ACTIVE", "ARCHIVED"],
                              },
                            },
                            required: ["id", "title", "status"],
                          },
                          settings: {
                            type: "object",
                            properties: {
                              favicon: {
                                type: "object",
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  link: {
                                    type: "string",
                                    pattern:
                                      "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                  },
                                  file_name: { type: "string" },
                                },
                                required: ["id", "link", "file_name"],
                              },
                              company_icon: {
                                type: "object",
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  link: {
                                    type: "string",
                                    pattern:
                                      "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                  },
                                  file_name: { type: "string" },
                                },
                                required: ["id", "link", "file_name"],
                              },
                              company_logo: {
                                type: "object",
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  link: {
                                    type: "string",
                                    pattern:
                                      "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                  },
                                  file_name: { type: "string" },
                                },
                                required: ["id", "link", "file_name"],
                              },
                              primary: {
                                type: "object",
                                properties: {
                                  default_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                  hovered_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                  pressed_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                  foreground: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                },
                                required: [
                                  "default_state",
                                  "hovered_state",
                                  "pressed_state",
                                  "foreground",
                                ],
                              },
                              primary_text: {
                                type: "object",
                                properties: {
                                  default_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                  hovered_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                  pressed_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                },
                                required: [
                                  "default_state",
                                  "hovered_state",
                                  "pressed_state",
                                ],
                              },
                              secondary: {
                                type: "object",
                                properties: {
                                  default_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                  hovered_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                  pressed_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                  foreground: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                },
                                required: [
                                  "default_state",
                                  "hovered_state",
                                  "pressed_state",
                                  "foreground",
                                ],
                              },
                              secondary_text: {
                                type: "object",
                                properties: {
                                  default_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                  hovered_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                  pressed_state: {
                                    description:
                                      "A hex encoded 3 component color (rgb) value.",
                                    type: "string",
                                    pattern: "^\\#[0-9a-fA-F]{6}$",
                                    example: "#000000",
                                  },
                                },
                                required: [
                                  "default_state",
                                  "hovered_state",
                                  "pressed_state",
                                ],
                              },
                            },
                            required: [
                              "favicon",
                              "company_icon",
                              "company_logo",
                              "primary",
                              "primary_text",
                              "secondary",
                              "secondary_text",
                            ],
                          },
                        },
                        required: ["id", "settings"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["themes", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-theme",
            title: "Get active theme for a user group",
            description:
              "Returns the active theme for the specified user group. This can either be an explicitly defined theme or an inherited theme\n(in which case the theme's id will point to user group that differs from the path parameter).",
            path: "/api/admin/branding/v4/themes/{user_group_id}/{theme_type}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                  {
                    name: "theme_type",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "embed",
                    type: "array",
                    description:
                      "Embed related resources and more details in the response.",
                    required: false,
                    items: { type: "string", enum: ["USER_GROUP"] },
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "user_group_id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "theme_type",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "user_group",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the User Group",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "status",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "settings",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/branding/v4/themes/user_group_id/theme_type HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/branding/v4/themes/{user_group_id}/{theme_type}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": {\n    "user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "theme_type": "LIGHT"\n  },\n  "user_group": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "Marketing"\n    },\n    "status": "ACTIVE"\n  },\n  "settings": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "primary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "primary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    },\n    "secondary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "secondary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    }\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "object",
                      properties: {
                        user_group_id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        theme_type: { type: "string", enum: ["LIGHT", "DARK"] },
                      },
                      required: ["user_group_id", "theme_type"],
                    },
                    user_group: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                    settings: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        primary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        primary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                        secondary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        secondary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "primary",
                        "primary_text",
                        "secondary",
                        "secondary_text",
                      ],
                    },
                  },
                  required: ["id", "settings"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "update-theme",
            title: "Updates the theme settings for a user group",
            description:
              "Updates the theme settings of a user group.\nThis operation will only affect the specified user group and all it's descendants, that do not have an override.\nIn case of an inherited theme the operation will implicitly create a new theme for the user group, with the inherited\ntheme providing any values missing from the patch.",
            path: "/api/admin/branding/v4/themes/{user_group_id}/{theme_type}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                  {
                    name: "theme_type",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "embed",
                    type: "array",
                    description:
                      "Embed related resources and more details in the response.",
                    required: false,
                    items: { type: "string", enum: ["USER_GROUP"] },
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "favicon",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "company_icon",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "company_logo",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "primary",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "default_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                      {
                        name: "hovered_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                      {
                        name: "pressed_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                      {
                        name: "foreground",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "primary_text",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "default_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                      {
                        name: "hovered_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                      {
                        name: "pressed_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "secondary",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "default_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                      {
                        name: "hovered_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                      {
                        name: "pressed_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                      {
                        name: "foreground",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "secondary_text",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "default_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                      {
                        name: "hovered_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                      {
                        name: "pressed_state",
                        type: "string",
                        description:
                          "A hex encoded 3 component color (rgb) value.",
                        required: false,
                      },
                    ],
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "user_group_id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "theme_type",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "user_group",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the User Group",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "status",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "settings",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"favicon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_icon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_logo\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"primary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"primary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"},\\"secondary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"secondary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"}}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/patch "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type" {:content-type :json\n                                                                                             :form-params {:favicon "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                           :company_icon "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                           :company_logo "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                           :primary {:default_state "#000000"\n                                                                                                                     :hovered_state "#000000"\n                                                                                                                     :pressed_state "#000000"\n                                                                                                                     :foreground "#000000"}\n                                                                                                           :primary_text {:default_state "#000000"\n                                                                                                                          :hovered_state "#000000"\n                                                                                                                          :pressed_state "#000000"}\n                                                                                                           :secondary {:default_state "#000000"\n                                                                                                                       :hovered_state "#000000"\n                                                                                                                       :pressed_state "#000000"\n                                                                                                                       :foreground "#000000"}\n                                                                                                           :secondary_text {:default_state "#000000"\n                                                                                                                            :hovered_state "#000000"\n                                                                                                                            :pressed_state "#000000"}}\n                                                                                             :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"favicon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_icon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_logo\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"primary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"primary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"},\\"secondary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"secondary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"}}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"favicon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_icon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_logo\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"primary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"primary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"},\\"secondary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"secondary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"}}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'PATCH /api/admin/branding/v4/themes/user_group_id/theme_type HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 578\r\n\r\n{"favicon":"3fa85f64-5717-4562-b3fc-2c963f66afa6","company_icon":"3fa85f64-5717-4562-b3fc-2c963f66afa6","company_logo":"3fa85f64-5717-4562-b3fc-2c963f66afa6","primary":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000","foreground":"#000000"},"primary_text":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000"},"secondary":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000","foreground":"#000000"},"secondary_text":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000"}}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type"\n\n\tpayload := strings.NewReader("{\\"favicon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_icon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_logo\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"primary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"primary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"},\\"secondary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"secondary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"}}")\n\n\treq, _ := http.NewRequest("PATCH", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"favicon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_icon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_logo\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"primary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"primary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"},\\"secondary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"secondary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"}}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'PATCH',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    favicon: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    company_icon: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    company_logo: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    primary: {\n      default_state: '#000000',\n      hovered_state: '#000000',\n      pressed_state: '#000000',\n      foreground: '#000000'\n    },\n    primary_text: {default_state: '#000000', hovered_state: '#000000', pressed_state: '#000000'},\n    secondary: {\n      default_state: '#000000',\n      hovered_state: '#000000',\n      pressed_state: '#000000',\n      foreground: '#000000'\n    },\n    secondary_text: {default_state: '#000000', hovered_state: '#000000', pressed_state: '#000000'}\n  })\n};\n\nfetch('http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"favicon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_icon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_logo\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"primary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"primary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"},\\"secondary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"secondary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"}}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type';\nconst options = {\n  method: 'PATCH',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    favicon: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    company_icon: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    company_logo: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    primary: {\n      default_state: '#000000',\n      hovered_state: '#000000',\n      pressed_state: '#000000',\n      foreground: '#000000'\n    },\n    primary_text: {default_state: '#000000', hovered_state: '#000000', pressed_state: '#000000'},\n    secondary: {\n      default_state: '#000000',\n      hovered_state: '#000000',\n      pressed_state: '#000000',\n      foreground: '#000000'\n    },\n    secondary_text: {default_state: '#000000', hovered_state: '#000000', pressed_state: '#000000'}\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"favicon": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"company_icon": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"company_logo": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"primary": @{ @"default_state": @"#000000", @"hovered_state": @"#000000", @"pressed_state": @"#000000", @"foreground": @"#000000" },\n                              @"primary_text": @{ @"default_state": @"#000000", @"hovered_state": @"#000000", @"pressed_state": @"#000000" },\n                              @"secondary": @{ @"default_state": @"#000000", @"hovered_state": @"#000000", @"pressed_state": @"#000000", @"foreground": @"#000000" },\n                              @"secondary_text": @{ @"default_state": @"#000000", @"hovered_state": @"#000000", @"pressed_state": @"#000000" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"PATCH"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"favicon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_icon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_logo\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"primary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"primary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"},\\"secondary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"secondary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"}}" in\n\nClient.call ~headers ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: '<?php\nrequire_once(\'vendor/autoload.php\');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request(\'PATCH\', \'http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type\', [\n  \'body\' => \'{"favicon":"3fa85f64-5717-4562-b3fc-2c963f66afa6","company_icon":"3fa85f64-5717-4562-b3fc-2c963f66afa6","company_logo":"3fa85f64-5717-4562-b3fc-2c963f66afa6","primary":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000","foreground":"#000000"},"primary_text":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000"},"secondary":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000","foreground":"#000000"},"secondary_text":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000"}}\',\n  \'headers\' => [\n    \'accept\' => \'application/json\',\n    \'content-type\' => \'application/json\',\n  ],\n]);\n\necho $response->getBody();',
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type\' -Method PATCH -Headers $headers -ContentType \'application/json\' -Body \'{"favicon":"3fa85f64-5717-4562-b3fc-2c963f66afa6","company_icon":"3fa85f64-5717-4562-b3fc-2c963f66afa6","company_logo":"3fa85f64-5717-4562-b3fc-2c963f66afa6","primary":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000","foreground":"#000000"},"primary_text":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000"},"secondary":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000","foreground":"#000000"},"secondary_text":{"default_state":"#000000","hovered_state":"#000000","pressed_state":"#000000"}}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type"\n\npayload = {\n    "favicon": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "company_icon": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "company_logo": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "primary": {\n        "default_state": "#000000",\n        "hovered_state": "#000000",\n        "pressed_state": "#000000",\n        "foreground": "#000000"\n    },\n    "primary_text": {\n        "default_state": "#000000",\n        "hovered_state": "#000000",\n        "pressed_state": "#000000"\n    },\n    "secondary": {\n        "default_state": "#000000",\n        "hovered_state": "#000000",\n        "pressed_state": "#000000",\n        "foreground": "#000000"\n    },\n    "secondary_text": {\n        "default_state": "#000000",\n        "hovered_state": "#000000",\n        "pressed_state": "#000000"\n    }\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.patch(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type"\n\npayload <- "{\\"favicon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_icon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_logo\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"primary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"primary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"},\\"secondary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"secondary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"}}"\n\nencode <- "json"\n\nresponse <- VERB("PATCH", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"favicon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_icon\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"company_logo\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"primary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"primary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"},\\"secondary\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\",\\"foreground\\":\\"#000000\\"},\\"secondary_text\\":{\\"default_state\\":\\"#000000\\",\\"hovered_state\\":\\"#000000\\",\\"pressed_state\\":\\"#000000\\"}}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request PATCH \\\n     --url http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "favicon": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "company_icon": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "company_logo": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "primary": {\n    "default_state": "#000000",\n    "hovered_state": "#000000",\n    "pressed_state": "#000000",\n    "foreground": "#000000"\n  },\n  "primary_text": {\n    "default_state": "#000000",\n    "hovered_state": "#000000",\n    "pressed_state": "#000000"\n  },\n  "secondary": {\n    "default_state": "#000000",\n    "hovered_state": "#000000",\n    "pressed_state": "#000000",\n    "foreground": "#000000"\n  },\n  "secondary_text": {\n    "default_state": "#000000",\n    "hovered_state": "#000000",\n    "pressed_state": "#000000"\n  }\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "favicon": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "company_icon": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "company_logo": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "primary": [\n    "default_state": "#000000",\n    "hovered_state": "#000000",\n    "pressed_state": "#000000",\n    "foreground": "#000000"\n  ],\n  "primary_text": [\n    "default_state": "#000000",\n    "hovered_state": "#000000",\n    "pressed_state": "#000000"\n  ],\n  "secondary": [\n    "default_state": "#000000",\n    "hovered_state": "#000000",\n    "pressed_state": "#000000",\n    "foreground": "#000000"\n  ],\n  "secondary_text": [\n    "default_state": "#000000",\n    "hovered_state": "#000000",\n    "pressed_state": "#000000"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "PATCH"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "PATCH",
                url: "/api/admin/branding/v4/themes/{user_group_id}/{theme_type}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": {\n    "user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "theme_type": "LIGHT"\n  },\n  "user_group": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "Marketing"\n    },\n    "status": "ACTIVE"\n  },\n  "settings": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "primary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "primary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    },\n    "secondary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "secondary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    }\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "object",
                      properties: {
                        user_group_id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        theme_type: { type: "string", enum: ["LIGHT", "DARK"] },
                      },
                      required: ["user_group_id", "theme_type"],
                    },
                    user_group: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                    settings: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        primary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        primary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                        secondary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        secondary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "primary",
                        "primary_text",
                        "secondary",
                        "secondary_text",
                      ],
                    },
                  },
                  required: ["id", "settings"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "patch",
          },
          {
            id: "reset-theme",
            title:
              "Reset a theme causing the user group to inherit a theme from above",
            description:
              "Any explicitly defined theme will be deleted, causing the user group to inherit it's theme from it's parent.\nIf this operation is performed on the root user group, the theme will be reset to the Flip defaults.",
            path: "/api/admin/branding/v4/themes/{user_group_id}/{theme_type}/reset",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                  {
                    name: "theme_type",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "embed",
                    type: "array",
                    description:
                      "Embed related resources and more details in the response.",
                    required: false,
                    items: { type: "string", enum: ["USER_GROUP"] },
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "user_group_id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "theme_type",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "user_group",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the User Group",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "status",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "settings",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "POST /api/admin/branding/v4/themes/user_group_id/theme_type/reset HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset"\n\n\treq, _ := http.NewRequest("POST", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset';\nconst options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset\' -Method POST -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset"\n\nresponse <- VERB("POST", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/branding/v4/themes/user_group_id/theme_type/reset")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/branding/v4/themes/{user_group_id}/{theme_type}/reset",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": {\n    "user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "theme_type": "LIGHT"\n  },\n  "user_group": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "Marketing"\n    },\n    "status": "ACTIVE"\n  },\n  "settings": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "primary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "primary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    },\n    "secondary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "secondary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    }\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "object",
                      properties: {
                        user_group_id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        theme_type: { type: "string", enum: ["LIGHT", "DARK"] },
                      },
                      required: ["user_group_id", "theme_type"],
                    },
                    user_group: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                    settings: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        primary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        primary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                        secondary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        secondary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "primary",
                        "primary_text",
                        "secondary",
                        "secondary_text",
                      ],
                    },
                  },
                  required: ["id", "settings"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
      {
        id: "theme-pwa",
        title: "Theme Pwa",
        shortDescription: "",
        endpoints: [
          {
            id: "get-bootstrap-theme-pwa",
            title: "Get pwa theme for an unauthorized user.",
            description:
              "Returns the active theme for pwa for the root user group of the tenant.",
            path: "/api/branding/v4/bootstrap/pwa/themes",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "light",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "dark",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/bootstrap/pwa/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/branding/v4/bootstrap/pwa/themes" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/bootstrap/pwa/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/branding/v4/bootstrap/pwa/themes");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/branding/v4/bootstrap/pwa/themes HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/branding/v4/bootstrap/pwa/themes"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/bootstrap/pwa/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/branding/v4/bootstrap/pwa/themes', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/bootstrap/pwa/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/branding/v4/bootstrap/pwa/themes';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/branding/v4/bootstrap/pwa/themes"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/branding/v4/bootstrap/pwa/themes" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/branding/v4/bootstrap/pwa/themes', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/branding/v4/bootstrap/pwa/themes\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/branding/v4/bootstrap/pwa/themes"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/branding/v4/bootstrap/pwa/themes"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/branding/v4/bootstrap/pwa/themes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/branding/v4/bootstrap/pwa/themes \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/branding/v4/bootstrap/pwa/themes")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/branding/v4/bootstrap/pwa/themes",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "light": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "primary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "primary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    },\n    "secondary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "secondary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    }\n  },\n  "dark": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "primary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "primary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    },\n    "secondary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "secondary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    }\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    light: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        primary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        primary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                        secondary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        secondary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "primary",
                        "primary_text",
                        "secondary",
                        "secondary_text",
                      ],
                    },
                    dark: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        primary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        primary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                        secondary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        secondary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "primary",
                        "primary_text",
                        "secondary",
                        "secondary_text",
                      ],
                    },
                  },
                  required: ["light", "dark"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-theme-pwa",
            title: "Get pwa theme for the authenticated user.",
            description:
              "Returns the active theme for the pwa for the primary user group of the authenticated user.",
            path: "/api/branding/v4/pwa/themes",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "light",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "dark",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "primary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                          "foreground",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "foreground",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "secondary_text",
                        type: "object",
                        description: "",
                        required: [
                          "default_state",
                          "hovered_state",
                          "pressed_state",
                        ],
                        properties: [
                          {
                            name: "default_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "hovered_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                          {
                            name: "pressed_state",
                            type: "string",
                            description:
                              "A hex encoded 3 component color (rgb) value.",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/pwa/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/branding/v4/pwa/themes" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/pwa/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/branding/v4/pwa/themes");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/branding/v4/pwa/themes HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/branding/v4/pwa/themes"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/pwa/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/branding/v4/pwa/themes', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/pwa/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/branding/v4/pwa/themes';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/branding/v4/pwa/themes"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/branding/v4/pwa/themes" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/branding/v4/pwa/themes', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/branding/v4/pwa/themes\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/branding/v4/pwa/themes"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/branding/v4/pwa/themes"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/branding/v4/pwa/themes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/branding/v4/pwa/themes \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/branding/v4/pwa/themes")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/branding/v4/pwa/themes",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "light": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "primary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "primary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    },\n    "secondary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "secondary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    }\n  },\n  "dark": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "primary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "primary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    },\n    "secondary": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000",\n      "foreground": "#000000"\n    },\n    "secondary_text": {\n      "default_state": "#000000",\n      "hovered_state": "#000000",\n      "pressed_state": "#000000"\n    }\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    light: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        primary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        primary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                        secondary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        secondary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "primary",
                        "primary_text",
                        "secondary",
                        "secondary_text",
                      ],
                    },
                    dark: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        primary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        primary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                        secondary: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            foreground: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                            "foreground",
                          ],
                        },
                        secondary_text: {
                          type: "object",
                          properties: {
                            default_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            hovered_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                            pressed_state: {
                              description:
                                "A hex encoded 3 component color (rgb) value.",
                              type: "string",
                              pattern: "^\\#[0-9a-fA-F]{6}$",
                              example: "#000000",
                            },
                          },
                          required: [
                            "default_state",
                            "hovered_state",
                            "pressed_state",
                          ],
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "primary",
                        "primary_text",
                        "secondary",
                        "secondary_text",
                      ],
                    },
                  },
                  required: ["light", "dark"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
      {
        id: "theme-flip-mobile",
        title: "Theme Flip Mobile",
        shortDescription: "",
        endpoints: [
          {
            id: "get-bootstrap-theme-mobile",
            title: "Get mobile theme for an unauthorized user.",
            description:
              "Returns the active theme for mobile for the root user group of the tenant.",
            path: "/api/branding/v4/bootstrap/mobile/themes",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "dark",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "design_tokens",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "light",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "design_tokens",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/bootstrap/mobile/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/branding/v4/bootstrap/mobile/themes" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/bootstrap/mobile/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/branding/v4/bootstrap/mobile/themes");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/branding/v4/bootstrap/mobile/themes HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/branding/v4/bootstrap/mobile/themes"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/bootstrap/mobile/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/branding/v4/bootstrap/mobile/themes', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/bootstrap/mobile/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/branding/v4/bootstrap/mobile/themes';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/branding/v4/bootstrap/mobile/themes"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/branding/v4/bootstrap/mobile/themes" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/branding/v4/bootstrap/mobile/themes', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/branding/v4/bootstrap/mobile/themes\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/branding/v4/bootstrap/mobile/themes"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/branding/v4/bootstrap/mobile/themes"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/branding/v4/bootstrap/mobile/themes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/branding/v4/bootstrap/mobile/themes \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/branding/v4/bootstrap/mobile/themes")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/branding/v4/bootstrap/mobile/themes",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "dark": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "design_tokens": [\n      {\n        "id": "string",\n        "color": {\n          "r": 0,\n          "g": 0,\n          "b": 0,\n          "a": 0\n        }\n      }\n    ]\n  },\n  "light": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "design_tokens": [\n      {\n        "id": "string",\n        "color": {\n          "r": 0,\n          "g": 0,\n          "b": 0,\n          "a": 0\n        }\n      }\n    ]\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    dark: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        design_tokens: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string" },
                              color: {
                                description:
                                  "A color value with rgba components",
                                type: "object",
                                properties: {
                                  r: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  g: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  b: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  a: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                },
                                required: ["r", "g", "b", "a"],
                              },
                            },
                            required: ["id", "color"],
                          },
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "design_tokens",
                      ],
                    },
                    light: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        design_tokens: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string" },
                              color: {
                                description:
                                  "A color value with rgba components",
                                type: "object",
                                properties: {
                                  r: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  g: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  b: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  a: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                },
                                required: ["r", "g", "b", "a"],
                              },
                            },
                            required: ["id", "color"],
                          },
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "design_tokens",
                      ],
                    },
                  },
                  required: ["light", "dark"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-theme-mobile",
            title: "Get mobile theme for the authenticated user.",
            description:
              "Returns the active theme for the mobile app for the primary user group of the authenticated user.",
            path: "/api/branding/v4/mobile/themes",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "dark",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "design_tokens",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "light",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "design_tokens",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/mobile/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/branding/v4/mobile/themes" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/mobile/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/branding/v4/mobile/themes");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/branding/v4/mobile/themes HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/branding/v4/mobile/themes"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/mobile/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/branding/v4/mobile/themes', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/mobile/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/branding/v4/mobile/themes';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/branding/v4/mobile/themes"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/branding/v4/mobile/themes" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/branding/v4/mobile/themes', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/branding/v4/mobile/themes\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/branding/v4/mobile/themes"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/branding/v4/mobile/themes"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/branding/v4/mobile/themes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/branding/v4/mobile/themes \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/branding/v4/mobile/themes")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/branding/v4/mobile/themes",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "dark": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "design_tokens": [\n      {\n        "id": "string",\n        "color": {\n          "r": 0,\n          "g": 0,\n          "b": 0,\n          "a": 0\n        }\n      }\n    ]\n  },\n  "light": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "design_tokens": [\n      {\n        "id": "string",\n        "color": {\n          "r": 0,\n          "g": 0,\n          "b": 0,\n          "a": 0\n        }\n      }\n    ]\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    dark: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        design_tokens: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string" },
                              color: {
                                description:
                                  "A color value with rgba components",
                                type: "object",
                                properties: {
                                  r: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  g: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  b: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  a: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                },
                                required: ["r", "g", "b", "a"],
                              },
                            },
                            required: ["id", "color"],
                          },
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "design_tokens",
                      ],
                    },
                    light: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        design_tokens: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string" },
                              color: {
                                description:
                                  "A color value with rgba components",
                                type: "object",
                                properties: {
                                  r: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  g: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  b: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  a: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                },
                                required: ["r", "g", "b", "a"],
                              },
                            },
                            required: ["id", "color"],
                          },
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "design_tokens",
                      ],
                    },
                  },
                  required: ["light", "dark"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
      {
        id: "theme-flip-web",
        title: "Theme Flip Web",
        shortDescription: "",
        endpoints: [
          {
            id: "get-bootstrap-theme-web",
            title: "Get web theme for an unauthorized user.",
            description:
              "Returns the active theme for mobile for the root user group of the tenant.",
            path: "/api/branding/v4/bootstrap/web/themes",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "dark",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "design_tokens",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "light",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "design_tokens",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/bootstrap/web/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/branding/v4/bootstrap/web/themes" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/bootstrap/web/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/branding/v4/bootstrap/web/themes");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/branding/v4/bootstrap/web/themes HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/branding/v4/bootstrap/web/themes"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/bootstrap/web/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/branding/v4/bootstrap/web/themes', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/bootstrap/web/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/branding/v4/bootstrap/web/themes';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/branding/v4/bootstrap/web/themes"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/branding/v4/bootstrap/web/themes" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/branding/v4/bootstrap/web/themes', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/branding/v4/bootstrap/web/themes\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/branding/v4/bootstrap/web/themes"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/branding/v4/bootstrap/web/themes"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/branding/v4/bootstrap/web/themes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/branding/v4/bootstrap/web/themes \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/branding/v4/bootstrap/web/themes")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/branding/v4/bootstrap/web/themes",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "dark": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "design_tokens": [\n      {\n        "id": "string",\n        "color": {\n          "r": 0,\n          "g": 0,\n          "b": 0,\n          "a": 0\n        }\n      }\n    ]\n  },\n  "light": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "design_tokens": [\n      {\n        "id": "string",\n        "color": {\n          "r": 0,\n          "g": 0,\n          "b": 0,\n          "a": 0\n        }\n      }\n    ]\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    dark: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        design_tokens: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string" },
                              color: {
                                description:
                                  "A color value with rgba components",
                                type: "object",
                                properties: {
                                  r: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  g: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  b: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  a: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                },
                                required: ["r", "g", "b", "a"],
                              },
                            },
                            required: ["id", "color"],
                          },
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "design_tokens",
                      ],
                    },
                    light: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        design_tokens: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string" },
                              color: {
                                description:
                                  "A color value with rgba components",
                                type: "object",
                                properties: {
                                  r: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  g: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  b: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  a: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                },
                                required: ["r", "g", "b", "a"],
                              },
                            },
                            required: ["id", "color"],
                          },
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "design_tokens",
                      ],
                    },
                  },
                  required: ["light", "dark"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-theme-web",
            title: "Get web theme for the authenticated user.",
            description:
              "Returns the active theme for web for the primary user group of the authenticated user.",
            path: "/api/branding/v4/web/themes",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "dark",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "design_tokens",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "light",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "favicon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_icon",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "company_logo",
                        type: "object",
                        description: "",
                        required: ["id", "link", "file_name"],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "link",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "file_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "design_tokens",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/web/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/branding/v4/web/themes" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/branding/v4/web/themes");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/branding/v4/web/themes");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/branding/v4/web/themes HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/branding/v4/web/themes"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/web/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/branding/v4/web/themes', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/branding/v4/web/themes")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/branding/v4/web/themes';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/branding/v4/web/themes"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/branding/v4/web/themes" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/branding/v4/web/themes', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/branding/v4/web/themes\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/branding/v4/web/themes"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/branding/v4/web/themes"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/branding/v4/web/themes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/branding/v4/web/themes \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/branding/v4/web/themes")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/branding/v4/web/themes",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "dark": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "design_tokens": [\n      {\n        "id": "string",\n        "color": {\n          "r": 0,\n          "g": 0,\n          "b": 0,\n          "a": 0\n        }\n      }\n    ]\n  },\n  "light": {\n    "favicon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_icon": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "company_logo": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "link": "string",\n      "file_name": "string"\n    },\n    "design_tokens": [\n      {\n        "id": "string",\n        "color": {\n          "r": 0,\n          "g": 0,\n          "b": 0,\n          "a": 0\n        }\n      }\n    ]\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    dark: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        design_tokens: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string" },
                              color: {
                                description:
                                  "A color value with rgba components",
                                type: "object",
                                properties: {
                                  r: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  g: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  b: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  a: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                },
                                required: ["r", "g", "b", "a"],
                              },
                            },
                            required: ["id", "color"],
                          },
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "design_tokens",
                      ],
                    },
                    light: {
                      type: "object",
                      properties: {
                        favicon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_icon: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        company_logo: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            file_name: { type: "string" },
                          },
                          required: ["id", "link", "file_name"],
                        },
                        design_tokens: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string" },
                              color: {
                                description:
                                  "A color value with rgba components",
                                type: "object",
                                properties: {
                                  r: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  g: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  b: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                  a: {
                                    description: "A color component (0-255)",
                                    type: "integer",
                                    minimum: 0,
                                    maximum: 255,
                                  },
                                },
                                required: ["r", "g", "b", "a"],
                              },
                            },
                            required: ["id", "color"],
                          },
                        },
                      },
                      required: [
                        "favicon",
                        "company_icon",
                        "company_logo",
                        "design_tokens",
                      ],
                    },
                  },
                  required: ["light", "dark"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
    ],
  },
  {
    id: "channel-admin",
    title: "Channel Admin",
    resources: [
      {
        id: "assignable-users",
        title: "Assignable Users",
        shortDescription: "",
        endpoints: [
          {
            id: "get-channel-assignable-users",
            title: "Get Assignable Users",
            description:
              "Returns all users that can be assigned to the channel by the current actor.",
            path: "/api/admin/channels/v4/channels/{channel_id}/assignable-users",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "channel_id",
                    type: "string",
                    description:
                      "The primary identifier of the channel to access.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs a match in the user's first name, last name or department.",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "USER_FIRST_NAME_ASC",
                        "USER_FIRST_NAME_DESC",
                        "USER_LAST_NAME_ASC",
                        "USER_LAST_NAME_DESC",
                      ],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "users",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        is_deleted: { type: "boolean" },
                        first_name: { type: "string", example: "Jon" },
                        last_name: { type: "string", example: "Doe" },
                        department: {
                          type: "string",
                          example: "Marketing",
                          nullable: true,
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                      required: ["id", "is_deleted", "first_name", "last_name"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/channels/v4/channels/channel_id/assignable-users HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-users")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/channels/v4/channels/{channel_id}/assignable-users",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "users": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "is_deleted": true,\n      "first_name": "Jon",\n      "last_name": "Doe",\n      "department": "Marketing",\n      "profile_picture": {\n        "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      }\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    users: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: { type: "string", format: "uuid" },
                          is_deleted: { type: "boolean" },
                          first_name: { type: "string", example: "Jon" },
                          last_name: { type: "string", example: "Doe" },
                          department: {
                            type: "string",
                            example: "Marketing",
                            nullable: true,
                          },
                          profile_picture: {
                            type: "object",
                            nullable: true,
                            properties: {
                              file_id: { type: "string", format: "uuid" },
                            },
                          },
                        },
                        required: [
                          "id",
                          "is_deleted",
                          "first_name",
                          "last_name",
                        ],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["users", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
      {
        id: "assignable-user-groups",
        title: "Assignable User Groups",
        shortDescription: "",
        endpoints: [
          {
            id: "get-channel-assignable-user-groups",
            title: "Get Assignable User Groups",
            description:
              "Returns all user groups that can be assigned to the channel by the current actor.",
            path: "/api/admin/channels/v4/channels/{channel_id}/assignable-user-groups",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "channel_id",
                    type: "string",
                    description:
                      "The primary identifier of the channel to access.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs a match in the user group's name.",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: ["GROUP_NAME_ASC", "GROUP_NAME_DESC"],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "groups",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/channels/v4/channels/channel_id/assignable-user-groups HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignable-user-groups")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/channels/v4/channels/{channel_id}/assignable-user-groups",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "groups": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "title": {\n        "language": "en-GB",\n        "text": "Marketing"\n      },\n      "status": "ACTIVE"\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    groups: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "Unique identifier of a user group.",
                            format: "uuid",
                          },
                          title: {
                            type: "object",
                            properties: {
                              language: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              text: {
                                type: "string",
                                description: "Title of the User Group",
                                maxLength: 120,
                                example: "Marketing",
                              },
                            },
                            required: ["language", "text"],
                          },
                          status: {
                            type: "string",
                            enum: ["ACTIVE", "ARCHIVED"],
                          },
                        },
                        required: ["id", "title", "status"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["groups", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
      {
        id: "assigned-users",
        title: "Assigned Users",
        shortDescription: "",
        endpoints: [
          {
            id: "get-channel-user-assignments",
            title: "Get Channel User Assignments",
            description:
              "Gets all users that are assigned to the channel. Includes users that are directly assigned to the channel as well as users that are indirectly assigned (e.g. by user group).",
            path: "/api/admin/channels/v4/channels/{channel_id}/assignments/users",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "channel_id",
                    type: "string",
                    description:
                      "The primary identifier of the channel to access.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs a match in the user's first name, last name, username, email, department or location.",
                    required: false,
                  },
                  {
                    name: "role",
                    type: "string",
                    description:
                      "Filters the resulting assignments by the specified role.",
                    required: false,
                  },
                  {
                    name: "embed",
                    type: "array",
                    description:
                      'Defines the values to embed into the response body.\nRefer to our general "embedding" concept for more information.',
                    required: false,
                    items: { type: "string", enum: ["USER"] },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "assignments",
                    type: "array",
                    description:
                      "An array of all retrieved channel user assignments, according to the pagination and sort arguments.",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        role: { type: "string", enum: ["MEMBER", "ADMIN"] },
                        user: {
                          type: "object",
                          nullable: true,
                          properties: {
                            id: { type: "string", format: "uuid" },
                            is_deleted: { type: "boolean" },
                            first_name: { type: "string", example: "Jon" },
                            last_name: { type: "string", example: "Doe" },
                            department: {
                              type: "string",
                              example: "Marketing",
                              nullable: true,
                            },
                            profile_picture: {
                              type: "object",
                              nullable: true,
                              properties: {
                                file_id: { type: "string", format: "uuid" },
                              },
                            },
                          },
                          required: [
                            "id",
                            "is_deleted",
                            "first_name",
                            "last_name",
                          ],
                        },
                        type: {
                          type: "string",
                          enum: ["MANUAL", "USER_GROUP"],
                        },
                      },
                      required: ["id", "role", "type"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/channels/v4/channels/channel_id/assignments/users HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/channels/v4/channels/{channel_id}/assignments/users",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "assignments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "role": "MEMBER",\n      "user": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      },\n      "type": "MANUAL"\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    assignments: {
                      type: "array",
                      description:
                        "An array of all retrieved channel user assignments, according to the pagination and sort arguments.",
                      items: {
                        type: "object",
                        properties: {
                          id: { type: "string", format: "uuid" },
                          role: { type: "string", enum: ["MEMBER", "ADMIN"] },
                          user: {
                            type: "object",
                            nullable: true,
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                          type: {
                            type: "string",
                            enum: ["MANUAL", "USER_GROUP"],
                          },
                        },
                        required: ["id", "role", "type"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["assignments", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "create-channel-user-assignments-batch",
            title: "Create Multiple User Assignments",
            description:
              "Creates channel assignments for multiple users. For the actual semantics of assigning users, consult the documentation of the single assignment endpoint.",
            path: "/api/admin/channels/v4/channels/{channel_id}/assignments/users/batch",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "channel_id",
                    type: "string",
                    description:
                      "The primary identifier of the channel to access.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      description:
                        "A single channel user assignment that should be created.\n",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        body: {
                          type: "object",
                          properties: {
                            role: { type: "string", enum: ["MEMBER", "ADMIN"] },
                          },
                          required: ["role"],
                        },
                      },
                      required: ["id", "body"],
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        status: {
                          type: "integer",
                          format: "int32",
                          description:
                            "A well know HTTP status code (e.g. 200, 201, 400).",
                        },
                        body: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            role: { type: "string", enum: ["MEMBER", "ADMIN"] },
                            user: {
                              type: "object",
                              nullable: true,
                              properties: {
                                id: { type: "string", format: "uuid" },
                                is_deleted: { type: "boolean" },
                                first_name: { type: "string", example: "Jon" },
                                last_name: { type: "string", example: "Doe" },
                                department: {
                                  type: "string",
                                  example: "Marketing",
                                  nullable: true,
                                },
                                profile_picture: {
                                  type: "object",
                                  nullable: true,
                                  properties: {
                                    file_id: { type: "string", format: "uuid" },
                                  },
                                },
                              },
                              required: [
                                "id",
                                "is_deleted",
                                "first_name",
                                "last_name",
                              ],
                            },
                            type: {
                              type: "string",
                              enum: ["MANUAL", "USER_GROUP"],
                            },
                          },
                          required: ["id", "role", "type"],
                        },
                        error: {
                          type: "object",
                          description:
                            'An RFC 7807 inspired "problem JSON" object.',
                          title: "Problem",
                          properties: {
                            status: {
                              type: "integer",
                              format: "int32",
                              description:
                                "A well know HTTP status code (e.g. 200, 201, 400).",
                            },
                            title: {
                              type: "string",
                              description:
                                "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                              example: "No user with the given id found",
                            },
                            detail: {
                              type: "string",
                              description:
                                "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                              example:
                                "User with id <id> was not found. Please ...",
                              nullable: true,
                            },
                            error_code: {
                              type: "string",
                              description:
                                "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                              example: "USER_NOT_FOUND",
                              nullable: true,
                            },
                            property: {
                              type: "string",
                              description:
                                "The technical property name from the API that caused the problem.",
                              example: "user_id",
                              nullable: true,
                            },
                          },
                          required: ["status", "title"],
                        },
                      },
                      required: ["id", "status"],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role\\":\\"MEMBER\\"}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch" {:content-type :json\n                                                                                                        :form-params {:items [{:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                                               :body {:role "MEMBER"}}]}\n                                                                                                        :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role\\":\\"MEMBER\\"}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role\\":\\"MEMBER\\"}}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/channels/v4/channels/channel_id/assignments/users/batch HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 82\r\n\r\n{"items":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","body":{"role":"MEMBER"}}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch"\n\n\tpayload := strings.NewReader("{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role\\":\\"MEMBER\\"}}]}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role\\":\\"MEMBER\\"}}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n        body: JSON.stringify({role: 'MEMBER'})\n      }\n    ]\n  })\n};\n\nfetch('http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role\\":\\"MEMBER\\"}}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n        body: JSON.stringify({role: 'MEMBER'})\n      }\n    ]\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"items": @[ @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"body": @{ @"role": @"MEMBER" } } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role\\":\\"MEMBER\\"}}]}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch', [\n  'body' => '{\"items\":[{\"id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"body\":{\"role\":\"MEMBER\"}}]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"items":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","body":{"role":"MEMBER"}}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch"\n\npayload = {"items": [\n        {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "body": {"role": "MEMBER"}\n        }\n    ]}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch"\n\npayload <- "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role\\":\\"MEMBER\\"}}]}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role\\":\\"MEMBER\\"}}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "items": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "body": {\n        "role": "MEMBER"\n      }\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["items": [\n    [\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "body": ["role": "MEMBER"]\n    ]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/batch")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/channels/v4/channels/{channel_id}/assignments/users/batch",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "items": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "status": 0,\n      "body": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "role": "MEMBER",\n        "user": {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "is_deleted": true,\n          "first_name": "Jon",\n          "last_name": "Doe",\n          "department": "Marketing",\n          "profile_picture": {\n            "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n          }\n        },\n        "type": "MANUAL"\n      },\n      "error": {\n        "status": 0,\n        "title": "No user with the given id found",\n        "detail": "User with id <id> was not found. Please ...",\n        "error_code": "USER_NOT_FOUND",\n        "property": "user_id"\n      }\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    items: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: { type: "string", format: "uuid" },
                          status: {
                            type: "integer",
                            format: "int32",
                            description:
                              "A well know HTTP status code (e.g. 200, 201, 400).",
                          },
                          body: {
                            type: "object",
                            properties: {
                              id: { type: "string", format: "uuid" },
                              role: {
                                type: "string",
                                enum: ["MEMBER", "ADMIN"],
                              },
                              user: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  is_deleted: { type: "boolean" },
                                  first_name: {
                                    type: "string",
                                    example: "Jon",
                                  },
                                  last_name: { type: "string", example: "Doe" },
                                  department: {
                                    type: "string",
                                    example: "Marketing",
                                    nullable: true,
                                  },
                                  profile_picture: {
                                    type: "object",
                                    nullable: true,
                                    properties: {
                                      file_id: {
                                        type: "string",
                                        format: "uuid",
                                      },
                                    },
                                  },
                                },
                                required: [
                                  "id",
                                  "is_deleted",
                                  "first_name",
                                  "last_name",
                                ],
                              },
                              type: {
                                type: "string",
                                enum: ["MANUAL", "USER_GROUP"],
                              },
                            },
                            required: ["id", "role", "type"],
                          },
                          error: {
                            type: "object",
                            description:
                              'An RFC 7807 inspired "problem JSON" object.',
                            title: "Problem",
                            properties: {
                              status: {
                                type: "integer",
                                format: "int32",
                                description:
                                  "A well know HTTP status code (e.g. 200, 201, 400).",
                              },
                              title: {
                                type: "string",
                                description:
                                  "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                                example: "No user with the given id found",
                              },
                              detail: {
                                type: "string",
                                description:
                                  "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                                example:
                                  "User with id <id> was not found. Please ...",
                                nullable: true,
                              },
                              error_code: {
                                type: "string",
                                description:
                                  "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                                example: "USER_NOT_FOUND",
                                nullable: true,
                              },
                              property: {
                                type: "string",
                                description:
                                  "The technical property name from the API that caused the problem.",
                                example: "user_id",
                                nullable: true,
                              },
                            },
                            required: ["status", "title"],
                          },
                        },
                        required: ["id", "status"],
                      },
                    },
                  },
                  required: ["items"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "create-channel-user-assignment",
            title: "Create User Assignment",
            description:
              "Assigns a user to the channel with the specified role.",
            path: "/api/admin/channels/v4/channels/{channel_id}/assignments/users/{user_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "ASSIGNMENT_ALREADY_EXISTS",
              "CHANNEL_DOES_NOT_EXIST",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "channel_id",
                    type: "string",
                    description:
                      "The primary identifier of the channel to access.",
                    required: true,
                  },
                  {
                    name: "user_id",
                    type: "string",
                    description: "The primary identifier of the user.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "role",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "201",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "role",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "user",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "is_deleted",
                        type: "boolean",
                        description: "",
                        required: false,
                      },
                      {
                        name: "first_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "last_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "profile_picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "type",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"role\\":\\"MEMBER\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id" {:content-type :json\n                                                                                                          :form-params {:role "MEMBER"}\n                                                                                                          :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"role\\":\\"MEMBER\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"role\\":\\"MEMBER\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/channels/v4/channels/channel_id/assignments/users/user_id HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 17\r\n\r\n{"role":"MEMBER"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id"\n\n\tpayload := strings.NewReader("{\\"role\\":\\"MEMBER\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"role\\":\\"MEMBER\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({role: 'MEMBER'})\n};\n\nfetch('http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"role\\":\\"MEMBER\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({role: 'MEMBER'})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"role": @"MEMBER" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"role\\":\\"MEMBER\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id', [\n  'body' => '{\"role\":\"MEMBER\"}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"role":"MEMBER"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id"\n\npayload = {"role": "MEMBER"}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id"\n\npayload <- "{\\"role\\":\\"MEMBER\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"role\\":\\"MEMBER\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '{\"role\":\"MEMBER\"}'",
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["role": "MEMBER"] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/users/user_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/channels/v4/channels/{channel_id}/assignments/users/{user_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "201":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "role": "MEMBER",\n  "user": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "is_deleted": true,\n    "first_name": "Jon",\n    "last_name": "Doe",\n    "department": "Marketing",\n    "profile_picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "type": "MANUAL"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: { type: "string", format: "uuid" },
                    role: { type: "string", enum: ["MEMBER", "ADMIN"] },
                    user: {
                      type: "object",
                      nullable: true,
                      properties: {
                        id: { type: "string", format: "uuid" },
                        is_deleted: { type: "boolean" },
                        first_name: { type: "string", example: "Jon" },
                        last_name: { type: "string", example: "Doe" },
                        department: {
                          type: "string",
                          example: "Marketing",
                          nullable: true,
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                      required: ["id", "is_deleted", "first_name", "last_name"],
                    },
                    type: { type: "string", enum: ["MANUAL", "USER_GROUP"] },
                  },
                  required: ["id", "role", "type"],
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
      {
        id: "assigned-user-groups",
        title: "Assigned User Groups",
        shortDescription: "",
        endpoints: [
          {
            id: "get-channel-user-group-assignments",
            title: "Get Channel User Group Assignments",
            description:
              "Gets all user groups that are assigned to the channel.",
            path: "/api/admin/channels/v4/channels/{channel_id}/assignments/user-groups",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "channel_id",
                    type: "string",
                    description:
                      "The primary identifier of the channel to access.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs a a match in the user groups' name.",
                    required: false,
                  },
                  {
                    name: "embed",
                    type: "array",
                    description:
                      'Defines the values to embed into the response body.\nRefer to our general "embedding" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "USER_GROUP",
                        "USER_GROUP_MEMBER_COUNT",
                        "USER_GROUP_PATH",
                      ],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "assignments",
                    type: "array",
                    description:
                      "An array of all retrieved channel user group assignments, according to the pagination and sort arguments.",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        user_group: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            title: {
                              type: "object",
                              properties: {
                                language: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                text: {
                                  type: "string",
                                  description: "Title of the User Group",
                                  maxLength: 120,
                                  example: "Marketing",
                                },
                              },
                              required: ["language", "text"],
                            },
                            status: {
                              type: "string",
                              enum: ["ACTIVE", "ARCHIVED"],
                            },
                          },
                          required: ["id", "title", "status"],
                        },
                        user_group_member_count: {
                          type: "integer",
                          format: "int32",
                          description:
                            "The number of users that are in the user group (directly and indirectly).",
                        },
                        user_group_path: {
                          type: "array",
                          description:
                            "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                          items: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the User Group",
                                    maxLength: 120,
                                    example: "Marketing",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              status: {
                                type: "string",
                                enum: ["ACTIVE", "ARCHIVED"],
                              },
                            },
                            required: ["id", "title", "status"],
                          },
                        },
                      },
                      required: ["id"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/channels/v4/channels/channel_id/assignments/user-groups HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/channels/v4/channels/{channel_id}/assignments/user-groups",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "assignments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "user_group": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "title": {\n          "language": "en-GB",\n          "text": "Marketing"\n        },\n        "status": "ACTIVE"\n      },\n      "user_group_member_count": 0,\n      "user_group_path": [\n        {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "title": {\n            "language": "en-GB",\n            "text": "Marketing"\n          },\n          "status": "ACTIVE"\n        }\n      ]\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    assignments: {
                      type: "array",
                      description:
                        "An array of all retrieved channel user group assignments, according to the pagination and sort arguments.",
                      items: {
                        type: "object",
                        properties: {
                          id: { type: "string", format: "uuid" },
                          user_group: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the User Group",
                                    maxLength: 120,
                                    example: "Marketing",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              status: {
                                type: "string",
                                enum: ["ACTIVE", "ARCHIVED"],
                              },
                            },
                            required: ["id", "title", "status"],
                          },
                          user_group_member_count: {
                            type: "integer",
                            format: "int32",
                            description:
                              "The number of users that are in the user group (directly and indirectly).",
                          },
                          user_group_path: {
                            type: "array",
                            description:
                              "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                            items: {
                              type: "object",
                              properties: {
                                id: {
                                  type: "string",
                                  description:
                                    "Unique identifier of a user group.",
                                  format: "uuid",
                                },
                                title: {
                                  type: "object",
                                  properties: {
                                    language: {
                                      type: "string",
                                      description:
                                        "A locale representing a language and region.",
                                      format: "bcp47",
                                      pattern:
                                        "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                      example: "en-GB",
                                    },
                                    text: {
                                      type: "string",
                                      description: "Title of the User Group",
                                      maxLength: 120,
                                      example: "Marketing",
                                    },
                                  },
                                  required: ["language", "text"],
                                },
                                status: {
                                  type: "string",
                                  enum: ["ACTIVE", "ARCHIVED"],
                                },
                              },
                              required: ["id", "title", "status"],
                            },
                          },
                        },
                        required: ["id"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["assignments", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "create-channel-user-group-assignments-batch",
            title: "Create Multiple User Group Assignments",
            description:
              "Creates channel assignments for multiple user groups. For the actual semantics of assigning groups, consult the documentation of the single assignment endpoint.",
            path: "/api/admin/channels/v4/channels/{channel_id}/assignments/user-groups/batch",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "channel_id",
                    type: "string",
                    description:
                      "The primary identifier of the channel to access.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      description:
                        "A single channel user group assignment that should be created.\n",
                      properties: { id: { type: "string", format: "uuid" } },
                      required: ["id"],
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        status: {
                          type: "integer",
                          format: "int32",
                          description:
                            "A well know HTTP status code (e.g. 200, 201, 400).",
                        },
                        body: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            user_group: {
                              type: "object",
                              properties: {
                                id: {
                                  type: "string",
                                  description:
                                    "Unique identifier of a user group.",
                                  format: "uuid",
                                },
                                title: {
                                  type: "object",
                                  properties: {
                                    language: {
                                      type: "string",
                                      description:
                                        "A locale representing a language and region.",
                                      format: "bcp47",
                                      pattern:
                                        "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                      example: "en-GB",
                                    },
                                    text: {
                                      type: "string",
                                      description: "Title of the User Group",
                                      maxLength: 120,
                                      example: "Marketing",
                                    },
                                  },
                                  required: ["language", "text"],
                                },
                                status: {
                                  type: "string",
                                  enum: ["ACTIVE", "ARCHIVED"],
                                },
                              },
                              required: ["id", "title", "status"],
                            },
                            user_group_member_count: {
                              type: "integer",
                              format: "int32",
                              description:
                                "The number of users that are in the user group (directly and indirectly).",
                            },
                            user_group_path: {
                              type: "array",
                              description:
                                "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                              items: {
                                type: "object",
                                properties: {
                                  id: {
                                    type: "string",
                                    description:
                                      "Unique identifier of a user group.",
                                    format: "uuid",
                                  },
                                  title: {
                                    type: "object",
                                    properties: {
                                      language: {
                                        type: "string",
                                        description:
                                          "A locale representing a language and region.",
                                        format: "bcp47",
                                        pattern:
                                          "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                        example: "en-GB",
                                      },
                                      text: {
                                        type: "string",
                                        description: "Title of the User Group",
                                        maxLength: 120,
                                        example: "Marketing",
                                      },
                                    },
                                    required: ["language", "text"],
                                  },
                                  status: {
                                    type: "string",
                                    enum: ["ACTIVE", "ARCHIVED"],
                                  },
                                },
                                required: ["id", "title", "status"],
                              },
                            },
                          },
                          required: ["id"],
                        },
                        error: {
                          type: "object",
                          description:
                            'An RFC 7807 inspired "problem JSON" object.',
                          title: "Problem",
                          properties: {
                            status: {
                              type: "integer",
                              format: "int32",
                              description:
                                "A well know HTTP status code (e.g. 200, 201, 400).",
                            },
                            title: {
                              type: "string",
                              description:
                                "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                              example: "No user with the given id found",
                            },
                            detail: {
                              type: "string",
                              description:
                                "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                              example:
                                "User with id <id> was not found. Please ...",
                              nullable: true,
                            },
                            error_code: {
                              type: "string",
                              description:
                                "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                              example: "USER_NOT_FOUND",
                              nullable: true,
                            },
                            property: {
                              type: "string",
                              description:
                                "The technical property name from the API that caused the problem.",
                              example: "user_id",
                              nullable: true,
                            },
                          },
                          required: ["status", "title"],
                        },
                      },
                      required: ["id", "type", "status"],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch" {:content-type :json\n                                                                                                              :form-params {:items [{:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"}]}\n                                                                                                              :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 57\r\n\r\n{"items":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch"\n\n\tpayload := strings.NewReader("{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}]}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({items: [{id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'}]})\n};\n\nfetch('http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({items: [{id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'}]})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"items": @[ @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}]}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch', [\n  'body' => '{\"items\":[{\"id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"}]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"items":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch"\n\npayload = {"items": [{"id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"}]}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch"\n\npayload <- "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}]}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"items\": [\n    {\n      \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n    }\n  ]\n}\n'",
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["items": [["id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"]]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/batch")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/channels/v4/channels/{channel_id}/assignments/user-groups/batch",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "items": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "status": 0,\n      "body": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "user_group": {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "title": {\n            "language": "en-GB",\n            "text": "Marketing"\n          },\n          "status": "ACTIVE"\n        },\n        "user_group_member_count": 0,\n        "user_group_path": [\n          {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "title": {\n              "language": "en-GB",\n              "text": "Marketing"\n            },\n            "status": "ACTIVE"\n          }\n        ]\n      },\n      "error": {\n        "status": 0,\n        "title": "No user with the given id found",\n        "detail": "User with id <id> was not found. Please ...",\n        "error_code": "USER_NOT_FOUND",\n        "property": "user_id"\n      }\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    items: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: { type: "string", format: "uuid" },
                          status: {
                            type: "integer",
                            format: "int32",
                            description:
                              "A well know HTTP status code (e.g. 200, 201, 400).",
                          },
                          body: {
                            type: "object",
                            properties: {
                              id: { type: "string", format: "uuid" },
                              user_group: {
                                type: "object",
                                properties: {
                                  id: {
                                    type: "string",
                                    description:
                                      "Unique identifier of a user group.",
                                    format: "uuid",
                                  },
                                  title: {
                                    type: "object",
                                    properties: {
                                      language: {
                                        type: "string",
                                        description:
                                          "A locale representing a language and region.",
                                        format: "bcp47",
                                        pattern:
                                          "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                        example: "en-GB",
                                      },
                                      text: {
                                        type: "string",
                                        description: "Title of the User Group",
                                        maxLength: 120,
                                        example: "Marketing",
                                      },
                                    },
                                    required: ["language", "text"],
                                  },
                                  status: {
                                    type: "string",
                                    enum: ["ACTIVE", "ARCHIVED"],
                                  },
                                },
                                required: ["id", "title", "status"],
                              },
                              user_group_member_count: {
                                type: "integer",
                                format: "int32",
                                description:
                                  "The number of users that are in the user group (directly and indirectly).",
                              },
                              user_group_path: {
                                type: "array",
                                description:
                                  "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                                items: {
                                  type: "object",
                                  properties: {
                                    id: {
                                      type: "string",
                                      description:
                                        "Unique identifier of a user group.",
                                      format: "uuid",
                                    },
                                    title: {
                                      type: "object",
                                      properties: {
                                        language: {
                                          type: "string",
                                          description:
                                            "A locale representing a language and region.",
                                          format: "bcp47",
                                          pattern:
                                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                          example: "en-GB",
                                        },
                                        text: {
                                          type: "string",
                                          description:
                                            "Title of the User Group",
                                          maxLength: 120,
                                          example: "Marketing",
                                        },
                                      },
                                      required: ["language", "text"],
                                    },
                                    status: {
                                      type: "string",
                                      enum: ["ACTIVE", "ARCHIVED"],
                                    },
                                  },
                                  required: ["id", "title", "status"],
                                },
                              },
                            },
                            required: ["id"],
                          },
                          error: {
                            type: "object",
                            description:
                              'An RFC 7807 inspired "problem JSON" object.',
                            title: "Problem",
                            properties: {
                              status: {
                                type: "integer",
                                format: "int32",
                                description:
                                  "A well know HTTP status code (e.g. 200, 201, 400).",
                              },
                              title: {
                                type: "string",
                                description:
                                  "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                                example: "No user with the given id found",
                              },
                              detail: {
                                type: "string",
                                description:
                                  "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                                example:
                                  "User with id <id> was not found. Please ...",
                                nullable: true,
                              },
                              error_code: {
                                type: "string",
                                description:
                                  "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                                example: "USER_NOT_FOUND",
                                nullable: true,
                              },
                              property: {
                                type: "string",
                                description:
                                  "The technical property name from the API that caused the problem.",
                                example: "user_id",
                                nullable: true,
                              },
                            },
                            required: ["status", "title"],
                          },
                        },
                        required: ["id", "type", "status"],
                      },
                    },
                  },
                  required: ["items"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "create-channel-user-group-assignment",
            title: "Create User Group Assignment",
            description:
              "Assigns a user group to the channel. All users with that are assigned to the user group or any descendent will be assigned to the channel.\nAny existing channel user assignments for users that are part of this user group will be managed by the user group after this call.",
            path: "/api/admin/channels/v4/channels/{channel_id}/assignments/user-groups/{user_group_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "ASSIGNMENT_ALREADY_EXISTS",
              "CHANNEL_DOES_NOT_EXIST",
              "INVALID_USER_GROUP",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "channel_id",
                    type: "string",
                    description:
                      "The primary identifier of the channel to access.",
                    required: true,
                  },
                  {
                    name: "user_group_id",
                    type: "string",
                    description: "The primary identifier of the user group.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "201",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "user_group",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the User Group",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "status",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "user_group_member_count",
                    type: "integer",
                    description:
                      "The number of users that are in the user group (directly and indirectly).",
                    required: false,
                  },
                  {
                    name: "user_group_path",
                    type: "array",
                    description:
                      "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "POST /api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id"\n\n\treq, _ := http.NewRequest("POST", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id';\nconst options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id\' -Method POST -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id"\n\nresponse <- VERB("POST", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/channels/v4/channels/channel_id/assignments/user-groups/user_group_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/channels/v4/channels/{channel_id}/assignments/user-groups/{user_group_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "201":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user_group": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "Marketing"\n    },\n    "status": "ACTIVE"\n  },\n  "user_group_member_count": 0,\n  "user_group_path": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "title": {\n        "language": "en-GB",\n        "text": "Marketing"\n      },\n      "status": "ACTIVE"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: { type: "string", format: "uuid" },
                    user_group: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                    user_group_member_count: {
                      type: "integer",
                      format: "int32",
                      description:
                        "The number of users that are in the user group (directly and indirectly).",
                    },
                    user_group_path: {
                      type: "array",
                      description:
                        "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "Unique identifier of a user group.",
                            format: "uuid",
                          },
                          title: {
                            type: "object",
                            properties: {
                              language: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              text: {
                                type: "string",
                                description: "Title of the User Group",
                                maxLength: 120,
                                example: "Marketing",
                              },
                            },
                            required: ["language", "text"],
                          },
                          status: {
                            type: "string",
                            enum: ["ACTIVE", "ARCHIVED"],
                          },
                        },
                        required: ["id", "title", "status"],
                      },
                    },
                  },
                  required: ["id"],
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
      {
        id: "channels",
        title: "Channels",
        shortDescription: "",
        endpoints: [
          {
            id: "get-channels",
            title: "Get Channels",
            description: "Gets all channels that are visible to the user.",
            path: "/api/admin/channels/v4/channels",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs a a match in the channel's name.",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "CHANNEL_NAME_ASC",
                        "CHANNEL_NAME_DESC",
                        "CREATED_AT_ASC",
                        "CREATED_AT_DESC",
                        "MEMBER_COUNT_ASC",
                        "MEMBER_COUNT_DESC",
                      ],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "channels",
                    type: "array",
                    description:
                      "An array of all retrieved channels, according to the pagination and sort arguments.",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        channel_id: {
                          type: "string",
                          format: "uuid",
                          description: "The primary identifier of the channel.",
                        },
                        name: {
                          type: "string",
                          example: "My Channel",
                          description: "The name of the channel.",
                        },
                        description: {
                          type: "string",
                          example: "My Channel Description",
                          description: "The description of the channel.",
                        },
                        avatar_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The primary identifier of the avatar of the channel.",
                        },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The date and time when the channel was created.",
                        },
                        member_count: {
                          type: "integer",
                          format: "int32",
                          description:
                            "The number of users that are in the channel (directly and indirectly).",
                        },
                        channel_settings: {
                          type: "object",
                          properties: {
                            reactions_enabled: {
                              type: "boolean",
                              description:
                                "Indicates whether the post reactions are enabled for the channel.",
                            },
                            comments_enabled: {
                              type: "boolean",
                              description:
                                "Indicates whether the post comments are enabled for the channel.",
                            },
                            show_download_button_for_media: {
                              type: "boolean",
                              description:
                                "Indicates whether the download button for media is shown for the channel.",
                            },
                            show_download_button_for_pdf: {
                              type: "boolean",
                              description:
                                "Indicates whether the download button for pdf is shown for the channel.",
                            },
                            show_posts_in_newsfeed: {
                              type: "boolean",
                              description:
                                "Indicates whether the posts of the channel are shown in the newsfeed.",
                            },
                            hide_member_list: {
                              type: "boolean",
                              description:
                                "Indicates whether the member list of the channel is hidden.",
                            },
                            allow_members_to_leave_and_join: {
                              type: "boolean",
                              description:
                                "Indicates whether members can leave and join the channel.",
                            },
                          },
                          required: [
                            "reactions_enabled",
                            "comments_enabled",
                            "show_download_button_for_media",
                            "show_download_button_for_pdf",
                            "show_posts_in_newsfeed",
                            "hide_member_list",
                            "allow_members_to_leave_and_join",
                          ],
                        },
                      },
                      required: [
                        "channel_id",
                        "name",
                        "created_at",
                        "member_count",
                        "channel_settings",
                        "pagination",
                      ],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/channels/v4/channels" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/channels/v4/channels");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/channels/v4/channels");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/channels/v4/channels HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/channels/v4/channels"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/channels/v4/channels', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/channels/v4/channels")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/channels/v4/channels';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/channels/v4/channels"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/channels/v4/channels" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/channels/v4/channels', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/channels/v4/channels\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/channels/v4/channels"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/channels/v4/channels"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/channels/v4/channels\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/channels/v4/channels \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/channels/v4/channels")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/channels/v4/channels",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "channels": [\n    {\n      "channel_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "name": "My Channel",\n      "description": "My Channel Description",\n      "avatar_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "created_at": "2024-01-11T07:41:25.662Z",\n      "member_count": 0,\n      "channel_settings": {\n        "reactions_enabled": true,\n        "comments_enabled": true,\n        "show_download_button_for_media": true,\n        "show_download_button_for_pdf": true,\n        "show_posts_in_newsfeed": true,\n        "hide_member_list": true,\n        "allow_members_to_leave_and_join": true\n      }\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    channels: {
                      type: "array",
                      description:
                        "An array of all retrieved channels, according to the pagination and sort arguments.",
                      items: {
                        type: "object",
                        properties: {
                          channel_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The primary identifier of the channel.",
                          },
                          name: {
                            type: "string",
                            example: "My Channel",
                            description: "The name of the channel.",
                          },
                          description: {
                            type: "string",
                            example: "My Channel Description",
                            description: "The description of the channel.",
                          },
                          avatar_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The primary identifier of the avatar of the channel.",
                          },
                          created_at: {
                            type: "string",
                            format: "date-time",
                            description:
                              "The date and time when the channel was created.",
                          },
                          member_count: {
                            type: "integer",
                            format: "int32",
                            description:
                              "The number of users that are in the channel (directly and indirectly).",
                          },
                          channel_settings: {
                            type: "object",
                            properties: {
                              reactions_enabled: {
                                type: "boolean",
                                description:
                                  "Indicates whether the post reactions are enabled for the channel.",
                              },
                              comments_enabled: {
                                type: "boolean",
                                description:
                                  "Indicates whether the post comments are enabled for the channel.",
                              },
                              show_download_button_for_media: {
                                type: "boolean",
                                description:
                                  "Indicates whether the download button for media is shown for the channel.",
                              },
                              show_download_button_for_pdf: {
                                type: "boolean",
                                description:
                                  "Indicates whether the download button for pdf is shown for the channel.",
                              },
                              show_posts_in_newsfeed: {
                                type: "boolean",
                                description:
                                  "Indicates whether the posts of the channel are shown in the newsfeed.",
                              },
                              hide_member_list: {
                                type: "boolean",
                                description:
                                  "Indicates whether the member list of the channel is hidden.",
                              },
                              allow_members_to_leave_and_join: {
                                type: "boolean",
                                description:
                                  "Indicates whether members can leave and join the channel.",
                              },
                            },
                            required: [
                              "reactions_enabled",
                              "comments_enabled",
                              "show_download_button_for_media",
                              "show_download_button_for_pdf",
                              "show_posts_in_newsfeed",
                              "hide_member_list",
                              "allow_members_to_leave_and_join",
                            ],
                          },
                        },
                        required: [
                          "channel_id",
                          "name",
                          "created_at",
                          "member_count",
                          "channel_settings",
                          "pagination",
                        ],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["channels", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
    ],
  },
  {
    id: "channels",
    title: "Channels",
    resources: [
      {
        id: "post-comments",
        title: "Post Comments",
        shortDescription: "",
        endpoints: [
          {
            id: "post-comment-report",
            title: "Report a Comment.",
            description: "Report a comment.",
            path: "/api/channels/v4/{channel_id}/posts/{post_id}/comments/{comment_id}/reports",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "channel_id",
                    type: "string",
                    description:
                      "The primary identifier of the channel to access.",
                    required: true,
                  },
                  {
                    name: "post_id",
                    type: "string",
                    description:
                      "The primary identifier of the post to access.",
                    required: true,
                  },
                  {
                    name: "comment_id",
                    type: "string",
                    description:
                      "The primary identifier of the comment to access.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "201", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);',
                http: "POST /api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports"\n\n\treq, _ := http.NewRequest("POST", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'POST'};\n\nfetch('http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports")\n  .post(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports';\nconst options = {method: 'POST'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports" in\n\nClient.call `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports' -Method POST",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports"\n\nresponse = requests.post(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports"\n\nresponse <- VERB("POST", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/channels/v4/channel_id/posts/post_id/comments/comment_id/reports")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/channels/v4/{channel_id}/posts/{post_id}/comments/{comment_id}/reports",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "201" }],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
      {
        id: "posts",
        title: "Posts",
        shortDescription: "",
        endpoints: [
          {
            id: "get-aggregated-post-count",
            title:
              "Get aggregated Post Count (unread and scheduled) across all channels for the calling user.",
            description: "",
            path: "/api/channels/v4/posts/aggregated-count",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "unread_newsfeed_post_count",
                    type: "integer",
                    description:
                      "The aggregated number of unread posts across all channels.",
                    required: false,
                  },
                  {
                    name: "scheduled_post_count",
                    type: "integer",
                    description:
                      "The aggregated number of scheduled posts across all channels where the user is channel admin.",
                    required: false,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/channels/v4/posts/aggregated-count");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/channels/v4/posts/aggregated-count" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/channels/v4/posts/aggregated-count");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/channels/v4/posts/aggregated-count");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/channels/v4/posts/aggregated-count HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/channels/v4/posts/aggregated-count"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/channels/v4/posts/aggregated-count")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/channels/v4/posts/aggregated-count', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/channels/v4/posts/aggregated-count")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/channels/v4/posts/aggregated-count';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/channels/v4/posts/aggregated-count"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/channels/v4/posts/aggregated-count" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/channels/v4/posts/aggregated-count', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/channels/v4/posts/aggregated-count\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/channels/v4/posts/aggregated-count"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/channels/v4/posts/aggregated-count"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/channels/v4/posts/aggregated-count\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/channels/v4/posts/aggregated-count \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/channels/v4/posts/aggregated-count")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/channels/v4/posts/aggregated-count",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "unread_newsfeed_post_count": 0,\n  "scheduled_post_count": 0\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    unread_newsfeed_post_count: {
                      type: "integer",
                      description:
                        "The aggregated number of unread posts across all channels.",
                    },
                    scheduled_post_count: {
                      type: "integer",
                      description:
                        "The aggregated number of scheduled posts across all channels where the user is channel admin.",
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
    ],
  },
  {
    id: "files",
    title: "Files",
    resources: [
      {
        id: "files",
        title: "Files",
        shortDescription: "",
        endpoints: [
          {
            id: "create-file",
            title: "Create a new file",
            description:
              "Registers a new file for this user and creates a upload url to use.",
            path: "/api/files/v4/files",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "file_name",
                    type: "string",
                    description: "The name of the file.",
                    required: true,
                  },
                  {
                    name: "media_type_hint",
                    type: "string",
                    description:
                      "A hint indicating which type of media will be uploaded. The media type mainly drives how files will be transcoded and displayed in the UI. If not provided, the media type will be inferred from the MIME type of the uploaded file.\n",
                    required: false,
                  },
                ],
              },
            ],
            responseBody: [{ title: "201", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/files/v4/files");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"file_name\\":\\"string\\",\\"media_type_hint\\":\\"VIDEO\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/files/v4/files" {:content-type :json\n                                                         :form-params {:file_name "string"\n                                                                       :media_type_hint "VIDEO"}\n                                                         :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/files/v4/files");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"file_name\\":\\"string\\",\\"media_type_hint\\":\\"VIDEO\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/files/v4/files");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"file_name\\":\\"string\\",\\"media_type_hint\\":\\"VIDEO\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/files/v4/files HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 48\r\n\r\n{"file_name":"string","media_type_hint":"VIDEO"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/files/v4/files"\n\n\tpayload := strings.NewReader("{\\"file_name\\":\\"string\\",\\"media_type_hint\\":\\"VIDEO\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"file_name\\":\\"string\\",\\"media_type_hint\\":\\"VIDEO\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/files/v4/files")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({file_name: 'string', media_type_hint: 'VIDEO'})\n};\n\nfetch('http://localhost:3000/api/files/v4/files', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"file_name\\":\\"string\\",\\"media_type_hint\\":\\"VIDEO\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/files/v4/files")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/files/v4/files';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({file_name: 'string', media_type_hint: 'VIDEO'})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"file_name": @"string",\n                              @"media_type_hint": @"VIDEO" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/files/v4/files"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/files/v4/files" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"file_name\\":\\"string\\",\\"media_type_hint\\":\\"VIDEO\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/files/v4/files', [\n  'body' => '{\"file_name\":\"string\",\"media_type_hint\":\"VIDEO\"}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/files/v4/files\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"file_name":"string","media_type_hint":"VIDEO"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/files/v4/files"\n\npayload = {\n    "file_name": "string",\n    "media_type_hint": "VIDEO"\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/files/v4/files"\n\npayload <- "{\\"file_name\\":\\"string\\",\\"media_type_hint\\":\\"VIDEO\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/files/v4/files")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"file_name\\":\\"string\\",\\"media_type_hint\\":\\"VIDEO\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/files/v4/files \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "file_name": "string",\n  "media_type_hint": "VIDEO"\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "file_name": "string",\n  "media_type_hint": "VIDEO"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/files/v4/files")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/files/v4/files",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "201":
                '{\n  "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "status": "WAITING_FOR_UPLOAD",\n  "failure_reason": "BAD_FILE",\n  "signed_url": "string",\n  "url_expiry_date": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  allOf: [
                    {
                      type: "object",
                      required: ["file_id", "status"],
                      properties: {
                        file_id: {
                          type: "string",
                          format: "uuid",
                          description: "The ID of the file.",
                        },
                        status: {
                          type: "string",
                          description:
                            "The current status of the file: - `WAITING_FOR_UPLOAD` - The file entity has been created and is waiting for the data to be uploaded. - `IN_PROGRESS` - The file is being processed internally (e.g. malware scan or thumbnail generation). - `FINISHED` - The file has been processed completely. - `FAILURE` - The file has failed to be processed. Details can be found in `failure_reason`.\n",
                          enum: [
                            "WAITING_FOR_UPLOAD",
                            "IN_PROGRESS",
                            "FINISHED",
                            "FAILURE",
                          ],
                        },
                        failure_reason: {
                          type: "string",
                          enum: ["BAD_FILE", "MALWARE", "INTERNAL_ERROR"],
                        },
                      },
                    },
                    {
                      type: "object",
                      required: ["signed_url", "url_expiry_date"],
                      properties: {
                        signed_url: {
                          type: "string",
                          description: "The signed URL to upload the file to.",
                        },
                        url_expiry_date: {
                          type: "string",
                          format: "date-time",
                          description: "The expiry date of the signed URL.",
                        },
                      },
                    },
                  ],
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "get-file",
            title: "Get Metadata about an uploaded file.",
            description: "Returns a file by its ID.",
            path: "/api/files/v4/files/{file_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "file_id",
                    type: "string",
                    description: "The ID of the file.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "file_id",
                    type: "string",
                    description: "The ID of the file.",
                    required: true,
                  },
                  {
                    name: "status",
                    type: "string",
                    description:
                      "The current status of the file: - `WAITING_FOR_UPLOAD` - The file entity has been created and is waiting for the data to be uploaded. - `IN_PROGRESS` - The file is being processed internally (e.g. malware scan or thumbnail generation). - `FINISHED` - The file has been processed completely. - `FAILURE` - The file has failed to be processed. Details can be found in `failure_reason`.\n",
                    required: true,
                  },
                  {
                    name: "failure_reason",
                    type: "string",
                    description: "",
                    required: false,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/files/v4/files/file_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/files/v4/files/file_id" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/files/v4/files/file_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/files/v4/files/file_id");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/files/v4/files/file_id HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/files/v4/files/file_id"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/files/v4/files/file_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/files/v4/files/file_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/files/v4/files/file_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/files/v4/files/file_id';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/files/v4/files/file_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/files/v4/files/file_id" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/files/v4/files/file_id', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/files/v4/files/file_id\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/files/v4/files/file_id"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/files/v4/files/file_id"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/files/v4/files/file_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/files/v4/files/file_id \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/files/v4/files/file_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/files/v4/files/{file_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "status": "WAITING_FOR_UPLOAD",\n  "failure_reason": "BAD_FILE"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  required: ["file_id", "status"],
                  properties: {
                    file_id: {
                      type: "string",
                      format: "uuid",
                      description: "The ID of the file.",
                    },
                    status: {
                      type: "string",
                      description:
                        "The current status of the file: - `WAITING_FOR_UPLOAD` - The file entity has been created and is waiting for the data to be uploaded. - `IN_PROGRESS` - The file is being processed internally (e.g. malware scan or thumbnail generation). - `FINISHED` - The file has been processed completely. - `FAILURE` - The file has failed to be processed. Details can be found in `failure_reason`.\n",
                      enum: [
                        "WAITING_FOR_UPLOAD",
                        "IN_PROGRESS",
                        "FINISHED",
                        "FAILURE",
                      ],
                    },
                    failure_reason: {
                      type: "string",
                      enum: ["BAD_FILE", "MALWARE", "INTERNAL_ERROR"],
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
    ],
  },
  {
    id: "navigation",
    title: "Navigation",
    resources: [
      {
        id: "menu-items",
        title: "Menu Items",
        shortDescription: "",
        endpoints: [
          {
            id: "get-menu-items",
            title: "Get menu items",
            description:
              "Get all menu items for the user groups where the acting user has the permission to maintain menu items.",
            path: "/api/admin/navigation/v4/menu-items",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "To perform searches, provide a string value.\nThe value should consist of one or more tokens, separated by white spaces\nor the | character.\nEach token represents a search criterion that must match\ncase-insensitively in at least one searchable field.\nIf multiple tokens are included, they are combined using the logical OR operator.\nThis means that the results will include items where at least one of the tokens\nmatches in any of the searchable fields.",
                    required: false,
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      "This parameter allows you to customize the order in which menu items are displayed.\nBy default, menu items are sorted based on their updated_at attribute in descending order,\nmeaning the most recently updated menu items appear at the top of the list.\nYou can use this parameter to change the sorting order according to your preference.\nPlease note that if no sort parameter is provided, the default sorting behavior based on\nupdated_at in descending order will be applied.",
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "NAME_ASC",
                        "NAME_DESC",
                        "CREATED_AT_ASC",
                        "CREATED_AT_DESC",
                        "UPDATED_AT_ASC",
                        "UPDATED_AT_DESC",
                      ],
                    },
                  },
                  {
                    name: "status",
                    type: "array",
                    description:
                      "This parameter allows you to return only the menu items which match one of the given values.",
                    required: false,
                    items: { type: "string", enum: ["ACTIVE", "INACTIVE"] },
                  },
                  {
                    name: "embed",
                    type: "array",
                    description:
                      'Defines the values to embed into the response body.\nRefer to our general "embedment" concept for more information.',
                    required: false,
                    items: { type: "string", enum: ["USER_GROUP"] },
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "menu_items",
                    type: "array",
                    description:
                      "An array of all retrieved menu items, according to the pagination and sort arguments.",
                    required: true,
                    items: {
                      type: "object",
                      required: [
                        "id",
                        "user_group_id",
                        "url",
                        "names",
                        "display_type",
                        "icon",
                        "position",
                        "background_image_id",
                        "status",
                        "published_at",
                        "createdAt",
                        "updatedAt",
                      ],
                      properties: {
                        id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the menu item.",
                        },
                        user_group_id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        user_group: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            title: {
                              type: "object",
                              properties: {
                                language: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                text: {
                                  type: "string",
                                  description: "Title of the User Group",
                                  maxLength: 120,
                                  example: "Marketing",
                                },
                              },
                              required: ["language", "text"],
                            },
                            status: {
                              type: "string",
                              enum: ["ACTIVE", "ARCHIVED"],
                            },
                          },
                          required: ["id", "title", "status"],
                        },
                        url: {
                          type: "string",
                          pattern: "^(https://|mailto:)(.+)$",
                          minLength: 7,
                          maxLength: 2048,
                          description:
                            "The url specifies the target of the menu item.\nThe url has to be prefixed either by 'https://' or 'mailto:'",
                        },
                        names: {
                          type: "array",
                          minItems: 1,
                          maxItems: 50,
                          items: {
                            type: "object",
                            description:
                              "The name for the menu item which fits the specified locale.\nThe locale has to be enabled in the organization which is assigned to the current tenant.",
                            required: ["locale", "name"],
                            properties: {
                              locale: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              name: { type: "string" },
                            },
                          },
                        },
                        display_type: {
                          type: "string",
                          description:
                            "The following display types are supported:\n\n- `SYSTEM_BROWSER`: The URL will be opened in the system's default web browser.\n- `IFRAME`: The URL will be displayed in the app. Through a back button the user is able to navigate back.\n  Some websites do not allow iframe embeds. It's recommended to test the URL compatibility before entering it.\n- `FLIP_BROWSER`: The URL will be opened in Flip Browser.\n  The Flip Browser is shipped within the app package to mobile devices.",
                          enum: ["SYSTEM_BROWSER", "IFRAME", "FLIP_BROWSER"],
                        },
                        icon: {
                          type: "string",
                          minLength: 1,
                          maxLength: 30,
                          pattern: "^[a-zA-Z]+([_ ][a-zA-Z]+)*$",
                          example: "edit_calendar",
                          description:
                            "As of now, the following icon types are supported by the frontend components:\n\n- desktop_windows\n- loyalty\n- groups\n- help\n- backup\n- restaurant\n- lightbulb\n- instagram\n- favorite\n- language\n- maps_home_work\n- account_circle\n- info\n- thumbs_up_down\n- supervisor_account\n- bookmark\n- coronavirus\n- android\n- beach_access\n- event\n- savings\n- edit_calendar\n- alternate_email\n- work\n- cloud\n- folderv\n- announcement",
                        },
                        position: {
                          type: "integer",
                          description:
                            "Optional, only within creation operation. If no position is defined, the last position in the context of the entity linked to the menu item\nwill be automatically assigned incremented by 1.",
                          minimum: 1,
                        },
                        background_image_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the uploaded file which should be used as background image.\nIt has to be successfully uploaded before assigning it to a menu item in context of creation or update.",
                          nullable: true,
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "INACTIVE"],
                        },
                        published_at: {
                          type: "string",
                          format: "date-time",
                          nullable: true,
                          description:
                            "The point in time at which this resource was published.",
                        },
                        createdAt: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updatedAt: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                      },
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/navigation/v4/menu-items");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/navigation/v4/menu-items" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/navigation/v4/menu-items");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/navigation/v4/menu-items");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/navigation/v4/menu-items HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/navigation/v4/menu-items"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/navigation/v4/menu-items")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/navigation/v4/menu-items', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/navigation/v4/menu-items")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/navigation/v4/menu-items';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/navigation/v4/menu-items"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/navigation/v4/menu-items" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/navigation/v4/menu-items', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/navigation/v4/menu-items\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/navigation/v4/menu-items"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/navigation/v4/menu-items"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/navigation/v4/menu-items\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/navigation/v4/menu-items \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/navigation/v4/menu-items")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/navigation/v4/menu-items",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "menu_items": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "user_group": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "title": {\n          "language": "en-GB",\n          "text": "Marketing"\n        },\n        "status": "ACTIVE"\n      },\n      "url": "string",\n      "names": [\n        {\n          "locale": "en-GB",\n          "name": "string"\n        }\n      ],\n      "display_type": "SYSTEM_BROWSER",\n      "icon": "edit_calendar",\n      "position": 0,\n      "background_image_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "status": "ACTIVE",\n      "published_at": "2024-01-11T07:41:25.662Z",\n      "createdAt": "2024-01-11T07:41:25.662Z",\n      "updatedAt": "2024-01-11T07:41:25.662Z"\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  required: ["menu_items", "pagination"],
                  properties: {
                    menu_items: {
                      type: "array",
                      description:
                        "An array of all retrieved menu items, according to the pagination and sort arguments.",
                      items: {
                        type: "object",
                        required: [
                          "id",
                          "user_group_id",
                          "url",
                          "names",
                          "display_type",
                          "icon",
                          "position",
                          "background_image_id",
                          "status",
                          "published_at",
                          "createdAt",
                          "updatedAt",
                        ],
                        properties: {
                          id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the menu item.",
                          },
                          user_group_id: {
                            type: "string",
                            description: "Unique identifier of a user group.",
                            format: "uuid",
                          },
                          user_group: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the User Group",
                                    maxLength: 120,
                                    example: "Marketing",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              status: {
                                type: "string",
                                enum: ["ACTIVE", "ARCHIVED"],
                              },
                            },
                            required: ["id", "title", "status"],
                          },
                          url: {
                            type: "string",
                            pattern: "^(https://|mailto:)(.+)$",
                            minLength: 7,
                            maxLength: 2048,
                            description:
                              "The url specifies the target of the menu item.\nThe url has to be prefixed either by 'https://' or 'mailto:'",
                          },
                          names: {
                            type: "array",
                            minItems: 1,
                            maxItems: 50,
                            items: {
                              type: "object",
                              description:
                                "The name for the menu item which fits the specified locale.\nThe locale has to be enabled in the organization which is assigned to the current tenant.",
                              required: ["locale", "name"],
                              properties: {
                                locale: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                name: { type: "string" },
                              },
                            },
                          },
                          display_type: {
                            type: "string",
                            description:
                              "The following display types are supported:\n\n- `SYSTEM_BROWSER`: The URL will be opened in the system's default web browser.\n- `IFRAME`: The URL will be displayed in the app. Through a back button the user is able to navigate back.\n  Some websites do not allow iframe embeds. It's recommended to test the URL compatibility before entering it.\n- `FLIP_BROWSER`: The URL will be opened in Flip Browser.\n  The Flip Browser is shipped within the app package to mobile devices.",
                            enum: ["SYSTEM_BROWSER", "IFRAME", "FLIP_BROWSER"],
                          },
                          icon: {
                            type: "string",
                            minLength: 1,
                            maxLength: 30,
                            pattern: "^[a-zA-Z]+([_ ][a-zA-Z]+)*$",
                            example: "edit_calendar",
                            description:
                              "As of now, the following icon types are supported by the frontend components:\n\n- desktop_windows\n- loyalty\n- groups\n- help\n- backup\n- restaurant\n- lightbulb\n- instagram\n- favorite\n- language\n- maps_home_work\n- account_circle\n- info\n- thumbs_up_down\n- supervisor_account\n- bookmark\n- coronavirus\n- android\n- beach_access\n- event\n- savings\n- edit_calendar\n- alternate_email\n- work\n- cloud\n- folderv\n- announcement",
                          },
                          position: {
                            type: "integer",
                            description:
                              "Optional, only within creation operation. If no position is defined, the last position in the context of the entity linked to the menu item\nwill be automatically assigned incremented by 1.",
                            minimum: 1,
                          },
                          background_image_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the uploaded file which should be used as background image.\nIt has to be successfully uploaded before assigning it to a menu item in context of creation or update.",
                            nullable: true,
                          },
                          status: {
                            type: "string",
                            enum: ["ACTIVE", "INACTIVE"],
                          },
                          published_at: {
                            type: "string",
                            format: "date-time",
                            nullable: true,
                            description:
                              "The point in time at which this resource was published.",
                          },
                          createdAt: {
                            type: "string",
                            format: "date-time",
                            description:
                              "The point in time at which this resource was created.",
                          },
                          updatedAt: {
                            type: "string",
                            format: "date-time",
                            nullable: false,
                            description:
                              "The point in time at which this resource was last updated.",
                          },
                        },
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  description:
                    "Representation of a collection of menu items which can be maintained by the admin.",
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "create-menu-item",
            title: "Create a new menu item",
            description:
              "Creates a new menu item for a user group the acting user is admin for.\nThe creation for menu items that pertain to the specified user group is limited to 50.",
            path: "/api/admin/navigation/v4/menu-items",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "DISALLOWED_BACKGROUND_IMAGE_TYPE",
              "BACKGROUND_IMAGE_NOT_FOUND",
              "BACKGROUND_IMAGE_NOT_FULLY_PROCESSED",
              "BACKGROUND_IMAGE_FILE_NOT_FOUND",
              "DUPLICATE_ID",
              "DUPLICATE_POSITION_WITHIN_USER_GROUP",
              "MENU_ITEMS_PER_USER_GROUP_LIMIT_EXCEEDED",
              "MAX_LENGTH_EXCEEDED",
              "USER_GROUP_NOT_FOUND",
              "NOT_ADMIN_OF_USER_GROUP",
              "INVALID_URL",
              "LANGUAGE_NOT_ENABLED",
            ],
            parameters: [
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "The unique identifier of the menu item.",
                    required: false,
                  },
                  {
                    name: "user_group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                  {
                    name: "url",
                    type: "string",
                    description:
                      "The url specifies the target of the menu item.\nThe url has to be prefixed either by 'https://' or 'mailto:'",
                    required: true,
                  },
                  {
                    name: "names",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      description:
                        "The name for the menu item which fits the specified locale.\nThe locale has to be enabled in the organization which is assigned to the current tenant.",
                      required: ["locale", "name"],
                      properties: {
                        locale: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          examples: ["en-GB"],
                        },
                        name: { type: "string" },
                      },
                    },
                  },
                  {
                    name: "display_type",
                    type: "string",
                    description:
                      "The following display types are supported:\n\n- `SYSTEM_BROWSER`: The URL will be opened in the system's default web browser.\n- `IFRAME`: The URL will be displayed in the app. Through a back button the user is able to navigate back.\n  Some websites do not allow iframe embeds. It's recommended to test the URL compatibility before entering it.\n- `FLIP_BROWSER`: The URL will be opened in Flip Browser.\n  The Flip Browser is shipped within the app package to mobile devices.",
                    required: true,
                  },
                  {
                    name: "icon",
                    type: "string",
                    description:
                      "As of now, the following icon types are supported by the frontend components:\n\n- desktop_windows\n- loyalty\n- groups\n- help\n- backup\n- restaurant\n- lightbulb\n- instagram\n- favorite\n- language\n- maps_home_work\n- account_circle\n- info\n- thumbs_up_down\n- supervisor_account\n- bookmark\n- coronavirus\n- android\n- beach_access\n- event\n- savings\n- edit_calendar\n- alternate_email\n- work\n- cloud\n- folderv\n- announcement",
                    required: true,
                  },
                  {
                    name: "position",
                    type: "integer",
                    description:
                      "Optional, only within creation operation. If no position is defined, the last position in the context of the entity linked to the menu item\nwill be automatically assigned incremented by 1.",
                    required: false,
                  },
                  {
                    name: "background_image_id",
                    type: "string",
                    description:
                      "The unique identifier of the uploaded file which should be used as background image.\nIt has to be successfully uploaded before assigning it to a menu item in context of creation or update.",
                    required: false,
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "published_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was published.",
                    required: false,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "201",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "The unique identifier of the menu item.",
                    required: true,
                  },
                  {
                    name: "user_group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                  {
                    name: "user_group",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the User Group",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "status",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "url",
                    type: "string",
                    description:
                      "The url specifies the target of the menu item.\nThe url has to be prefixed either by 'https://' or 'mailto:'",
                    required: true,
                  },
                  {
                    name: "names",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      description:
                        "The name for the menu item which fits the specified locale.\nThe locale has to be enabled in the organization which is assigned to the current tenant.",
                      required: ["locale", "name"],
                      properties: {
                        locale: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          example: "en-GB",
                        },
                        name: { type: "string" },
                      },
                    },
                  },
                  {
                    name: "display_type",
                    type: "string",
                    description:
                      "The following display types are supported:\n\n- `SYSTEM_BROWSER`: The URL will be opened in the system's default web browser.\n- `IFRAME`: The URL will be displayed in the app. Through a back button the user is able to navigate back.\n  Some websites do not allow iframe embeds. It's recommended to test the URL compatibility before entering it.\n- `FLIP_BROWSER`: The URL will be opened in Flip Browser.\n  The Flip Browser is shipped within the app package to mobile devices.",
                    required: true,
                  },
                  {
                    name: "icon",
                    type: "string",
                    description:
                      "As of now, the following icon types are supported by the frontend components:\n\n- desktop_windows\n- loyalty\n- groups\n- help\n- backup\n- restaurant\n- lightbulb\n- instagram\n- favorite\n- language\n- maps_home_work\n- account_circle\n- info\n- thumbs_up_down\n- supervisor_account\n- bookmark\n- coronavirus\n- android\n- beach_access\n- event\n- savings\n- edit_calendar\n- alternate_email\n- work\n- cloud\n- folderv\n- announcement",
                    required: true,
                  },
                  {
                    name: "position",
                    type: "integer",
                    description:
                      "Optional, only within creation operation. If no position is defined, the last position in the context of the entity linked to the menu item\nwill be automatically assigned incremented by 1.",
                    required: true,
                  },
                  {
                    name: "background_image_id",
                    type: "string",
                    description:
                      "The unique identifier of the uploaded file which should be used as background image.\nIt has to be successfully uploaded before assigning it to a menu item in context of creation or update.",
                    required: true,
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "published_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was published.",
                    required: true,
                  },
                  {
                    name: "createdAt",
                    type: "string",
                    description:
                      "The point in time at which this resource was created.",
                    required: true,
                  },
                  {
                    name: "updatedAt",
                    type: "string",
                    description:
                      "The point in time at which this resource was last updated.",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/navigation/v4/menu-items");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"url\\":\\"string\\",\\"names\\":[{\\"locale\\":\\"en-GB\\",\\"name\\":\\"string\\"}],\\"display_type\\":\\"SYSTEM_BROWSER\\",\\"icon\\":\\"edit_calendar\\",\\"position\\":0,\\"background_image_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"status\\":\\"ACTIVE\\",\\"published_at\\":\\"2024-01-11T07:41:25.662Z\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/navigation/v4/menu-items" {:content-type :json\n                                                                         :form-params {:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                       :user_group_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                       :url "string"\n                                                                                       :names [{:locale "en-GB"\n                                                                                                :name "string"}]\n                                                                                       :display_type "SYSTEM_BROWSER"\n                                                                                       :icon "edit_calendar"\n                                                                                       :position 0\n                                                                                       :background_image_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                       :status "ACTIVE"\n                                                                                       :published_at "2024-01-11T07:41:25.662Z"}\n                                                                         :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/navigation/v4/menu-items");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"url\\":\\"string\\",\\"names\\":[{\\"locale\\":\\"en-GB\\",\\"name\\":\\"string\\"}],\\"display_type\\":\\"SYSTEM_BROWSER\\",\\"icon\\":\\"edit_calendar\\",\\"position\\":0,\\"background_image_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"status\\":\\"ACTIVE\\",\\"published_at\\":\\"2024-01-11T07:41:25.662Z\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/navigation/v4/menu-items");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"url\\":\\"string\\",\\"names\\":[{\\"locale\\":\\"en-GB\\",\\"name\\":\\"string\\"}],\\"display_type\\":\\"SYSTEM_BROWSER\\",\\"icon\\":\\"edit_calendar\\",\\"position\\":0,\\"background_image_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"status\\":\\"ACTIVE\\",\\"published_at\\":\\"2024-01-11T07:41:25.662Z\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/navigation/v4/menu-items HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 349\r\n\r\n{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","url":"string","names":[{"locale":"en-GB","name":"string"}],"display_type":"SYSTEM_BROWSER","icon":"edit_calendar","position":0,"background_image_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","status":"ACTIVE","published_at":"2024-01-11T07:41:25.662Z"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/navigation/v4/menu-items"\n\n\tpayload := strings.NewReader("{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"url\\":\\"string\\",\\"names\\":[{\\"locale\\":\\"en-GB\\",\\"name\\":\\"string\\"}],\\"display_type\\":\\"SYSTEM_BROWSER\\",\\"icon\\":\\"edit_calendar\\",\\"position\\":0,\\"background_image_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"status\\":\\"ACTIVE\\",\\"published_at\\":\\"2024-01-11T07:41:25.662Z\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"url\\":\\"string\\",\\"names\\":[{\\"locale\\":\\"en-GB\\",\\"name\\":\\"string\\"}],\\"display_type\\":\\"SYSTEM_BROWSER\\",\\"icon\\":\\"edit_calendar\\",\\"position\\":0,\\"background_image_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"status\\":\\"ACTIVE\\",\\"published_at\\":\\"2024-01-11T07:41:25.662Z\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/navigation/v4/menu-items")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    user_group_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    url: 'string',\n    names: [{locale: 'en-GB', name: 'string'}],\n    display_type: 'SYSTEM_BROWSER',\n    icon: 'edit_calendar',\n    position: 0,\n    background_image_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    status: 'ACTIVE',\n    published_at: '2024-01-11T07:41:25.662Z'\n  })\n};\n\nfetch('http://localhost:3000/api/admin/navigation/v4/menu-items', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"url\\":\\"string\\",\\"names\\":[{\\"locale\\":\\"en-GB\\",\\"name\\":\\"string\\"}],\\"display_type\\":\\"SYSTEM_BROWSER\\",\\"icon\\":\\"edit_calendar\\",\\"position\\":0,\\"background_image_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"status\\":\\"ACTIVE\\",\\"published_at\\":\\"2024-01-11T07:41:25.662Z\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/navigation/v4/menu-items")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/navigation/v4/menu-items';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    user_group_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    url: 'string',\n    names: [{locale: 'en-GB', name: 'string'}],\n    display_type: 'SYSTEM_BROWSER',\n    icon: 'edit_calendar',\n    position: 0,\n    background_image_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    status: 'ACTIVE',\n    published_at: '2024-01-11T07:41:25.662Z'\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"user_group_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"url": @"string",\n                              @"names": @[ @{ @"locale": @"en-GB", @"name": @"string" } ],\n                              @"display_type": @"SYSTEM_BROWSER",\n                              @"icon": @"edit_calendar",\n                              @"position": @0,\n                              @"background_image_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"status": @"ACTIVE",\n                              @"published_at": @"2024-01-11T07:41:25.662Z" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/navigation/v4/menu-items"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/navigation/v4/menu-items" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"url\\":\\"string\\",\\"names\\":[{\\"locale\\":\\"en-GB\\",\\"name\\":\\"string\\"}],\\"display_type\\":\\"SYSTEM_BROWSER\\",\\"icon\\":\\"edit_calendar\\",\\"position\\":0,\\"background_image_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"status\\":\\"ACTIVE\\",\\"published_at\\":\\"2024-01-11T07:41:25.662Z\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: '<?php\nrequire_once(\'vendor/autoload.php\');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request(\'POST\', \'http://localhost:3000/api/admin/navigation/v4/menu-items\', [\n  \'body\' => \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","url":"string","names":[{"locale":"en-GB","name":"string"}],"display_type":"SYSTEM_BROWSER","icon":"edit_calendar","position":0,"background_image_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","status":"ACTIVE","published_at":"2024-01-11T07:41:25.662Z"}\',\n  \'headers\' => [\n    \'accept\' => \'application/json\',\n    \'content-type\' => \'application/json\',\n  ],\n]);\n\necho $response->getBody();',
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/navigation/v4/menu-items\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","url":"string","names":[{"locale":"en-GB","name":"string"}],"display_type":"SYSTEM_BROWSER","icon":"edit_calendar","position":0,"background_image_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","status":"ACTIVE","published_at":"2024-01-11T07:41:25.662Z"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/navigation/v4/menu-items"\n\npayload = {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "url": "string",\n    "names": [\n        {\n            "locale": "en-GB",\n            "name": "string"\n        }\n    ],\n    "display_type": "SYSTEM_BROWSER",\n    "icon": "edit_calendar",\n    "position": 0,\n    "background_image_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "status": "ACTIVE",\n    "published_at": "2024-01-11T07:41:25.662Z"\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/navigation/v4/menu-items"\n\npayload <- "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"url\\":\\"string\\",\\"names\\":[{\\"locale\\":\\"en-GB\\",\\"name\\":\\"string\\"}],\\"display_type\\":\\"SYSTEM_BROWSER\\",\\"icon\\":\\"edit_calendar\\",\\"position\\":0,\\"background_image_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"status\\":\\"ACTIVE\\",\\"published_at\\":\\"2024-01-11T07:41:25.662Z\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/navigation/v4/menu-items")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"url\\":\\"string\\",\\"names\\":[{\\"locale\\":\\"en-GB\\",\\"name\\":\\"string\\"}],\\"display_type\\":\\"SYSTEM_BROWSER\\",\\"icon\\":\\"edit_calendar\\",\\"position\\":0,\\"background_image_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"status\\":\\"ACTIVE\\",\\"published_at\\":\\"2024-01-11T07:41:25.662Z\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/navigation/v4/menu-items \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "url": "string",\n  "names": [\n    {\n      "locale": "en-GB",\n      "name": "string"\n    }\n  ],\n  "display_type": "SYSTEM_BROWSER",\n  "icon": "edit_calendar",\n  "position": 0,\n  "background_image_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "status": "ACTIVE",\n  "published_at": "2024-01-11T07:41:25.662Z"\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "url": "string",\n  "names": [\n    [\n      "locale": "en-GB",\n      "name": "string"\n    ]\n  ],\n  "display_type": "SYSTEM_BROWSER",\n  "icon": "edit_calendar",\n  "position": 0,\n  "background_image_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "status": "ACTIVE",\n  "published_at": "2024-01-11T07:41:25.662Z"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/navigation/v4/menu-items")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/navigation/v4/menu-items",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "201":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user_group": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "Marketing"\n    },\n    "status": "ACTIVE"\n  },\n  "url": "string",\n  "names": [\n    {\n      "locale": "en-GB",\n      "name": "string"\n    }\n  ],\n  "display_type": "SYSTEM_BROWSER",\n  "icon": "edit_calendar",\n  "position": 0,\n  "background_image_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "status": "ACTIVE",\n  "published_at": "2024-01-11T07:41:25.662Z",\n  "createdAt": "2024-01-11T07:41:25.662Z",\n  "updatedAt": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  required: [
                    "id",
                    "user_group_id",
                    "url",
                    "names",
                    "display_type",
                    "icon",
                    "position",
                    "background_image_id",
                    "status",
                    "published_at",
                    "createdAt",
                    "updatedAt",
                  ],
                  properties: {
                    id: {
                      type: "string",
                      format: "uuid",
                      description: "The unique identifier of the menu item.",
                    },
                    user_group_id: {
                      type: "string",
                      description: "Unique identifier of a user group.",
                      format: "uuid",
                    },
                    user_group: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                    url: {
                      type: "string",
                      pattern: "^(https://|mailto:)(.+)$",
                      minLength: 7,
                      maxLength: 2048,
                      description:
                        "The url specifies the target of the menu item.\nThe url has to be prefixed either by 'https://' or 'mailto:'",
                    },
                    names: {
                      type: "array",
                      minItems: 1,
                      maxItems: 50,
                      items: {
                        type: "object",
                        description:
                          "The name for the menu item which fits the specified locale.\nThe locale has to be enabled in the organization which is assigned to the current tenant.",
                        required: ["locale", "name"],
                        properties: {
                          locale: {
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            format: "bcp47",
                            pattern:
                              "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                            example: "en-GB",
                          },
                          name: { type: "string" },
                        },
                      },
                    },
                    display_type: {
                      type: "string",
                      description:
                        "The following display types are supported:\n\n- `SYSTEM_BROWSER`: The URL will be opened in the system's default web browser.\n- `IFRAME`: The URL will be displayed in the app. Through a back button the user is able to navigate back.\n  Some websites do not allow iframe embeds. It's recommended to test the URL compatibility before entering it.\n- `FLIP_BROWSER`: The URL will be opened in Flip Browser.\n  The Flip Browser is shipped within the app package to mobile devices.",
                      enum: ["SYSTEM_BROWSER", "IFRAME", "FLIP_BROWSER"],
                    },
                    icon: {
                      type: "string",
                      minLength: 1,
                      maxLength: 30,
                      pattern: "^[a-zA-Z]+([_ ][a-zA-Z]+)*$",
                      example: "edit_calendar",
                      description:
                        "As of now, the following icon types are supported by the frontend components:\n\n- desktop_windows\n- loyalty\n- groups\n- help\n- backup\n- restaurant\n- lightbulb\n- instagram\n- favorite\n- language\n- maps_home_work\n- account_circle\n- info\n- thumbs_up_down\n- supervisor_account\n- bookmark\n- coronavirus\n- android\n- beach_access\n- event\n- savings\n- edit_calendar\n- alternate_email\n- work\n- cloud\n- folderv\n- announcement",
                    },
                    position: {
                      type: "integer",
                      description:
                        "Optional, only within creation operation. If no position is defined, the last position in the context of the entity linked to the menu item\nwill be automatically assigned incremented by 1.",
                      minimum: 1,
                    },
                    background_image_id: {
                      type: "string",
                      format: "uuid",
                      description:
                        "The unique identifier of the uploaded file which should be used as background image.\nIt has to be successfully uploaded before assigning it to a menu item in context of creation or update.",
                      nullable: true,
                    },
                    status: { type: "string", enum: ["ACTIVE", "INACTIVE"] },
                    published_at: {
                      type: "string",
                      format: "date-time",
                      nullable: true,
                      description:
                        "The point in time at which this resource was published.",
                    },
                    createdAt: {
                      type: "string",
                      format: "date-time",
                      description:
                        "The point in time at which this resource was created.",
                    },
                    updatedAt: {
                      type: "string",
                      format: "date-time",
                      nullable: false,
                      description:
                        "The point in time at which this resource was last updated.",
                    },
                  },
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "get-menu-items-for-user-group",
            title: "Get menu items for the selected user group",
            description:
              "This endpoint retrieves all menu items that pertain to the specified user group,\nincluding menu items from user groups higher up in the hierarchy.\nThe response is organized hierarchically, with user groups starting from the highest level\nabove the specified group.\nWithin each user group, menu items are sorted based on their position followed by their created_at date,\nin natural ascending order.\nPlease note that this endpoint does not implement any kind of pagination.",
            path: "/api/admin/navigation/v4/{user_group_id}/menu-items",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_group_id",
                    type: "string",
                    description:
                      "The primary identifier of the user group for which the menu items shall be returned.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "To perform searches, provide a string value.\nThe value should consist of one or more tokens, separated by white spaces\nor the | character.\nEach token represents a search criterion that must match\ncase-insensitively in at least one searchable field.\nIf multiple tokens are included, they are combined using the logical OR operator.\nThis means that the results will include items where at least one of the tokens\nmatches in any of the searchable fields.",
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "menu_items",
                    type: "array",
                    description:
                      "An array of all retrieved menu items, according to the pagination and sort arguments.",
                    required: true,
                    items: {
                      type: "object",
                      required: [
                        "id",
                        "user_group_id",
                        "url",
                        "names",
                        "display_type",
                        "icon",
                        "position",
                        "background_image_id",
                        "status",
                        "published_at",
                        "createdAt",
                        "updatedAt",
                      ],
                      properties: {
                        id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the menu item.",
                        },
                        user_group_id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        user_group: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            title: {
                              type: "object",
                              properties: {
                                language: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                text: {
                                  type: "string",
                                  description: "Title of the User Group",
                                  maxLength: 120,
                                  example: "Marketing",
                                },
                              },
                              required: ["language", "text"],
                            },
                            status: {
                              type: "string",
                              enum: ["ACTIVE", "ARCHIVED"],
                            },
                          },
                          required: ["id", "title", "status"],
                        },
                        url: {
                          type: "string",
                          pattern: "^(https://|mailto:)(.+)$",
                          minLength: 7,
                          maxLength: 2048,
                          description:
                            "The url specifies the target of the menu item.\nThe url has to be prefixed either by 'https://' or 'mailto:'",
                        },
                        names: {
                          type: "array",
                          minItems: 1,
                          maxItems: 50,
                          items: {
                            type: "object",
                            description:
                              "The name for the menu item which fits the specified locale.\nThe locale has to be enabled in the organization which is assigned to the current tenant.",
                            required: ["locale", "name"],
                            properties: {
                              locale: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              name: { type: "string" },
                            },
                          },
                        },
                        display_type: {
                          type: "string",
                          description:
                            "The following display types are supported:\n\n- `SYSTEM_BROWSER`: The URL will be opened in the system's default web browser.\n- `IFRAME`: The URL will be displayed in the app. Through a back button the user is able to navigate back.\n  Some websites do not allow iframe embeds. It's recommended to test the URL compatibility before entering it.\n- `FLIP_BROWSER`: The URL will be opened in Flip Browser.\n  The Flip Browser is shipped within the app package to mobile devices.",
                          enum: ["SYSTEM_BROWSER", "IFRAME", "FLIP_BROWSER"],
                        },
                        icon: {
                          type: "string",
                          minLength: 1,
                          maxLength: 30,
                          pattern: "^[a-zA-Z]+([_ ][a-zA-Z]+)*$",
                          example: "edit_calendar",
                          description:
                            "As of now, the following icon types are supported by the frontend components:\n\n- desktop_windows\n- loyalty\n- groups\n- help\n- backup\n- restaurant\n- lightbulb\n- instagram\n- favorite\n- language\n- maps_home_work\n- account_circle\n- info\n- thumbs_up_down\n- supervisor_account\n- bookmark\n- coronavirus\n- android\n- beach_access\n- event\n- savings\n- edit_calendar\n- alternate_email\n- work\n- cloud\n- folderv\n- announcement",
                        },
                        position: {
                          type: "integer",
                          description:
                            "Optional, only within creation operation. If no position is defined, the last position in the context of the entity linked to the menu item\nwill be automatically assigned incremented by 1.",
                          minimum: 1,
                        },
                        background_image_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the uploaded file which should be used as background image.\nIt has to be successfully uploaded before assigning it to a menu item in context of creation or update.",
                          nullable: true,
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "INACTIVE"],
                        },
                        published_at: {
                          type: "string",
                          format: "date-time",
                          nullable: true,
                          description:
                            "The point in time at which this resource was published.",
                        },
                        createdAt: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updatedAt: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                      },
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/navigation/v4/user_group_id/menu-items HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/navigation/v4/{user_group_id}/menu-items",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "menu_items": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "user_group": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "title": {\n          "language": "en-GB",\n          "text": "Marketing"\n        },\n        "status": "ACTIVE"\n      },\n      "url": "string",\n      "names": [\n        {\n          "locale": "en-GB",\n          "name": "string"\n        }\n      ],\n      "display_type": "SYSTEM_BROWSER",\n      "icon": "edit_calendar",\n      "position": 0,\n      "background_image_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "status": "ACTIVE",\n      "published_at": "2024-01-11T07:41:25.662Z",\n      "createdAt": "2024-01-11T07:41:25.662Z",\n      "updatedAt": "2024-01-11T07:41:25.662Z"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  required: ["menu_items"],
                  properties: {
                    menu_items: {
                      type: "array",
                      description:
                        "An array of all retrieved menu items, according to the pagination and sort arguments.",
                      items: {
                        type: "object",
                        required: [
                          "id",
                          "user_group_id",
                          "url",
                          "names",
                          "display_type",
                          "icon",
                          "position",
                          "background_image_id",
                          "status",
                          "published_at",
                          "createdAt",
                          "updatedAt",
                        ],
                        properties: {
                          id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the menu item.",
                          },
                          user_group_id: {
                            type: "string",
                            description: "Unique identifier of a user group.",
                            format: "uuid",
                          },
                          user_group: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the User Group",
                                    maxLength: 120,
                                    example: "Marketing",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              status: {
                                type: "string",
                                enum: ["ACTIVE", "ARCHIVED"],
                              },
                            },
                            required: ["id", "title", "status"],
                          },
                          url: {
                            type: "string",
                            pattern: "^(https://|mailto:)(.+)$",
                            minLength: 7,
                            maxLength: 2048,
                            description:
                              "The url specifies the target of the menu item.\nThe url has to be prefixed either by 'https://' or 'mailto:'",
                          },
                          names: {
                            type: "array",
                            minItems: 1,
                            maxItems: 50,
                            items: {
                              type: "object",
                              description:
                                "The name for the menu item which fits the specified locale.\nThe locale has to be enabled in the organization which is assigned to the current tenant.",
                              required: ["locale", "name"],
                              properties: {
                                locale: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                name: { type: "string" },
                              },
                            },
                          },
                          display_type: {
                            type: "string",
                            description:
                              "The following display types are supported:\n\n- `SYSTEM_BROWSER`: The URL will be opened in the system's default web browser.\n- `IFRAME`: The URL will be displayed in the app. Through a back button the user is able to navigate back.\n  Some websites do not allow iframe embeds. It's recommended to test the URL compatibility before entering it.\n- `FLIP_BROWSER`: The URL will be opened in Flip Browser.\n  The Flip Browser is shipped within the app package to mobile devices.",
                            enum: ["SYSTEM_BROWSER", "IFRAME", "FLIP_BROWSER"],
                          },
                          icon: {
                            type: "string",
                            minLength: 1,
                            maxLength: 30,
                            pattern: "^[a-zA-Z]+([_ ][a-zA-Z]+)*$",
                            example: "edit_calendar",
                            description:
                              "As of now, the following icon types are supported by the frontend components:\n\n- desktop_windows\n- loyalty\n- groups\n- help\n- backup\n- restaurant\n- lightbulb\n- instagram\n- favorite\n- language\n- maps_home_work\n- account_circle\n- info\n- thumbs_up_down\n- supervisor_account\n- bookmark\n- coronavirus\n- android\n- beach_access\n- event\n- savings\n- edit_calendar\n- alternate_email\n- work\n- cloud\n- folderv\n- announcement",
                          },
                          position: {
                            type: "integer",
                            description:
                              "Optional, only within creation operation. If no position is defined, the last position in the context of the entity linked to the menu item\nwill be automatically assigned incremented by 1.",
                            minimum: 1,
                          },
                          background_image_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the uploaded file which should be used as background image.\nIt has to be successfully uploaded before assigning it to a menu item in context of creation or update.",
                            nullable: true,
                          },
                          status: {
                            type: "string",
                            enum: ["ACTIVE", "INACTIVE"],
                          },
                          published_at: {
                            type: "string",
                            format: "date-time",
                            nullable: true,
                            description:
                              "The point in time at which this resource was published.",
                          },
                          createdAt: {
                            type: "string",
                            format: "date-time",
                            description:
                              "The point in time at which this resource was created.",
                          },
                          updatedAt: {
                            type: "string",
                            format: "date-time",
                            nullable: false,
                            description:
                              "The point in time at which this resource was last updated.",
                          },
                        },
                      },
                    },
                  },
                  description:
                    "Representation of a collection of menu items which can be maintained by the admin.",
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "update-positions-of-menu-items-within-user-group",
            title: "Update positions of menu items in context of a user group",
            description:
              "This endpoint performs a re-positioning of all menu items within a user group.\nIt's recommended but not validated to assign the positions sequential incremented by 1 starting by 1.\nThe given positions are allowed to have gaps in between.\nThe positions have to be unique within a user group. The request will be declined if having duplicate positions, missing privileges or missing menu_item_ids which are assigned to the user group.\nThis endpoint performs updates on the position and updated_at property only.\nThe updated_at property is only updated, if the position changed indeed.",
            path: "/api/admin/navigation/v4/{user_group_id}/menu-items/position",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "FEATURE_DISABLED",
              "USER_GROUP_NOT_FOUND",
              "NOT_ADMIN_OF_USER_GROUP",
              "DUPLICATE_POSITION_WITHIN_USER_GROUP",
              "MENU_ITEM_NOT_FOUND",
              "MENU_ITEM_ID_MISSING",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_group_id",
                    type: "string",
                    description:
                      "The primary identifier of the user group for which the menu items shall be re-positioned.",
                    required: true,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "updates",
                    type: "array",
                    description:
                      "An array of all menu_item_ids within a user group and their position to be updated.",
                    required: true,
                    items: {
                      type: "object",
                      required: ["menu_item_id", "position"],
                      properties: {
                        menu_item_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the menu item.",
                        },
                        position: {
                          type: "integer",
                          description:
                            "Optional, only within creation operation. If no position is defined, the last position in the context of the entity linked to the menu item\nwill be automatically assigned incremented by 1.",
                          minimum: 1,
                        },
                      },
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "menu_items",
                    type: "array",
                    description:
                      "An array of all retrieved menu items, according to the pagination and sort arguments.",
                    required: true,
                    items: {
                      type: "object",
                      required: [
                        "id",
                        "user_group_id",
                        "url",
                        "names",
                        "display_type",
                        "icon",
                        "position",
                        "background_image_id",
                        "status",
                        "published_at",
                        "createdAt",
                        "updatedAt",
                      ],
                      properties: {
                        id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the menu item.",
                        },
                        user_group_id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        user_group: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            title: {
                              type: "object",
                              properties: {
                                language: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                text: {
                                  type: "string",
                                  description: "Title of the User Group",
                                  maxLength: 120,
                                  example: "Marketing",
                                },
                              },
                              required: ["language", "text"],
                            },
                            status: {
                              type: "string",
                              enum: ["ACTIVE", "ARCHIVED"],
                            },
                          },
                          required: ["id", "title", "status"],
                        },
                        url: {
                          type: "string",
                          pattern: "^(https://|mailto:)(.+)$",
                          minLength: 7,
                          maxLength: 2048,
                          description:
                            "The url specifies the target of the menu item.\nThe url has to be prefixed either by 'https://' or 'mailto:'",
                        },
                        names: {
                          type: "array",
                          minItems: 1,
                          maxItems: 50,
                          items: {
                            type: "object",
                            description:
                              "The name for the menu item which fits the specified locale.\nThe locale has to be enabled in the organization which is assigned to the current tenant.",
                            required: ["locale", "name"],
                            properties: {
                              locale: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              name: { type: "string" },
                            },
                          },
                        },
                        display_type: {
                          type: "string",
                          description:
                            "The following display types are supported:\n\n- `SYSTEM_BROWSER`: The URL will be opened in the system's default web browser.\n- `IFRAME`: The URL will be displayed in the app. Through a back button the user is able to navigate back.\n  Some websites do not allow iframe embeds. It's recommended to test the URL compatibility before entering it.\n- `FLIP_BROWSER`: The URL will be opened in Flip Browser.\n  The Flip Browser is shipped within the app package to mobile devices.",
                          enum: ["SYSTEM_BROWSER", "IFRAME", "FLIP_BROWSER"],
                        },
                        icon: {
                          type: "string",
                          minLength: 1,
                          maxLength: 30,
                          pattern: "^[a-zA-Z]+([_ ][a-zA-Z]+)*$",
                          example: "edit_calendar",
                          description:
                            "As of now, the following icon types are supported by the frontend components:\n\n- desktop_windows\n- loyalty\n- groups\n- help\n- backup\n- restaurant\n- lightbulb\n- instagram\n- favorite\n- language\n- maps_home_work\n- account_circle\n- info\n- thumbs_up_down\n- supervisor_account\n- bookmark\n- coronavirus\n- android\n- beach_access\n- event\n- savings\n- edit_calendar\n- alternate_email\n- work\n- cloud\n- folderv\n- announcement",
                        },
                        position: {
                          type: "integer",
                          description:
                            "Optional, only within creation operation. If no position is defined, the last position in the context of the entity linked to the menu item\nwill be automatically assigned incremented by 1.",
                          minimum: 1,
                        },
                        background_image_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the uploaded file which should be used as background image.\nIt has to be successfully uploaded before assigning it to a menu item in context of creation or update.",
                          nullable: true,
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "INACTIVE"],
                        },
                        published_at: {
                          type: "string",
                          format: "date-time",
                          nullable: true,
                          description:
                            "The point in time at which this resource was published.",
                        },
                        createdAt: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updatedAt: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                      },
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"updates\\":[{\\"menu_item_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"position\\":0}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position" {:content-type :json\n                                                                                                :form-params {:updates [{:menu_item_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                                         :position 0}]}\n                                                                                                :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"updates\\":[{\\"menu_item_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"position\\":0}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"updates\\":[{\\"menu_item_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"position\\":0}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/navigation/v4/user_group_id/menu-items/position HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 82\r\n\r\n{"updates":[{"menu_item_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","position":0}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position"\n\n\tpayload := strings.NewReader("{\\"updates\\":[{\\"menu_item_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"position\\":0}]}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"updates\\":[{\\"menu_item_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"position\\":0}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({updates: [{menu_item_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', position: 0}]})\n};\n\nfetch('http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"updates\\":[{\\"menu_item_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"position\\":0}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({updates: [{menu_item_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', position: 0}]})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"updates": @[ @{ @"menu_item_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"position": @0 } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"updates\\":[{\\"menu_item_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"position\\":0}]}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position', [\n  'body' => '{\"updates\":[{\"menu_item_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"position\":0}]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"updates":[{"menu_item_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","position":0}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position"\n\npayload = {"updates": [\n        {\n            "menu_item_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "position": 0\n        }\n    ]}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position"\n\npayload <- "{\\"updates\\":[{\\"menu_item_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"position\\":0}]}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"updates\\":[{\\"menu_item_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"position\\":0}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "updates": [\n    {\n      "menu_item_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "position": 0\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["updates": [\n    [\n      "menu_item_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "position": 0\n    ]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/navigation/v4/user_group_id/menu-items/position")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/navigation/v4/{user_group_id}/menu-items/position",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "menu_items": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "user_group": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "title": {\n          "language": "en-GB",\n          "text": "Marketing"\n        },\n        "status": "ACTIVE"\n      },\n      "url": "string",\n      "names": [\n        {\n          "locale": "en-GB",\n          "name": "string"\n        }\n      ],\n      "display_type": "SYSTEM_BROWSER",\n      "icon": "edit_calendar",\n      "position": 0,\n      "background_image_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "status": "ACTIVE",\n      "published_at": "2024-01-11T07:41:25.662Z",\n      "createdAt": "2024-01-11T07:41:25.662Z",\n      "updatedAt": "2024-01-11T07:41:25.662Z"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  required: ["menu_items"],
                  properties: {
                    menu_items: {
                      type: "array",
                      description:
                        "An array of all retrieved menu items, according to the pagination and sort arguments.",
                      items: {
                        type: "object",
                        required: [
                          "id",
                          "user_group_id",
                          "url",
                          "names",
                          "display_type",
                          "icon",
                          "position",
                          "background_image_id",
                          "status",
                          "published_at",
                          "createdAt",
                          "updatedAt",
                        ],
                        properties: {
                          id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the menu item.",
                          },
                          user_group_id: {
                            type: "string",
                            description: "Unique identifier of a user group.",
                            format: "uuid",
                          },
                          user_group: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the User Group",
                                    maxLength: 120,
                                    example: "Marketing",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              status: {
                                type: "string",
                                enum: ["ACTIVE", "ARCHIVED"],
                              },
                            },
                            required: ["id", "title", "status"],
                          },
                          url: {
                            type: "string",
                            pattern: "^(https://|mailto:)(.+)$",
                            minLength: 7,
                            maxLength: 2048,
                            description:
                              "The url specifies the target of the menu item.\nThe url has to be prefixed either by 'https://' or 'mailto:'",
                          },
                          names: {
                            type: "array",
                            minItems: 1,
                            maxItems: 50,
                            items: {
                              type: "object",
                              description:
                                "The name for the menu item which fits the specified locale.\nThe locale has to be enabled in the organization which is assigned to the current tenant.",
                              required: ["locale", "name"],
                              properties: {
                                locale: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                name: { type: "string" },
                              },
                            },
                          },
                          display_type: {
                            type: "string",
                            description:
                              "The following display types are supported:\n\n- `SYSTEM_BROWSER`: The URL will be opened in the system's default web browser.\n- `IFRAME`: The URL will be displayed in the app. Through a back button the user is able to navigate back.\n  Some websites do not allow iframe embeds. It's recommended to test the URL compatibility before entering it.\n- `FLIP_BROWSER`: The URL will be opened in Flip Browser.\n  The Flip Browser is shipped within the app package to mobile devices.",
                            enum: ["SYSTEM_BROWSER", "IFRAME", "FLIP_BROWSER"],
                          },
                          icon: {
                            type: "string",
                            minLength: 1,
                            maxLength: 30,
                            pattern: "^[a-zA-Z]+([_ ][a-zA-Z]+)*$",
                            example: "edit_calendar",
                            description:
                              "As of now, the following icon types are supported by the frontend components:\n\n- desktop_windows\n- loyalty\n- groups\n- help\n- backup\n- restaurant\n- lightbulb\n- instagram\n- favorite\n- language\n- maps_home_work\n- account_circle\n- info\n- thumbs_up_down\n- supervisor_account\n- bookmark\n- coronavirus\n- android\n- beach_access\n- event\n- savings\n- edit_calendar\n- alternate_email\n- work\n- cloud\n- folderv\n- announcement",
                          },
                          position: {
                            type: "integer",
                            description:
                              "Optional, only within creation operation. If no position is defined, the last position in the context of the entity linked to the menu item\nwill be automatically assigned incremented by 1.",
                            minimum: 1,
                          },
                          background_image_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the uploaded file which should be used as background image.\nIt has to be successfully uploaded before assigning it to a menu item in context of creation or update.",
                            nullable: true,
                          },
                          status: {
                            type: "string",
                            enum: ["ACTIVE", "INACTIVE"],
                          },
                          published_at: {
                            type: "string",
                            format: "date-time",
                            nullable: true,
                            description:
                              "The point in time at which this resource was published.",
                          },
                          createdAt: {
                            type: "string",
                            format: "date-time",
                            description:
                              "The point in time at which this resource was created.",
                          },
                          updatedAt: {
                            type: "string",
                            format: "date-time",
                            nullable: false,
                            description:
                              "The point in time at which this resource was last updated.",
                          },
                        },
                      },
                    },
                  },
                  description:
                    "Representation of a collection of menu items which can be maintained by the admin.",
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
    ],
  },
  {
    id: "organisation",
    title: "Organisation",
    resources: [
      {
        id: "bootstrap",
        title: "Bootstrap",
        shortDescription: "",
        endpoints: [
          {
            id: "get-app-compatibility",
            title: "Get app compatibility",
            description:
              "Get required update actions and app store links for bootstraping a flip managed app.",
            path: "/api/organisations/v4/bootstrap/app-compatibility",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "app_type",
                    type: "string",
                    description: "the installed app's type",
                    required: true,
                  },
                  {
                    name: "app_version",
                    type: "string",
                    description: "the installed app's current version",
                    required: true,
                  },
                  {
                    name: "device_type",
                    type: "string",
                    description: "generalized device type",
                    required: true,
                  },
                  {
                    name: "os_family",
                    type: "string",
                    description: "operation system identifier",
                    required: true,
                  },
                  {
                    name: "os_version",
                    type: "string",
                    description: "version of the operation system",
                    required: true,
                  },
                  {
                    name: "os_api_level",
                    type: "string",
                    description:
                      "api level of the operation system (only relevant for Android at the moment)",
                    required: false,
                  },
                  {
                    name: "organization_id",
                    type: "string",
                    description:
                      "optional organization identifier in case of a branded app installation",
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description: "",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "app_stores",
                    type: "array",
                    description: "Links to app stores for updating the app",
                    required: true,
                    items: {
                      properties: {
                        id: {
                          description: "logical id of the store",
                          type: "string",
                        },
                        name: {
                          description: "human readable app store name",
                          type: "string",
                        },
                        url: { format: "uri", type: "string" },
                      },
                      required: ["id", "name", "url"],
                      type: "object",
                    },
                  },
                  {
                    name: "required_actions",
                    description:
                      "Information when actions are required for the app to function properly.\nPresence of this value indicates that some action is required for the app to function properly.\nApps should treat the presence of this value as an indicator to stop working with the remote services, even if they do not understand the specific sub properties.\n",
                    required: false,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/organisations/v4/bootstrap/app-compatibility HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/organisations/v4/bootstrap/app-compatibility")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/organisations/v4/bootstrap/app-compatibility",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "app_stores": [\n    {\n      "id": "string",\n      "name": "string",\n      "url": "string"\n    }\n  ],\n  "required_actions": {\n    "app_update": {\n      "message": {\n        "text": "string",\n        "language": "string"\n      },\n      "min_app_version": "string"\n    },\n    "end_of_life": {\n      "message": {\n        "text": "string",\n        "language": "string"\n      }\n    },\n    "os_update": {\n      "message": {\n        "text": "string",\n        "language": "string"\n      },\n      "min_os_version": "string"\n    }\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  description:
                    "Basic compatibility information for flip managed apps",
                  properties: {
                    app_stores: {
                      description: "Links to app stores for updating the app",
                      items: {
                        properties: {
                          id: {
                            description: "logical id of the store",
                            type: "string",
                          },
                          name: {
                            description: "human readable app store name",
                            type: "string",
                          },
                          url: { format: "uri", type: "string" },
                        },
                        required: ["id", "name", "url"],
                        type: "object",
                      },
                      type: "array",
                    },
                    required_actions: {
                      description:
                        "Information when actions are required for the app to function properly.\nPresence of this value indicates that some action is required for the app to function properly.\nApps should treat the presence of this value as an indicator to stop working with the remote services, even if they do not understand the specific sub properties.\n",
                      properties: {
                        app_update: {
                          description:
                            "If present, an app update is required in order for the app to function properly.",
                          nullable: true,
                          properties: {
                            message: {
                              description:
                                "Localized message for app compatibility action",
                              properties: {
                                text: { type: "string" },
                                language: {
                                  type: "string",
                                  description:
                                    "ISO language code - this might differ from the preferred language when there is no proper translation  available.",
                                },
                              },
                              required: ["text", "language"],
                              type: "object",
                            },
                            min_app_version: {
                              description: "Minimum required app version",
                              type: "string",
                            },
                          },
                          required: ["message", "min_app_version"],
                          type: "object",
                        },
                        end_of_life: {
                          description:
                            'If present, the app has reached it\'s end of life and should "uninstall" itself. Presence also implies that the other two values are absent.',
                          nullable: true,
                          properties: {
                            message: {
                              description:
                                "Localized message for app compatibility action",
                              properties: {
                                text: { type: "string" },
                                language: {
                                  type: "string",
                                  description:
                                    "ISO language code - this might differ from the preferred language when there is no proper translation  available.",
                                },
                              },
                              required: ["text", "language"],
                              type: "object",
                            },
                          },
                          required: ["message", "min_app_version"],
                          type: "object",
                        },
                        os_update: {
                          description:
                            "If present, an operating system update is required for the application to function properly.",
                          nullable: true,
                          properties: {
                            message: {
                              description:
                                "Localized message for app compatibility action",
                              properties: {
                                text: { type: "string" },
                                language: {
                                  type: "string",
                                  description:
                                    "ISO language code - this might differ from the preferred language when there is no proper translation  available.",
                                },
                              },
                              required: ["text", "language"],
                              type: "object",
                            },
                            min_os_version: {
                              description: "Minimum required os version",
                              type: "string",
                            },
                          },
                          required: ["message", "min_app_version"],
                          type: "object",
                        },
                      },
                    },
                  },
                  required: ["app_stores"],
                  type: "object",
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-organisation-by-keyword",
            title: "Get organisation by keyword",
            description:
              "Get organisation by keyword for bootstrapping a Flip app.",
            path: "/api/organisations/v4/bootstrap/organisation",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "keyword",
                    type: "string",
                    description:
                      "The keyword used to find the organisation. The word must be a full match to a keyword maintained for an organisation.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "domains",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      description:
                        "Description of a domain for an organisation",
                      properties: {
                        name: { type: "string" },
                        type: {
                          description: "Type of domain",
                          enum: ["PRIMARY", "ORGANISATION"],
                          type: "string",
                        },
                      },
                      required: ["name", "type"],
                      type: "object",
                    },
                  },
                ],
                type: "response",
              },
              { title: "404", parameters: [], type: "response" },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/organisations/v4/bootstrap/organisation");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/organisations/v4/bootstrap/organisation" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/organisations/v4/bootstrap/organisation");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/organisations/v4/bootstrap/organisation");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/organisations/v4/bootstrap/organisation HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/organisations/v4/bootstrap/organisation"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/organisations/v4/bootstrap/organisation")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/organisations/v4/bootstrap/organisation', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/organisations/v4/bootstrap/organisation")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/organisations/v4/bootstrap/organisation';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/organisations/v4/bootstrap/organisation"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/organisations/v4/bootstrap/organisation" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/organisations/v4/bootstrap/organisation', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/organisations/v4/bootstrap/organisation\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/organisations/v4/bootstrap/organisation"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/organisations/v4/bootstrap/organisation"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/organisations/v4/bootstrap/organisation\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/organisations/v4/bootstrap/organisation \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/organisations/v4/bootstrap/organisation")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/organisations/v4/bootstrap/organisation",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "domains": [\n    {\n      "name": "string",\n      "type": "PRIMARY"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  description: "List of domains returned in case of a match",
                  properties: {
                    domains: {
                      items: {
                        description:
                          "Description of a domain for an organisation",
                        properties: {
                          name: { type: "string" },
                          type: {
                            description: "Type of domain",
                            enum: ["PRIMARY", "ORGANISATION"],
                            type: "string",
                          },
                        },
                        required: ["name", "type"],
                        type: "object",
                      },
                      type: "array",
                    },
                  },
                  required: ["domains"],
                  type: "object",
                },
                statusCode: "200",
              },
              { schema: null, statusCode: "404" },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-password-policy",
            title: "Retrieve the password policy",
            description:
              "Retrieve the password policy for the active organisation",
            path: "/api/organisations/v4/bootstrap/password-policy",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "minimum_length",
                    type: "integer",
                    description: "",
                    required: true,
                  },
                  {
                    name: "uppercase_required",
                    type: "boolean",
                    description: "",
                    required: true,
                  },
                  {
                    name: "lowercase_required",
                    type: "boolean",
                    description: "",
                    required: true,
                  },
                  {
                    name: "digit_required",
                    type: "boolean",
                    description: "",
                    required: true,
                  },
                  {
                    name: "special_character_required",
                    type: "boolean",
                    description: "",
                    required: true,
                  },
                  {
                    name: "expires_after_days",
                    type: "integer",
                    description: "",
                    required: false,
                  },
                  {
                    name: "history_count",
                    type: "integer",
                    description: "",
                    required: false,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/organisations/v4/bootstrap/password-policy");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/organisations/v4/bootstrap/password-policy" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/organisations/v4/bootstrap/password-policy");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/organisations/v4/bootstrap/password-policy");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/organisations/v4/bootstrap/password-policy HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/organisations/v4/bootstrap/password-policy"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/organisations/v4/bootstrap/password-policy")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/organisations/v4/bootstrap/password-policy', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/organisations/v4/bootstrap/password-policy")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/organisations/v4/bootstrap/password-policy';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/organisations/v4/bootstrap/password-policy"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/organisations/v4/bootstrap/password-policy" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/organisations/v4/bootstrap/password-policy', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/organisations/v4/bootstrap/password-policy\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/organisations/v4/bootstrap/password-policy"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/organisations/v4/bootstrap/password-policy"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/organisations/v4/bootstrap/password-policy\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/organisations/v4/bootstrap/password-policy \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/organisations/v4/bootstrap/password-policy")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/organisations/v4/bootstrap/password-policy",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "minimum_length": 0,\n  "uppercase_required": true,\n  "lowercase_required": true,\n  "digit_required": true,\n  "special_character_required": true,\n  "expires_after_days": 0,\n  "history_count": 0\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    minimum_length: { type: "integer" },
                    uppercase_required: { type: "boolean" },
                    lowercase_required: { type: "boolean" },
                    digit_required: { type: "boolean" },
                    special_character_required: { type: "boolean" },
                    expires_after_days: { type: "integer" },
                    history_count: { type: "integer" },
                  },
                  required: [
                    "minimum_length",
                    "uppercase_required",
                    "lowercase_required",
                    "digit_required",
                    "special_character_required",
                  ],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
    ],
  },
  {
    id: "organisation-admin",
    title: "Organisation Admin",
    resources: [
      {
        id: "language-settings",
        title: "Language Settings",
        shortDescription: "",
        endpoints: [
          {
            id: "get-language-settings",
            title: "Get language settings for organisation",
            description: "Returns language settings for the organisation.",
            path: "/api/admin/organisations/v4/language-settings",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "languages",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        locale: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          example: "en-GB",
                        },
                        status: {
                          type: "string",
                          enum: ["INACTIVE", "ACTIVE", "DEFAULT"],
                        },
                      },
                      required: ["locale", "status"],
                    },
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/organisations/v4/language-settings");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/organisations/v4/language-settings" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/organisations/v4/language-settings");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/organisations/v4/language-settings");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/organisations/v4/language-settings HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/organisations/v4/language-settings"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/organisations/v4/language-settings")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/organisations/v4/language-settings', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/organisations/v4/language-settings")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/organisations/v4/language-settings';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/organisations/v4/language-settings"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/organisations/v4/language-settings" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/organisations/v4/language-settings', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/organisations/v4/language-settings\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/organisations/v4/language-settings"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/organisations/v4/language-settings"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/organisations/v4/language-settings\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/organisations/v4/language-settings \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/organisations/v4/language-settings")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/organisations/v4/language-settings",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "languages": [\n    {\n      "locale": "en-GB",\n      "status": "INACTIVE"\n    }\n  ],\n  "created_at": "2023-01-05T12:32:42.000Z",\n  "updated_at": "2023-02-13T12:32:42.000Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    languages: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          locale: {
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            format: "bcp47",
                            pattern:
                              "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                            example: "en-GB",
                          },
                          status: {
                            type: "string",
                            enum: ["INACTIVE", "ACTIVE", "DEFAULT"],
                          },
                        },
                        required: ["locale", "status"],
                      },
                    },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      example: "2023-01-05T12:32:42.000Z",
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      example: "2023-02-13T12:32:42.000Z",
                    },
                  },
                  required: ["languages", "created_at", "updated_at"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "update-language-settings",
            title: "Update language settings for organisation",
            description:
              "Allows to update language settings for the organisation.",
            path: "/api/admin/organisations/v4/language-settings",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "languages",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      "x-json-merge-patch": true,
                      properties: {
                        locale: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          examples: ["en-GB"],
                        },
                        status: {
                          type: "string",
                          enum: ["INACTIVE", "ACTIVE", "DEFAULT"],
                        },
                      },
                      required: ["locale"],
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "languages",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        locale: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          example: "en-GB",
                        },
                        status: {
                          type: "string",
                          enum: ["INACTIVE", "ACTIVE", "DEFAULT"],
                        },
                      },
                      required: ["locale", "status"],
                    },
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/organisations/v4/language-settings");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"languages\\":[{\\"locale\\":\\"en-GB\\",\\"status\\":\\"INACTIVE\\"}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/patch "http://localhost:3000/api/admin/organisations/v4/language-settings" {:content-type :json\n                                                                                    :form-params {:languages [{:locale "en-GB"\n                                                                                                               :status "INACTIVE"}]}\n                                                                                    :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/organisations/v4/language-settings");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"languages\\":[{\\"locale\\":\\"en-GB\\",\\"status\\":\\"INACTIVE\\"}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/organisations/v4/language-settings");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"languages\\":[{\\"locale\\":\\"en-GB\\",\\"status\\":\\"INACTIVE\\"}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'PATCH /api/admin/organisations/v4/language-settings HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 54\r\n\r\n{"languages":[{"locale":"en-GB","status":"INACTIVE"}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/organisations/v4/language-settings"\n\n\tpayload := strings.NewReader("{\\"languages\\":[{\\"locale\\":\\"en-GB\\",\\"status\\":\\"INACTIVE\\"}]}")\n\n\treq, _ := http.NewRequest("PATCH", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"languages\\":[{\\"locale\\":\\"en-GB\\",\\"status\\":\\"INACTIVE\\"}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/organisations/v4/language-settings")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'PATCH',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({languages: [{locale: 'en-GB', status: 'INACTIVE'}]})\n};\n\nfetch('http://localhost:3000/api/admin/organisations/v4/language-settings', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"languages\\":[{\\"locale\\":\\"en-GB\\",\\"status\\":\\"INACTIVE\\"}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/organisations/v4/language-settings")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/organisations/v4/language-settings';\nconst options = {\n  method: 'PATCH',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({languages: [{locale: 'en-GB', status: 'INACTIVE'}]})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"languages": @[ @{ @"locale": @"en-GB", @"status": @"INACTIVE" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/organisations/v4/language-settings"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"PATCH"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/organisations/v4/language-settings" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"languages\\":[{\\"locale\\":\\"en-GB\\",\\"status\\":\\"INACTIVE\\"}]}" in\n\nClient.call ~headers ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('PATCH', 'http://localhost:3000/api/admin/organisations/v4/language-settings', [\n  'body' => '{\"languages\":[{\"locale\":\"en-GB\",\"status\":\"INACTIVE\"}]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/organisations/v4/language-settings\' -Method PATCH -Headers $headers -ContentType \'application/json\' -Body \'{"languages":[{"locale":"en-GB","status":"INACTIVE"}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/organisations/v4/language-settings"\n\npayload = {"languages": [\n        {\n            "locale": "en-GB",\n            "status": "INACTIVE"\n        }\n    ]}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.patch(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/organisations/v4/language-settings"\n\npayload <- "{\\"languages\\":[{\\"locale\\":\\"en-GB\\",\\"status\\":\\"INACTIVE\\"}]}"\n\nencode <- "json"\n\nresponse <- VERB("PATCH", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/organisations/v4/language-settings")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"languages\\":[{\\"locale\\":\\"en-GB\\",\\"status\\":\\"INACTIVE\\"}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request PATCH \\\n     --url http://localhost:3000/api/admin/organisations/v4/language-settings \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "languages": [\n    {\n      "locale": "en-GB",\n      "status": "INACTIVE"\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["languages": [\n    [\n      "locale": "en-GB",\n      "status": "INACTIVE"\n    ]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/organisations/v4/language-settings")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "PATCH"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "PATCH",
                url: "/api/admin/organisations/v4/language-settings",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "languages": [\n    {\n      "locale": "en-GB",\n      "status": "INACTIVE"\n    }\n  ],\n  "created_at": "2023-01-05T12:32:42.000Z",\n  "updated_at": "2023-02-13T12:32:42.000Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    languages: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          locale: {
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            format: "bcp47",
                            pattern:
                              "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                            example: "en-GB",
                          },
                          status: {
                            type: "string",
                            enum: ["INACTIVE", "ACTIVE", "DEFAULT"],
                          },
                        },
                        required: ["locale", "status"],
                      },
                    },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      example: "2023-01-05T12:32:42.000Z",
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      example: "2023-02-13T12:32:42.000Z",
                    },
                  },
                  required: ["languages", "created_at", "updated_at"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "patch",
          },
        ],
      },
    ],
  },
  {
    id: "posts",
    title: "Posts",
    resources: [
      {
        id: "posts",
        title: "Posts",
        shortDescription: "",
        endpoints: [
          {
            id: "get-posts",
            title: "Get Posts.",
            description:
              "Get a list of posts of all channels the user has access to. Other filters can be used to narrow down the result set.",
            path: "/api/posts/v4/posts",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "external_id",
                    type: "array",
                    description: "Filter by external IDs.",
                    required: false,
                    items: {
                      type: "string",
                      minLength: 1,
                      maxLength: 200,
                      description:
                        "An arbitrary string referencing an external entity identifier.",
                    },
                  },
                  {
                    name: "channel_id",
                    type: "array",
                    description: "Filter by channel ID.",
                    required: false,
                    items: { type: "string", format: "uuid" },
                  },
                  {
                    name: "newsfeed",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "status",
                    type: "string",
                    description:
                      '- DRAFT: A post that is still a work in progress and is not visible to other users.\n- SCHEDULED: A post set to be published in the future.\n- PUBLISHED: A post currently visible for all users in that channel.\n- ARCHIVED: A post that has been soft-deleted and is no longer visible for all users in that channel.\n\nThe status of the post is determined by the timestamps as follows:\n- If "archived_at" is in the past, the status is "ARCHIVED."\n- If "published_at" is in the past and "archived_at" is null or in the future, the status is "PUBLISHED."\n- If "published_at" is in the future and "archived_at" is null or in the future, the status is "SCHEDULED."\n- If "published_at" and "archived_at" are both null, the status is "DRAFT."\n',
                    required: false,
                  },
                  {
                    name: "highlighted",
                    type: "boolean",
                    description:
                      "Filter to only include highlighted or non-highlighted Posts.",
                    required: false,
                  },
                  {
                    name: "search_terms",
                    type: "array",
                    description: "Filter by search terms.",
                    required: false,
                    items: { type: "string" },
                  },
                  {
                    name: "created_at_after",
                    type: "string",
                    description: "Filter by created timestamp (after)",
                    required: false,
                  },
                  {
                    name: "created_at_before",
                    type: "string",
                    description: "Filter by created timestamp (before)",
                    required: false,
                  },
                  {
                    name: "updated_at_after",
                    type: "string",
                    description: "Filter by updated timestamp (after)",
                    required: false,
                  },
                  {
                    name: "updated_at_before",
                    type: "string",
                    description: "Filter by updated timestamp (before)",
                    required: false,
                  },
                  {
                    name: "published_at_after",
                    type: "string",
                    description: "Filter by published timestamp (after)",
                    required: false,
                  },
                  {
                    name: "published_at_before",
                    type: "string",
                    description: "Filter by published timestamp (before)",
                    required: false,
                  },
                  {
                    name: "edited_at_after",
                    type: "string",
                    description: "Filter by edited timestamp (after)",
                    required: false,
                  },
                  {
                    name: "edited_at_before",
                    type: "string",
                    description: "Filter by edited timestamp (before)",
                    required: false,
                  },
                  {
                    name: "archived_at_after",
                    type: "string",
                    description: "Filter by archived timestamp (after)",
                    required: false,
                  },
                  {
                    name: "archived_at_before",
                    type: "string",
                    description: "Filter by archived timestamp (before)",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "CREATED_AT_ASC",
                        "CREATED_AT_DESC",
                        "UPDATED_AT_ASC",
                        "UPDATED_AT_DESC",
                        "PUBLISHED_AT_ASC",
                        "PUBLISHED_AT_DESC",
                        "EDITED_AT_ASC",
                        "EDITED_AT_DESC",
                        "ARCHIVED_AT_ASC",
                        "ARCHIVED_AT_DESC",
                        "HIGHLIGHTED_UNTIL_ASC",
                        "HIGHLIGHTED_UNTIL_DESC",
                      ],
                    },
                  },
                  {
                    name: "page_cursor",
                    type: "string",
                    description:
                      'A cursor pointing to the first item to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "content_format",
                    type: "string",
                    description:
                      "Set the format of the post content to be returned. A default will be provided if not available.",
                    required: false,
                  },
                  {
                    name: "embed",
                    type: "array",
                    description:
                      'Defines the values to embed into the response body.\nRefer to our general "embedment" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "AUTHOR",
                        "CHANNEL",
                        "REACTIONS_SUMMARY",
                        "COMMENTS_SUMMARY",
                      ],
                    },
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "posts",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      allOf: [
                        {
                          type: "object",
                          description: "Representation of a post.",
                          properties: {
                            id: {
                              type: "string",
                              format: "uuid",
                              description: "The unique identifier of the post.",
                              nullable: false,
                            },
                            external_id: {
                              type: "string",
                              minLength: 1,
                              maxLength: 200,
                              nullable: true,
                              description:
                                "An arbitrary string referencing an external entity identifier.",
                            },
                            channel_id: {
                              type: "string",
                              format: "uuid",
                              description:
                                "The unique identifier of the channel the post is in.",
                            },
                            channel: {
                              nullable: true,
                              type: "object",
                              properties: {
                                id: { type: "string", format: "uuid" },
                                external_id: {
                                  type: "string",
                                  minLength: 1,
                                  maxLength: 200,
                                  nullable: true,
                                  description:
                                    "An arbitrary string referencing an external entity identifier.",
                                },
                                name: { type: "string", example: "My Channel" },
                                settings: {
                                  type: "object",
                                  properties: {
                                    show_download_button_for_pdf: {
                                      type: "boolean",
                                    },
                                    show_download_button_for_media: {
                                      type: "boolean",
                                    },
                                  },
                                  required: [
                                    "show_download_button_for_media",
                                    "show_download_button_for_pdf",
                                  ],
                                },
                              },
                              required: ["id", "name", "settings"],
                            },
                            author_id: {
                              type: "string",
                              format: "uuid",
                              description:
                                "The unique identifier of the author of the post.",
                            },
                            author: {
                              type: "object",
                              nullable: true,
                              properties: {
                                id: { type: "string", format: "uuid" },
                                is_deleted: { type: "boolean" },
                                first_name: { type: "string", example: "Jon" },
                                last_name: { type: "string", example: "Doe" },
                                department: {
                                  type: "string",
                                  example: "Marketing",
                                  nullable: true,
                                },
                                profile_picture: {
                                  type: "object",
                                  nullable: true,
                                  properties: {
                                    file_id: { type: "string", format: "uuid" },
                                  },
                                },
                              },
                              required: [
                                "id",
                                "is_deleted",
                                "first_name",
                                "last_name",
                              ],
                            },
                            info: {
                              allOf: [
                                {
                                  allOf: [
                                    {
                                      type: "object",
                                      properties: {
                                        published_at: {
                                          type: "string",
                                          format: "date-time",
                                          nullable: true,
                                          description:
                                            "The point in time at which this resource was published.",
                                        },
                                        edited_at: {
                                          type: "string",
                                          format: "date-time",
                                          nullable: true,
                                          description:
                                            "The point in time at which this resource was last edited.",
                                        },
                                        archived_at: {
                                          type: "string",
                                          format: "date-time",
                                          nullable: true,
                                          description:
                                            "The point in time at which this resource was archived.",
                                        },
                                        highlighted_until: {
                                          type: "string",
                                          format: "date-time",
                                          nullable: true,
                                          description:
                                            "The point in time up to which the post is highlighted.",
                                        },
                                      },
                                    },
                                    {
                                      type: "object",
                                      properties: {
                                        created_at: {
                                          type: "string",
                                          format: "date-time",
                                          description:
                                            "The point in time at which this resource was created.",
                                        },
                                        updated_at: {
                                          type: "string",
                                          format: "date-time",
                                          nullable: false,
                                          description:
                                            "The point in time at which this resource was last updated.",
                                        },
                                      },
                                    },
                                  ],
                                },
                                {
                                  type: "object",
                                  properties: {
                                    status: {
                                      type: "string",
                                      enum: [
                                        "DRAFT",
                                        "SCHEDULED",
                                        "PUBLISHED",
                                        "ARCHIVED",
                                      ],
                                      description: "The status of the post.",
                                    },
                                  },
                                  required: ["status"],
                                },
                              ],
                            },
                            content: {
                              type: "array",
                              items: {
                                type: "object",
                                properties: {
                                  locale: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  title: {
                                    type: "string",
                                    example: "Hello world as plain text!",
                                  },
                                  body: {
                                    type: "object",
                                    required: ["format", "value"],
                                    properties: {
                                      format: {
                                        type: "string",
                                        enum: ["HTML", "DELTA", "PLAIN"],
                                        example: "HTML",
                                      },
                                      value: {
                                        type: "string",
                                        example: "<h1>Hello world!</h1>",
                                      },
                                    },
                                  },
                                  attachments: {
                                    type: "array",
                                    items: {
                                      type: "object",
                                      properties: {
                                        id: {
                                          type: "string",
                                          format: "uuid",
                                          example:
                                            "12345678-1234-1234-1234-123456789012",
                                        },
                                        link: {
                                          type: "string",
                                          format: "uri",
                                          example:
                                            "https://www.getflip.com/attachments/12345678-1234-1234-1234-123456789012",
                                        },
                                        type: {
                                          type: "string",
                                          enum: [
                                            "IMAGE",
                                            "AUDIO",
                                            "VIDEO",
                                            "MISCELLANEOUS",
                                          ],
                                          example: "IMAGE",
                                        },
                                        usage_type: {
                                          type: "string",
                                          enum: ["HEADER", "INLINE", "FOOTER"],
                                          example: "HEADER",
                                        },
                                        order_number: {
                                          type: "integer",
                                          example: 1,
                                        },
                                        origin_filename: {
                                          type: "string",
                                          example: "my-attachment.pdf",
                                        },
                                      },
                                    },
                                  },
                                },
                                required: ["locale", "title", "body"],
                              },
                            },
                            reactions_summary: {
                              type: "object",
                              required: ["total", "items"],
                              properties: {
                                total: { type: "integer", minimum: 0 },
                                items: {
                                  type: "array",
                                  items: {
                                    type: "object",
                                    required: ["count", "icon", "type"],
                                    properties: {
                                      count: { type: "integer", minimum: 0 },
                                      icon: {
                                        type: "string",
                                        description:
                                          "Fallback textual representation of the icon",
                                        example: "U+1F604",
                                      },
                                      type: {
                                        type: "string",
                                        enum: [
                                          "THUMBS_UP",
                                          "CLAPPING",
                                          "HEART",
                                          "INSPIRING",
                                          "HAPPY",
                                          "SAD",
                                        ],
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            comments_summary: {
                              type: "object",
                              required: ["total"],
                              properties: {
                                total: { type: "integer", minimum: 0 },
                              },
                            },
                            settings: {
                              allOf: [
                                {
                                  type: "object",
                                  properties: {
                                    reactions_enabled: { type: "boolean" },
                                  },
                                  required: ["reactions_enabled"],
                                },
                                {
                                  type: "object",
                                  properties: {
                                    comments_enabled: { type: "boolean" },
                                  },
                                  required: ["comments_enabled"],
                                },
                              ],
                            },
                          },
                        },
                      ],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                    required: false,
                    properties: [
                      {
                        name: "next_cursor",
                        type: "string",
                        description:
                          'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                      {
                        name: "has_more",
                        type: "boolean",
                        description:
                          'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/posts/v4/posts");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/posts/v4/posts" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/posts/v4/posts");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/posts/v4/posts");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/posts/v4/posts HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/posts/v4/posts"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/posts/v4/posts")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/posts/v4/posts', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/posts/v4/posts")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/posts/v4/posts';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/posts/v4/posts"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/posts/v4/posts" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/posts/v4/posts', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/posts/v4/posts\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/posts/v4/posts"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/posts/v4/posts"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/posts/v4/posts\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/posts/v4/posts \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/posts/v4/posts")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/posts/v4/posts",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "posts": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "external_id": "string",\n      "channel_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "channel": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "external_id": "string",\n        "name": "My Channel",\n        "settings": {\n          "show_download_button_for_pdf": true,\n          "show_download_button_for_media": true\n        }\n      },\n      "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "author": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      },\n      "info": {\n        "published_at": "2024-01-11T07:41:25.662Z",\n        "edited_at": "2024-01-11T07:41:25.662Z",\n        "archived_at": "2024-01-11T07:41:25.662Z",\n        "highlighted_until": "2024-01-11T07:41:25.662Z",\n        "created_at": "2024-01-11T07:41:25.662Z",\n        "updated_at": "2024-01-11T07:41:25.662Z",\n        "status": "DRAFT"\n      },\n      "content": [\n        {\n          "locale": "en-GB",\n          "title": "Hello world as plain text!",\n          "body": {\n            "format": "HTML",\n            "value": "<h1>Hello world!</h1>"\n          },\n          "attachments": [\n            {\n              "id": "12345678-1234-1234-1234-123456789012",\n              "link": "https://www.getflip.com/attachments/12345678-1234-1234-1234-123456789012",\n              "type": "IMAGE",\n              "usage_type": "HEADER",\n              "order_number": 1,\n              "origin_filename": "my-attachment.pdf"\n            }\n          ]\n        }\n      ],\n      "reactions_summary": {\n        "total": 0,\n        "items": [\n          {\n            "count": 0,\n            "icon": "U+1F604",\n            "type": "THUMBS_UP"\n          }\n        ]\n      },\n      "comments_summary": {\n        "total": 0\n      },\n      "settings": {\n        "reactions_enabled": true,\n        "comments_enabled": true\n      }\n    }\n  ],\n  "pagination": {\n    "next_cursor": "string",\n    "has_more": true\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    posts: {
                      type: "array",
                      items: {
                        allOf: [
                          {
                            type: "object",
                            description: "Representation of a post.",
                            properties: {
                              id: {
                                type: "string",
                                format: "uuid",
                                description:
                                  "The unique identifier of the post.",
                                nullable: false,
                              },
                              external_id: {
                                type: "string",
                                minLength: 1,
                                maxLength: 200,
                                nullable: true,
                                description:
                                  "An arbitrary string referencing an external entity identifier.",
                              },
                              channel_id: {
                                type: "string",
                                format: "uuid",
                                description:
                                  "The unique identifier of the channel the post is in.",
                              },
                              channel: {
                                nullable: true,
                                type: "object",
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  external_id: {
                                    type: "string",
                                    minLength: 1,
                                    maxLength: 200,
                                    nullable: true,
                                    description:
                                      "An arbitrary string referencing an external entity identifier.",
                                  },
                                  name: {
                                    type: "string",
                                    example: "My Channel",
                                  },
                                  settings: {
                                    type: "object",
                                    properties: {
                                      show_download_button_for_pdf: {
                                        type: "boolean",
                                      },
                                      show_download_button_for_media: {
                                        type: "boolean",
                                      },
                                    },
                                    required: [
                                      "show_download_button_for_media",
                                      "show_download_button_for_pdf",
                                    ],
                                  },
                                },
                                required: ["id", "name", "settings"],
                              },
                              author_id: {
                                type: "string",
                                format: "uuid",
                                description:
                                  "The unique identifier of the author of the post.",
                              },
                              author: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  is_deleted: { type: "boolean" },
                                  first_name: {
                                    type: "string",
                                    example: "Jon",
                                  },
                                  last_name: { type: "string", example: "Doe" },
                                  department: {
                                    type: "string",
                                    example: "Marketing",
                                    nullable: true,
                                  },
                                  profile_picture: {
                                    type: "object",
                                    nullable: true,
                                    properties: {
                                      file_id: {
                                        type: "string",
                                        format: "uuid",
                                      },
                                    },
                                  },
                                },
                                required: [
                                  "id",
                                  "is_deleted",
                                  "first_name",
                                  "last_name",
                                ],
                              },
                              info: {
                                allOf: [
                                  {
                                    allOf: [
                                      {
                                        type: "object",
                                        properties: {
                                          published_at: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description:
                                              "The point in time at which this resource was published.",
                                          },
                                          edited_at: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description:
                                              "The point in time at which this resource was last edited.",
                                          },
                                          archived_at: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description:
                                              "The point in time at which this resource was archived.",
                                          },
                                          highlighted_until: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: true,
                                            description:
                                              "The point in time up to which the post is highlighted.",
                                          },
                                        },
                                      },
                                      {
                                        type: "object",
                                        properties: {
                                          created_at: {
                                            type: "string",
                                            format: "date-time",
                                            description:
                                              "The point in time at which this resource was created.",
                                          },
                                          updated_at: {
                                            type: "string",
                                            format: "date-time",
                                            nullable: false,
                                            description:
                                              "The point in time at which this resource was last updated.",
                                          },
                                        },
                                      },
                                    ],
                                  },
                                  {
                                    type: "object",
                                    properties: {
                                      status: {
                                        type: "string",
                                        enum: [
                                          "DRAFT",
                                          "SCHEDULED",
                                          "PUBLISHED",
                                          "ARCHIVED",
                                        ],
                                        description: "The status of the post.",
                                      },
                                    },
                                    required: ["status"],
                                  },
                                ],
                              },
                              content: {
                                type: "array",
                                items: {
                                  type: "object",
                                  properties: {
                                    locale: {
                                      type: "string",
                                      description:
                                        "A locale representing a language and region.",
                                      format: "bcp47",
                                      pattern:
                                        "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                      example: "en-GB",
                                    },
                                    title: {
                                      type: "string",
                                      example: "Hello world as plain text!",
                                    },
                                    body: {
                                      type: "object",
                                      required: ["format", "value"],
                                      properties: {
                                        format: {
                                          type: "string",
                                          enum: ["HTML", "DELTA", "PLAIN"],
                                          example: "HTML",
                                        },
                                        value: {
                                          type: "string",
                                          example: "<h1>Hello world!</h1>",
                                        },
                                      },
                                    },
                                    attachments: {
                                      type: "array",
                                      items: {
                                        type: "object",
                                        properties: {
                                          id: {
                                            type: "string",
                                            format: "uuid",
                                            example:
                                              "12345678-1234-1234-1234-123456789012",
                                          },
                                          link: {
                                            type: "string",
                                            format: "uri",
                                            example:
                                              "https://www.getflip.com/attachments/12345678-1234-1234-1234-123456789012",
                                          },
                                          type: {
                                            type: "string",
                                            enum: [
                                              "IMAGE",
                                              "AUDIO",
                                              "VIDEO",
                                              "MISCELLANEOUS",
                                            ],
                                            example: "IMAGE",
                                          },
                                          usage_type: {
                                            type: "string",
                                            enum: [
                                              "HEADER",
                                              "INLINE",
                                              "FOOTER",
                                            ],
                                            example: "HEADER",
                                          },
                                          order_number: {
                                            type: "integer",
                                            example: 1,
                                          },
                                          origin_filename: {
                                            type: "string",
                                            example: "my-attachment.pdf",
                                          },
                                        },
                                      },
                                    },
                                  },
                                  required: ["locale", "title", "body"],
                                },
                              },
                              reactions_summary: {
                                type: "object",
                                required: ["total", "items"],
                                properties: {
                                  total: { type: "integer", minimum: 0 },
                                  items: {
                                    type: "array",
                                    items: {
                                      type: "object",
                                      required: ["count", "icon", "type"],
                                      properties: {
                                        count: { type: "integer", minimum: 0 },
                                        icon: {
                                          type: "string",
                                          description:
                                            "Fallback textual representation of the icon",
                                          example: "U+1F604",
                                        },
                                        type: {
                                          type: "string",
                                          enum: [
                                            "THUMBS_UP",
                                            "CLAPPING",
                                            "HEART",
                                            "INSPIRING",
                                            "HAPPY",
                                            "SAD",
                                          ],
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              comments_summary: {
                                type: "object",
                                required: ["total"],
                                properties: {
                                  total: { type: "integer", minimum: 0 },
                                },
                              },
                              settings: {
                                allOf: [
                                  {
                                    type: "object",
                                    properties: {
                                      reactions_enabled: { type: "boolean" },
                                    },
                                    required: ["reactions_enabled"],
                                  },
                                  {
                                    type: "object",
                                    properties: {
                                      comments_enabled: { type: "boolean" },
                                    },
                                    required: ["comments_enabled"],
                                  },
                                ],
                              },
                            },
                          },
                        ],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                      required: ["has_more", "next_cursor"],
                      properties: {
                        next_cursor: {
                          type: "string",
                          description:
                            'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        },
                        has_more: {
                          type: "boolean",
                          description:
                            'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        },
                      },
                    },
                  },
                  description: "Representation of a collection of posts.",
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-post",
            title: "Get a Post.",
            description: "Get a post by its primary identifier.",
            path: "/api/posts/v4/posts/{post_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "post_id",
                    type: "string",
                    description:
                      "The primary identifier of the post to access.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "content_format",
                    type: "string",
                    description:
                      "Set the format of the post content to be returned. A default will be provided if not available.",
                    required: false,
                  },
                  {
                    name: "embed",
                    type: "array",
                    description:
                      'Defines the values to embed into the response body.\nRefer to our general "embedment" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "AUTHOR",
                        "CHANNEL",
                        "REACTIONS_SUMMARY",
                        "COMMENTS_SUMMARY",
                      ],
                    },
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "200", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/posts/v4/posts/post_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/posts/v4/posts/post_id" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/posts/v4/posts/post_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/posts/v4/posts/post_id");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/posts/v4/posts/post_id HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/posts/v4/posts/post_id"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/posts/v4/posts/post_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/posts/v4/posts/post_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/posts/v4/posts/post_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/posts/v4/posts/post_id';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/posts/v4/posts/post_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/posts/v4/posts/post_id" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/posts/v4/posts/post_id', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/posts/v4/posts/post_id\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/posts/v4/posts/post_id"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/posts/v4/posts/post_id"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/posts/v4/posts/post_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/posts/v4/posts/post_id \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/posts/v4/posts/post_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/posts/v4/posts/{post_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "channel_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "channel": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "external_id": "string",\n    "name": "My Channel",\n    "settings": {\n      "show_download_button_for_pdf": true,\n      "show_download_button_for_media": true\n    }\n  },\n  "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "author": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "is_deleted": true,\n    "first_name": "Jon",\n    "last_name": "Doe",\n    "department": "Marketing",\n    "profile_picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "info": {\n    "published_at": "2024-01-11T07:41:25.662Z",\n    "edited_at": "2024-01-11T07:41:25.662Z",\n    "archived_at": "2024-01-11T07:41:25.662Z",\n    "highlighted_until": "2024-01-11T07:41:25.662Z",\n    "created_at": "2024-01-11T07:41:25.662Z",\n    "updated_at": "2024-01-11T07:41:25.662Z",\n    "status": "DRAFT"\n  },\n  "content": [\n    {\n      "locale": "en-GB",\n      "title": "Hello world as plain text!",\n      "body": {\n        "format": "HTML",\n        "value": "<h1>Hello world!</h1>"\n      },\n      "attachments": [\n        {\n          "id": "12345678-1234-1234-1234-123456789012",\n          "link": "https://www.getflip.com/attachments/12345678-1234-1234-1234-123456789012",\n          "type": "IMAGE",\n          "usage_type": "HEADER",\n          "order_number": 1,\n          "origin_filename": "my-attachment.pdf"\n        }\n      ]\n    }\n  ],\n  "reactions_summary": {\n    "total": 0,\n    "items": [\n      {\n        "count": 0,\n        "icon": "U+1F604",\n        "type": "THUMBS_UP"\n      }\n    ]\n  },\n  "comments_summary": {\n    "total": 0\n  },\n  "settings": {\n    "reactions_enabled": true,\n    "comments_enabled": true\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  allOf: [
                    {
                      type: "object",
                      description: "Representation of a post.",
                      properties: {
                        id: {
                          type: "string",
                          format: "uuid",
                          description: "The unique identifier of the post.",
                          nullable: false,
                        },
                        external_id: {
                          type: "string",
                          minLength: 1,
                          maxLength: 200,
                          nullable: true,
                          description:
                            "An arbitrary string referencing an external entity identifier.",
                        },
                        channel_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the channel the post is in.",
                        },
                        channel: {
                          nullable: true,
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            external_id: {
                              type: "string",
                              minLength: 1,
                              maxLength: 200,
                              nullable: true,
                              description:
                                "An arbitrary string referencing an external entity identifier.",
                            },
                            name: { type: "string", example: "My Channel" },
                            settings: {
                              type: "object",
                              properties: {
                                show_download_button_for_pdf: {
                                  type: "boolean",
                                },
                                show_download_button_for_media: {
                                  type: "boolean",
                                },
                              },
                              required: [
                                "show_download_button_for_media",
                                "show_download_button_for_pdf",
                              ],
                            },
                          },
                          required: ["id", "name", "settings"],
                        },
                        author_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the author of the post.",
                        },
                        author: {
                          type: "object",
                          nullable: true,
                          properties: {
                            id: { type: "string", format: "uuid" },
                            is_deleted: { type: "boolean" },
                            first_name: { type: "string", example: "Jon" },
                            last_name: { type: "string", example: "Doe" },
                            department: {
                              type: "string",
                              example: "Marketing",
                              nullable: true,
                            },
                            profile_picture: {
                              type: "object",
                              nullable: true,
                              properties: {
                                file_id: { type: "string", format: "uuid" },
                              },
                            },
                          },
                          required: [
                            "id",
                            "is_deleted",
                            "first_name",
                            "last_name",
                          ],
                        },
                        info: {
                          allOf: [
                            {
                              allOf: [
                                {
                                  type: "object",
                                  properties: {
                                    published_at: {
                                      type: "string",
                                      format: "date-time",
                                      nullable: true,
                                      description:
                                        "The point in time at which this resource was published.",
                                    },
                                    edited_at: {
                                      type: "string",
                                      format: "date-time",
                                      nullable: true,
                                      description:
                                        "The point in time at which this resource was last edited.",
                                    },
                                    archived_at: {
                                      type: "string",
                                      format: "date-time",
                                      nullable: true,
                                      description:
                                        "The point in time at which this resource was archived.",
                                    },
                                    highlighted_until: {
                                      type: "string",
                                      format: "date-time",
                                      nullable: true,
                                      description:
                                        "The point in time up to which the post is highlighted.",
                                    },
                                  },
                                },
                                {
                                  type: "object",
                                  properties: {
                                    created_at: {
                                      type: "string",
                                      format: "date-time",
                                      description:
                                        "The point in time at which this resource was created.",
                                    },
                                    updated_at: {
                                      type: "string",
                                      format: "date-time",
                                      nullable: false,
                                      description:
                                        "The point in time at which this resource was last updated.",
                                    },
                                  },
                                },
                              ],
                            },
                            {
                              type: "object",
                              properties: {
                                status: {
                                  type: "string",
                                  enum: [
                                    "DRAFT",
                                    "SCHEDULED",
                                    "PUBLISHED",
                                    "ARCHIVED",
                                  ],
                                  description: "The status of the post.",
                                },
                              },
                              required: ["status"],
                            },
                          ],
                        },
                        content: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              locale: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              title: {
                                type: "string",
                                example: "Hello world as plain text!",
                              },
                              body: {
                                type: "object",
                                required: ["format", "value"],
                                properties: {
                                  format: {
                                    type: "string",
                                    enum: ["HTML", "DELTA", "PLAIN"],
                                    example: "HTML",
                                  },
                                  value: {
                                    type: "string",
                                    example: "<h1>Hello world!</h1>",
                                  },
                                },
                              },
                              attachments: {
                                type: "array",
                                items: {
                                  type: "object",
                                  properties: {
                                    id: {
                                      type: "string",
                                      format: "uuid",
                                      example:
                                        "12345678-1234-1234-1234-123456789012",
                                    },
                                    link: {
                                      type: "string",
                                      format: "uri",
                                      example:
                                        "https://www.getflip.com/attachments/12345678-1234-1234-1234-123456789012",
                                    },
                                    type: {
                                      type: "string",
                                      enum: [
                                        "IMAGE",
                                        "AUDIO",
                                        "VIDEO",
                                        "MISCELLANEOUS",
                                      ],
                                      example: "IMAGE",
                                    },
                                    usage_type: {
                                      type: "string",
                                      enum: ["HEADER", "INLINE", "FOOTER"],
                                      example: "HEADER",
                                    },
                                    order_number: {
                                      type: "integer",
                                      example: 1,
                                    },
                                    origin_filename: {
                                      type: "string",
                                      example: "my-attachment.pdf",
                                    },
                                  },
                                },
                              },
                            },
                            required: ["locale", "title", "body"],
                          },
                        },
                        reactions_summary: {
                          type: "object",
                          required: ["total", "items"],
                          properties: {
                            total: { type: "integer", minimum: 0 },
                            items: {
                              type: "array",
                              items: {
                                type: "object",
                                required: ["count", "icon", "type"],
                                properties: {
                                  count: { type: "integer", minimum: 0 },
                                  icon: {
                                    type: "string",
                                    description:
                                      "Fallback textual representation of the icon",
                                    example: "U+1F604",
                                  },
                                  type: {
                                    type: "string",
                                    enum: [
                                      "THUMBS_UP",
                                      "CLAPPING",
                                      "HEART",
                                      "INSPIRING",
                                      "HAPPY",
                                      "SAD",
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                        comments_summary: {
                          type: "object",
                          required: ["total"],
                          properties: {
                            total: { type: "integer", minimum: 0 },
                          },
                        },
                        settings: {
                          allOf: [
                            {
                              type: "object",
                              properties: {
                                reactions_enabled: { type: "boolean" },
                              },
                              required: ["reactions_enabled"],
                            },
                            {
                              type: "object",
                              properties: {
                                comments_enabled: { type: "boolean" },
                              },
                              required: ["comments_enabled"],
                            },
                          ],
                        },
                      },
                    },
                  ],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "update-post-content",
            title: "Update the Post Content.",
            description:
              "Updates the content in the specified language of a post.",
            path: "/api/posts/v4/posts/{post_id}/contents/{locale}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "post_id",
                    type: "string",
                    description:
                      "The primary identifier of the post to access.",
                    required: true,
                  },
                  {
                    name: "locale",
                    type: "string",
                    description: "The language of the post content to access.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "title",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "body",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "format",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "value",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "attachments",
                    type: "array",
                    description:
                      "A list of attachments to be added to the post.\nThe order number can be set explicitly.\nThe order number is saved as received.\nAny attachment without order number is appended to the end of the list.",
                    required: false,
                    items: {
                      type: "object",
                      required: ["id", "usage_type"],
                      properties: {
                        id: { type: "string", format: "uuid" },
                        usage_type: {
                          type: "string",
                          enum: ["HEADER", "INLINE", "FOOTER"],
                          default: "FOOTER",
                          examples: ["HEADER"],
                        },
                        order_number: { type: "integer", examples: [1] },
                      },
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "locale",
                    type: "string",
                    description: "A locale representing a language and region.",
                    required: true,
                  },
                  {
                    name: "title",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "body",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "format",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "value",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "attachments",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          format: "uuid",
                          example: "12345678-1234-1234-1234-123456789012",
                        },
                        link: {
                          type: "string",
                          format: "uri",
                          example:
                            "https://www.getflip.com/attachments/12345678-1234-1234-1234-123456789012",
                        },
                        type: {
                          type: "string",
                          enum: ["IMAGE", "AUDIO", "VIDEO", "MISCELLANEOUS"],
                          example: "IMAGE",
                        },
                        usage_type: {
                          type: "string",
                          enum: ["HEADER", "INLINE", "FOOTER"],
                          example: "HEADER",
                        },
                        order_number: { type: "integer", example: 1 },
                        origin_filename: {
                          type: "string",
                          example: "my-attachment.pdf",
                        },
                      },
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/posts/v4/posts/post_id/contents/locale");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/merge-patch+json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"title\\":\\"Hello world as plain text!\\",\\"body\\":{\\"format\\":\\"HTML\\",\\"value\\":\\"<h1>Hello world!</h1>\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"usage_type\\":\\"HEADER\\",\\"order_number\\":1}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/patch "http://localhost:3000/api/posts/v4/posts/post_id/contents/locale" {:headers {:content-type "application/merge-patch+json"}\n                                                                                  :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/posts/v4/posts/post_id/contents/locale");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/merge-patch+json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"title\\":\\"Hello world as plain text!\\",\\"body\\":{\\"format\\":\\"HTML\\",\\"value\\":\\"<h1>Hello world!</h1>\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"usage_type\\":\\"HEADER\\",\\"order_number\\":1}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/posts/v4/posts/post_id/contents/locale");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/merge-patch+json");\nrequest.AddParameter("application/merge-patch+json", "{\\"title\\":\\"Hello world as plain text!\\",\\"body\\":{\\"format\\":\\"HTML\\",\\"value\\":\\"<h1>Hello world!</h1>\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"usage_type\\":\\"HEADER\\",\\"order_number\\":1}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'PATCH /api/posts/v4/posts/post_id/contents/locale HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/merge-patch+json\r\nHost: localhost:3000\r\nContent-Length: 196\r\n\r\n{"title":"Hello world as plain text!","body":{"format":"HTML","value":"<h1>Hello world!</h1>"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","usage_type":"HEADER","order_number":1}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/posts/v4/posts/post_id/contents/locale"\n\n\tpayload := strings.NewReader("{\\"title\\":\\"Hello world as plain text!\\",\\"body\\":{\\"format\\":\\"HTML\\",\\"value\\":\\"<h1>Hello world!</h1>\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"usage_type\\":\\"HEADER\\",\\"order_number\\":1}]}")\n\n\treq, _ := http.NewRequest("PATCH", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/merge-patch+json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/merge-patch+json");\nRequestBody body = RequestBody.create(mediaType, "{\\"title\\":\\"Hello world as plain text!\\",\\"body\\":{\\"format\\":\\"HTML\\",\\"value\\":\\"<h1>Hello world!</h1>\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"usage_type\\":\\"HEADER\\",\\"order_number\\":1}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/posts/v4/posts/post_id/contents/locale")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/merge-patch+json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  'const options = {\n  method: \'PATCH\',\n  headers: {accept: \'application/json\', \'content-type\': \'application/merge-patch+json\'},\n  body: \'{"title":"Hello world as plain text!","body":{"format":"HTML","value":"<h1>Hello world!</h1>"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","usage_type":"HEADER","order_number":1}]}\'\n};\n\nfetch(\'http://localhost:3000/api/posts/v4/posts/post_id/contents/locale\', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));',
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/merge-patch+json")\nval body = RequestBody.create(mediaType, "{\\"title\\":\\"Hello world as plain text!\\",\\"body\\":{\\"format\\":\\"HTML\\",\\"value\\":\\"<h1>Hello world!</h1>\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"usage_type\\":\\"HEADER\\",\\"order_number\\":1}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/posts/v4/posts/post_id/contents/locale")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/merge-patch+json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: 'const fetch = require(\'node-fetch\');\n\nconst url = \'http://localhost:3000/api/posts/v4/posts/post_id/contents/locale\';\nconst options = {\n  method: \'PATCH\',\n  headers: {accept: \'application/json\', \'content-type\': \'application/merge-patch+json\'},\n  body: \'{"title":"Hello world as plain text!","body":{"format":"HTML","value":"<h1>Hello world!</h1>"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","usage_type":"HEADER","order_number":1}]}\'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error(\'error:\' + err));',
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/merge-patch+json" };\n\nNSData *postData = [[NSData alloc] initWithData:[@"{"title":"Hello world as plain text!","body":{"format":"HTML","value":"<h1>Hello world!</h1>"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","usage_type":"HEADER","order_number":1}]}" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/posts/v4/posts/post_id/contents/locale"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"PATCH"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/posts/v4/posts/post_id/contents/locale" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/merge-patch+json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"title\\":\\"Hello world as plain text!\\",\\"body\\":{\\"format\\":\\"HTML\\",\\"value\\":\\"<h1>Hello world!</h1>\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"usage_type\\":\\"HEADER\\",\\"order_number\\":1}]}" in\n\nClient.call ~headers ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: '<?php\nrequire_once(\'vendor/autoload.php\');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request(\'PATCH\', \'http://localhost:3000/api/posts/v4/posts/post_id/contents/locale\', [\n  \'body\' => \'{"title":"Hello world as plain text!","body":{"format":"HTML","value":"<h1>Hello world!</h1>"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","usage_type":"HEADER","order_number":1}]}\',\n  \'headers\' => [\n    \'accept\' => \'application/json\',\n    \'content-type\' => \'application/merge-patch+json\',\n  ],\n]);\n\necho $response->getBody();',
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/merge-patch+json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/posts/v4/posts/post_id/contents/locale\' -Method PATCH -Headers $headers -ContentType \'application/merge-patch+json\' -Body \'{"title":"Hello world as plain text!","body":{"format":"HTML","value":"<h1>Hello world!</h1>"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","usage_type":"HEADER","order_number":1}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/posts/v4/posts/post_id/contents/locale"\n\npayload = "{\\"title\\":\\"Hello world as plain text!\\",\\"body\\":{\\"format\\":\\"HTML\\",\\"value\\":\\"<h1>Hello world!</h1>\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"usage_type\\":\\"HEADER\\",\\"order_number\\":1}]}"\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/merge-patch+json"\n}\n\nresponse = requests.patch(url, data=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/posts/v4/posts/post_id/contents/locale"\n\npayload <- "{\\"title\\":\\"Hello world as plain text!\\",\\"body\\":{\\"format\\":\\"HTML\\",\\"value\\":\\"<h1>Hello world!</h1>\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"usage_type\\":\\"HEADER\\",\\"order_number\\":1}]}"\n\nencode <- "raw"\n\nresponse <- VERB("PATCH", url, body = payload, content_type("application/merge-patch+json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/posts/v4/posts/post_id/contents/locale")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/merge-patch+json\'\nrequest.body = "{\\"title\\":\\"Hello world as plain text!\\",\\"body\\":{\\"format\\":\\"HTML\\",\\"value\\":\\"<h1>Hello world!</h1>\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"usage_type\\":\\"HEADER\\",\\"order_number\\":1}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request PATCH \\\n     --url http://localhost:3000/api/posts/v4/posts/post_id/contents/locale \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/merge-patch+json\' \\\n     --data \'\n{\n  "title": "Hello world as plain text!",\n  "body": {\n    "format": "HTML",\n    "value": "<h1>Hello world!</h1>"\n  },\n  "attachments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "usage_type": "HEADER",\n      "order_number": 1\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/merge-patch+json"\n]\n\nlet postData = NSData(data: "{"title":"Hello world as plain text!","body":{"format":"HTML","value":"<h1>Hello world!</h1>"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","usage_type":"HEADER","order_number":1}]}".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/posts/v4/posts/post_id/contents/locale")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "PATCH"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  {
                    name: "content-type",
                    value: "application/merge-patch+json",
                  },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "PATCH",
                url: "/api/posts/v4/posts/{post_id}/contents/{locale}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "locale": "en-GB",\n  "title": "Hello world as plain text!",\n  "body": {\n    "format": "HTML",\n    "value": "<h1>Hello world!</h1>"\n  },\n  "attachments": [\n    {\n      "id": "12345678-1234-1234-1234-123456789012",\n      "link": "https://www.getflip.com/attachments/12345678-1234-1234-1234-123456789012",\n      "type": "IMAGE",\n      "usage_type": "HEADER",\n      "order_number": 1,\n      "origin_filename": "my-attachment.pdf"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    locale: {
                      type: "string",
                      description:
                        "A locale representing a language and region.",
                      format: "bcp47",
                      pattern:
                        "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                      example: "en-GB",
                    },
                    title: {
                      type: "string",
                      example: "Hello world as plain text!",
                    },
                    body: {
                      type: "object",
                      required: ["format", "value"],
                      properties: {
                        format: {
                          type: "string",
                          enum: ["HTML", "DELTA", "PLAIN"],
                          example: "HTML",
                        },
                        value: {
                          type: "string",
                          example: "<h1>Hello world!</h1>",
                        },
                      },
                    },
                    attachments: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            format: "uuid",
                            example: "12345678-1234-1234-1234-123456789012",
                          },
                          link: {
                            type: "string",
                            format: "uri",
                            example:
                              "https://www.getflip.com/attachments/12345678-1234-1234-1234-123456789012",
                          },
                          type: {
                            type: "string",
                            enum: ["IMAGE", "AUDIO", "VIDEO", "MISCELLANEOUS"],
                            example: "IMAGE",
                          },
                          usage_type: {
                            type: "string",
                            enum: ["HEADER", "INLINE", "FOOTER"],
                            example: "HEADER",
                          },
                          order_number: { type: "integer", example: 1 },
                          origin_filename: {
                            type: "string",
                            example: "my-attachment.pdf",
                          },
                        },
                      },
                    },
                  },
                  required: ["locale", "title", "body"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "patch",
          },
        ],
      },
    ],
  },
  {
    id: "sharepoint-pages",
    title: "Sharepoint Pages",
    resources: [
      {
        id: "sites",
        title: "Sites",
        shortDescription: "",
        endpoints: [
          {
            id: "sharepoint-pages-search",
            title:
              "Execute a full-text search in sharepoint pages.\nSearches over the title and the body of the pages.",
            description: "",
            path: "/api/sharepoint-pages/v4/search",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description: "The search term to search for.",
                    required: true,
                  },
                  {
                    name: "page_cursor",
                    type: "string",
                    description: "The cursor to use for pagination.",
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description: "The number of results per page.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "hits",
                    type: "array",
                    description: "The search results, ordered by relevance.",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        page_id: {
                          type: "string",
                          format: "uuid",
                          description: "The ID of the sharepoint page.",
                        },
                        site_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The ID of the site the page is residing in",
                        },
                        site_name: {
                          type: "string",
                          description:
                            "The name of the site the page is residing in",
                        },
                        body: {
                          type: "string",
                          description:
                            "An excerpt of the page body that matched the search. The relevant terms (if any)\nare marked in HTML <b> tags.",
                          example:
                            "A search result that is <b>relevant</b> for the search term.",
                        },
                        page_title: {
                          type: "string",
                          description: "Relevant Page",
                        },
                      },
                      required: ["page_id", "site_id", "body", "page_title"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "next_cursor",
                        type: "string",
                        description:
                          'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                      {
                        name: "has_more",
                        type: "boolean",
                        description:
                          'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/sharepoint-pages/v4/search");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/sharepoint-pages/v4/search" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/sharepoint-pages/v4/search");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/sharepoint-pages/v4/search");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/sharepoint-pages/v4/search HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/sharepoint-pages/v4/search"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/sharepoint-pages/v4/search")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/sharepoint-pages/v4/search', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/sharepoint-pages/v4/search")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/sharepoint-pages/v4/search';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/sharepoint-pages/v4/search"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/sharepoint-pages/v4/search" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/sharepoint-pages/v4/search', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/sharepoint-pages/v4/search\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/sharepoint-pages/v4/search"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/sharepoint-pages/v4/search"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/sharepoint-pages/v4/search\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/sharepoint-pages/v4/search \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/sharepoint-pages/v4/search")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/sharepoint-pages/v4/search",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "hits": [\n    {\n      "page_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "site_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "site_name": "string",\n      "body": "A search result that is <b>relevant</b> for the search term.",\n      "page_title": "string"\n    }\n  ],\n  "pagination": {\n    "next_cursor": "string",\n    "has_more": true\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    hits: {
                      type: "array",
                      description: "The search results, ordered by relevance.",
                      items: {
                        type: "object",
                        properties: {
                          page_id: {
                            type: "string",
                            format: "uuid",
                            description: "The ID of the sharepoint page.",
                          },
                          site_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The ID of the site the page is residing in",
                          },
                          site_name: {
                            type: "string",
                            description:
                              "The name of the site the page is residing in",
                          },
                          body: {
                            type: "string",
                            description:
                              "An excerpt of the page body that matched the search. The relevant terms (if any)\nare marked in HTML <b> tags.",
                            example:
                              "A search result that is <b>relevant</b> for the search term.",
                          },
                          page_title: {
                            type: "string",
                            description: "Relevant Page",
                          },
                        },
                        required: ["page_id", "site_id", "body", "page_title"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                      required: ["has_more", "next_cursor"],
                      properties: {
                        next_cursor: {
                          type: "string",
                          description:
                            'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        },
                        has_more: {
                          type: "boolean",
                          description:
                            'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        },
                      },
                    },
                  },
                  required: ["hits", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "sharepoint-pages-site-search",
            title:
              "Execute a full-text search in a sharepoint site.\nSearches over the title and the body of the pages.",
            description: "",
            path: "/api/sharepoint-pages/v4/sites/{site_id}/search",
            isDeprecated: true,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "site_id",
                    type: "string",
                    description: "The ID of the sharepoint site to search in.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_terms",
                    type: "array",
                    description: "The search terms to search for.",
                    required: true,
                    items: { type: "string" },
                  },
                  {
                    name: "page_cursor",
                    type: "string",
                    description: "The cursor to use for pagination.",
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description: "The number of results per page.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "hits",
                    type: "array",
                    description: "The search results, ordered by relevance.",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        page_id: {
                          type: "string",
                          format: "uuid",
                          description: "The ID of the sharepoint page.",
                        },
                        site_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The ID of the site the page is residing in",
                        },
                        site_name: {
                          type: "string",
                          description:
                            "The name of the site the page is residing in",
                        },
                        body: {
                          type: "string",
                          description:
                            "An excerpt of the page body that matched the search. The relevant terms (if any)\nare marked in HTML <b> tags.",
                          example:
                            "A search result that is <b>relevant</b> for the search term.",
                        },
                        page_title: {
                          type: "string",
                          description: "Relevant Page",
                        },
                      },
                      required: ["page_id", "site_id", "body", "page_title"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "next_cursor",
                        type: "string",
                        description:
                          'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                      {
                        name: "has_more",
                        type: "boolean",
                        description:
                          'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/sharepoint-pages/v4/sites/site_id/search HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/sharepoint-pages/v4/sites/site_id/search")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/sharepoint-pages/v4/sites/{site_id}/search",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "hits": [\n    {\n      "page_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "site_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "site_name": "string",\n      "body": "A search result that is <b>relevant</b> for the search term.",\n      "page_title": "string"\n    }\n  ],\n  "pagination": {\n    "next_cursor": "string",\n    "has_more": true\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    hits: {
                      type: "array",
                      description: "The search results, ordered by relevance.",
                      items: {
                        type: "object",
                        properties: {
                          page_id: {
                            type: "string",
                            format: "uuid",
                            description: "The ID of the sharepoint page.",
                          },
                          site_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The ID of the site the page is residing in",
                          },
                          site_name: {
                            type: "string",
                            description:
                              "The name of the site the page is residing in",
                          },
                          body: {
                            type: "string",
                            description:
                              "An excerpt of the page body that matched the search. The relevant terms (if any)\nare marked in HTML <b> tags.",
                            example:
                              "A search result that is <b>relevant</b> for the search term.",
                          },
                          page_title: {
                            type: "string",
                            description: "Relevant Page",
                          },
                        },
                        required: ["page_id", "site_id", "body", "page_title"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                      required: ["has_more", "next_cursor"],
                      properties: {
                        next_cursor: {
                          type: "string",
                          description:
                            'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        },
                        has_more: {
                          type: "boolean",
                          description:
                            'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        },
                      },
                    },
                  },
                  required: ["hits", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
    ],
  },
  {
    id: "tasks",
    title: "Tasks",
    resources: [
      {
        id: "tasks",
        title: "Tasks",
        shortDescription: "",
        endpoints: [
          {
            id: "get-tasks",
            title: "Get all tasks",
            description:
              "Retrieves a list of all tasks visible to the acting user.",
            path: "/api/tasks/v4/tasks",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "DISTRIBUTION_KIND_LIMIT_EXCEEDED",
              "DISTRIBUTION_KIND_UNDEFINED",
              "INVALID_PROGRESS_STATUS_FILTER",
              "INVALID_TASK_CORRELATION_ID",
              "FEATURE_DISABLED",
              "MAX_LENGTH_EXCEEDED",
              "VALIDATION_ERROR",
            ],
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "correlation_id",
                    type: "string",
                    description:
                      "Only return tasks which match the given correlation id",
                    required: false,
                  },
                  {
                    name: "distribution_kind",
                    type: "array",
                    description:
                      "Only return tasks that match any of the given distribution kinds.\n\nCombination Examples:\n- `RECEIVED,PERSONAL`: Received and personal tasks.\n- `RECEIVED`: Received tasks excluding personal tasks.\n- `DISTRIBUTED,PERSONAL`: Tasks distributed to others and personal tasks.\n- `DISTRIBUTED`: Tasks distributed to others.\n- `RECEIVED,DISTRIBUTED`: Received and distributed tasks.",
                    required: false,
                    items: {
                      description:
                        "filters tasks based on their association with the actor. Multiple values can be used, separated by commas.\n\n- `RECEIVED`: Tasks received by the actor, excluding personal tasks.\n- `DISTRIBUTED`: Tasks assigned by the actor to others excluding personal tasks.\n- `PERSONAL`: Personal tasks of the actor.",
                      type: "string",
                      enum: ["DISTRIBUTED", "RECEIVED", "PERSONAL"],
                    },
                  },
                  {
                    name: "progress_status",
                    type: "array",
                    description:
                      "Only return tasks that match any of the given progress status",
                    required: false,
                    items: {
                      description:
                        "Only return tasks that have their progress status set to one of the given values",
                      type: "string",
                      enum: ["OPEN", "FINISHED", "CLOSED"],
                    },
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_cursor",
                    type: "string",
                    description:
                      'A cursor pointing to the first item to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description:
                      "An arbitrary string referencing an external entity identifier.",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      "**Default Sort Behavior:**\nTasks are primarily sorted based on their `due_at` date:\n1. **Tasks with `due_at` dates**: Sorted in ascending order with tasks having dates closer to the current date/time displayed first.\n  - Tasks without a due time specified are appearing before tasks with a specified time.\n  - For tasks with the same `due_at` date, they are sub-sorted based on their `updated_at` timestamp, with more recently updated tasks appearing first.\n2. **Tasks without a `due_at` date**: Positioned after all tasks with `due_at` dates and sorted by their `updated_at` timestamp, displaying the more recently updated tasks first.",
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "DUE_AT_ASC",
                        "DUE_AT_DESC",
                        "UPDATED_AT_ASC",
                        "UPDATED_AT_DESC",
                      ],
                    },
                  },
                  {
                    name: "body_format",
                    type: "array",
                    description:
                      "restrict the delivered body to the defined format. If the parameter is not applied all formats are returned",
                    required: false,
                    items: {
                      description:
                        "restricts the returned formatted content to the specified formats\n\n- `PLAIN`: the plain content is returned.\n- `DELTA`: the content is returned in delta format\n- `HTML`: the content is returned in html format",
                      type: "string",
                      enum: ["PLAIN", "DELTA", "HTML"],
                    },
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "tasks",
                    type: "array",
                    description:
                      "An array of all retrieved tasks, according to the pagination and sort arguments.",
                    required: false,
                    items: {
                      type: "object",
                      description: "Representation of a single task.",
                      required: [
                        "id",
                        "author_id",
                        "title",
                        "attachments",
                        "settings",
                        "created_at",
                        "updated_at",
                      ],
                      properties: {
                        id: {
                          type: "string",
                          format: "uuid",
                          description: "The unique identifier of the task.",
                        },
                        external_id: {
                          type: "string",
                          minLength: 1,
                          maxLength: 200,
                          nullable: true,
                          description:
                            "An arbitrary string referencing an external entity identifier.",
                        },
                        correlation_id: {
                          description:
                            "Only return tasks which match the given correlation id",
                          type: "string",
                          minLength: 1,
                          maxLength: 200,
                          nullable: true,
                          pattern: "^[a-zA-Z0-9_-]+$",
                        },
                        author_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the user that created this task.",
                        },
                        title: {
                          type: "string",
                          maxLength: 150,
                          description: "A short descriptive title of the task.",
                        },
                        body: {
                          type: "object",
                          description:
                            "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                          properties: {
                            plain: {
                              type: "string",
                              description:
                                "The content body of the task as unformatted plain text.",
                              nullable: true,
                            },
                            delta: {
                              type: "array",
                              items: { type: "object" },
                              description:
                                "The content body of the task formatted as Quill delta format.",
                              nullable: true,
                            },
                            html: {
                              type: "string",
                              description:
                                "The content body of the task formatted as HTML.",
                              nullable: true,
                            },
                          },
                        },
                        language: {
                          type: "string",
                          format: "bcp47",
                          example: "en-US",
                          description: "The detected language of the task.",
                        },
                        settings: {
                          type: "object",
                          description:
                            "A collection of settings configured for a task.",
                          properties: {
                            comments_enabled: {
                              type: "boolean",
                              description:
                                "Whether comments can be created on this task.",
                            },
                          },
                        },
                        comments_count: {
                          type: "integer",
                          description:
                            "The total number of non-deleted comments on this task.",
                          format: "int32",
                        },
                        due_at: {
                          description:
                            "The point in time by which this task should be completed before being marked as overdue.",
                          type: "object",
                          discriminator: {
                            propertyName: "due_at_type",
                            mapping: {
                              DATE: "#/components/schemas/TaskDueAtDate",
                              DATE_TIME:
                                "#/components/schemas/TaskDueAtDateTime",
                            },
                          },
                          properties: {
                            due_at_type: {
                              type: "string",
                              enum: ["DATE", "DATE_TIME"],
                            },
                          },
                        },
                        attachments: {
                          type: "array",
                          description:
                            'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                          minItems: 0,
                          nullable: false,
                          items: {
                            allOf: [
                              {
                                description:
                                  "Represents an attached file and its meta data",
                                type: "object",
                                required: [
                                  "filename",
                                  "id",
                                  "link",
                                  "mime_type",
                                  "category",
                                ],
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  filename: { type: "string" },
                                  link: {
                                    type: "string",
                                    pattern:
                                      "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                  },
                                  mime_type: { type: "string" },
                                  category: {
                                    description:
                                      "A categorization of the attachment.",
                                    enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                                    type: "string",
                                  },
                                  meta_data: {
                                    type: "object",
                                    description:
                                      "additional properties that provide more information about the attached file, such as its width, height, and size",
                                    properties: {
                                      width: {
                                        type: "integer",
                                        format: "int32",
                                      },
                                      height: {
                                        type: "integer",
                                        format: "int32",
                                      },
                                      size: {
                                        type: "integer",
                                        format: "int64",
                                      },
                                    },
                                  },
                                },
                              },
                              {
                                type: "object",
                                required: ["order_number"],
                                properties: {
                                  order_number: {
                                    description:
                                      "The order number of the task attachment",
                                    type: "integer",
                                    format: "int32",
                                    minimum: 1,
                                    maximum: 10,
                                  },
                                },
                              },
                            ],
                          },
                        },
                        progress_status: {
                          type: "string",
                          description:
                            "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                          enum: ["OPEN", "IN_PROGRESS", "FINISHED", "CLOSED"],
                          nullable: true,
                        },
                        distribution_kind: {
                          type: "string",
                          enum: ["PERSONAL", "DISTRIBUTED", "RECEIVED"],
                          description:
                            "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                        },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updated_at: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                      },
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                    required: false,
                    properties: [
                      {
                        name: "next_cursor",
                        type: "string",
                        description:
                          'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                      {
                        name: "has_more",
                        type: "boolean",
                        description:
                          'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/tasks/v4/tasks" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/tasks/v4/tasks HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/tasks/v4/tasks', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/tasks/v4/tasks \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/tasks/v4/tasks",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "tasks": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "external_id": "string",\n      "correlation_id": "string",\n      "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "title": "string",\n      "body": {\n        "plain": "string",\n        "delta": [\n          {}\n        ],\n        "html": "string"\n      },\n      "language": "en-US",\n      "settings": {\n        "comments_enabled": true\n      },\n      "comments_count": 0,\n      "due_at": {\n        "due_at_type": "DATE"\n      },\n      "attachments": [\n        {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "filename": "string",\n          "link": "string",\n          "mime_type": "string",\n          "category": "VIDEO",\n          "meta_data": {\n            "width": 0,\n            "height": 0,\n            "size": 0\n          },\n          "order_number": 0\n        }\n      ],\n      "progress_status": "OPEN",\n      "distribution_kind": "PERSONAL",\n      "created_at": "2024-01-11T07:41:25.662Z",\n      "updated_at": "2024-01-11T07:41:25.662Z"\n    }\n  ],\n  "pagination": {\n    "next_cursor": "string",\n    "has_more": true\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    tasks: {
                      type: "array",
                      description:
                        "An array of all retrieved tasks, according to the pagination and sort arguments.",
                      items: {
                        type: "object",
                        description: "Representation of a single task.",
                        required: [
                          "id",
                          "author_id",
                          "title",
                          "attachments",
                          "settings",
                          "created_at",
                          "updated_at",
                        ],
                        properties: {
                          id: {
                            type: "string",
                            format: "uuid",
                            description: "The unique identifier of the task.",
                          },
                          external_id: {
                            type: "string",
                            minLength: 1,
                            maxLength: 200,
                            nullable: true,
                            description:
                              "An arbitrary string referencing an external entity identifier.",
                          },
                          correlation_id: {
                            description:
                              "Only return tasks which match the given correlation id",
                            type: "string",
                            minLength: 1,
                            maxLength: 200,
                            nullable: true,
                            pattern: "^[a-zA-Z0-9_-]+$",
                          },
                          author_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the user that created this task.",
                          },
                          title: {
                            type: "string",
                            maxLength: 150,
                            description:
                              "A short descriptive title of the task.",
                          },
                          body: {
                            type: "object",
                            description:
                              "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                            properties: {
                              plain: {
                                type: "string",
                                description:
                                  "The content body of the task as unformatted plain text.",
                                nullable: true,
                              },
                              delta: {
                                type: "array",
                                items: { type: "object" },
                                description:
                                  "The content body of the task formatted as Quill delta format.",
                                nullable: true,
                              },
                              html: {
                                type: "string",
                                description:
                                  "The content body of the task formatted as HTML.",
                                nullable: true,
                              },
                            },
                          },
                          language: {
                            type: "string",
                            format: "bcp47",
                            example: "en-US",
                            description: "The detected language of the task.",
                          },
                          settings: {
                            type: "object",
                            description:
                              "A collection of settings configured for a task.",
                            properties: {
                              comments_enabled: {
                                type: "boolean",
                                description:
                                  "Whether comments can be created on this task.",
                              },
                            },
                          },
                          comments_count: {
                            type: "integer",
                            description:
                              "The total number of non-deleted comments on this task.",
                            format: "int32",
                          },
                          due_at: {
                            description:
                              "The point in time by which this task should be completed before being marked as overdue.",
                            type: "object",
                            discriminator: {
                              propertyName: "due_at_type",
                              mapping: {
                                DATE: "#/components/schemas/TaskDueAtDate",
                                DATE_TIME:
                                  "#/components/schemas/TaskDueAtDateTime",
                              },
                            },
                            properties: {
                              due_at_type: {
                                type: "string",
                                enum: ["DATE", "DATE_TIME"],
                              },
                            },
                          },
                          attachments: {
                            type: "array",
                            description:
                              'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                            minItems: 0,
                            nullable: false,
                            items: {
                              allOf: [
                                {
                                  description:
                                    "Represents an attached file and its meta data",
                                  type: "object",
                                  required: [
                                    "filename",
                                    "id",
                                    "link",
                                    "mime_type",
                                    "category",
                                  ],
                                  properties: {
                                    id: { type: "string", format: "uuid" },
                                    filename: { type: "string" },
                                    link: {
                                      type: "string",
                                      pattern:
                                        "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                    },
                                    mime_type: { type: "string" },
                                    category: {
                                      description:
                                        "A categorization of the attachment.",
                                      enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                                      type: "string",
                                    },
                                    meta_data: {
                                      type: "object",
                                      description:
                                        "additional properties that provide more information about the attached file, such as its width, height, and size",
                                      properties: {
                                        width: {
                                          type: "integer",
                                          format: "int32",
                                        },
                                        height: {
                                          type: "integer",
                                          format: "int32",
                                        },
                                        size: {
                                          type: "integer",
                                          format: "int64",
                                        },
                                      },
                                    },
                                  },
                                },
                                {
                                  type: "object",
                                  required: ["order_number"],
                                  properties: {
                                    order_number: {
                                      description:
                                        "The order number of the task attachment",
                                      type: "integer",
                                      format: "int32",
                                      minimum: 1,
                                      maximum: 10,
                                    },
                                  },
                                },
                              ],
                            },
                          },
                          progress_status: {
                            type: "string",
                            description:
                              "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                            enum: ["OPEN", "IN_PROGRESS", "FINISHED", "CLOSED"],
                            nullable: true,
                          },
                          distribution_kind: {
                            type: "string",
                            enum: ["PERSONAL", "DISTRIBUTED", "RECEIVED"],
                            description:
                              "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                          },
                          created_at: {
                            type: "string",
                            format: "date-time",
                            description:
                              "The point in time at which this resource was created.",
                          },
                          updated_at: {
                            type: "string",
                            format: "date-time",
                            nullable: false,
                            description:
                              "The point in time at which this resource was last updated.",
                          },
                        },
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                      required: ["has_more", "next_cursor"],
                      properties: {
                        next_cursor: {
                          type: "string",
                          description:
                            'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        },
                        has_more: {
                          type: "boolean",
                          description:
                            'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        },
                      },
                    },
                  },
                  description: "Representation of a collection of tasks.",
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "create-task",
            title: "Create a new task",
            description: "Creates a new task with the acting user as author.",
            path: "/api/tasks/v4/tasks",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "ATTACHMENT_NOT_FOUND",
              "ATTACHMENT_FILE_NOT_FOUND",
              "ATTACHMENTS_NOT_FINISHED",
              "CONVERSION_FAILURE",
              "DUPLICATE_ID",
              "DUPLICATE_EXTERNAL_ID",
              "DUPLICATE_ORDER_NUMBER",
              "DIFFERENT_RECIPIENT_TYPES",
              "DISALLOWED_ATTACHMENT_TYPE",
              "FEATURE_DISABLED",
              "FORMATTED_CONTENT_MAX_LIMIT_EXCEEDED",
              "FORMATTED_CONTENT_CONVERSION_FAILED",
              "INVALID_FORMATTED_BODY",
              "INVALID_DUE_DATE",
              "INVALID_TASK_CORRELATION_ID",
              "MAX_LENGTH_EXCEEDED",
              "NO_RECIPIENTS",
              "RECIPIENTS_CHANNEL_LIMIT_EXCEEDED",
              "UNKNOWN_USER_ID",
              "VALIDATION_ERROR",
            ],
            parameters: [],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "The unique identifier of the task.",
                    required: false,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description:
                      "An arbitrary string referencing an external entity identifier.",
                    required: false,
                  },
                  {
                    name: "correlation_id",
                    type: "string",
                    description:
                      "Only return tasks which match the given correlation id",
                    required: false,
                  },
                  {
                    name: "title",
                    type: "string",
                    description: "A short descriptive title of the task.",
                    required: true,
                  },
                  {
                    name: "body",
                    type: "object",
                    description:
                      "A schema representing formatted content with a constraint on the maximum length of the content.\nValidation of the content size is performed only after conversion to an internal data format.\nThis results in the fact that the actual number of characters allowed may differ depending on the format used.",
                    required: false,
                    properties: [
                      {
                        name: "content_format",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "settings",
                    type: "object",
                    description:
                      "A collection of settings configured for a task.",
                    required: true,
                    properties: [
                      {
                        name: "comments_enabled",
                        type: "boolean",
                        description:
                          "Whether comments can be created on this task.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "due_at",
                    type: "object",
                    description:
                      "The point in time by which this task should be completed before being marked as overdue.",
                    required: false,
                    properties: [
                      {
                        name: "due_at_type",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "attachments",
                    type: "array",
                    description:
                      "contains the necessary information of the attachments which are uploaded and which shall be attached to an entity",
                    required: false,
                    items: {
                      title: "Attachment",
                      description:
                        "a single attachment which shall be attached to an entity",
                      type: "object",
                      required: ["id", "order_number"],
                      properties: {
                        id: {
                          description:
                            "the unique identifier for the attachment. The attachment must be uploaded before.",
                          type: "string",
                          format: "uuid",
                        },
                        order_number: {
                          description: "the order number of the attachment",
                          type: "integer",
                          minimum: 1,
                          maximum: 10,
                        },
                      },
                    },
                  },
                  {
                    name: "recipients",
                    type: "array",
                    description:
                      "Mandatory recipients for the task. A task must be assigned to at least 1 channel or 1 recipient\n\nRestrictions:\n- maximum 1 CHANNEL\n- maximum 100 new recipients of type USER\n\n$ref: '#/components/schemas/RecipientCreation'",
                    required: true,
                    items: {
                      type: "object",
                      required: ["id", "type"],
                      properties: {
                        id: { type: "string", format: "uuid" },
                        type: { type: "string", enum: ["CHANNEL", "USER"] },
                      },
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "201",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "The unique identifier of the task.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description:
                      "An arbitrary string referencing an external entity identifier.",
                    required: false,
                  },
                  {
                    name: "correlation_id",
                    type: "string",
                    description:
                      "Only return tasks which match the given correlation id",
                    required: false,
                  },
                  {
                    name: "author_id",
                    type: "string",
                    description:
                      "The unique identifier of the user that created this task.",
                    required: true,
                  },
                  {
                    name: "title",
                    type: "string",
                    description: "A short descriptive title of the task.",
                    required: true,
                  },
                  {
                    name: "body",
                    type: "object",
                    description:
                      "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                    required: false,
                    properties: [
                      {
                        name: "plain",
                        type: "string",
                        description:
                          "The content body of the task as unformatted plain text.",
                        required: false,
                      },
                      {
                        name: "delta",
                        type: "array",
                        description:
                          "The content body of the task formatted as Quill delta format.",
                        required: false,
                      },
                      {
                        name: "html",
                        type: "string",
                        description:
                          "The content body of the task formatted as HTML.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "language",
                    type: "string",
                    description: "The detected language of the task.",
                    required: false,
                  },
                  {
                    name: "settings",
                    type: "object",
                    description:
                      "A collection of settings configured for a task.",
                    required: true,
                    properties: [
                      {
                        name: "comments_enabled",
                        type: "boolean",
                        description:
                          "Whether comments can be created on this task.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "comments_count",
                    type: "integer",
                    description:
                      "The total number of non-deleted comments on this task.",
                    required: false,
                  },
                  {
                    name: "due_at",
                    type: "object",
                    description:
                      "The point in time by which this task should be completed before being marked as overdue.",
                    required: false,
                    properties: [
                      {
                        name: "due_at_type",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "attachments",
                    type: "array",
                    description:
                      'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                    required: true,
                    items: {
                      allOf: [
                        {
                          description:
                            "Represents an attached file and its meta data",
                          type: "object",
                          required: [
                            "filename",
                            "id",
                            "link",
                            "mime_type",
                            "category",
                          ],
                          properties: {
                            id: { type: "string", format: "uuid" },
                            filename: { type: "string" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            mime_type: { type: "string" },
                            category: {
                              description:
                                "A categorization of the attachment.",
                              enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                              type: "string",
                            },
                            meta_data: {
                              type: "object",
                              description:
                                "additional properties that provide more information about the attached file, such as its width, height, and size",
                              properties: {
                                width: { type: "integer", format: "int32" },
                                height: { type: "integer", format: "int32" },
                                size: { type: "integer", format: "int64" },
                              },
                            },
                          },
                        },
                        {
                          type: "object",
                          required: ["order_number"],
                          properties: {
                            order_number: {
                              description:
                                "The order number of the task attachment",
                              type: "integer",
                              format: "int32",
                              minimum: 1,
                              maximum: 10,
                            },
                          },
                        },
                      ],
                    },
                  },
                  {
                    name: "progress_status",
                    type: "string",
                    description:
                      "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                    required: false,
                  },
                  {
                    name: "distribution_kind",
                    type: "string",
                    description:
                      "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                    required: false,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was created.",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was last updated.",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}],\\"recipients\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/tasks/v4/tasks" {:content-type :json\n                                                         :form-params {:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                       :external_id "string"\n                                                                       :correlation_id "string"\n                                                                       :title "string"\n                                                                       :body {:content_format "HTML"}\n                                                                       :settings {:comments_enabled true}\n                                                                       :due_at {:due_at_type "DATE"}\n                                                                       :attachments [{:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                      :order_number 0}]\n                                                                       :recipients [{:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                     :type "CHANNEL"}]}\n                                                         :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}],\\"recipients\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}],\\"recipients\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/tasks/v4/tasks HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 370\r\n\r\n{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","external_id":"string","correlation_id":"string","title":"string","body":{"content_format":"HTML"},"settings":{"comments_enabled":true},"due_at":{"due_at_type":"DATE"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}],"recipients":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","type":"CHANNEL"}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks"\n\n\tpayload := strings.NewReader("{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}],\\"recipients\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}]}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}],\\"recipients\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    external_id: 'string',\n    correlation_id: 'string',\n    title: 'string',\n    body: JSON.stringify({content_format: 'HTML'}),\n    settings: {comments_enabled: true},\n    due_at: {due_at_type: 'DATE'},\n    attachments: [{id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', order_number: 0}],\n    recipients: [{id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', type: 'CHANNEL'}]\n  })\n};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}],\\"recipients\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    external_id: 'string',\n    correlation_id: 'string',\n    title: 'string',\n    body: JSON.stringify({content_format: 'HTML'}),\n    settings: {comments_enabled: true},\n    due_at: {due_at_type: 'DATE'},\n    attachments: [{id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', order_number: 0}],\n    recipients: [{id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', type: 'CHANNEL'}]\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"external_id": @"string",\n                              @"correlation_id": @"string",\n                              @"title": @"string",\n                              @"body": @{ @"content_format": @"HTML" },\n                              @"settings": @{ @"comments_enabled": @YES },\n                              @"due_at": @{ @"due_at_type": @"DATE" },\n                              @"attachments": @[ @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"order_number": @0 } ],\n                              @"recipients": @[ @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"type": @"CHANNEL" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}],\\"recipients\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}]}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: '<?php\nrequire_once(\'vendor/autoload.php\');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request(\'POST\', \'http://localhost:3000/api/tasks/v4/tasks\', [\n  \'body\' => \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","external_id":"string","correlation_id":"string","title":"string","body":{"content_format":"HTML"},"settings":{"comments_enabled":true},"due_at":{"due_at_type":"DATE"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}],"recipients":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","type":"CHANNEL"}]}\',\n  \'headers\' => [\n    \'accept\' => \'application/json\',\n    \'content-type\' => \'application/json\',\n  ],\n]);\n\necho $response->getBody();',
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","external_id":"string","correlation_id":"string","title":"string","body":{"content_format":"HTML"},"settings":{"comments_enabled":true},"due_at":{"due_at_type":"DATE"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}],"recipients":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","type":"CHANNEL"}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks"\n\npayload = {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "external_id": "string",\n    "correlation_id": "string",\n    "title": "string",\n    "body": {"content_format": "HTML"},\n    "settings": {"comments_enabled": True},\n    "due_at": {"due_at_type": "DATE"},\n    "attachments": [\n        {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "order_number": 0\n        }\n    ],\n    "recipients": [\n        {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "type": "CHANNEL"\n        }\n    ]\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks"\n\npayload <- "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}],\\"recipients\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}]}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/tasks/v4/tasks")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}],\\"recipients\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/tasks/v4/tasks \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "correlation_id": "string",\n  "title": "string",\n  "body": {\n    "content_format": "HTML"\n  },\n  "settings": {\n    "comments_enabled": true\n  },\n  "due_at": {\n    "due_at_type": "DATE"\n  },\n  "attachments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "order_number": 0\n    }\n  ],\n  "recipients": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "type": "CHANNEL"\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "correlation_id": "string",\n  "title": "string",\n  "body": ["content_format": "HTML"],\n  "settings": ["comments_enabled": true],\n  "due_at": ["due_at_type": "DATE"],\n  "attachments": [\n    [\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "order_number": 0\n    ]\n  ],\n  "recipients": [\n    [\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "type": "CHANNEL"\n    ]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/tasks/v4/tasks",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "201":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "correlation_id": "string",\n  "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "title": "string",\n  "body": {\n    "plain": "string",\n    "delta": [\n      {}\n    ],\n    "html": "string"\n  },\n  "language": "en-US",\n  "settings": {\n    "comments_enabled": true\n  },\n  "comments_count": 0,\n  "due_at": {\n    "due_at_type": "DATE"\n  },\n  "attachments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "filename": "string",\n      "link": "string",\n      "mime_type": "string",\n      "category": "VIDEO",\n      "meta_data": {\n        "width": 0,\n        "height": 0,\n        "size": 0\n      },\n      "order_number": 0\n    }\n  ],\n  "progress_status": "OPEN",\n  "distribution_kind": "PERSONAL",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description: "Representation of a single task.",
                  required: [
                    "id",
                    "author_id",
                    "title",
                    "attachments",
                    "settings",
                    "created_at",
                    "updated_at",
                  ],
                  properties: {
                    id: {
                      type: "string",
                      format: "uuid",
                      description: "The unique identifier of the task.",
                    },
                    external_id: {
                      type: "string",
                      minLength: 1,
                      maxLength: 200,
                      nullable: true,
                      description:
                        "An arbitrary string referencing an external entity identifier.",
                    },
                    correlation_id: {
                      description:
                        "Only return tasks which match the given correlation id",
                      type: "string",
                      minLength: 1,
                      maxLength: 200,
                      nullable: true,
                      pattern: "^[a-zA-Z0-9_-]+$",
                    },
                    author_id: {
                      type: "string",
                      format: "uuid",
                      description:
                        "The unique identifier of the user that created this task.",
                    },
                    title: {
                      type: "string",
                      maxLength: 150,
                      description: "A short descriptive title of the task.",
                    },
                    body: {
                      type: "object",
                      description:
                        "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                      properties: {
                        plain: {
                          type: "string",
                          description:
                            "The content body of the task as unformatted plain text.",
                          nullable: true,
                        },
                        delta: {
                          type: "array",
                          items: { type: "object" },
                          description:
                            "The content body of the task formatted as Quill delta format.",
                          nullable: true,
                        },
                        html: {
                          type: "string",
                          description:
                            "The content body of the task formatted as HTML.",
                          nullable: true,
                        },
                      },
                    },
                    language: {
                      type: "string",
                      format: "bcp47",
                      example: "en-US",
                      description: "The detected language of the task.",
                    },
                    settings: {
                      type: "object",
                      description:
                        "A collection of settings configured for a task.",
                      properties: {
                        comments_enabled: {
                          type: "boolean",
                          description:
                            "Whether comments can be created on this task.",
                        },
                      },
                    },
                    comments_count: {
                      type: "integer",
                      description:
                        "The total number of non-deleted comments on this task.",
                      format: "int32",
                    },
                    due_at: {
                      description:
                        "The point in time by which this task should be completed before being marked as overdue.",
                      type: "object",
                      discriminator: {
                        propertyName: "due_at_type",
                        mapping: {
                          DATE: "#/components/schemas/TaskDueAtDate",
                          DATE_TIME: "#/components/schemas/TaskDueAtDateTime",
                        },
                      },
                      properties: {
                        due_at_type: {
                          type: "string",
                          enum: ["DATE", "DATE_TIME"],
                        },
                      },
                    },
                    attachments: {
                      type: "array",
                      description:
                        'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                      minItems: 0,
                      nullable: false,
                      items: {
                        allOf: [
                          {
                            description:
                              "Represents an attached file and its meta data",
                            type: "object",
                            required: [
                              "filename",
                              "id",
                              "link",
                              "mime_type",
                              "category",
                            ],
                            properties: {
                              id: { type: "string", format: "uuid" },
                              filename: { type: "string" },
                              link: {
                                type: "string",
                                pattern:
                                  "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                              },
                              mime_type: { type: "string" },
                              category: {
                                description:
                                  "A categorization of the attachment.",
                                enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                                type: "string",
                              },
                              meta_data: {
                                type: "object",
                                description:
                                  "additional properties that provide more information about the attached file, such as its width, height, and size",
                                properties: {
                                  width: { type: "integer", format: "int32" },
                                  height: { type: "integer", format: "int32" },
                                  size: { type: "integer", format: "int64" },
                                },
                              },
                            },
                          },
                          {
                            type: "object",
                            required: ["order_number"],
                            properties: {
                              order_number: {
                                description:
                                  "The order number of the task attachment",
                                type: "integer",
                                format: "int32",
                                minimum: 1,
                                maximum: 10,
                              },
                            },
                          },
                        ],
                      },
                    },
                    progress_status: {
                      type: "string",
                      description:
                        "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                      enum: ["OPEN", "IN_PROGRESS", "FINISHED", "CLOSED"],
                      nullable: true,
                    },
                    distribution_kind: {
                      type: "string",
                      enum: ["PERSONAL", "DISTRIBUTED", "RECEIVED"],
                      description:
                        "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                    },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      description:
                        "The point in time at which this resource was created.",
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      nullable: false,
                      description:
                        "The point in time at which this resource was last updated.",
                    },
                  },
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "update-task",
            title: "Modify/Update existing task",
            description:
              "Modifies certain contents or settings of a previously created task. To change the assignments of a task, see the `/tasks/{task_id}/assignments` path.",
            path: "/api/tasks/v4/tasks/{task_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "ATTACHMENT_NOT_FOUND",
              "ATTACHMENT_FILE_NOT_FOUND",
              "ATTACHMENTS_NOT_FINISHED",
              "CONVERSION_FAILURE",
              "DUPLICATE_ID",
              "DUPLICATE_EXTERNAL_ID",
              "DUPLICATE_ORDER_NUMBER",
              "DISALLOWED_ATTACHMENT_TYPE",
              "FEATURE_DISABLED",
              "FORMATTED_CONTENT_MAX_LIMIT_EXCEEDED",
              "FORMATTED_CONTENT_CONVERSION_FAILED",
              "INVALID_FORMATTED_BODY",
              "INVALID_DUE_DATE",
              "INVALID_TASK_CORRELATION_ID",
              "MAX_LENGTH_EXCEEDED",
              "NO_PATCHABLE_VALUE",
              "TASK_NOT_FOUND",
              "VALIDATION_ERROR",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "task_id",
                    type: "string",
                    description:
                      "The primary identifier of the task to access.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "external_id",
                    type: "string",
                    description:
                      "An arbitrary string referencing an external entity identifier.",
                    required: false,
                  },
                  {
                    name: "correlation_id",
                    type: "string",
                    description:
                      "Only return tasks which match the given correlation id",
                    required: false,
                  },
                  {
                    name: "title",
                    type: "string",
                    description: "A short descriptive title of the task.",
                    required: false,
                  },
                  {
                    name: "body",
                    type: "object",
                    description:
                      "A schema representing formatted content with a constraint on the maximum length of the content.\nValidation of the content size is performed only after conversion to an internal data format.\nThis results in the fact that the actual number of characters allowed may differ depending on the format used.",
                    required: false,
                    properties: [
                      {
                        name: "content_format",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "settings",
                    type: "object",
                    description:
                      "A collection of settings configured for a task.",
                    required: false,
                    properties: [
                      {
                        name: "comments_enabled",
                        type: "boolean",
                        description:
                          "Whether comments can be created on this task.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "due_at",
                    type: "object",
                    description:
                      "The point in time by which this task should be completed before being marked as overdue.",
                    required: false,
                    properties: [
                      {
                        name: "due_at_type",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "attachments",
                    type: "array",
                    description:
                      "contains the necessary information of the attachments which are uploaded and which shall be attached to an entity",
                    required: false,
                    items: {
                      title: "Attachment",
                      description:
                        "a single attachment which shall be attached to an entity",
                      type: "object",
                      required: ["id", "order_number"],
                      properties: {
                        id: {
                          description:
                            "the unique identifier for the attachment. The attachment must be uploaded before.",
                          type: "string",
                          format: "uuid",
                        },
                        order_number: {
                          description: "the order number of the attachment",
                          type: "integer",
                          minimum: 1,
                          maximum: 10,
                        },
                      },
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "The unique identifier of the task.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description:
                      "An arbitrary string referencing an external entity identifier.",
                    required: false,
                  },
                  {
                    name: "correlation_id",
                    type: "string",
                    description:
                      "Only return tasks which match the given correlation id",
                    required: false,
                  },
                  {
                    name: "author_id",
                    type: "string",
                    description:
                      "The unique identifier of the user that created this task.",
                    required: true,
                  },
                  {
                    name: "title",
                    type: "string",
                    description: "A short descriptive title of the task.",
                    required: true,
                  },
                  {
                    name: "body",
                    type: "object",
                    description:
                      "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                    required: false,
                    properties: [
                      {
                        name: "plain",
                        type: "string",
                        description:
                          "The content body of the task as unformatted plain text.",
                        required: false,
                      },
                      {
                        name: "delta",
                        type: "array",
                        description:
                          "The content body of the task formatted as Quill delta format.",
                        required: false,
                      },
                      {
                        name: "html",
                        type: "string",
                        description:
                          "The content body of the task formatted as HTML.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "language",
                    type: "string",
                    description: "The detected language of the task.",
                    required: false,
                  },
                  {
                    name: "settings",
                    type: "object",
                    description:
                      "A collection of settings configured for a task.",
                    required: true,
                    properties: [
                      {
                        name: "comments_enabled",
                        type: "boolean",
                        description:
                          "Whether comments can be created on this task.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "comments_count",
                    type: "integer",
                    description:
                      "The total number of non-deleted comments on this task.",
                    required: false,
                  },
                  {
                    name: "due_at",
                    type: "object",
                    description:
                      "The point in time by which this task should be completed before being marked as overdue.",
                    required: false,
                    properties: [
                      {
                        name: "due_at_type",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "attachments",
                    type: "array",
                    description:
                      'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                    required: true,
                    items: {
                      allOf: [
                        {
                          description:
                            "Represents an attached file and its meta data",
                          type: "object",
                          required: [
                            "filename",
                            "id",
                            "link",
                            "mime_type",
                            "category",
                          ],
                          properties: {
                            id: { type: "string", format: "uuid" },
                            filename: { type: "string" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            mime_type: { type: "string" },
                            category: {
                              description:
                                "A categorization of the attachment.",
                              enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                              type: "string",
                            },
                            meta_data: {
                              type: "object",
                              description:
                                "additional properties that provide more information about the attached file, such as its width, height, and size",
                              properties: {
                                width: { type: "integer", format: "int32" },
                                height: { type: "integer", format: "int32" },
                                size: { type: "integer", format: "int64" },
                              },
                            },
                          },
                        },
                        {
                          type: "object",
                          required: ["order_number"],
                          properties: {
                            order_number: {
                              description:
                                "The order number of the task attachment",
                              type: "integer",
                              format: "int32",
                              minimum: 1,
                              maximum: 10,
                            },
                          },
                        },
                      ],
                    },
                  },
                  {
                    name: "progress_status",
                    type: "string",
                    description:
                      "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                    required: false,
                  },
                  {
                    name: "distribution_kind",
                    type: "string",
                    description:
                      "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                    required: false,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was created.",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was last updated.",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/merge-patch+json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/patch "http://localhost:3000/api/tasks/v4/tasks/task_id" {:headers {:content-type "application/merge-patch+json"}\n                                                                  :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/merge-patch+json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/task_id");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/merge-patch+json");\nrequest.AddParameter("application/merge-patch+json", "{\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'PATCH /api/tasks/v4/tasks/task_id HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/merge-patch+json\r\nHost: localhost:3000\r\nContent-Length: 248\r\n\r\n{"external_id":"string","correlation_id":"string","title":"string","body":{"content_format":"HTML"},"settings":{"comments_enabled":true},"due_at":{"due_at_type":"DATE"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/task_id"\n\n\tpayload := strings.NewReader("{\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}")\n\n\treq, _ := http.NewRequest("PATCH", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/merge-patch+json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/merge-patch+json");\nRequestBody body = RequestBody.create(mediaType, "{\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/merge-patch+json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  'const options = {\n  method: \'PATCH\',\n  headers: {accept: \'application/json\', \'content-type\': \'application/merge-patch+json\'},\n  body: \'{"external_id":"string","correlation_id":"string","title":"string","body":{"content_format":"HTML"},"settings":{"comments_enabled":true},"due_at":{"due_at_type":"DATE"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}]}\'\n};\n\nfetch(\'http://localhost:3000/api/tasks/v4/tasks/task_id\', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));',
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/merge-patch+json")\nval body = RequestBody.create(mediaType, "{\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/merge-patch+json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: 'const fetch = require(\'node-fetch\');\n\nconst url = \'http://localhost:3000/api/tasks/v4/tasks/task_id\';\nconst options = {\n  method: \'PATCH\',\n  headers: {accept: \'application/json\', \'content-type\': \'application/merge-patch+json\'},\n  body: \'{"external_id":"string","correlation_id":"string","title":"string","body":{"content_format":"HTML"},"settings":{"comments_enabled":true},"due_at":{"due_at_type":"DATE"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}]}\'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error(\'error:\' + err));',
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/merge-patch+json" };\n\nNSData *postData = [[NSData alloc] initWithData:[@"{"external_id":"string","correlation_id":"string","title":"string","body":{"content_format":"HTML"},"settings":{"comments_enabled":true},"due_at":{"due_at_type":"DATE"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}]}" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/task_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"PATCH"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/task_id" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/merge-patch+json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}" in\n\nClient.call ~headers ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: '<?php\nrequire_once(\'vendor/autoload.php\');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request(\'PATCH\', \'http://localhost:3000/api/tasks/v4/tasks/task_id\', [\n  \'body\' => \'{"external_id":"string","correlation_id":"string","title":"string","body":{"content_format":"HTML"},"settings":{"comments_enabled":true},"due_at":{"due_at_type":"DATE"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}]}\',\n  \'headers\' => [\n    \'accept\' => \'application/json\',\n    \'content-type\' => \'application/merge-patch+json\',\n  ],\n]);\n\necho $response->getBody();',
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/merge-patch+json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/task_id\' -Method PATCH -Headers $headers -ContentType \'application/merge-patch+json\' -Body \'{"external_id":"string","correlation_id":"string","title":"string","body":{"content_format":"HTML"},"settings":{"comments_enabled":true},"due_at":{"due_at_type":"DATE"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/task_id"\n\npayload = "{\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}"\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/merge-patch+json"\n}\n\nresponse = requests.patch(url, data=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/task_id"\n\npayload <- "{\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}"\n\nencode <- "raw"\n\nresponse <- VERB("PATCH", url, body = payload, content_type("application/merge-patch+json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/tasks/v4/tasks/task_id")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/merge-patch+json\'\nrequest.body = "{\\"external_id\\":\\"string\\",\\"correlation_id\\":\\"string\\",\\"title\\":\\"string\\",\\"body\\":{\\"content_format\\":\\"HTML\\"},\\"settings\\":{\\"comments_enabled\\":true},\\"due_at\\":{\\"due_at_type\\":\\"DATE\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request PATCH \\\n     --url http://localhost:3000/api/tasks/v4/tasks/task_id \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/merge-patch+json\' \\\n     --data \'\n{\n  "external_id": "string",\n  "correlation_id": "string",\n  "title": "string",\n  "body": {\n    "content_format": "HTML"\n  },\n  "settings": {\n    "comments_enabled": true\n  },\n  "due_at": {\n    "due_at_type": "DATE"\n  },\n  "attachments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "order_number": 0\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/merge-patch+json"\n]\n\nlet postData = NSData(data: "{"external_id":"string","correlation_id":"string","title":"string","body":{"content_format":"HTML"},"settings":{"comments_enabled":true},"due_at":{"due_at_type":"DATE"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}]}".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/task_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "PATCH"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  {
                    name: "content-type",
                    value: "application/merge-patch+json",
                  },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "PATCH",
                url: "/api/tasks/v4/tasks/{task_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "correlation_id": "string",\n  "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "title": "string",\n  "body": {\n    "plain": "string",\n    "delta": [\n      {}\n    ],\n    "html": "string"\n  },\n  "language": "en-US",\n  "settings": {\n    "comments_enabled": true\n  },\n  "comments_count": 0,\n  "due_at": {\n    "due_at_type": "DATE"\n  },\n  "attachments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "filename": "string",\n      "link": "string",\n      "mime_type": "string",\n      "category": "VIDEO",\n      "meta_data": {\n        "width": 0,\n        "height": 0,\n        "size": 0\n      },\n      "order_number": 0\n    }\n  ],\n  "progress_status": "OPEN",\n  "distribution_kind": "PERSONAL",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description: "Representation of a single task.",
                  required: [
                    "id",
                    "author_id",
                    "title",
                    "attachments",
                    "settings",
                    "created_at",
                    "updated_at",
                  ],
                  properties: {
                    id: {
                      type: "string",
                      format: "uuid",
                      description: "The unique identifier of the task.",
                    },
                    external_id: {
                      type: "string",
                      minLength: 1,
                      maxLength: 200,
                      nullable: true,
                      description:
                        "An arbitrary string referencing an external entity identifier.",
                    },
                    correlation_id: {
                      description:
                        "Only return tasks which match the given correlation id",
                      type: "string",
                      minLength: 1,
                      maxLength: 200,
                      nullable: true,
                      pattern: "^[a-zA-Z0-9_-]+$",
                    },
                    author_id: {
                      type: "string",
                      format: "uuid",
                      description:
                        "The unique identifier of the user that created this task.",
                    },
                    title: {
                      type: "string",
                      maxLength: 150,
                      description: "A short descriptive title of the task.",
                    },
                    body: {
                      type: "object",
                      description:
                        "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                      properties: {
                        plain: {
                          type: "string",
                          description:
                            "The content body of the task as unformatted plain text.",
                          nullable: true,
                        },
                        delta: {
                          type: "array",
                          items: { type: "object" },
                          description:
                            "The content body of the task formatted as Quill delta format.",
                          nullable: true,
                        },
                        html: {
                          type: "string",
                          description:
                            "The content body of the task formatted as HTML.",
                          nullable: true,
                        },
                      },
                    },
                    language: {
                      type: "string",
                      format: "bcp47",
                      example: "en-US",
                      description: "The detected language of the task.",
                    },
                    settings: {
                      type: "object",
                      description:
                        "A collection of settings configured for a task.",
                      properties: {
                        comments_enabled: {
                          type: "boolean",
                          description:
                            "Whether comments can be created on this task.",
                        },
                      },
                    },
                    comments_count: {
                      type: "integer",
                      description:
                        "The total number of non-deleted comments on this task.",
                      format: "int32",
                    },
                    due_at: {
                      description:
                        "The point in time by which this task should be completed before being marked as overdue.",
                      type: "object",
                      discriminator: {
                        propertyName: "due_at_type",
                        mapping: {
                          DATE: "#/components/schemas/TaskDueAtDate",
                          DATE_TIME: "#/components/schemas/TaskDueAtDateTime",
                        },
                      },
                      properties: {
                        due_at_type: {
                          type: "string",
                          enum: ["DATE", "DATE_TIME"],
                        },
                      },
                    },
                    attachments: {
                      type: "array",
                      description:
                        'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                      minItems: 0,
                      nullable: false,
                      items: {
                        allOf: [
                          {
                            description:
                              "Represents an attached file and its meta data",
                            type: "object",
                            required: [
                              "filename",
                              "id",
                              "link",
                              "mime_type",
                              "category",
                            ],
                            properties: {
                              id: { type: "string", format: "uuid" },
                              filename: { type: "string" },
                              link: {
                                type: "string",
                                pattern:
                                  "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                              },
                              mime_type: { type: "string" },
                              category: {
                                description:
                                  "A categorization of the attachment.",
                                enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                                type: "string",
                              },
                              meta_data: {
                                type: "object",
                                description:
                                  "additional properties that provide more information about the attached file, such as its width, height, and size",
                                properties: {
                                  width: { type: "integer", format: "int32" },
                                  height: { type: "integer", format: "int32" },
                                  size: { type: "integer", format: "int64" },
                                },
                              },
                            },
                          },
                          {
                            type: "object",
                            required: ["order_number"],
                            properties: {
                              order_number: {
                                description:
                                  "The order number of the task attachment",
                                type: "integer",
                                format: "int32",
                                minimum: 1,
                                maximum: 10,
                              },
                            },
                          },
                        ],
                      },
                    },
                    progress_status: {
                      type: "string",
                      description:
                        "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                      enum: ["OPEN", "IN_PROGRESS", "FINISHED", "CLOSED"],
                      nullable: true,
                    },
                    distribution_kind: {
                      type: "string",
                      enum: ["PERSONAL", "DISTRIBUTED", "RECEIVED"],
                      description:
                        "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                    },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      description:
                        "The point in time at which this resource was created.",
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      nullable: false,
                      description:
                        "The point in time at which this resource was last updated.",
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "patch",
          },
          {
            id: "delete-task",
            title: "Delete a task",
            description:
              "Deletes the task with the id if it still exists and is allowed to be deleted.\nThe reaction is no longer available.\nThe operation cannot be undone.",
            path: "/api/tasks/v4/tasks/{task_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: ["TASK_NOT_FOUND", "FEATURE_DISABLED"],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "task_id",
                    type: "string",
                    description:
                      "The primary identifier of the task to access.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "204", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/tasks/v4/tasks/task_id")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/task_id");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/tasks/v4/tasks/task_id HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/task_id"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE'};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/task_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id")\n  .delete(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/task_id';\nconst options = {method: 'DELETE'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/task_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/task_id" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/tasks/v4/tasks/task_id');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/tasks/v4/tasks/task_id' -Method DELETE",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/task_id"\n\nresponse = requests.delete(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/task_id"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/task_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/tasks/v4/tasks/task_id",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/task_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/tasks/v4/tasks/{task_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "204" }],
            security: [{ bearer: [] }],
            method: "delete",
          },
        ],
      },
      {
        id: "task-assignments",
        title: "Task Assignments",
        shortDescription: "",
        endpoints: [
          {
            id: "get-task-assignments-by-actor",
            title: "Get task assignments",
            description:
              "Retrieve my assignments matching one of the given distribution\ntypes RECEIVED or PERSONAL and optional embedding of the task",
            path: "/api/tasks/v4/tasks/assignments",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "DISTRIBUTION_KIND_UNDEFINED",
              "FEATURE_DISABLED",
            ],
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "distribution_kind",
                    type: "array",
                    description:
                      "Only return task assignments that match any of the given distribution kinds.\nTask assignments created by the actor as author of the task can not be requested through this interface.",
                    required: true,
                    items: {
                      description:
                        "filters task assignments based on their association with the actor. Multiple values can be used.\n\n- `RECEIVED`: Tasks received by the actor, excluding personal tasks.\n- `PERSONAL`: Personal tasks of the actor.",
                      type: "string",
                      enum: ["RECEIVED", "PERSONAL"],
                    },
                  },
                  {
                    name: "progress_status",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "string",
                      description:
                        "Filter for the assignment progress status. Possible values are:\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                      enum: ["NEW", "OPEN", "FINISHED"],
                    },
                  },
                  {
                    name: "embed",
                    type: "array",
                    description:
                      'Defines the values to embed into the response body.\nRefer to our general "embedment" concept for more information.',
                    required: false,
                    items: { type: "string", enum: ["TASK"] },
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      "**Default Sort Behavior:**\nAssignments are primarily sorted based on the `created_at` in descending order.",
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "CREATED_AT_ASC",
                        "CREATED_AT_DESC",
                        "UPDATED_AT_ASC",
                        "UPDATED_AT_DESC",
                      ],
                    },
                  },
                  {
                    name: "page_cursor",
                    type: "string",
                    description:
                      'A cursor pointing to the first item to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "assignments",
                    type: "array",
                    description:
                      "An array of all retrieved assignments, according to the pagination and sort arguments.",
                    required: false,
                    items: {
                      type: "object",
                      description:
                        "Representation of a single task which is assigned to a particular recipient.",
                      required: [
                        "id",
                        "user_id",
                        "task_id",
                        "progress_status",
                        "created_at",
                        "updated_at",
                      ],
                      properties: {
                        id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the assignment.",
                        },
                        user_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the recipient (user).",
                        },
                        task_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the parent task.",
                        },
                        progress_status: {
                          type: "string",
                          description:
                            "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                          enum: ["NEW", "OPEN", "FINISHED"],
                        },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updated_at: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                        recipient: {
                          type: "object",
                          nullable: true,
                          properties: {
                            id: { type: "string", format: "uuid" },
                            is_deleted: { type: "boolean" },
                            first_name: { type: "string", example: "Jon" },
                            last_name: { type: "string", example: "Doe" },
                            department: {
                              type: "string",
                              example: "Marketing",
                              nullable: true,
                            },
                            profile_picture: {
                              type: "object",
                              nullable: true,
                              properties: {
                                file_id: { type: "string", format: "uuid" },
                              },
                            },
                          },
                          required: [
                            "id",
                            "is_deleted",
                            "first_name",
                            "last_name",
                          ],
                        },
                        task: {
                          type: "object",
                          description: "Representation of a single task.",
                          required: [
                            "id",
                            "author_id",
                            "title",
                            "attachments",
                            "settings",
                            "created_at",
                            "updated_at",
                          ],
                          properties: {
                            id: {
                              type: "string",
                              format: "uuid",
                              description: "The unique identifier of the task.",
                            },
                            external_id: {
                              type: "string",
                              minLength: 1,
                              maxLength: 200,
                              nullable: true,
                              description:
                                "An arbitrary string referencing an external entity identifier.",
                            },
                            correlation_id: {
                              description:
                                "Only return tasks which match the given correlation id",
                              type: "string",
                              minLength: 1,
                              maxLength: 200,
                              nullable: true,
                              pattern: "^[a-zA-Z0-9_-]+$",
                            },
                            author_id: {
                              type: "string",
                              format: "uuid",
                              description:
                                "The unique identifier of the user that created this task.",
                            },
                            title: {
                              type: "string",
                              maxLength: 150,
                              description:
                                "A short descriptive title of the task.",
                            },
                            body: {
                              type: "object",
                              description:
                                "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                              properties: {
                                plain: {
                                  type: "string",
                                  description:
                                    "The content body of the task as unformatted plain text.",
                                  nullable: true,
                                },
                                delta: {
                                  type: "array",
                                  items: { type: "object" },
                                  description:
                                    "The content body of the task formatted as Quill delta format.",
                                  nullable: true,
                                },
                                html: {
                                  type: "string",
                                  description:
                                    "The content body of the task formatted as HTML.",
                                  nullable: true,
                                },
                              },
                            },
                            language: {
                              type: "string",
                              format: "bcp47",
                              example: "en-US",
                              description: "The detected language of the task.",
                            },
                            settings: {
                              type: "object",
                              description:
                                "A collection of settings configured for a task.",
                              properties: {
                                comments_enabled: {
                                  type: "boolean",
                                  description:
                                    "Whether comments can be created on this task.",
                                },
                              },
                            },
                            comments_count: {
                              type: "integer",
                              description:
                                "The total number of non-deleted comments on this task.",
                              format: "int32",
                            },
                            due_at: {
                              description:
                                "The point in time by which this task should be completed before being marked as overdue.",
                              type: "object",
                              discriminator: {
                                propertyName: "due_at_type",
                                mapping: {
                                  DATE: "#/components/schemas/TaskDueAtDate",
                                  DATE_TIME:
                                    "#/components/schemas/TaskDueAtDateTime",
                                },
                              },
                              properties: {
                                due_at_type: {
                                  type: "string",
                                  enum: ["DATE", "DATE_TIME"],
                                },
                              },
                            },
                            attachments: {
                              type: "array",
                              description:
                                'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                              minItems: 0,
                              nullable: false,
                              items: {
                                allOf: [
                                  {
                                    description:
                                      "Represents an attached file and its meta data",
                                    type: "object",
                                    required: [
                                      "filename",
                                      "id",
                                      "link",
                                      "mime_type",
                                      "category",
                                    ],
                                    properties: {
                                      id: { type: "string", format: "uuid" },
                                      filename: { type: "string" },
                                      link: {
                                        type: "string",
                                        pattern:
                                          "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                      },
                                      mime_type: { type: "string" },
                                      category: {
                                        description:
                                          "A categorization of the attachment.",
                                        enum: [
                                          "VIDEO",
                                          "VOICE",
                                          "IMAGE",
                                          "MISC",
                                        ],
                                        type: "string",
                                      },
                                      meta_data: {
                                        type: "object",
                                        description:
                                          "additional properties that provide more information about the attached file, such as its width, height, and size",
                                        properties: {
                                          width: {
                                            type: "integer",
                                            format: "int32",
                                          },
                                          height: {
                                            type: "integer",
                                            format: "int32",
                                          },
                                          size: {
                                            type: "integer",
                                            format: "int64",
                                          },
                                        },
                                      },
                                    },
                                  },
                                  {
                                    type: "object",
                                    required: ["order_number"],
                                    properties: {
                                      order_number: {
                                        description:
                                          "The order number of the task attachment",
                                        type: "integer",
                                        format: "int32",
                                        minimum: 1,
                                        maximum: 10,
                                      },
                                    },
                                  },
                                ],
                              },
                            },
                            progress_status: {
                              type: "string",
                              description:
                                "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                              enum: [
                                "OPEN",
                                "IN_PROGRESS",
                                "FINISHED",
                                "CLOSED",
                              ],
                              nullable: true,
                            },
                            distribution_kind: {
                              type: "string",
                              enum: ["PERSONAL", "DISTRIBUTED", "RECEIVED"],
                              description:
                                "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                            },
                            created_at: {
                              type: "string",
                              format: "date-time",
                              description:
                                "The point in time at which this resource was created.",
                            },
                            updated_at: {
                              type: "string",
                              format: "date-time",
                              nullable: false,
                              description:
                                "The point in time at which this resource was last updated.",
                            },
                          },
                        },
                      },
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "next_cursor",
                        type: "string",
                        description:
                          'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                      {
                        name: "has_more",
                        type: "boolean",
                        description:
                          'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/tasks/v4/tasks/assignments" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/assignments");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/tasks/v4/tasks/assignments HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/assignments"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/assignments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/assignments', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/assignments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/assignments';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/assignments"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/assignments" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/tasks/v4/tasks/assignments', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/assignments\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/assignments"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/assignments"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/assignments\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/tasks/v4/tasks/assignments \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/assignments")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/tasks/v4/tasks/assignments",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "assignments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "task_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "progress_status": "NEW",\n      "created_at": "2024-01-11T07:41:25.662Z",\n      "updated_at": "2024-01-11T07:41:25.662Z",\n      "recipient": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      },\n      "task": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "external_id": "string",\n        "correlation_id": "string",\n        "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "title": "string",\n        "body": {\n          "plain": "string",\n          "delta": [\n            {}\n          ],\n          "html": "string"\n        },\n        "language": "en-US",\n        "settings": {\n          "comments_enabled": true\n        },\n        "comments_count": 0,\n        "due_at": {\n          "due_at_type": "DATE"\n        },\n        "attachments": [\n          {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "filename": "string",\n            "link": "string",\n            "mime_type": "string",\n            "category": "VIDEO",\n            "meta_data": {\n              "width": 0,\n              "height": 0,\n              "size": 0\n            },\n            "order_number": 0\n          }\n        ],\n        "progress_status": "OPEN",\n        "distribution_kind": "PERSONAL",\n        "created_at": "2024-01-11T07:41:25.662Z",\n        "updated_at": "2024-01-11T07:41:25.662Z"\n      }\n    }\n  ],\n  "pagination": {\n    "next_cursor": "string",\n    "has_more": true\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  required: ["pagination"],
                  properties: {
                    assignments: {
                      type: "array",
                      description:
                        "An array of all retrieved assignments, according to the pagination and sort arguments.",
                      items: {
                        type: "object",
                        description:
                          "Representation of a single task which is assigned to a particular recipient.",
                        required: [
                          "id",
                          "user_id",
                          "task_id",
                          "progress_status",
                          "created_at",
                          "updated_at",
                        ],
                        properties: {
                          id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the assignment.",
                          },
                          user_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the recipient (user).",
                          },
                          task_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the parent task.",
                          },
                          progress_status: {
                            type: "string",
                            description:
                              "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                            enum: ["NEW", "OPEN", "FINISHED"],
                          },
                          created_at: {
                            type: "string",
                            format: "date-time",
                            description:
                              "The point in time at which this resource was created.",
                          },
                          updated_at: {
                            type: "string",
                            format: "date-time",
                            nullable: false,
                            description:
                              "The point in time at which this resource was last updated.",
                          },
                          recipient: {
                            type: "object",
                            nullable: true,
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                          task: {
                            type: "object",
                            description: "Representation of a single task.",
                            required: [
                              "id",
                              "author_id",
                              "title",
                              "attachments",
                              "settings",
                              "created_at",
                              "updated_at",
                            ],
                            properties: {
                              id: {
                                type: "string",
                                format: "uuid",
                                description:
                                  "The unique identifier of the task.",
                              },
                              external_id: {
                                type: "string",
                                minLength: 1,
                                maxLength: 200,
                                nullable: true,
                                description:
                                  "An arbitrary string referencing an external entity identifier.",
                              },
                              correlation_id: {
                                description:
                                  "Only return tasks which match the given correlation id",
                                type: "string",
                                minLength: 1,
                                maxLength: 200,
                                nullable: true,
                                pattern: "^[a-zA-Z0-9_-]+$",
                              },
                              author_id: {
                                type: "string",
                                format: "uuid",
                                description:
                                  "The unique identifier of the user that created this task.",
                              },
                              title: {
                                type: "string",
                                maxLength: 150,
                                description:
                                  "A short descriptive title of the task.",
                              },
                              body: {
                                type: "object",
                                description:
                                  "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                                properties: {
                                  plain: {
                                    type: "string",
                                    description:
                                      "The content body of the task as unformatted plain text.",
                                    nullable: true,
                                  },
                                  delta: {
                                    type: "array",
                                    items: { type: "object" },
                                    description:
                                      "The content body of the task formatted as Quill delta format.",
                                    nullable: true,
                                  },
                                  html: {
                                    type: "string",
                                    description:
                                      "The content body of the task formatted as HTML.",
                                    nullable: true,
                                  },
                                },
                              },
                              language: {
                                type: "string",
                                format: "bcp47",
                                example: "en-US",
                                description:
                                  "The detected language of the task.",
                              },
                              settings: {
                                type: "object",
                                description:
                                  "A collection of settings configured for a task.",
                                properties: {
                                  comments_enabled: {
                                    type: "boolean",
                                    description:
                                      "Whether comments can be created on this task.",
                                  },
                                },
                              },
                              comments_count: {
                                type: "integer",
                                description:
                                  "The total number of non-deleted comments on this task.",
                                format: "int32",
                              },
                              due_at: {
                                description:
                                  "The point in time by which this task should be completed before being marked as overdue.",
                                type: "object",
                                discriminator: {
                                  propertyName: "due_at_type",
                                  mapping: {
                                    DATE: "#/components/schemas/TaskDueAtDate",
                                    DATE_TIME:
                                      "#/components/schemas/TaskDueAtDateTime",
                                  },
                                },
                                properties: {
                                  due_at_type: {
                                    type: "string",
                                    enum: ["DATE", "DATE_TIME"],
                                  },
                                },
                              },
                              attachments: {
                                type: "array",
                                description:
                                  'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                                minItems: 0,
                                nullable: false,
                                items: {
                                  allOf: [
                                    {
                                      description:
                                        "Represents an attached file and its meta data",
                                      type: "object",
                                      required: [
                                        "filename",
                                        "id",
                                        "link",
                                        "mime_type",
                                        "category",
                                      ],
                                      properties: {
                                        id: { type: "string", format: "uuid" },
                                        filename: { type: "string" },
                                        link: {
                                          type: "string",
                                          pattern:
                                            "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                        },
                                        mime_type: { type: "string" },
                                        category: {
                                          description:
                                            "A categorization of the attachment.",
                                          enum: [
                                            "VIDEO",
                                            "VOICE",
                                            "IMAGE",
                                            "MISC",
                                          ],
                                          type: "string",
                                        },
                                        meta_data: {
                                          type: "object",
                                          description:
                                            "additional properties that provide more information about the attached file, such as its width, height, and size",
                                          properties: {
                                            width: {
                                              type: "integer",
                                              format: "int32",
                                            },
                                            height: {
                                              type: "integer",
                                              format: "int32",
                                            },
                                            size: {
                                              type: "integer",
                                              format: "int64",
                                            },
                                          },
                                        },
                                      },
                                    },
                                    {
                                      type: "object",
                                      required: ["order_number"],
                                      properties: {
                                        order_number: {
                                          description:
                                            "The order number of the task attachment",
                                          type: "integer",
                                          format: "int32",
                                          minimum: 1,
                                          maximum: 10,
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                              progress_status: {
                                type: "string",
                                description:
                                  "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                                enum: [
                                  "OPEN",
                                  "IN_PROGRESS",
                                  "FINISHED",
                                  "CLOSED",
                                ],
                                nullable: true,
                              },
                              distribution_kind: {
                                type: "string",
                                enum: ["PERSONAL", "DISTRIBUTED", "RECEIVED"],
                                description:
                                  "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                              },
                              created_at: {
                                type: "string",
                                format: "date-time",
                                description:
                                  "The point in time at which this resource was created.",
                              },
                              updated_at: {
                                type: "string",
                                format: "date-time",
                                nullable: false,
                                description:
                                  "The point in time at which this resource was last updated.",
                              },
                            },
                          },
                        },
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                      required: ["has_more", "next_cursor"],
                      properties: {
                        next_cursor: {
                          type: "string",
                          description:
                            'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        },
                        has_more: {
                          type: "boolean",
                          description:
                            'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        },
                      },
                    },
                  },
                  description: "Representation of a collection of tasks.",
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "delete-task-assignment",
            title: "Delete existing task assignment",
            description:
              "Removes an assignment from a task.\nThe assignment is no longer available.\nThe operation cannot be undone.",
            path: "/api/tasks/v4/tasks/assignments/{assignment_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "TASK_NOT_FOUND",
              "FEATURE_DISABLED",
              "TASK_ASSIGNMENT_NOT_FOUND",
              "TASK_ASSIGNMENTS_LOWER_LIMIT_VIOLATION",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "assignment_id",
                    type: "string",
                    description:
                      "The primary identifier of the assignment to access.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "204", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/tasks/v4/tasks/assignments/assignment_id HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE'};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id")\n  .delete(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id';\nconst options = {method: 'DELETE'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id' -Method DELETE",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id"\n\nresponse = requests.delete(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/tasks/v4/tasks/assignments/{assignment_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "204" }],
            security: [{ bearer: [] }],
            method: "delete",
          },
          {
            id: "finish-task-assignment",
            title: "Marking a task assignment as finished",
            description: "Marks a task assignment as finished.",
            path: "/api/tasks/v4/tasks/assignments/{assignment_id}/finish",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "FEATURE_DISABLED",
              "TASK_ASSIGNMENT_CHANGE_CONFLICT",
              "TASK_ASSIGNMENT_NOT_FOUND",
              "TASK_NOT_FOUND",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "assignment_id",
                    type: "string",
                    description:
                      "The primary identifier of the assignment to mark as finished.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "The unique identifier of the assignment.",
                    required: true,
                  },
                  {
                    name: "user_id",
                    type: "string",
                    description:
                      "The unique identifier of the recipient (user).",
                    required: true,
                  },
                  {
                    name: "task_id",
                    type: "string",
                    description: "The unique identifier of the parent task.",
                    required: true,
                  },
                  {
                    name: "progress_status",
                    type: "string",
                    description:
                      "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                    required: true,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was created.",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was last updated.",
                    required: true,
                  },
                  {
                    name: "recipient",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "is_deleted",
                        type: "boolean",
                        description: "",
                        required: false,
                      },
                      {
                        name: "first_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "last_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "profile_picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "task",
                    type: "object",
                    description: "Representation of a single task.",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "The unique identifier of the task.",
                        required: false,
                      },
                      {
                        name: "external_id",
                        type: "string",
                        description:
                          "An arbitrary string referencing an external entity identifier.",
                        required: false,
                      },
                      {
                        name: "correlation_id",
                        type: "string",
                        description:
                          "Only return tasks which match the given correlation id",
                        required: false,
                      },
                      {
                        name: "author_id",
                        type: "string",
                        description:
                          "The unique identifier of the user that created this task.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "string",
                        description: "A short descriptive title of the task.",
                        required: false,
                      },
                      {
                        name: "body",
                        type: "object",
                        description:
                          "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                        required: false,
                        properties: [
                          {
                            name: "plain",
                            type: "string",
                            description:
                              "The content body of the task as unformatted plain text.",
                            required: false,
                          },
                          {
                            name: "delta",
                            type: "array",
                            description:
                              "The content body of the task formatted as Quill delta format.",
                            required: false,
                          },
                          {
                            name: "html",
                            type: "string",
                            description:
                              "The content body of the task formatted as HTML.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "language",
                        type: "string",
                        description: "The detected language of the task.",
                        required: false,
                      },
                      {
                        name: "settings",
                        type: "object",
                        description:
                          "A collection of settings configured for a task.",
                        required: false,
                        properties: [
                          {
                            name: "comments_enabled",
                            type: "boolean",
                            description:
                              "Whether comments can be created on this task.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "comments_count",
                        type: "integer",
                        description:
                          "The total number of non-deleted comments on this task.",
                        required: false,
                      },
                      {
                        name: "due_at",
                        type: "object",
                        description:
                          "The point in time by which this task should be completed before being marked as overdue.",
                        required: false,
                        properties: [
                          {
                            name: "due_at_type",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "attachments",
                        type: "array",
                        description:
                          'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                        required: false,
                      },
                      {
                        name: "progress_status",
                        type: "string",
                        description:
                          "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                        required: false,
                      },
                      {
                        name: "distribution_kind",
                        type: "string",
                        description:
                          "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                        required: false,
                      },
                      {
                        name: "created_at",
                        type: "string",
                        description:
                          "The point in time at which this resource was created.",
                        required: false,
                      },
                      {
                        name: "updated_at",
                        type: "string",
                        description:
                          "The point in time at which this resource was last updated.",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "POST /api/tasks/v4/tasks/assignments/assignment_id/finish HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish"\n\n\treq, _ := http.NewRequest("POST", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish';\nconst options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish\' -Method POST -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish"\n\nresponse <- VERB("POST", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/finish")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/tasks/v4/tasks/assignments/{assignment_id}/finish",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "task_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "progress_status": "NEW",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z",\n  "recipient": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "is_deleted": true,\n    "first_name": "Jon",\n    "last_name": "Doe",\n    "department": "Marketing",\n    "profile_picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "task": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "external_id": "string",\n    "correlation_id": "string",\n    "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": "string",\n    "body": {\n      "plain": "string",\n      "delta": [\n        {}\n      ],\n      "html": "string"\n    },\n    "language": "en-US",\n    "settings": {\n      "comments_enabled": true\n    },\n    "comments_count": 0,\n    "due_at": {\n      "due_at_type": "DATE"\n    },\n    "attachments": [\n      {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "filename": "string",\n        "link": "string",\n        "mime_type": "string",\n        "category": "VIDEO",\n        "meta_data": {\n          "width": 0,\n          "height": 0,\n          "size": 0\n        },\n        "order_number": 0\n      }\n    ],\n    "progress_status": "OPEN",\n    "distribution_kind": "PERSONAL",\n    "created_at": "2024-01-11T07:41:25.662Z",\n    "updated_at": "2024-01-11T07:41:25.662Z"\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description:
                    "Representation of a single task which is assigned to a particular recipient.",
                  required: [
                    "id",
                    "user_id",
                    "task_id",
                    "progress_status",
                    "created_at",
                    "updated_at",
                  ],
                  properties: {
                    id: {
                      type: "string",
                      format: "uuid",
                      description: "The unique identifier of the assignment.",
                    },
                    user_id: {
                      type: "string",
                      format: "uuid",
                      description:
                        "The unique identifier of the recipient (user).",
                    },
                    task_id: {
                      type: "string",
                      format: "uuid",
                      description: "The unique identifier of the parent task.",
                    },
                    progress_status: {
                      type: "string",
                      description:
                        "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                      enum: ["NEW", "OPEN", "FINISHED"],
                    },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      description:
                        "The point in time at which this resource was created.",
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      nullable: false,
                      description:
                        "The point in time at which this resource was last updated.",
                    },
                    recipient: {
                      type: "object",
                      nullable: true,
                      properties: {
                        id: { type: "string", format: "uuid" },
                        is_deleted: { type: "boolean" },
                        first_name: { type: "string", example: "Jon" },
                        last_name: { type: "string", example: "Doe" },
                        department: {
                          type: "string",
                          example: "Marketing",
                          nullable: true,
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                      required: ["id", "is_deleted", "first_name", "last_name"],
                    },
                    task: {
                      type: "object",
                      description: "Representation of a single task.",
                      required: [
                        "id",
                        "author_id",
                        "title",
                        "attachments",
                        "settings",
                        "created_at",
                        "updated_at",
                      ],
                      properties: {
                        id: {
                          type: "string",
                          format: "uuid",
                          description: "The unique identifier of the task.",
                        },
                        external_id: {
                          type: "string",
                          minLength: 1,
                          maxLength: 200,
                          nullable: true,
                          description:
                            "An arbitrary string referencing an external entity identifier.",
                        },
                        correlation_id: {
                          description:
                            "Only return tasks which match the given correlation id",
                          type: "string",
                          minLength: 1,
                          maxLength: 200,
                          nullable: true,
                          pattern: "^[a-zA-Z0-9_-]+$",
                        },
                        author_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the user that created this task.",
                        },
                        title: {
                          type: "string",
                          maxLength: 150,
                          description: "A short descriptive title of the task.",
                        },
                        body: {
                          type: "object",
                          description:
                            "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                          properties: {
                            plain: {
                              type: "string",
                              description:
                                "The content body of the task as unformatted plain text.",
                              nullable: true,
                            },
                            delta: {
                              type: "array",
                              items: { type: "object" },
                              description:
                                "The content body of the task formatted as Quill delta format.",
                              nullable: true,
                            },
                            html: {
                              type: "string",
                              description:
                                "The content body of the task formatted as HTML.",
                              nullable: true,
                            },
                          },
                        },
                        language: {
                          type: "string",
                          format: "bcp47",
                          example: "en-US",
                          description: "The detected language of the task.",
                        },
                        settings: {
                          type: "object",
                          description:
                            "A collection of settings configured for a task.",
                          properties: {
                            comments_enabled: {
                              type: "boolean",
                              description:
                                "Whether comments can be created on this task.",
                            },
                          },
                        },
                        comments_count: {
                          type: "integer",
                          description:
                            "The total number of non-deleted comments on this task.",
                          format: "int32",
                        },
                        due_at: {
                          description:
                            "The point in time by which this task should be completed before being marked as overdue.",
                          type: "object",
                          discriminator: {
                            propertyName: "due_at_type",
                            mapping: {
                              DATE: "#/components/schemas/TaskDueAtDate",
                              DATE_TIME:
                                "#/components/schemas/TaskDueAtDateTime",
                            },
                          },
                          properties: {
                            due_at_type: {
                              type: "string",
                              enum: ["DATE", "DATE_TIME"],
                            },
                          },
                        },
                        attachments: {
                          type: "array",
                          description:
                            'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                          minItems: 0,
                          nullable: false,
                          items: {
                            allOf: [
                              {
                                description:
                                  "Represents an attached file and its meta data",
                                type: "object",
                                required: [
                                  "filename",
                                  "id",
                                  "link",
                                  "mime_type",
                                  "category",
                                ],
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  filename: { type: "string" },
                                  link: {
                                    type: "string",
                                    pattern:
                                      "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                  },
                                  mime_type: { type: "string" },
                                  category: {
                                    description:
                                      "A categorization of the attachment.",
                                    enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                                    type: "string",
                                  },
                                  meta_data: {
                                    type: "object",
                                    description:
                                      "additional properties that provide more information about the attached file, such as its width, height, and size",
                                    properties: {
                                      width: {
                                        type: "integer",
                                        format: "int32",
                                      },
                                      height: {
                                        type: "integer",
                                        format: "int32",
                                      },
                                      size: {
                                        type: "integer",
                                        format: "int64",
                                      },
                                    },
                                  },
                                },
                              },
                              {
                                type: "object",
                                required: ["order_number"],
                                properties: {
                                  order_number: {
                                    description:
                                      "The order number of the task attachment",
                                    type: "integer",
                                    format: "int32",
                                    minimum: 1,
                                    maximum: 10,
                                  },
                                },
                              },
                            ],
                          },
                        },
                        progress_status: {
                          type: "string",
                          description:
                            "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                          enum: ["OPEN", "IN_PROGRESS", "FINISHED", "CLOSED"],
                          nullable: true,
                        },
                        distribution_kind: {
                          type: "string",
                          enum: ["PERSONAL", "DISTRIBUTED", "RECEIVED"],
                          description:
                            "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                        },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updated_at: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                      },
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "open-task-assignment",
            title: "Marking a task assignment as open",
            description: "Marks a task assignment as opened.",
            path: "/api/tasks/v4/tasks/assignments/{assignment_id}/open",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "FEATURE_DISABLED",
              "TASK_ASSIGNMENT_CHANGE_CONFLICT",
              "TASK_ASSIGNMENT_NOT_FOUND",
              "TASK_NOT_FOUND",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "assignment_id",
                    type: "string",
                    description:
                      "The primary identifier of the assignment to mark as open.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "The unique identifier of the assignment.",
                    required: true,
                  },
                  {
                    name: "user_id",
                    type: "string",
                    description:
                      "The unique identifier of the recipient (user).",
                    required: true,
                  },
                  {
                    name: "task_id",
                    type: "string",
                    description: "The unique identifier of the parent task.",
                    required: true,
                  },
                  {
                    name: "progress_status",
                    type: "string",
                    description:
                      "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                    required: true,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was created.",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was last updated.",
                    required: true,
                  },
                  {
                    name: "recipient",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "is_deleted",
                        type: "boolean",
                        description: "",
                        required: false,
                      },
                      {
                        name: "first_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "last_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "profile_picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "task",
                    type: "object",
                    description: "Representation of a single task.",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "The unique identifier of the task.",
                        required: false,
                      },
                      {
                        name: "external_id",
                        type: "string",
                        description:
                          "An arbitrary string referencing an external entity identifier.",
                        required: false,
                      },
                      {
                        name: "correlation_id",
                        type: "string",
                        description:
                          "Only return tasks which match the given correlation id",
                        required: false,
                      },
                      {
                        name: "author_id",
                        type: "string",
                        description:
                          "The unique identifier of the user that created this task.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "string",
                        description: "A short descriptive title of the task.",
                        required: false,
                      },
                      {
                        name: "body",
                        type: "object",
                        description:
                          "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                        required: false,
                        properties: [
                          {
                            name: "plain",
                            type: "string",
                            description:
                              "The content body of the task as unformatted plain text.",
                            required: false,
                          },
                          {
                            name: "delta",
                            type: "array",
                            description:
                              "The content body of the task formatted as Quill delta format.",
                            required: false,
                          },
                          {
                            name: "html",
                            type: "string",
                            description:
                              "The content body of the task formatted as HTML.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "language",
                        type: "string",
                        description: "The detected language of the task.",
                        required: false,
                      },
                      {
                        name: "settings",
                        type: "object",
                        description:
                          "A collection of settings configured for a task.",
                        required: false,
                        properties: [
                          {
                            name: "comments_enabled",
                            type: "boolean",
                            description:
                              "Whether comments can be created on this task.",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "comments_count",
                        type: "integer",
                        description:
                          "The total number of non-deleted comments on this task.",
                        required: false,
                      },
                      {
                        name: "due_at",
                        type: "object",
                        description:
                          "The point in time by which this task should be completed before being marked as overdue.",
                        required: false,
                        properties: [
                          {
                            name: "due_at_type",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "attachments",
                        type: "array",
                        description:
                          'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                        required: false,
                      },
                      {
                        name: "progress_status",
                        type: "string",
                        description:
                          "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                        required: false,
                      },
                      {
                        name: "distribution_kind",
                        type: "string",
                        description:
                          "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                        required: false,
                      },
                      {
                        name: "created_at",
                        type: "string",
                        description:
                          "The point in time at which this resource was created.",
                        required: false,
                      },
                      {
                        name: "updated_at",
                        type: "string",
                        description:
                          "The point in time at which this resource was last updated.",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "POST /api/tasks/v4/tasks/assignments/assignment_id/open HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open"\n\n\treq, _ := http.NewRequest("POST", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open';\nconst options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open\' -Method POST -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open"\n\nresponse <- VERB("POST", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/assignments/assignment_id/open")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/tasks/v4/tasks/assignments/{assignment_id}/open",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "task_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "progress_status": "NEW",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z",\n  "recipient": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "is_deleted": true,\n    "first_name": "Jon",\n    "last_name": "Doe",\n    "department": "Marketing",\n    "profile_picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "task": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "external_id": "string",\n    "correlation_id": "string",\n    "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": "string",\n    "body": {\n      "plain": "string",\n      "delta": [\n        {}\n      ],\n      "html": "string"\n    },\n    "language": "en-US",\n    "settings": {\n      "comments_enabled": true\n    },\n    "comments_count": 0,\n    "due_at": {\n      "due_at_type": "DATE"\n    },\n    "attachments": [\n      {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "filename": "string",\n        "link": "string",\n        "mime_type": "string",\n        "category": "VIDEO",\n        "meta_data": {\n          "width": 0,\n          "height": 0,\n          "size": 0\n        },\n        "order_number": 0\n      }\n    ],\n    "progress_status": "OPEN",\n    "distribution_kind": "PERSONAL",\n    "created_at": "2024-01-11T07:41:25.662Z",\n    "updated_at": "2024-01-11T07:41:25.662Z"\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description:
                    "Representation of a single task which is assigned to a particular recipient.",
                  required: [
                    "id",
                    "user_id",
                    "task_id",
                    "progress_status",
                    "created_at",
                    "updated_at",
                  ],
                  properties: {
                    id: {
                      type: "string",
                      format: "uuid",
                      description: "The unique identifier of the assignment.",
                    },
                    user_id: {
                      type: "string",
                      format: "uuid",
                      description:
                        "The unique identifier of the recipient (user).",
                    },
                    task_id: {
                      type: "string",
                      format: "uuid",
                      description: "The unique identifier of the parent task.",
                    },
                    progress_status: {
                      type: "string",
                      description:
                        "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                      enum: ["NEW", "OPEN", "FINISHED"],
                    },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      description:
                        "The point in time at which this resource was created.",
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      nullable: false,
                      description:
                        "The point in time at which this resource was last updated.",
                    },
                    recipient: {
                      type: "object",
                      nullable: true,
                      properties: {
                        id: { type: "string", format: "uuid" },
                        is_deleted: { type: "boolean" },
                        first_name: { type: "string", example: "Jon" },
                        last_name: { type: "string", example: "Doe" },
                        department: {
                          type: "string",
                          example: "Marketing",
                          nullable: true,
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                      required: ["id", "is_deleted", "first_name", "last_name"],
                    },
                    task: {
                      type: "object",
                      description: "Representation of a single task.",
                      required: [
                        "id",
                        "author_id",
                        "title",
                        "attachments",
                        "settings",
                        "created_at",
                        "updated_at",
                      ],
                      properties: {
                        id: {
                          type: "string",
                          format: "uuid",
                          description: "The unique identifier of the task.",
                        },
                        external_id: {
                          type: "string",
                          minLength: 1,
                          maxLength: 200,
                          nullable: true,
                          description:
                            "An arbitrary string referencing an external entity identifier.",
                        },
                        correlation_id: {
                          description:
                            "Only return tasks which match the given correlation id",
                          type: "string",
                          minLength: 1,
                          maxLength: 200,
                          nullable: true,
                          pattern: "^[a-zA-Z0-9_-]+$",
                        },
                        author_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the user that created this task.",
                        },
                        title: {
                          type: "string",
                          maxLength: 150,
                          description: "A short descriptive title of the task.",
                        },
                        body: {
                          type: "object",
                          description:
                            "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                          properties: {
                            plain: {
                              type: "string",
                              description:
                                "The content body of the task as unformatted plain text.",
                              nullable: true,
                            },
                            delta: {
                              type: "array",
                              items: { type: "object" },
                              description:
                                "The content body of the task formatted as Quill delta format.",
                              nullable: true,
                            },
                            html: {
                              type: "string",
                              description:
                                "The content body of the task formatted as HTML.",
                              nullable: true,
                            },
                          },
                        },
                        language: {
                          type: "string",
                          format: "bcp47",
                          example: "en-US",
                          description: "The detected language of the task.",
                        },
                        settings: {
                          type: "object",
                          description:
                            "A collection of settings configured for a task.",
                          properties: {
                            comments_enabled: {
                              type: "boolean",
                              description:
                                "Whether comments can be created on this task.",
                            },
                          },
                        },
                        comments_count: {
                          type: "integer",
                          description:
                            "The total number of non-deleted comments on this task.",
                          format: "int32",
                        },
                        due_at: {
                          description:
                            "The point in time by which this task should be completed before being marked as overdue.",
                          type: "object",
                          discriminator: {
                            propertyName: "due_at_type",
                            mapping: {
                              DATE: "#/components/schemas/TaskDueAtDate",
                              DATE_TIME:
                                "#/components/schemas/TaskDueAtDateTime",
                            },
                          },
                          properties: {
                            due_at_type: {
                              type: "string",
                              enum: ["DATE", "DATE_TIME"],
                            },
                          },
                        },
                        attachments: {
                          type: "array",
                          description:
                            'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                          minItems: 0,
                          nullable: false,
                          items: {
                            allOf: [
                              {
                                description:
                                  "Represents an attached file and its meta data",
                                type: "object",
                                required: [
                                  "filename",
                                  "id",
                                  "link",
                                  "mime_type",
                                  "category",
                                ],
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  filename: { type: "string" },
                                  link: {
                                    type: "string",
                                    pattern:
                                      "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                  },
                                  mime_type: { type: "string" },
                                  category: {
                                    description:
                                      "A categorization of the attachment.",
                                    enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                                    type: "string",
                                  },
                                  meta_data: {
                                    type: "object",
                                    description:
                                      "additional properties that provide more information about the attached file, such as its width, height, and size",
                                    properties: {
                                      width: {
                                        type: "integer",
                                        format: "int32",
                                      },
                                      height: {
                                        type: "integer",
                                        format: "int32",
                                      },
                                      size: {
                                        type: "integer",
                                        format: "int64",
                                      },
                                    },
                                  },
                                },
                              },
                              {
                                type: "object",
                                required: ["order_number"],
                                properties: {
                                  order_number: {
                                    description:
                                      "The order number of the task attachment",
                                    type: "integer",
                                    format: "int32",
                                    minimum: 1,
                                    maximum: 10,
                                  },
                                },
                              },
                            ],
                          },
                        },
                        progress_status: {
                          type: "string",
                          description:
                            "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                          enum: ["OPEN", "IN_PROGRESS", "FINISHED", "CLOSED"],
                          nullable: true,
                        },
                        distribution_kind: {
                          type: "string",
                          enum: ["PERSONAL", "DISTRIBUTED", "RECEIVED"],
                          description:
                            "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                        },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updated_at: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                      },
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "get-task-assignments-by-task",
            title: "Get task assignments",
            description:
              "Retrieves a paginated list of assignments of a specific task sorted ascending by the last name of the recipient",
            path: "/api/tasks/v4/tasks/{task_id}/assignments",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "FEATURE_DISABLED",
              "TASK_NOT_FOUND",
              "VALIDATION_ERROR",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "task_id",
                    type: "string",
                    description:
                      "The primary identifier of the task to access.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "embed",
                    type: "array",
                    description:
                      'Defines the values to embed into the response body. Refer to our general "embedment" concept for more information.',
                    required: false,
                    items: { type: "string", enum: ["USER"] },
                  },
                  {
                    name: "page_cursor",
                    type: "string",
                    description:
                      'A cursor pointing to the first item to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      "**Default Sort Behavior:**\nAssignments are primarily sorted based on the `lastname` in ascending order.",
                    required: false,
                    items: {
                      type: "string",
                      enum: ["LASTNAME_ASC", "LASTNAME_DESC"],
                    },
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "assignments",
                    type: "array",
                    description:
                      "An array of all retrieved assignments, according to the pagination and sort arguments.",
                    required: false,
                    items: {
                      type: "object",
                      description:
                        "Representation of a single task which is assigned to a particular recipient.",
                      required: [
                        "id",
                        "user_id",
                        "task_id",
                        "progress_status",
                        "created_at",
                        "updated_at",
                      ],
                      properties: {
                        id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the assignment.",
                        },
                        user_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the recipient (user).",
                        },
                        task_id: {
                          type: "string",
                          format: "uuid",
                          description:
                            "The unique identifier of the parent task.",
                        },
                        progress_status: {
                          type: "string",
                          description:
                            "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                          enum: ["NEW", "OPEN", "FINISHED"],
                        },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updated_at: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                        recipient: {
                          type: "object",
                          nullable: true,
                          properties: {
                            id: { type: "string", format: "uuid" },
                            is_deleted: { type: "boolean" },
                            first_name: { type: "string", example: "Jon" },
                            last_name: { type: "string", example: "Doe" },
                            department: {
                              type: "string",
                              example: "Marketing",
                              nullable: true,
                            },
                            profile_picture: {
                              type: "object",
                              nullable: true,
                              properties: {
                                file_id: { type: "string", format: "uuid" },
                              },
                            },
                          },
                          required: [
                            "id",
                            "is_deleted",
                            "first_name",
                            "last_name",
                          ],
                        },
                        task: {
                          type: "object",
                          description: "Representation of a single task.",
                          required: [
                            "id",
                            "author_id",
                            "title",
                            "attachments",
                            "settings",
                            "created_at",
                            "updated_at",
                          ],
                          properties: {
                            id: {
                              type: "string",
                              format: "uuid",
                              description: "The unique identifier of the task.",
                            },
                            external_id: {
                              type: "string",
                              minLength: 1,
                              maxLength: 200,
                              nullable: true,
                              description:
                                "An arbitrary string referencing an external entity identifier.",
                            },
                            correlation_id: {
                              description:
                                "Only return tasks which match the given correlation id",
                              type: "string",
                              minLength: 1,
                              maxLength: 200,
                              nullable: true,
                              pattern: "^[a-zA-Z0-9_-]+$",
                            },
                            author_id: {
                              type: "string",
                              format: "uuid",
                              description:
                                "The unique identifier of the user that created this task.",
                            },
                            title: {
                              type: "string",
                              maxLength: 150,
                              description:
                                "A short descriptive title of the task.",
                            },
                            body: {
                              type: "object",
                              description:
                                "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                              properties: {
                                plain: {
                                  type: "string",
                                  description:
                                    "The content body of the task as unformatted plain text.",
                                  nullable: true,
                                },
                                delta: {
                                  type: "array",
                                  items: { type: "object" },
                                  description:
                                    "The content body of the task formatted as Quill delta format.",
                                  nullable: true,
                                },
                                html: {
                                  type: "string",
                                  description:
                                    "The content body of the task formatted as HTML.",
                                  nullable: true,
                                },
                              },
                            },
                            language: {
                              type: "string",
                              format: "bcp47",
                              example: "en-US",
                              description: "The detected language of the task.",
                            },
                            settings: {
                              type: "object",
                              description:
                                "A collection of settings configured for a task.",
                              properties: {
                                comments_enabled: {
                                  type: "boolean",
                                  description:
                                    "Whether comments can be created on this task.",
                                },
                              },
                            },
                            comments_count: {
                              type: "integer",
                              description:
                                "The total number of non-deleted comments on this task.",
                              format: "int32",
                            },
                            due_at: {
                              description:
                                "The point in time by which this task should be completed before being marked as overdue.",
                              type: "object",
                              discriminator: {
                                propertyName: "due_at_type",
                                mapping: {
                                  DATE: "#/components/schemas/TaskDueAtDate",
                                  DATE_TIME:
                                    "#/components/schemas/TaskDueAtDateTime",
                                },
                              },
                              properties: {
                                due_at_type: {
                                  type: "string",
                                  enum: ["DATE", "DATE_TIME"],
                                },
                              },
                            },
                            attachments: {
                              type: "array",
                              description:
                                'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                              minItems: 0,
                              nullable: false,
                              items: {
                                allOf: [
                                  {
                                    description:
                                      "Represents an attached file and its meta data",
                                    type: "object",
                                    required: [
                                      "filename",
                                      "id",
                                      "link",
                                      "mime_type",
                                      "category",
                                    ],
                                    properties: {
                                      id: { type: "string", format: "uuid" },
                                      filename: { type: "string" },
                                      link: {
                                        type: "string",
                                        pattern:
                                          "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                      },
                                      mime_type: { type: "string" },
                                      category: {
                                        description:
                                          "A categorization of the attachment.",
                                        enum: [
                                          "VIDEO",
                                          "VOICE",
                                          "IMAGE",
                                          "MISC",
                                        ],
                                        type: "string",
                                      },
                                      meta_data: {
                                        type: "object",
                                        description:
                                          "additional properties that provide more information about the attached file, such as its width, height, and size",
                                        properties: {
                                          width: {
                                            type: "integer",
                                            format: "int32",
                                          },
                                          height: {
                                            type: "integer",
                                            format: "int32",
                                          },
                                          size: {
                                            type: "integer",
                                            format: "int64",
                                          },
                                        },
                                      },
                                    },
                                  },
                                  {
                                    type: "object",
                                    required: ["order_number"],
                                    properties: {
                                      order_number: {
                                        description:
                                          "The order number of the task attachment",
                                        type: "integer",
                                        format: "int32",
                                        minimum: 1,
                                        maximum: 10,
                                      },
                                    },
                                  },
                                ],
                              },
                            },
                            progress_status: {
                              type: "string",
                              description:
                                "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                              enum: [
                                "OPEN",
                                "IN_PROGRESS",
                                "FINISHED",
                                "CLOSED",
                              ],
                              nullable: true,
                            },
                            distribution_kind: {
                              type: "string",
                              enum: ["PERSONAL", "DISTRIBUTED", "RECEIVED"],
                              description:
                                "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                            },
                            created_at: {
                              type: "string",
                              format: "date-time",
                              description:
                                "The point in time at which this resource was created.",
                            },
                            updated_at: {
                              type: "string",
                              format: "date-time",
                              nullable: false,
                              description:
                                "The point in time at which this resource was last updated.",
                            },
                          },
                        },
                      },
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "next_cursor",
                        type: "string",
                        description:
                          'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                      {
                        name: "has_more",
                        type: "boolean",
                        description:
                          'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/tasks/v4/tasks/task_id/assignments HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/task_id/assignments', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/task_id/assignments"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/task_id/assignments\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/tasks/v4/tasks/task_id/assignments \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/tasks/v4/tasks/{task_id}/assignments",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "assignments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "task_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "progress_status": "NEW",\n      "created_at": "2024-01-11T07:41:25.662Z",\n      "updated_at": "2024-01-11T07:41:25.662Z",\n      "recipient": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      },\n      "task": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "external_id": "string",\n        "correlation_id": "string",\n        "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "title": "string",\n        "body": {\n          "plain": "string",\n          "delta": [\n            {}\n          ],\n          "html": "string"\n        },\n        "language": "en-US",\n        "settings": {\n          "comments_enabled": true\n        },\n        "comments_count": 0,\n        "due_at": {\n          "due_at_type": "DATE"\n        },\n        "attachments": [\n          {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "filename": "string",\n            "link": "string",\n            "mime_type": "string",\n            "category": "VIDEO",\n            "meta_data": {\n              "width": 0,\n              "height": 0,\n              "size": 0\n            },\n            "order_number": 0\n          }\n        ],\n        "progress_status": "OPEN",\n        "distribution_kind": "PERSONAL",\n        "created_at": "2024-01-11T07:41:25.662Z",\n        "updated_at": "2024-01-11T07:41:25.662Z"\n      }\n    }\n  ],\n  "pagination": {\n    "next_cursor": "string",\n    "has_more": true\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  required: ["pagination"],
                  properties: {
                    assignments: {
                      type: "array",
                      description:
                        "An array of all retrieved assignments, according to the pagination and sort arguments.",
                      items: {
                        type: "object",
                        description:
                          "Representation of a single task which is assigned to a particular recipient.",
                        required: [
                          "id",
                          "user_id",
                          "task_id",
                          "progress_status",
                          "created_at",
                          "updated_at",
                        ],
                        properties: {
                          id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the assignment.",
                          },
                          user_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the recipient (user).",
                          },
                          task_id: {
                            type: "string",
                            format: "uuid",
                            description:
                              "The unique identifier of the parent task.",
                          },
                          progress_status: {
                            type: "string",
                            description:
                              "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                            enum: ["NEW", "OPEN", "FINISHED"],
                          },
                          created_at: {
                            type: "string",
                            format: "date-time",
                            description:
                              "The point in time at which this resource was created.",
                          },
                          updated_at: {
                            type: "string",
                            format: "date-time",
                            nullable: false,
                            description:
                              "The point in time at which this resource was last updated.",
                          },
                          recipient: {
                            type: "object",
                            nullable: true,
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                          task: {
                            type: "object",
                            description: "Representation of a single task.",
                            required: [
                              "id",
                              "author_id",
                              "title",
                              "attachments",
                              "settings",
                              "created_at",
                              "updated_at",
                            ],
                            properties: {
                              id: {
                                type: "string",
                                format: "uuid",
                                description:
                                  "The unique identifier of the task.",
                              },
                              external_id: {
                                type: "string",
                                minLength: 1,
                                maxLength: 200,
                                nullable: true,
                                description:
                                  "An arbitrary string referencing an external entity identifier.",
                              },
                              correlation_id: {
                                description:
                                  "Only return tasks which match the given correlation id",
                                type: "string",
                                minLength: 1,
                                maxLength: 200,
                                nullable: true,
                                pattern: "^[a-zA-Z0-9_-]+$",
                              },
                              author_id: {
                                type: "string",
                                format: "uuid",
                                description:
                                  "The unique identifier of the user that created this task.",
                              },
                              title: {
                                type: "string",
                                maxLength: 150,
                                description:
                                  "A short descriptive title of the task.",
                              },
                              body: {
                                type: "object",
                                description:
                                  "Contains the different representations of the content.\nIt is guaranteed that the representation is filled with content which was explicitly requested.",
                                properties: {
                                  plain: {
                                    type: "string",
                                    description:
                                      "The content body of the task as unformatted plain text.",
                                    nullable: true,
                                  },
                                  delta: {
                                    type: "array",
                                    items: { type: "object" },
                                    description:
                                      "The content body of the task formatted as Quill delta format.",
                                    nullable: true,
                                  },
                                  html: {
                                    type: "string",
                                    description:
                                      "The content body of the task formatted as HTML.",
                                    nullable: true,
                                  },
                                },
                              },
                              language: {
                                type: "string",
                                format: "bcp47",
                                example: "en-US",
                                description:
                                  "The detected language of the task.",
                              },
                              settings: {
                                type: "object",
                                description:
                                  "A collection of settings configured for a task.",
                                properties: {
                                  comments_enabled: {
                                    type: "boolean",
                                    description:
                                      "Whether comments can be created on this task.",
                                  },
                                },
                              },
                              comments_count: {
                                type: "integer",
                                description:
                                  "The total number of non-deleted comments on this task.",
                                format: "int32",
                              },
                              due_at: {
                                description:
                                  "The point in time by which this task should be completed before being marked as overdue.",
                                type: "object",
                                discriminator: {
                                  propertyName: "due_at_type",
                                  mapping: {
                                    DATE: "#/components/schemas/TaskDueAtDate",
                                    DATE_TIME:
                                      "#/components/schemas/TaskDueAtDateTime",
                                  },
                                },
                                properties: {
                                  due_at_type: {
                                    type: "string",
                                    enum: ["DATE", "DATE_TIME"],
                                  },
                                },
                              },
                              attachments: {
                                type: "array",
                                description:
                                  'An array of attachments contained in the body of a task.\nRefer to our general "attachment" concept for more information.\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                                minItems: 0,
                                nullable: false,
                                items: {
                                  allOf: [
                                    {
                                      description:
                                        "Represents an attached file and its meta data",
                                      type: "object",
                                      required: [
                                        "filename",
                                        "id",
                                        "link",
                                        "mime_type",
                                        "category",
                                      ],
                                      properties: {
                                        id: { type: "string", format: "uuid" },
                                        filename: { type: "string" },
                                        link: {
                                          type: "string",
                                          pattern:
                                            "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                        },
                                        mime_type: { type: "string" },
                                        category: {
                                          description:
                                            "A categorization of the attachment.",
                                          enum: [
                                            "VIDEO",
                                            "VOICE",
                                            "IMAGE",
                                            "MISC",
                                          ],
                                          type: "string",
                                        },
                                        meta_data: {
                                          type: "object",
                                          description:
                                            "additional properties that provide more information about the attached file, such as its width, height, and size",
                                          properties: {
                                            width: {
                                              type: "integer",
                                              format: "int32",
                                            },
                                            height: {
                                              type: "integer",
                                              format: "int32",
                                            },
                                            size: {
                                              type: "integer",
                                              format: "int64",
                                            },
                                          },
                                        },
                                      },
                                    },
                                    {
                                      type: "object",
                                      required: ["order_number"],
                                      properties: {
                                        order_number: {
                                          description:
                                            "The order number of the task attachment",
                                          type: "integer",
                                          format: "int32",
                                          minimum: 1,
                                          maximum: 10,
                                        },
                                      },
                                    },
                                  ],
                                },
                              },
                              progress_status: {
                                type: "string",
                                description:
                                  "The progress status of the task, describing accumulated assignment statuses.\n* `OPEN`: No recipient has made any progress on the task yet.\n* `IN_PROGRESS`: At least one recipient has finished the task.\n* `FINISHED`: All recipients have finished the task.\n* `CLOSED`: The author has closed the task.\n\nOnly visible to the author of the task.",
                                enum: [
                                  "OPEN",
                                  "IN_PROGRESS",
                                  "FINISHED",
                                  "CLOSED",
                                ],
                                nullable: true,
                              },
                              distribution_kind: {
                                type: "string",
                                enum: ["PERSONAL", "DISTRIBUTED", "RECEIVED"],
                                description:
                                  "Defines the distribution kind of a task.\n* `DISTRIBUTED` -  the actor has distributed the task to others\n* `RECEIVED` - the actor has received the task excl. personal tasks\n* `PERSONAL` - the actor is creator and only recipient of the task",
                              },
                              created_at: {
                                type: "string",
                                format: "date-time",
                                description:
                                  "The point in time at which this resource was created.",
                              },
                              updated_at: {
                                type: "string",
                                format: "date-time",
                                nullable: false,
                                description:
                                  "The point in time at which this resource was last updated.",
                              },
                            },
                          },
                        },
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                      required: ["has_more", "next_cursor"],
                      properties: {
                        next_cursor: {
                          type: "string",
                          description:
                            'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        },
                        has_more: {
                          type: "boolean",
                          description:
                            'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        },
                      },
                    },
                  },
                  description: "Representation of a collection of tasks.",
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "create-task-assignment",
            title: "Create new task assignment",
            description: "Assigns a task to a new user or channel.",
            path: "/api/tasks/v4/tasks/{task_id}/assignments",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "FEATURE_DISABLED",
              "NOT_ADMIN_OF_CHANNEL",
              "TASK_NOT_FOUND",
              "UNKNOWN_CHANNEL_ID",
              "UNKNOWN_USER_ID",
              "VALIDATION_ERROR",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "task_id",
                    type: "string",
                    description:
                      "The primary identifier of the task to access.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "recipient",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "type",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "total",
                    type: "integer",
                    description:
                      "The total number of task assignments for the task",
                    required: true,
                  },
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      required: ["count", "status"],
                      properties: {
                        count: { type: "integer", minimum: 0 },
                        status: {
                          type: "string",
                          description:
                            "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                          enum: ["NEW", "OPEN", "FINISHED"],
                        },
                      },
                    },
                  },
                ],
                type: "response",
              },
              {
                title: "201",
                parameters: [
                  {
                    name: "total",
                    type: "integer",
                    description:
                      "The total number of task assignments for the task",
                    required: true,
                  },
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      required: ["count", "status"],
                      properties: {
                        count: { type: "integer", minimum: 0 },
                        status: {
                          type: "string",
                          description:
                            "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                          enum: ["NEW", "OPEN", "FINISHED"],
                        },
                      },
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"recipient\\":{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments" {:content-type :json\n                                                                             :form-params {:recipient {:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                       :type "CHANNEL"}}\n                                                                             :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"recipient\\":{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"recipient\\":{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/tasks/v4/tasks/task_id/assignments HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 76\r\n\r\n{"recipient":{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","type":"CHANNEL"}}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments"\n\n\tpayload := strings.NewReader("{\\"recipient\\":{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"recipient\\":{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({recipient: {id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', type: 'CHANNEL'}})\n};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/task_id/assignments', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"recipient\\":{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({recipient: {id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', type: 'CHANNEL'}})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"recipient": @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"type": @"CHANNEL" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/task_id/assignments"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"recipient\\":{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments', [\n  'body' => '{\"recipient\":{\"id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"type\":\"CHANNEL\"}}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"recipient":{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","type":"CHANNEL"}}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments"\n\npayload = {"recipient": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "type": "CHANNEL"\n    }}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments"\n\npayload <- "{\\"recipient\\":{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"recipient\\":{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"CHANNEL\\"}}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/tasks/v4/tasks/task_id/assignments \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "recipient": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "type": "CHANNEL"\n  }\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["recipient": [\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "type": "CHANNEL"\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/tasks/v4/tasks/{task_id}/assignments",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "total": 0,\n  "items": [\n    {\n      "count": 0,\n      "status": "NEW"\n    }\n  ]\n}',
              "201":
                '{\n  "total": 0,\n  "items": [\n    {\n      "count": 0,\n      "status": "NEW"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description:
                    "Aggregated data about assignments of the task.\n\nOnly visible to the author of the task.",
                  required: ["total", "items"],
                  properties: {
                    total: {
                      type: "integer",
                      minimum: 0,
                      description:
                        "The total number of task assignments for the task",
                      format: "int32",
                    },
                    items: {
                      type: "array",
                      items: {
                        type: "object",
                        required: ["count", "status"],
                        properties: {
                          count: { type: "integer", minimum: 0 },
                          status: {
                            type: "string",
                            description:
                              "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                            enum: ["NEW", "OPEN", "FINISHED"],
                          },
                        },
                      },
                    },
                  },
                },
                statusCode: "200",
              },
              {
                schema: {
                  type: "object",
                  description:
                    "Aggregated data about assignments of the task.\n\nOnly visible to the author of the task.",
                  required: ["total", "items"],
                  properties: {
                    total: {
                      type: "integer",
                      minimum: 0,
                      description:
                        "The total number of task assignments for the task",
                      format: "int32",
                    },
                    items: {
                      type: "array",
                      items: {
                        type: "object",
                        required: ["count", "status"],
                        properties: {
                          count: { type: "integer", minimum: 0 },
                          status: {
                            type: "string",
                            description:
                              "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                            enum: ["NEW", "OPEN", "FINISHED"],
                          },
                        },
                      },
                    },
                  },
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "batch-create-task-assignments",
            title: "Create multiple task assignments",
            description: "Creates multiple assignments on a task at once.",
            path: "/api/tasks/v4/tasks/{task_id}/assignments/batch",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "FEATURE_DISABLED",
              "NOT_ADMIN_OF_CHANNEL",
              "TASK_NOT_FOUND",
              "UNKNOWN_USER_ID",
              "UNKNOWN_CHANNEL_ID",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "task_id",
                    type: "string",
                    description:
                      "The primary identifier of the task to access.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "user_ids",
                    type: "array",
                    description: "An array of user IDs.",
                    required: true,
                    items: { type: "string", format: "uuid" },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "total",
                    type: "integer",
                    description:
                      "The total number of task assignments for the task",
                    required: true,
                  },
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      required: ["count", "status"],
                      properties: {
                        count: { type: "integer", minimum: 0 },
                        status: {
                          type: "string",
                          description:
                            "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                          enum: ["NEW", "OPEN", "FINISHED"],
                        },
                      },
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch" {:content-type :json\n                                                                                   :form-params {:user_ids ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]}\n                                                                                   :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/tasks/v4/tasks/task_id/assignments/batch HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 53\r\n\r\n{"user_ids":["3fa85f64-5717-4562-b3fc-2c963f66afa6"]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch"\n\n\tpayload := strings.NewReader("{\\"user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({user_ids: ['3fa85f64-5717-4562-b3fc-2c963f66afa6']})\n};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({user_ids: ['3fa85f64-5717-4562-b3fc-2c963f66afa6']})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"user_ids": @[ @"3fa85f64-5717-4562-b3fc-2c963f66afa6" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch', [\n  'body' => '{\"user_ids\":[\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"user_ids":["3fa85f64-5717-4562-b3fc-2c963f66afa6"]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch"\n\npayload = {"user_ids": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch"\n\npayload <- "{\\"user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"user_ids\": [\n    \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n  ]\n}\n'",
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["user_ids": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/tasks/v4/tasks/{task_id}/assignments/batch",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "total": 0,\n  "items": [\n    {\n      "count": 0,\n      "status": "NEW"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description:
                    "Aggregated data about assignments of the task.\n\nOnly visible to the author of the task.",
                  required: ["total", "items"],
                  properties: {
                    total: {
                      type: "integer",
                      minimum: 0,
                      description:
                        "The total number of task assignments for the task",
                      format: "int32",
                    },
                    items: {
                      type: "array",
                      items: {
                        type: "object",
                        required: ["count", "status"],
                        properties: {
                          count: { type: "integer", minimum: 0 },
                          status: {
                            type: "string",
                            description:
                              "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                            enum: ["NEW", "OPEN", "FINISHED"],
                          },
                        },
                      },
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "batch-delete-task-assignments",
            title: "Delete multiple task assignments",
            description:
              "Removes multiple assignments from a task at once.\nThis operation cannot be undone.",
            path: "/api/tasks/v4/tasks/{task_id}/assignments/batch",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "TASK_NOT_FOUND",
              "FEATURE_DISABLED",
              "TASK_ASSIGNMENT_NOT_FOUND",
              "TASK_ASSIGNMENTS_LOWER_LIMIT_VIOLATION",
              "UNKNOWN_TASK_ASSIGNMENT_ID",
              "VALIDATION_ERROR",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "task_id",
                    type: "string",
                    description:
                      "The primary identifier of the task to access.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "assignment_ids",
                    type: "array",
                    description: "",
                    required: true,
                    items: { type: "string", format: "uuid" },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "total",
                    type: "integer",
                    description:
                      "The total number of task assignments for the task",
                    required: true,
                  },
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      required: ["count", "status"],
                      properties: {
                        count: { type: "integer", minimum: 0 },
                        status: {
                          type: "string",
                          description:
                            "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                          enum: ["NEW", "OPEN", "FINISHED"],
                        },
                      },
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"assignment_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch" {:content-type :json\n                                                                                     :form-params {:assignment_ids ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]}\n                                                                                     :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"assignment_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"assignment_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'DELETE /api/tasks/v4/tasks/task_id/assignments/batch HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 59\r\n\r\n{"assignment_ids":["3fa85f64-5717-4562-b3fc-2c963f66afa6"]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch"\n\n\tpayload := strings.NewReader("{\\"assignment_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}")\n\n\treq, _ := http.NewRequest("DELETE", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"assignment_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch")\n  .delete(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'DELETE',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({assignment_ids: ['3fa85f64-5717-4562-b3fc-2c963f66afa6']})\n};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"assignment_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch")\n  .delete(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch';\nconst options = {\n  method: 'DELETE',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({assignment_ids: ['3fa85f64-5717-4562-b3fc-2c963f66afa6']})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"assignment_ids": @[ @"3fa85f64-5717-4562-b3fc-2c963f66afa6" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"assignment_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}" in\n\nClient.call ~headers ~body `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch', [\n  'body' => '{\"assignment_ids\":[\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch\' -Method DELETE -Headers $headers -ContentType \'application/json\' -Body \'{"assignment_ids":["3fa85f64-5717-4562-b3fc-2c963f66afa6"]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch"\n\npayload = {"assignment_ids": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.delete(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch"\n\npayload <- "{\\"assignment_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}"\n\nencode <- "json"\n\nresponse <- VERB("DELETE", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"assignment_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"assignment_ids\": [\n    \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n  ]\n}\n'",
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["assignment_ids": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments/batch")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/tasks/v4/tasks/{task_id}/assignments/batch",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "total": 0,\n  "items": [\n    {\n      "count": 0,\n      "status": "NEW"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description:
                    "Aggregated data about assignments of the task.\n\nOnly visible to the author of the task.",
                  required: ["total", "items"],
                  properties: {
                    total: {
                      type: "integer",
                      minimum: 0,
                      description:
                        "The total number of task assignments for the task",
                      format: "int32",
                    },
                    items: {
                      type: "array",
                      items: {
                        type: "object",
                        required: ["count", "status"],
                        properties: {
                          count: { type: "integer", minimum: 0 },
                          status: {
                            type: "string",
                            description:
                              "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                            enum: ["NEW", "OPEN", "FINISHED"],
                          },
                        },
                      },
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "delete",
          },
        ],
      },
      {
        id: "task-assignments-summary",
        title: "Task Assignments Summary",
        shortDescription: "",
        endpoints: [
          {
            id: "get-tasks-assignments-summary",
            title: "Get number of tasks",
            description:
              "Retrieve a count of the number of task assignments by their assignment progress for the actor",
            path: "/api/tasks/v4/tasks/assignments-summary",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: ["FEATURE_DISABLED"],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "total",
                    type: "integer",
                    description:
                      "The total number of task assignments for the task",
                    required: true,
                  },
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      required: ["count", "status"],
                      properties: {
                        count: { type: "integer", minimum: 0 },
                        status: {
                          type: "string",
                          description:
                            "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                          enum: ["NEW", "OPEN", "FINISHED"],
                        },
                      },
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/assignments-summary");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/tasks/v4/tasks/assignments-summary" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/assignments-summary");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/assignments-summary");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/tasks/v4/tasks/assignments-summary HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/assignments-summary"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/assignments-summary")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/assignments-summary', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/assignments-summary")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/assignments-summary';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/assignments-summary"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/assignments-summary" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/tasks/v4/tasks/assignments-summary', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/assignments-summary\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/assignments-summary"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/assignments-summary"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/assignments-summary\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/tasks/v4/tasks/assignments-summary \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/assignments-summary")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/tasks/v4/tasks/assignments-summary",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "total": 0,\n  "items": [\n    {\n      "count": 0,\n      "status": "NEW"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description:
                    "Aggregated data about assignments of the task.\n\nOnly visible to the author of the task.",
                  required: ["total", "items"],
                  properties: {
                    total: {
                      type: "integer",
                      minimum: 0,
                      description:
                        "The total number of task assignments for the task",
                      format: "int32",
                    },
                    items: {
                      type: "array",
                      items: {
                        type: "object",
                        required: ["count", "status"],
                        properties: {
                          count: { type: "integer", minimum: 0 },
                          status: {
                            type: "string",
                            description:
                              "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                            enum: ["NEW", "OPEN", "FINISHED"],
                          },
                        },
                      },
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-task-assignments-summary",
            title: "Get a summary for the task assignments.",
            description:
              "Get a summary for the task assignments. Intended to be used as additional information for the author of a task.",
            path: "/api/tasks/v4/tasks/{task_id}/assignments-summary",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: ["FEATURE_DISABLED", "TASK_NOT_FOUND"],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "task_id",
                    type: "string",
                    description:
                      "The primary identifier of the task to access.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "total",
                    type: "integer",
                    description:
                      "The total number of task assignments for the task",
                    required: true,
                  },
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      required: ["count", "status"],
                      properties: {
                        count: { type: "integer", minimum: 0 },
                        status: {
                          type: "string",
                          description:
                            "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                          enum: ["NEW", "OPEN", "FINISHED"],
                        },
                      },
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/tasks/v4/tasks/task_id/assignments-summary HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/task_id/assignments-summary")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/tasks/v4/tasks/{task_id}/assignments-summary",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "total": 0,\n  "items": [\n    {\n      "count": 0,\n      "status": "NEW"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description:
                    "Aggregated data about assignments of the task.\n\nOnly visible to the author of the task.",
                  required: ["total", "items"],
                  properties: {
                    total: {
                      type: "integer",
                      minimum: 0,
                      description:
                        "The total number of task assignments for the task",
                      format: "int32",
                    },
                    items: {
                      type: "array",
                      items: {
                        type: "object",
                        required: ["count", "status"],
                        properties: {
                          count: { type: "integer", minimum: 0 },
                          status: {
                            type: "string",
                            description:
                              "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                            enum: ["NEW", "OPEN", "FINISHED"],
                          },
                        },
                      },
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
      {
        id: "task-recipients",
        title: "Task Recipients",
        shortDescription: "",
        endpoints: [
          {
            id: "search-task-recipients",
            title: "Search recipients for a task",
            description: "",
            path: "/api/tasks/v4/tasks/{task_id}/recipients",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: ["FEATURE_DISABLED", "TASK_NOT_FOUND"],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "task_id",
                    type: "string",
                    description:
                      "The primary identifier of the task to access.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      'Defines the search term to search for users by their first and / or last name. To search for multiple\nwords, the words are comma seperated. Example "Hans, Mueller". The search term is case-insensitive.',
                    required: false,
                  },
                  {
                    name: "assignment_status",
                    type: "array",
                    description:
                      "Filters the list of recipients according to their assignment status to the current task.\nA recipient can either be already assigned or unassigned.",
                    required: false,
                    items: { type: "string", enum: ["ASSIGNED", "UNASSIGNED"] },
                  },
                  {
                    name: "progress_status",
                    type: "array",
                    description:
                      "Defines a filter for the progress status of a recipient. If applied only recipients are returned\nwhich have a task assignment matching the given progress status.",
                    required: false,
                    items: {
                      type: "string",
                      description:
                        "Filter for the assignment progress status. Possible values are:\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                      enum: ["NEW", "OPEN", "FINISHED"],
                    },
                  },
                  {
                    name: "page_cursor",
                    type: "string",
                    description:
                      'A cursor pointing to the first item to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      "**Default Sort Behavior:**\nUsers are primarily sorted based on the `lastname` in ascending order.",
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "LASTNAME_ASC",
                        "LASTNAME_DESC",
                        "FIRSTNAME_ASC",
                        "FIRSTNAME_DESC",
                      ],
                    },
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "recipients",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      description:
                        "User reference with progress status information if already assigned to a task.",
                      required: ["user"],
                      properties: {
                        user: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            is_deleted: { type: "boolean" },
                            first_name: { type: "string", example: "Jon" },
                            last_name: { type: "string", example: "Doe" },
                            department: {
                              type: "string",
                              example: "Marketing",
                              nullable: true,
                            },
                            profile_picture: {
                              type: "object",
                              nullable: true,
                              properties: {
                                file_id: { type: "string", format: "uuid" },
                              },
                            },
                          },
                          required: [
                            "id",
                            "is_deleted",
                            "first_name",
                            "last_name",
                          ],
                        },
                        progress_status: {
                          type: "string",
                          description:
                            "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                          enum: ["NEW", "OPEN", "FINISHED"],
                        },
                      },
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "next_cursor",
                        type: "string",
                        description:
                          'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                      {
                        name: "has_more",
                        type: "boolean",
                        description:
                          'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/recipients");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/tasks/v4/tasks/task_id/recipients" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/recipients");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/task_id/recipients");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/tasks/v4/tasks/task_id/recipients HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/task_id/recipients"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/recipients")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/task_id/recipients', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/recipients")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/task_id/recipients';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/task_id/recipients"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/task_id/recipients" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/tasks/v4/tasks/task_id/recipients', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/task_id/recipients\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/task_id/recipients"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/task_id/recipients"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/task_id/recipients\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/tasks/v4/tasks/task_id/recipients \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/task_id/recipients")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/tasks/v4/tasks/{task_id}/recipients",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "recipients": [\n    {\n      "user": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      },\n      "progress_status": "NEW"\n    }\n  ],\n  "pagination": {\n    "next_cursor": "string",\n    "has_more": true\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description:
                    "List of task recipients and pagination information",
                  required: ["recipients", "pagination"],
                  properties: {
                    recipients: {
                      type: "array",
                      items: {
                        type: "object",
                        description:
                          "User reference with progress status information if already assigned to a task.",
                        required: ["user"],
                        properties: {
                          user: {
                            type: "object",
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                          progress_status: {
                            type: "string",
                            description:
                              "The progress status of the individual assignment.\n* `NEW`: The recipient has never seen the task before.\n* `OPEN`: The recipient has seen but not finished the task.\n* `FINISHED`: The recipient has finished the task.",
                            enum: ["NEW", "OPEN", "FINISHED"],
                          },
                        },
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                      required: ["has_more", "next_cursor"],
                      properties: {
                        next_cursor: {
                          type: "string",
                          description:
                            'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        },
                        has_more: {
                          type: "boolean",
                          description:
                            'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        },
                      },
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
      {
        id: "task-comments",
        title: "Task Comments",
        shortDescription: "",
        endpoints: [
          {
            id: "delete-task-comment",
            title: "Delete existing task comment",
            description:
              "Marks a task comment as deleted.\nThe task comment resource itself will not be deleted and is still retrievable but certain properties\nof the task comment will no longer be returned or are masked appropriately.",
            path: "/api/tasks/v4/tasks/comments/{comment_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "TASK_COMMENT_DELETED",
              "TASK_NOT_FOUND",
              "FEATURE_DISABLED",
              "TASK_COMMENT_NOT_FOUND",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "comment_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "task_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "author_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was created.",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was last updated.",
                    required: true,
                  },
                  {
                    name: "is_deleted",
                    type: "boolean",
                    description: "",
                    required: true,
                  },
                  {
                    name: "sequence_number",
                    type: "integer",
                    description: "",
                    required: true,
                  },
                  {
                    name: "body",
                    type: "object",
                    description:
                      "Body object of TaskComment including plain text and mentions.",
                    required: false,
                    properties: [
                      {
                        name: "plain",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mentions",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "language",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "attachments",
                    type: "array",
                    description:
                      'An array of attachments contained in the body of the task comment. Refer to our general "attachment" concept for more\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                    required: false,
                    items: {
                      allOf: [
                        {
                          description:
                            "Represents an attached file and its meta data",
                          type: "object",
                          required: [
                            "filename",
                            "id",
                            "link",
                            "mime_type",
                            "category",
                          ],
                          properties: {
                            id: { type: "string", format: "uuid" },
                            filename: { type: "string" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            mime_type: { type: "string" },
                            category: {
                              description:
                                "A categorization of the attachment.",
                              enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                              type: "string",
                            },
                            meta_data: {
                              type: "object",
                              description:
                                "additional properties that provide more information about the attached file, such as its width, height, and size",
                              properties: {
                                width: { type: "integer", format: "int32" },
                                height: { type: "integer", format: "int32" },
                                size: { type: "integer", format: "int64" },
                              },
                            },
                          },
                        },
                        {
                          type: "object",
                          required: ["order_number"],
                          properties: {
                            order_number: {
                              description:
                                "The order number of the task attachment",
                              type: "integer",
                              format: "int32",
                              minimum: 1,
                              maximum: 10,
                            },
                          },
                        },
                      ],
                    },
                  },
                  {
                    name: "reactions_summary",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "total",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "items",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "actor_reaction_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "actor_reaction",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "type",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "comment_id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "user_id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "user",
                        type: "object",
                        description: "",
                        required: [
                          "id",
                          "is_deleted",
                          "first_name",
                          "last_name",
                        ],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "is_deleted",
                            type: "boolean",
                            description: "",
                            required: false,
                          },
                          {
                            name: "first_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "last_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "department",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "profile_picture",
                            type: "object",
                            description: "",
                            required: false,
                            properties: [
                              {
                                name: "file_id",
                                type: "string",
                                description: "",
                                required: false,
                              },
                            ],
                          },
                        ],
                      },
                      {
                        name: "created_at",
                        type: "string",
                        description:
                          "The point in time at which this resource was created.",
                        required: false,
                      },
                      {
                        name: "updated_at",
                        type: "string",
                        description:
                          "The point in time at which this resource was last updated.",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/comments/comment_id");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/tasks/v4/tasks/comments/comment_id HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/comments/comment_id")\n  .delete(null)\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/comments/comment_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/comments/comment_id")\n  .delete(null)\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/comments/comment_id';\nconst options = {method: 'DELETE', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/comments/comment_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/tasks/v4/tasks/comments/comment_id', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/comments/comment_id\' -Method DELETE -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.delete(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/comments/comment_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/tasks/v4/tasks/comments/comment_id \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/tasks/v4/tasks/comments/{comment_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "task_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z",\n  "is_deleted": true,\n  "sequence_number": 0,\n  "body": {\n    "plain": "string",\n    "mentions": [\n      {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      }\n    ]\n  },\n  "language": "en-US",\n  "attachments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "filename": "string",\n      "link": "string",\n      "mime_type": "string",\n      "category": "VIDEO",\n      "meta_data": {\n        "width": 0,\n        "height": 0,\n        "size": 0\n      },\n      "order_number": 0\n    }\n  ],\n  "reactions_summary": {\n    "total": 0,\n    "items": [\n      {\n        "count": 0,\n        "icon": "U+1F604",\n        "type": "THUMBS_UP"\n      }\n    ]\n  },\n  "actor_reaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "actor_reaction": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "type": "THUMBS_UP",\n    "comment_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "user": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "is_deleted": true,\n      "first_name": "Jon",\n      "last_name": "Doe",\n      "department": "Marketing",\n      "profile_picture": {\n        "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      }\n    },\n    "created_at": "2024-01-11T07:41:25.662Z",\n    "updated_at": "2024-01-11T07:41:25.662Z"\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description: "Representation of a single task comment.",
                  required: [
                    "id",
                    "task_id",
                    "author_id",
                    "created_at",
                    "updated_at",
                    "is_deleted",
                    "sequence_number",
                    "reactions_summary",
                    "actor_reaction_id",
                  ],
                  properties: {
                    id: { type: "string", format: "uuid" },
                    task_id: { type: "string", format: "uuid" },
                    author_id: { type: "string", format: "uuid" },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      description:
                        "The point in time at which this resource was created.",
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      nullable: false,
                      description:
                        "The point in time at which this resource was last updated.",
                    },
                    is_deleted: { type: "boolean" },
                    sequence_number: {
                      type: "integer",
                      format: "int32",
                      minimum: 0,
                    },
                    body: {
                      type: "object",
                      description:
                        "Body object of TaskComment including plain text and mentions.",
                      properties: {
                        plain: { type: "string" },
                        mentions: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                        },
                      },
                    },
                    language: {
                      type: "string",
                      format: "bcp47",
                      example: "en-US",
                      nullable: true,
                    },
                    attachments: {
                      type: "array",
                      description:
                        'An array of attachments contained in the body of the task comment. Refer to our general "attachment" concept for more\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                      minItems: 0,
                      nullable: false,
                      items: {
                        allOf: [
                          {
                            description:
                              "Represents an attached file and its meta data",
                            type: "object",
                            required: [
                              "filename",
                              "id",
                              "link",
                              "mime_type",
                              "category",
                            ],
                            properties: {
                              id: { type: "string", format: "uuid" },
                              filename: { type: "string" },
                              link: {
                                type: "string",
                                pattern:
                                  "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                              },
                              mime_type: { type: "string" },
                              category: {
                                description:
                                  "A categorization of the attachment.",
                                enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                                type: "string",
                              },
                              meta_data: {
                                type: "object",
                                description:
                                  "additional properties that provide more information about the attached file, such as its width, height, and size",
                                properties: {
                                  width: { type: "integer", format: "int32" },
                                  height: { type: "integer", format: "int32" },
                                  size: { type: "integer", format: "int64" },
                                },
                              },
                            },
                          },
                          {
                            type: "object",
                            required: ["order_number"],
                            properties: {
                              order_number: {
                                description:
                                  "The order number of the task attachment",
                                type: "integer",
                                format: "int32",
                                minimum: 1,
                                maximum: 10,
                              },
                            },
                          },
                        ],
                      },
                    },
                    reactions_summary: {
                      type: "object",
                      required: ["total", "items"],
                      properties: {
                        total: { type: "integer", minimum: 0 },
                        items: {
                          type: "array",
                          items: {
                            type: "object",
                            required: ["count", "icon", "type"],
                            properties: {
                              count: { type: "integer", minimum: 0 },
                              icon: {
                                type: "string",
                                description:
                                  "Fallback textual representation of the icon",
                                example: "U+1F604",
                              },
                              type: {
                                type: "string",
                                enum: [
                                  "THUMBS_UP",
                                  "CLAPPING",
                                  "HEART",
                                  "INSPIRING",
                                  "HAPPY",
                                  "SAD",
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                    actor_reaction_id: {
                      nullable: true,
                      type: "string",
                      format: "uuid",
                    },
                    actor_reaction: {
                      type: "object",
                      required: [
                        "id",
                        "type",
                        "comment_id",
                        "user_id",
                        "created_at",
                        "updated_at",
                      ],
                      properties: {
                        id: { type: "string", format: "uuid" },
                        type: {
                          type: "string",
                          enum: [
                            "THUMBS_UP",
                            "CLAPPING",
                            "HEART",
                            "INSPIRING",
                            "HAPPY",
                            "SAD",
                          ],
                        },
                        comment_id: { type: "string", format: "uuid" },
                        user_id: { type: "string", format: "uuid" },
                        user: {
                          type: "object",
                          nullable: true,
                          properties: {
                            id: { type: "string", format: "uuid" },
                            is_deleted: { type: "boolean" },
                            first_name: { type: "string", example: "Jon" },
                            last_name: { type: "string", example: "Doe" },
                            department: {
                              type: "string",
                              example: "Marketing",
                              nullable: true,
                            },
                            profile_picture: {
                              type: "object",
                              nullable: true,
                              properties: {
                                file_id: { type: "string", format: "uuid" },
                              },
                            },
                          },
                          required: [
                            "id",
                            "is_deleted",
                            "first_name",
                            "last_name",
                          ],
                        },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updated_at: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                      },
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "delete",
          },
          {
            id: "get-tasks-comments",
            title: "Get all task comments",
            description:
              '### Retrieves a paginated list of comments of a specific task.\nDefining a custom starting point by providing the `initial_sequence_number` offers an optional alternative to the default cursor based pagination.\n\n#### using "initial_sequence_number":\nIn combination with the parameters `page_limit` and the `sort` parameter it is possible to request comments\nin a paginated way starting from a certain sequence number.\n\nNote: The "sequence number" of a comment is the order number within the list of all comments relating to the task.\n\nThe parameter `initial_sequence_number` is used in combination with the parameters `page_limit` and `sort` (respectively their default values).\nThe response is always a paginated list of comments and the returned cursor can be used to navigate further.\n\n#### Examples for using the `initial_sequence_number`:\n** ascending: **\n- `GET api/tasks/v4/tasks/{task_id}/comments?page_limit=10&initial_sequence_number=5&sort=SEQUENCE_NUMBER_ASC`\nreturns a list starting with a comment with sequence_number 5 followed by comments with ascending sequence numbers and at maximum 10 comments (or less if fewer exist).\n\n** ascending (via default): **\n- `GET api/tasks/v4/tasks/{task_id}/comments?page_limit=10&initial_sequence_number=5`\nreturns a list starting with a comment with sequence_number 5 followed by comments with ascending sequence numbers and at maximum 10 comments (or less if fewer exist).\n\n** descending: **\n- `GET api/tasks/v4/tasks/{task_id}/comments?page_limit=10&initial_sequence_number=20&sort=SEQUENCE_NUMBER_DESC`\nreturns a list starting with a comment with sequence_number maximum 20 followed by comments with descending sequence numbers and at maximum 10 comments (or less if fewer exist).\nIn cases where there is no comment with sequence number 20, the comment that has the next lower number will be designated as the starting point',
            path: "/api/tasks/v4/tasks/{task_id}/comments",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "CONFLICTING_PAGINATION_DATA",
              "EMBED_PARAMETER_LIMIT_EXCEEDED",
              "FEATURE_DISABLED",
              "SORT_PARAMETER_LIMIT_EXCEEDED",
              "TASK_NOT_FOUND",
              "UNDEFINED_SEQUENCE_NUMBER_SORT",
              "VALIDATION_ERROR",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "task_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "page_cursor",
                    type: "string",
                    description:
                      'A cursor pointing to the first item to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      "#### Sort Behavior:\n\nTasks Comments are primarily sorted based on their `sequence_number`.\nTask Comments are ordered by their `sequence_number`, hence the `sequence_number` describes the position\nof the comment in the list of all comments. The `sequence_number` implies a temporal order. The lowest number\nbeing `1` which is the first/oldest comment on the task and the highest vice versa.\n\n** 1. `SEQUENCE_NUMBER_ASC (DEFAULT)`: ** From lowest to highest sequence number.\n** 2. `SEQUENCE_NUMBER_DESC`: ** From highest to lowest sequence number.",
                    required: false,
                    items: {
                      type: "string",
                      enum: ["SEQUENCE_NUMBER_ASC", "SEQUENCE_NUMBER_DESC"],
                    },
                  },
                  {
                    name: "initial_sequence_number",
                    type: "integer",
                    description:
                      "The query can contain either a `initial_sequence_number` or a `pagination_cursor`, but not both.\nAlternatively both values can also be `null`, defaulting to an ascending cursor based pagination.",
                    required: false,
                  },
                  {
                    name: "embed",
                    type: "array",
                    description:
                      'Allows to embed the actor\'s reaction as `TaskCommentReaction`.\nRefer to our general "embedment" concept for more information.',
                    required: false,
                    items: { type: "string", enum: ["ACTOR_REACTION"] },
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "comments",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      description: "Representation of a single task comment.",
                      required: [
                        "id",
                        "task_id",
                        "author_id",
                        "created_at",
                        "updated_at",
                        "is_deleted",
                        "sequence_number",
                        "reactions_summary",
                        "actor_reaction_id",
                      ],
                      properties: {
                        id: { type: "string", format: "uuid" },
                        task_id: { type: "string", format: "uuid" },
                        author_id: { type: "string", format: "uuid" },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updated_at: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                        is_deleted: { type: "boolean" },
                        sequence_number: {
                          type: "integer",
                          format: "int32",
                          minimum: 0,
                        },
                        body: {
                          type: "object",
                          description:
                            "Body object of TaskComment including plain text and mentions.",
                          properties: {
                            plain: { type: "string" },
                            mentions: {
                              type: "array",
                              items: {
                                type: "object",
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  is_deleted: { type: "boolean" },
                                  first_name: {
                                    type: "string",
                                    example: "Jon",
                                  },
                                  last_name: { type: "string", example: "Doe" },
                                  department: {
                                    type: "string",
                                    example: "Marketing",
                                    nullable: true,
                                  },
                                  profile_picture: {
                                    type: "object",
                                    nullable: true,
                                    properties: {
                                      file_id: {
                                        type: "string",
                                        format: "uuid",
                                      },
                                    },
                                  },
                                },
                                required: [
                                  "id",
                                  "is_deleted",
                                  "first_name",
                                  "last_name",
                                ],
                              },
                            },
                          },
                        },
                        language: {
                          type: "string",
                          format: "bcp47",
                          example: "en-US",
                          nullable: true,
                        },
                        attachments: {
                          type: "array",
                          description:
                            'An array of attachments contained in the body of the task comment. Refer to our general "attachment" concept for more\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                          minItems: 0,
                          nullable: false,
                          items: {
                            allOf: [
                              {
                                description:
                                  "Represents an attached file and its meta data",
                                type: "object",
                                required: [
                                  "filename",
                                  "id",
                                  "link",
                                  "mime_type",
                                  "category",
                                ],
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  filename: { type: "string" },
                                  link: {
                                    type: "string",
                                    pattern:
                                      "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                  },
                                  mime_type: { type: "string" },
                                  category: {
                                    description:
                                      "A categorization of the attachment.",
                                    enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                                    type: "string",
                                  },
                                  meta_data: {
                                    type: "object",
                                    description:
                                      "additional properties that provide more information about the attached file, such as its width, height, and size",
                                    properties: {
                                      width: {
                                        type: "integer",
                                        format: "int32",
                                      },
                                      height: {
                                        type: "integer",
                                        format: "int32",
                                      },
                                      size: {
                                        type: "integer",
                                        format: "int64",
                                      },
                                    },
                                  },
                                },
                              },
                              {
                                type: "object",
                                required: ["order_number"],
                                properties: {
                                  order_number: {
                                    description:
                                      "The order number of the task attachment",
                                    type: "integer",
                                    format: "int32",
                                    minimum: 1,
                                    maximum: 10,
                                  },
                                },
                              },
                            ],
                          },
                        },
                        reactions_summary: {
                          type: "object",
                          required: ["total", "items"],
                          properties: {
                            total: { type: "integer", minimum: 0 },
                            items: {
                              type: "array",
                              items: {
                                type: "object",
                                required: ["count", "icon", "type"],
                                properties: {
                                  count: { type: "integer", minimum: 0 },
                                  icon: {
                                    type: "string",
                                    description:
                                      "Fallback textual representation of the icon",
                                    example: "U+1F604",
                                  },
                                  type: {
                                    type: "string",
                                    enum: [
                                      "THUMBS_UP",
                                      "CLAPPING",
                                      "HEART",
                                      "INSPIRING",
                                      "HAPPY",
                                      "SAD",
                                    ],
                                  },
                                },
                              },
                            },
                          },
                        },
                        actor_reaction_id: {
                          nullable: true,
                          type: "string",
                          format: "uuid",
                        },
                        actor_reaction: {
                          type: "object",
                          required: [
                            "id",
                            "type",
                            "comment_id",
                            "user_id",
                            "created_at",
                            "updated_at",
                          ],
                          properties: {
                            id: { type: "string", format: "uuid" },
                            type: {
                              type: "string",
                              enum: [
                                "THUMBS_UP",
                                "CLAPPING",
                                "HEART",
                                "INSPIRING",
                                "HAPPY",
                                "SAD",
                              ],
                            },
                            comment_id: { type: "string", format: "uuid" },
                            user_id: { type: "string", format: "uuid" },
                            user: {
                              type: "object",
                              nullable: true,
                              properties: {
                                id: { type: "string", format: "uuid" },
                                is_deleted: { type: "boolean" },
                                first_name: { type: "string", example: "Jon" },
                                last_name: { type: "string", example: "Doe" },
                                department: {
                                  type: "string",
                                  example: "Marketing",
                                  nullable: true,
                                },
                                profile_picture: {
                                  type: "object",
                                  nullable: true,
                                  properties: {
                                    file_id: { type: "string", format: "uuid" },
                                  },
                                },
                              },
                              required: [
                                "id",
                                "is_deleted",
                                "first_name",
                                "last_name",
                              ],
                            },
                            created_at: {
                              type: "string",
                              format: "date-time",
                              description:
                                "The point in time at which this resource was created.",
                            },
                            updated_at: {
                              type: "string",
                              format: "date-time",
                              nullable: false,
                              description:
                                "The point in time at which this resource was last updated.",
                            },
                          },
                        },
                      },
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                    required: false,
                    properties: [
                      {
                        name: "next_cursor",
                        type: "string",
                        description:
                          'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                      {
                        name: "has_more",
                        type: "boolean",
                        description:
                          'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/comments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/tasks/v4/tasks/task_id/comments" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/comments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/task_id/comments");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/tasks/v4/tasks/task_id/comments HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/task_id/comments"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/comments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/task_id/comments', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/comments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/task_id/comments';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/task_id/comments"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/task_id/comments" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/tasks/v4/tasks/task_id/comments', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/task_id/comments\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/task_id/comments"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/task_id/comments"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/task_id/comments\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/tasks/v4/tasks/task_id/comments \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/task_id/comments")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/tasks/v4/tasks/{task_id}/comments",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "comments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "task_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "created_at": "2024-01-11T07:41:25.662Z",\n      "updated_at": "2024-01-11T07:41:25.662Z",\n      "is_deleted": true,\n      "sequence_number": 0,\n      "body": {\n        "plain": "string",\n        "mentions": [\n          {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "is_deleted": true,\n            "first_name": "Jon",\n            "last_name": "Doe",\n            "department": "Marketing",\n            "profile_picture": {\n              "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n            }\n          }\n        ]\n      },\n      "language": "en-US",\n      "attachments": [\n        {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "filename": "string",\n          "link": "string",\n          "mime_type": "string",\n          "category": "VIDEO",\n          "meta_data": {\n            "width": 0,\n            "height": 0,\n            "size": 0\n          },\n          "order_number": 0\n        }\n      ],\n      "reactions_summary": {\n        "total": 0,\n        "items": [\n          {\n            "count": 0,\n            "icon": "U+1F604",\n            "type": "THUMBS_UP"\n          }\n        ]\n      },\n      "actor_reaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "actor_reaction": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "type": "THUMBS_UP",\n        "comment_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "user": {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "is_deleted": true,\n          "first_name": "Jon",\n          "last_name": "Doe",\n          "department": "Marketing",\n          "profile_picture": {\n            "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n          }\n        },\n        "created_at": "2024-01-11T07:41:25.662Z",\n        "updated_at": "2024-01-11T07:41:25.662Z"\n      }\n    }\n  ],\n  "pagination": {\n    "next_cursor": "string",\n    "has_more": true\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    comments: {
                      type: "array",
                      items: {
                        type: "object",
                        description: "Representation of a single task comment.",
                        required: [
                          "id",
                          "task_id",
                          "author_id",
                          "created_at",
                          "updated_at",
                          "is_deleted",
                          "sequence_number",
                          "reactions_summary",
                          "actor_reaction_id",
                        ],
                        properties: {
                          id: { type: "string", format: "uuid" },
                          task_id: { type: "string", format: "uuid" },
                          author_id: { type: "string", format: "uuid" },
                          created_at: {
                            type: "string",
                            format: "date-time",
                            description:
                              "The point in time at which this resource was created.",
                          },
                          updated_at: {
                            type: "string",
                            format: "date-time",
                            nullable: false,
                            description:
                              "The point in time at which this resource was last updated.",
                          },
                          is_deleted: { type: "boolean" },
                          sequence_number: {
                            type: "integer",
                            format: "int32",
                            minimum: 0,
                          },
                          body: {
                            type: "object",
                            description:
                              "Body object of TaskComment including plain text and mentions.",
                            properties: {
                              plain: { type: "string" },
                              mentions: {
                                type: "array",
                                items: {
                                  type: "object",
                                  properties: {
                                    id: { type: "string", format: "uuid" },
                                    is_deleted: { type: "boolean" },
                                    first_name: {
                                      type: "string",
                                      example: "Jon",
                                    },
                                    last_name: {
                                      type: "string",
                                      example: "Doe",
                                    },
                                    department: {
                                      type: "string",
                                      example: "Marketing",
                                      nullable: true,
                                    },
                                    profile_picture: {
                                      type: "object",
                                      nullable: true,
                                      properties: {
                                        file_id: {
                                          type: "string",
                                          format: "uuid",
                                        },
                                      },
                                    },
                                  },
                                  required: [
                                    "id",
                                    "is_deleted",
                                    "first_name",
                                    "last_name",
                                  ],
                                },
                              },
                            },
                          },
                          language: {
                            type: "string",
                            format: "bcp47",
                            example: "en-US",
                            nullable: true,
                          },
                          attachments: {
                            type: "array",
                            description:
                              'An array of attachments contained in the body of the task comment. Refer to our general "attachment" concept for more\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                            minItems: 0,
                            nullable: false,
                            items: {
                              allOf: [
                                {
                                  description:
                                    "Represents an attached file and its meta data",
                                  type: "object",
                                  required: [
                                    "filename",
                                    "id",
                                    "link",
                                    "mime_type",
                                    "category",
                                  ],
                                  properties: {
                                    id: { type: "string", format: "uuid" },
                                    filename: { type: "string" },
                                    link: {
                                      type: "string",
                                      pattern:
                                        "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                                    },
                                    mime_type: { type: "string" },
                                    category: {
                                      description:
                                        "A categorization of the attachment.",
                                      enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                                      type: "string",
                                    },
                                    meta_data: {
                                      type: "object",
                                      description:
                                        "additional properties that provide more information about the attached file, such as its width, height, and size",
                                      properties: {
                                        width: {
                                          type: "integer",
                                          format: "int32",
                                        },
                                        height: {
                                          type: "integer",
                                          format: "int32",
                                        },
                                        size: {
                                          type: "integer",
                                          format: "int64",
                                        },
                                      },
                                    },
                                  },
                                },
                                {
                                  type: "object",
                                  required: ["order_number"],
                                  properties: {
                                    order_number: {
                                      description:
                                        "The order number of the task attachment",
                                      type: "integer",
                                      format: "int32",
                                      minimum: 1,
                                      maximum: 10,
                                    },
                                  },
                                },
                              ],
                            },
                          },
                          reactions_summary: {
                            type: "object",
                            required: ["total", "items"],
                            properties: {
                              total: { type: "integer", minimum: 0 },
                              items: {
                                type: "array",
                                items: {
                                  type: "object",
                                  required: ["count", "icon", "type"],
                                  properties: {
                                    count: { type: "integer", minimum: 0 },
                                    icon: {
                                      type: "string",
                                      description:
                                        "Fallback textual representation of the icon",
                                      example: "U+1F604",
                                    },
                                    type: {
                                      type: "string",
                                      enum: [
                                        "THUMBS_UP",
                                        "CLAPPING",
                                        "HEART",
                                        "INSPIRING",
                                        "HAPPY",
                                        "SAD",
                                      ],
                                    },
                                  },
                                },
                              },
                            },
                          },
                          actor_reaction_id: {
                            nullable: true,
                            type: "string",
                            format: "uuid",
                          },
                          actor_reaction: {
                            type: "object",
                            required: [
                              "id",
                              "type",
                              "comment_id",
                              "user_id",
                              "created_at",
                              "updated_at",
                            ],
                            properties: {
                              id: { type: "string", format: "uuid" },
                              type: {
                                type: "string",
                                enum: [
                                  "THUMBS_UP",
                                  "CLAPPING",
                                  "HEART",
                                  "INSPIRING",
                                  "HAPPY",
                                  "SAD",
                                ],
                              },
                              comment_id: { type: "string", format: "uuid" },
                              user_id: { type: "string", format: "uuid" },
                              user: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  is_deleted: { type: "boolean" },
                                  first_name: {
                                    type: "string",
                                    example: "Jon",
                                  },
                                  last_name: { type: "string", example: "Doe" },
                                  department: {
                                    type: "string",
                                    example: "Marketing",
                                    nullable: true,
                                  },
                                  profile_picture: {
                                    type: "object",
                                    nullable: true,
                                    properties: {
                                      file_id: {
                                        type: "string",
                                        format: "uuid",
                                      },
                                    },
                                  },
                                },
                                required: [
                                  "id",
                                  "is_deleted",
                                  "first_name",
                                  "last_name",
                                ],
                              },
                              created_at: {
                                type: "string",
                                format: "date-time",
                                description:
                                  "The point in time at which this resource was created.",
                              },
                              updated_at: {
                                type: "string",
                                format: "date-time",
                                nullable: false,
                                description:
                                  "The point in time at which this resource was last updated.",
                              },
                            },
                          },
                        },
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                      required: ["has_more", "next_cursor"],
                      properties: {
                        next_cursor: {
                          type: "string",
                          description:
                            'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        },
                        has_more: {
                          type: "boolean",
                          description:
                            'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        },
                      },
                    },
                  },
                  description: "Paginated list of TaskComments",
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "create-task-comment",
            title: "Create a task comment",
            description: "Adds a new comment to a task.",
            path: "/api/tasks/v4/tasks/{task_id}/comments",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "ATTACHMENT_NOT_FOUND",
              "ATTACHMENTS_NOT_FINISHED",
              "ATTACHMENT_FILE_NOT_FOUND",
              "DUPLICATE_ID",
              "DUPLICATE_ORDER_NUMBER",
              "DISALLOWED_ATTACHMENT_TYPE",
              "FEATURE_DISABLED",
              "MAX_LENGTH_EXCEEDED",
              "TASK_NOT_FOUND",
              "TASK_COMMENT_WITHOUT_CONTENT",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "task_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "body",
                    type: "object",
                    description:
                      "Request body object of TaskComment including plain text and mentions.",
                    required: false,
                    properties: [
                      {
                        name: "plain",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "attachments",
                    type: "array",
                    description:
                      "contains the necessary information of the attachments which are uploaded and which shall be attached to an entity",
                    required: false,
                    items: {
                      title: "Attachment",
                      description:
                        "a single attachment which shall be attached to an entity",
                      type: "object",
                      required: ["id", "order_number"],
                      properties: {
                        id: {
                          description:
                            "the unique identifier for the attachment. The attachment must be uploaded before.",
                          type: "string",
                          format: "uuid",
                        },
                        order_number: {
                          description: "the order number of the attachment",
                          type: "integer",
                          minimum: 1,
                          maximum: 10,
                        },
                      },
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "201",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "task_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "author_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was created.",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was last updated.",
                    required: true,
                  },
                  {
                    name: "is_deleted",
                    type: "boolean",
                    description: "",
                    required: true,
                  },
                  {
                    name: "sequence_number",
                    type: "integer",
                    description: "",
                    required: true,
                  },
                  {
                    name: "body",
                    type: "object",
                    description:
                      "Body object of TaskComment including plain text and mentions.",
                    required: false,
                    properties: [
                      {
                        name: "plain",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mentions",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "language",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "attachments",
                    type: "array",
                    description:
                      'An array of attachments contained in the body of the task comment. Refer to our general "attachment" concept for more\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                    required: false,
                    items: {
                      allOf: [
                        {
                          description:
                            "Represents an attached file and its meta data",
                          type: "object",
                          required: [
                            "filename",
                            "id",
                            "link",
                            "mime_type",
                            "category",
                          ],
                          properties: {
                            id: { type: "string", format: "uuid" },
                            filename: { type: "string" },
                            link: {
                              type: "string",
                              pattern:
                                "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                            },
                            mime_type: { type: "string" },
                            category: {
                              description:
                                "A categorization of the attachment.",
                              enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                              type: "string",
                            },
                            meta_data: {
                              type: "object",
                              description:
                                "additional properties that provide more information about the attached file, such as its width, height, and size",
                              properties: {
                                width: { type: "integer", format: "int32" },
                                height: { type: "integer", format: "int32" },
                                size: { type: "integer", format: "int64" },
                              },
                            },
                          },
                        },
                        {
                          type: "object",
                          required: ["order_number"],
                          properties: {
                            order_number: {
                              description:
                                "The order number of the task attachment",
                              type: "integer",
                              format: "int32",
                              minimum: 1,
                              maximum: 10,
                            },
                          },
                        },
                      ],
                    },
                  },
                  {
                    name: "reactions_summary",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "total",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "items",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "actor_reaction_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "actor_reaction",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "type",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "comment_id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "user_id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "user",
                        type: "object",
                        description: "",
                        required: [
                          "id",
                          "is_deleted",
                          "first_name",
                          "last_name",
                        ],
                        properties: [
                          {
                            name: "id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "is_deleted",
                            type: "boolean",
                            description: "",
                            required: false,
                          },
                          {
                            name: "first_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "last_name",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "department",
                            type: "string",
                            description: "",
                            required: false,
                          },
                          {
                            name: "profile_picture",
                            type: "object",
                            description: "",
                            required: false,
                            properties: [
                              {
                                name: "file_id",
                                type: "string",
                                description: "",
                                required: false,
                              },
                            ],
                          },
                        ],
                      },
                      {
                        name: "created_at",
                        type: "string",
                        description:
                          "The point in time at which this resource was created.",
                        required: false,
                      },
                      {
                        name: "updated_at",
                        type: "string",
                        description:
                          "The point in time at which this resource was last updated.",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/comments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"plain\\":\\"string\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/tasks/v4/tasks/task_id/comments" {:content-type :json\n                                                                          :form-params {:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                        :body {:plain "string"}\n                                                                                        :attachments [{:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                       :order_number 0}]}\n                                                                          :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/task_id/comments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"plain\\":\\"string\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/task_id/comments");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"plain\\":\\"string\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/tasks/v4/tasks/task_id/comments HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 150\r\n\r\n{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","body":{"plain":"string"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/task_id/comments"\n\n\tpayload := strings.NewReader("{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"plain\\":\\"string\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"plain\\":\\"string\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/comments")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    body: JSON.stringify({plain: 'string'}),\n    attachments: [{id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', order_number: 0}]\n  })\n};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/task_id/comments', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"plain\\":\\"string\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/task_id/comments")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/task_id/comments';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    body: JSON.stringify({plain: 'string'}),\n    attachments: [{id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', order_number: 0}]\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"body": @{ @"plain": @"string" },\n                              @"attachments": @[ @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"order_number": @0 } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/task_id/comments"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/task_id/comments" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"plain\\":\\"string\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/tasks/v4/tasks/task_id/comments', [\n  'body' => '{\"id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"body\":{\"plain\":\"string\"},\"attachments\":[{\"id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"order_number\":0}]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/task_id/comments\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","body":{"plain":"string"},"attachments":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","order_number":0}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/task_id/comments"\n\npayload = {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "body": {"plain": "string"},\n    "attachments": [\n        {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "order_number": 0\n        }\n    ]\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/task_id/comments"\n\npayload <- "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"plain\\":\\"string\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/tasks/v4/tasks/task_id/comments")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"plain\\":\\"string\\"},\\"attachments\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"order_number\\":0}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/tasks/v4/tasks/task_id/comments \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "body": {\n    "plain": "string"\n  },\n  "attachments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "order_number": 0\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "body": ["plain": "string"],\n  "attachments": [\n    [\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "order_number": 0\n    ]\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/task_id/comments")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/tasks/v4/tasks/{task_id}/comments",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "201":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "task_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "author_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z",\n  "is_deleted": true,\n  "sequence_number": 0,\n  "body": {\n    "plain": "string",\n    "mentions": [\n      {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      }\n    ]\n  },\n  "language": "en-US",\n  "attachments": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "filename": "string",\n      "link": "string",\n      "mime_type": "string",\n      "category": "VIDEO",\n      "meta_data": {\n        "width": 0,\n        "height": 0,\n        "size": 0\n      },\n      "order_number": 0\n    }\n  ],\n  "reactions_summary": {\n    "total": 0,\n    "items": [\n      {\n        "count": 0,\n        "icon": "U+1F604",\n        "type": "THUMBS_UP"\n      }\n    ]\n  },\n  "actor_reaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "actor_reaction": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "type": "THUMBS_UP",\n    "comment_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "user": {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "is_deleted": true,\n      "first_name": "Jon",\n      "last_name": "Doe",\n      "department": "Marketing",\n      "profile_picture": {\n        "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      }\n    },\n    "created_at": "2024-01-11T07:41:25.662Z",\n    "updated_at": "2024-01-11T07:41:25.662Z"\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  description: "Representation of a single task comment.",
                  required: [
                    "id",
                    "task_id",
                    "author_id",
                    "created_at",
                    "updated_at",
                    "is_deleted",
                    "sequence_number",
                    "reactions_summary",
                    "actor_reaction_id",
                  ],
                  properties: {
                    id: { type: "string", format: "uuid" },
                    task_id: { type: "string", format: "uuid" },
                    author_id: { type: "string", format: "uuid" },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      description:
                        "The point in time at which this resource was created.",
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      nullable: false,
                      description:
                        "The point in time at which this resource was last updated.",
                    },
                    is_deleted: { type: "boolean" },
                    sequence_number: {
                      type: "integer",
                      format: "int32",
                      minimum: 0,
                    },
                    body: {
                      type: "object",
                      description:
                        "Body object of TaskComment including plain text and mentions.",
                      properties: {
                        plain: { type: "string" },
                        mentions: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                        },
                      },
                    },
                    language: {
                      type: "string",
                      format: "bcp47",
                      example: "en-US",
                      nullable: true,
                    },
                    attachments: {
                      type: "array",
                      description:
                        'An array of attachments contained in the body of the task comment. Refer to our general "attachment" concept for more\n\nAttachments are sorted by their orderNumber in natural ascending order.\nIf at least one attachment contains no orderNumber all attachments will be assigned with a stable orderNumber.',
                      minItems: 0,
                      nullable: false,
                      items: {
                        allOf: [
                          {
                            description:
                              "Represents an attached file and its meta data",
                            type: "object",
                            required: [
                              "filename",
                              "id",
                              "link",
                              "mime_type",
                              "category",
                            ],
                            properties: {
                              id: { type: "string", format: "uuid" },
                              filename: { type: "string" },
                              link: {
                                type: "string",
                                pattern:
                                  "^https:\\/\\/.*\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                              },
                              mime_type: { type: "string" },
                              category: {
                                description:
                                  "A categorization of the attachment.",
                                enum: ["VIDEO", "VOICE", "IMAGE", "MISC"],
                                type: "string",
                              },
                              meta_data: {
                                type: "object",
                                description:
                                  "additional properties that provide more information about the attached file, such as its width, height, and size",
                                properties: {
                                  width: { type: "integer", format: "int32" },
                                  height: { type: "integer", format: "int32" },
                                  size: { type: "integer", format: "int64" },
                                },
                              },
                            },
                          },
                          {
                            type: "object",
                            required: ["order_number"],
                            properties: {
                              order_number: {
                                description:
                                  "The order number of the task attachment",
                                type: "integer",
                                format: "int32",
                                minimum: 1,
                                maximum: 10,
                              },
                            },
                          },
                        ],
                      },
                    },
                    reactions_summary: {
                      type: "object",
                      required: ["total", "items"],
                      properties: {
                        total: { type: "integer", minimum: 0 },
                        items: {
                          type: "array",
                          items: {
                            type: "object",
                            required: ["count", "icon", "type"],
                            properties: {
                              count: { type: "integer", minimum: 0 },
                              icon: {
                                type: "string",
                                description:
                                  "Fallback textual representation of the icon",
                                example: "U+1F604",
                              },
                              type: {
                                type: "string",
                                enum: [
                                  "THUMBS_UP",
                                  "CLAPPING",
                                  "HEART",
                                  "INSPIRING",
                                  "HAPPY",
                                  "SAD",
                                ],
                              },
                            },
                          },
                        },
                      },
                    },
                    actor_reaction_id: {
                      nullable: true,
                      type: "string",
                      format: "uuid",
                    },
                    actor_reaction: {
                      type: "object",
                      required: [
                        "id",
                        "type",
                        "comment_id",
                        "user_id",
                        "created_at",
                        "updated_at",
                      ],
                      properties: {
                        id: { type: "string", format: "uuid" },
                        type: {
                          type: "string",
                          enum: [
                            "THUMBS_UP",
                            "CLAPPING",
                            "HEART",
                            "INSPIRING",
                            "HAPPY",
                            "SAD",
                          ],
                        },
                        comment_id: { type: "string", format: "uuid" },
                        user_id: { type: "string", format: "uuid" },
                        user: {
                          type: "object",
                          nullable: true,
                          properties: {
                            id: { type: "string", format: "uuid" },
                            is_deleted: { type: "boolean" },
                            first_name: { type: "string", example: "Jon" },
                            last_name: { type: "string", example: "Doe" },
                            department: {
                              type: "string",
                              example: "Marketing",
                              nullable: true,
                            },
                            profile_picture: {
                              type: "object",
                              nullable: true,
                              properties: {
                                file_id: { type: "string", format: "uuid" },
                              },
                            },
                          },
                          required: [
                            "id",
                            "is_deleted",
                            "first_name",
                            "last_name",
                          ],
                        },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updated_at: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                      },
                    },
                  },
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
      {
        id: "task-comment-reactions",
        title: "Task Comment Reactions",
        shortDescription: "",
        endpoints: [
          {
            id: "update-task-comment-reaction",
            title: "Update task comment reaction",
            description: "Updates the reaction from a task comment.",
            path: "/api/tasks/v4/tasks/comments/reactions/{reaction_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "FEATURE_DISABLED",
              "REACTION_NOT_FOUND",
              "TASK_COMMENT_NOT_FOUND",
              "TASK_NOT_FOUND",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "reaction_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "type",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "type",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "comment_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "user_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "user",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "is_deleted",
                        type: "boolean",
                        description: "",
                        required: false,
                      },
                      {
                        name: "first_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "last_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "profile_picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was created.",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was last updated.",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"type\\":\\"THUMBS_UP\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/patch "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id" {:content-type :json\n                                                                                         :form-params {:type "THUMBS_UP"}\n                                                                                         :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"type\\":\\"THUMBS_UP\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"type\\":\\"THUMBS_UP\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'PATCH /api/tasks/v4/tasks/comments/reactions/reaction_id HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 20\r\n\r\n{"type":"THUMBS_UP"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id"\n\n\tpayload := strings.NewReader("{\\"type\\":\\"THUMBS_UP\\"}")\n\n\treq, _ := http.NewRequest("PATCH", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"type\\":\\"THUMBS_UP\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'PATCH',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({type: 'THUMBS_UP'})\n};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"type\\":\\"THUMBS_UP\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id';\nconst options = {\n  method: 'PATCH',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({type: 'THUMBS_UP'})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"type": @"THUMBS_UP" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"PATCH"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"type\\":\\"THUMBS_UP\\"}" in\n\nClient.call ~headers ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('PATCH', 'http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id', [\n  'body' => '{\"type\":\"THUMBS_UP\"}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id\' -Method PATCH -Headers $headers -ContentType \'application/json\' -Body \'{"type":"THUMBS_UP"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id"\n\npayload = {"type": "THUMBS_UP"}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.patch(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id"\n\npayload <- "{\\"type\\":\\"THUMBS_UP\\"}"\n\nencode <- "json"\n\nresponse <- VERB("PATCH", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"type\\":\\"THUMBS_UP\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  "curl --request PATCH \\\n     --url http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '{\"type\":\"THUMBS_UP\"}'",
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["type": "THUMBS_UP"] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "PATCH"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "PATCH",
                url: "/api/tasks/v4/tasks/comments/reactions/{reaction_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "type": "THUMBS_UP",\n  "comment_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "is_deleted": true,\n    "first_name": "Jon",\n    "last_name": "Doe",\n    "department": "Marketing",\n    "profile_picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  required: [
                    "id",
                    "type",
                    "comment_id",
                    "user_id",
                    "created_at",
                    "updated_at",
                  ],
                  properties: {
                    id: { type: "string", format: "uuid" },
                    type: {
                      type: "string",
                      enum: [
                        "THUMBS_UP",
                        "CLAPPING",
                        "HEART",
                        "INSPIRING",
                        "HAPPY",
                        "SAD",
                      ],
                    },
                    comment_id: { type: "string", format: "uuid" },
                    user_id: { type: "string", format: "uuid" },
                    user: {
                      type: "object",
                      nullable: true,
                      properties: {
                        id: { type: "string", format: "uuid" },
                        is_deleted: { type: "boolean" },
                        first_name: { type: "string", example: "Jon" },
                        last_name: { type: "string", example: "Doe" },
                        department: {
                          type: "string",
                          example: "Marketing",
                          nullable: true,
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                      required: ["id", "is_deleted", "first_name", "last_name"],
                    },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      description:
                        "The point in time at which this resource was created.",
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      nullable: false,
                      description:
                        "The point in time at which this resource was last updated.",
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "patch",
          },
          {
            id: "delete-task-comment-reaction",
            title: "Delete task comment reaction",
            description:
              "Removes the reaction from a task comment.\nThe reaction is no longer available.\nThe operation cannot be undone.",
            path: "/api/tasks/v4/tasks/comments/reactions/{reaction_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "FEATURE_DISABLED",
              "REACTION_NOT_FOUND",
              "TASK_COMMENT_NOT_FOUND",
              "TASK_NOT_FOUND",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "reaction_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "204", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/tasks/v4/tasks/comments/reactions/reaction_id HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE'};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id")\n  .delete(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id';\nconst options = {method: 'DELETE'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id' -Method DELETE",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id"\n\nresponse = requests.delete(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/comments/reactions/reaction_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/tasks/v4/tasks/comments/reactions/{reaction_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "204" }],
            security: [{ bearer: [] }],
            method: "delete",
          },
          {
            id: "get-task-comment-reactions",
            title: "Get paginated reactions to a task comment",
            description: "Get paginated reactions to a task comment",
            path: "/api/tasks/v4/tasks/comments/{comment_id}/reactions",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "FEATURE_DISABLED",
              "TASK_COMMENT_NOT_FOUND",
              "TASK_NOT_FOUND",
              "DELETED_TASK_COMMENT",
              "REACTION_TYPES_LIMIT_EXCEEDED",
              "VALIDATION_ERROR",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "comment_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "embed",
                    type: "array",
                    description:
                      'Defines the values to embed into the response body. Refer to our general "embedment" concept for more information.',
                    required: false,
                    items: { type: "string", enum: ["USER"] },
                  },
                  {
                    name: "types",
                    type: "array",
                    description:
                      "Only return reactions that match any of the given types.",
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "THUMBS_UP",
                        "CLAPPING",
                        "HEART",
                        "INSPIRING",
                        "HAPPY",
                        "SAD",
                      ],
                    },
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      "**Default Sort Behavior:**\nReactions are primarily sorted based on its `type` in natural alphabetical ascending order:\n- CLAPPING\n- HAPPY\n- HEART\n- INSPIRING\n- SAD\n- THUMBS_UP",
                    required: false,
                    items: { type: "string", enum: ["TYPE_ASC", "TYPE_DESC"] },
                  },
                  {
                    name: "page_cursor",
                    type: "string",
                    description:
                      'A cursor pointing to the first item to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "reactions",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      required: [
                        "id",
                        "type",
                        "comment_id",
                        "user_id",
                        "created_at",
                        "updated_at",
                      ],
                      properties: {
                        id: { type: "string", format: "uuid" },
                        type: {
                          type: "string",
                          enum: [
                            "THUMBS_UP",
                            "CLAPPING",
                            "HEART",
                            "INSPIRING",
                            "HAPPY",
                            "SAD",
                          ],
                        },
                        comment_id: { type: "string", format: "uuid" },
                        user_id: { type: "string", format: "uuid" },
                        user: {
                          type: "object",
                          nullable: true,
                          properties: {
                            id: { type: "string", format: "uuid" },
                            is_deleted: { type: "boolean" },
                            first_name: { type: "string", example: "Jon" },
                            last_name: { type: "string", example: "Doe" },
                            department: {
                              type: "string",
                              example: "Marketing",
                              nullable: true,
                            },
                            profile_picture: {
                              type: "object",
                              nullable: true,
                              properties: {
                                file_id: { type: "string", format: "uuid" },
                              },
                            },
                          },
                          required: [
                            "id",
                            "is_deleted",
                            "first_name",
                            "last_name",
                          ],
                        },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                        updated_at: {
                          type: "string",
                          format: "date-time",
                          nullable: false,
                          description:
                            "The point in time at which this resource was last updated.",
                        },
                      },
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                    required: false,
                    properties: [
                      {
                        name: "next_cursor",
                        type: "string",
                        description:
                          'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                      {
                        name: "has_more",
                        type: "boolean",
                        description:
                          'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/tasks/v4/tasks/comments/comment_id/reactions HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/tasks/v4/tasks/comments/{comment_id}/reactions",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "reactions": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "type": "THUMBS_UP",\n      "comment_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "user": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      },\n      "created_at": "2024-01-11T07:41:25.662Z",\n      "updated_at": "2024-01-11T07:41:25.662Z"\n    }\n  ],\n  "pagination": {\n    "next_cursor": "string",\n    "has_more": true\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    reactions: {
                      type: "array",
                      items: {
                        type: "object",
                        required: [
                          "id",
                          "type",
                          "comment_id",
                          "user_id",
                          "created_at",
                          "updated_at",
                        ],
                        properties: {
                          id: { type: "string", format: "uuid" },
                          type: {
                            type: "string",
                            enum: [
                              "THUMBS_UP",
                              "CLAPPING",
                              "HEART",
                              "INSPIRING",
                              "HAPPY",
                              "SAD",
                            ],
                          },
                          comment_id: { type: "string", format: "uuid" },
                          user_id: { type: "string", format: "uuid" },
                          user: {
                            type: "object",
                            nullable: true,
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                          created_at: {
                            type: "string",
                            format: "date-time",
                            description:
                              "The point in time at which this resource was created.",
                          },
                          updated_at: {
                            type: "string",
                            format: "date-time",
                            nullable: false,
                            description:
                              "The point in time at which this resource was last updated.",
                          },
                        },
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                      required: ["has_more", "next_cursor"],
                      properties: {
                        next_cursor: {
                          type: "string",
                          description:
                            'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        },
                        has_more: {
                          type: "boolean",
                          description:
                            'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        },
                      },
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "create-task-comment-reaction",
            title: "Create new task comment reaction",
            description:
              "React to a task comment. The reacting user is inferred from the access token and must be authenticated for the request.",
            path: "/api/tasks/v4/tasks/comments/{comment_id}/reactions",
            isDeprecated: false,
            isExperimental: true,
            isInternal: false,
            globalErrorCodes: [
              "DUPLICATE_ID",
              "FEATURE_DISABLED",
              "TASK_COMMENT_NOT_FOUND",
              "TASK_NOT_FOUND",
              "USER_REACTION_ALREADY_EXISTS",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "comment_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "type",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "201",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "type",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "comment_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "user_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "user",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "is_deleted",
                        type: "boolean",
                        description: "",
                        required: false,
                      },
                      {
                        name: "first_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "last_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "profile_picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was created.",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was last updated.",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"THUMBS_UP\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions" {:content-type :json\n                                                                                       :form-params {:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                     :type "THUMBS_UP"}\n                                                                                       :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"THUMBS_UP\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"THUMBS_UP\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/tasks/v4/tasks/comments/comment_id/reactions HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 64\r\n\r\n{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","type":"THUMBS_UP"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions"\n\n\tpayload := strings.NewReader("{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"THUMBS_UP\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"THUMBS_UP\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', type: 'THUMBS_UP'})\n};\n\nfetch('http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"THUMBS_UP\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({id: '3fa85f64-5717-4562-b3fc-2c963f66afa6', type: 'THUMBS_UP'})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"type": @"THUMBS_UP" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"THUMBS_UP\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions', [\n  'body' => '{\"id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"type\":\"THUMBS_UP\"}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","type":"THUMBS_UP"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions"\n\npayload = {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "type": "THUMBS_UP"\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions"\n\npayload <- "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"THUMBS_UP\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"type\\":\\"THUMBS_UP\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "type": "THUMBS_UP"\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "type": "THUMBS_UP"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/tasks/v4/tasks/comments/comment_id/reactions")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/tasks/v4/tasks/comments/{comment_id}/reactions",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "201":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "type": "THUMBS_UP",\n  "comment_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "is_deleted": true,\n    "first_name": "Jon",\n    "last_name": "Doe",\n    "department": "Marketing",\n    "profile_picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  required: [
                    "id",
                    "type",
                    "comment_id",
                    "user_id",
                    "created_at",
                    "updated_at",
                  ],
                  properties: {
                    id: { type: "string", format: "uuid" },
                    type: {
                      type: "string",
                      enum: [
                        "THUMBS_UP",
                        "CLAPPING",
                        "HEART",
                        "INSPIRING",
                        "HAPPY",
                        "SAD",
                      ],
                    },
                    comment_id: { type: "string", format: "uuid" },
                    user_id: { type: "string", format: "uuid" },
                    user: {
                      type: "object",
                      nullable: true,
                      properties: {
                        id: { type: "string", format: "uuid" },
                        is_deleted: { type: "boolean" },
                        first_name: { type: "string", example: "Jon" },
                        last_name: { type: "string", example: "Doe" },
                        department: {
                          type: "string",
                          example: "Marketing",
                          nullable: true,
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                      required: ["id", "is_deleted", "first_name", "last_name"],
                    },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      description:
                        "The point in time at which this resource was created.",
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      nullable: false,
                      description:
                        "The point in time at which this resource was last updated.",
                    },
                  },
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
    ],
  },
  {
    id: "user",
    title: "User",
    resources: [
      {
        id: "user",
        title: "User",
        shortDescription: "",
        endpoints: [
          {
            id: "create-user",
            title: "Create user",
            description: "Allows an admin user to create a new user.",
            path: "/api/admin/users/v4/users",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "USER_ID_ALREADY_EXISTS",
              "USERNAME_ALREADY_EXISTS",
              "EXTERNAL_ID_ALREADY_EXISTS",
            ],
            parameters: [
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: false,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "first_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "last_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "email",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "username",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "profile",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "about_me",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "job_title",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "location",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mobile_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "phone_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "role",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "required_actions",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "ACCEPT_TERMS_AND_CONDITIONS",
                        "UPDATE_PASSWORD",
                        "VERIFY_EMAIL",
                      ],
                    },
                  },
                  {
                    name: "primary_user_group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: false,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "first_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "last_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "email",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "username",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "profile_picture",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "file_id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "profile",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "about_me",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "job_title",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "location",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mobile_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "phone_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "role",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "required_actions",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "string",
                      enum: [
                        "ACCEPT_TERMS_AND_CONDITIONS",
                        "UPDATE_PASSWORD",
                        "VERIFY_EMAIL",
                      ],
                    },
                  },
                  {
                    name: "primary_user_group",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the User Group",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "status",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
              {
                title: "201",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "first_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "last_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "email",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "username",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "profile_picture",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "file_id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "profile",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "about_me",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "job_title",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "location",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mobile_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "phone_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "role",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "required_actions",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "string",
                      enum: [
                        "ACCEPT_TERMS_AND_CONDITIONS",
                        "UPDATE_PASSWORD",
                        "VERIFY_EMAIL",
                      ],
                    },
                  },
                  {
                    name: "primary_user_group",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the User Group",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "status",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"status\\":\\"ACTIVE\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/users" {:content-type :json\n                                                               :form-params {:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                             :external_id "string"\n                                                                             :first_name "Miriam"\n                                                                             :last_name "string"\n                                                                             :email "string"\n                                                                             :status "ACTIVE"\n                                                                             :username "string"\n                                                                             :profile {:about_me "string"\n                                                                                       :department "string"\n                                                                                       :job_title "string"\n                                                                                       :location "Leinfelden-Echterdingen"\n                                                                                       :mobile_number "string"\n                                                                                       :phone_number "string"}\n                                                                             :role "USER"\n                                                                             :required_actions ["ACCEPT_TERMS_AND_CONDITIONS"]\n                                                                             :primary_user_group_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"}\n                                                               :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"status\\":\\"ACTIVE\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"status\\":\\"ACTIVE\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/users/v4/users HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 455\r\n\r\n{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","external_id":"string","first_name":"Miriam","last_name":"string","email":"string","status":"ACTIVE","username":"string","profile":{"about_me":"string","department":"string","job_title":"string","location":"Leinfelden-Echterdingen","mobile_number":"string","phone_number":"string"},"role":"USER","required_actions":["ACCEPT_TERMS_AND_CONDITIONS"],"primary_user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users"\n\n\tpayload := strings.NewReader("{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"status\\":\\"ACTIVE\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"status\\":\\"ACTIVE\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    external_id: 'string',\n    first_name: 'Miriam',\n    last_name: 'string',\n    email: 'string',\n    status: 'ACTIVE',\n    username: 'string',\n    profile: {\n      about_me: 'string',\n      department: 'string',\n      job_title: 'string',\n      location: 'Leinfelden-Echterdingen',\n      mobile_number: 'string',\n      phone_number: 'string'\n    },\n    role: 'USER',\n    required_actions: ['ACCEPT_TERMS_AND_CONDITIONS'],\n    primary_user_group_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n  })\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/users', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"status\\":\\"ACTIVE\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    external_id: 'string',\n    first_name: 'Miriam',\n    last_name: 'string',\n    email: 'string',\n    status: 'ACTIVE',\n    username: 'string',\n    profile: {\n      about_me: 'string',\n      department: 'string',\n      job_title: 'string',\n      location: 'Leinfelden-Echterdingen',\n      mobile_number: 'string',\n      phone_number: 'string'\n    },\n    role: 'USER',\n    required_actions: ['ACCEPT_TERMS_AND_CONDITIONS'],\n    primary_user_group_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"external_id": @"string",\n                              @"first_name": @"Miriam",\n                              @"last_name": @"string",\n                              @"email": @"string",\n                              @"status": @"ACTIVE",\n                              @"username": @"string",\n                              @"profile": @{ @"about_me": @"string", @"department": @"string", @"job_title": @"string", @"location": @"Leinfelden-Echterdingen", @"mobile_number": @"string", @"phone_number": @"string" },\n                              @"role": @"USER",\n                              @"required_actions": @[ @"ACCEPT_TERMS_AND_CONDITIONS" ],\n                              @"primary_user_group_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"status\\":\\"ACTIVE\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: '<?php\nrequire_once(\'vendor/autoload.php\');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request(\'POST\', \'http://localhost:3000/api/admin/users/v4/users\', [\n  \'body\' => \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","external_id":"string","first_name":"Miriam","last_name":"string","email":"string","status":"ACTIVE","username":"string","profile":{"about_me":"string","department":"string","job_title":"string","location":"Leinfelden-Echterdingen","mobile_number":"string","phone_number":"string"},"role":"USER","required_actions":["ACCEPT_TERMS_AND_CONDITIONS"],"primary_user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\',\n  \'headers\' => [\n    \'accept\' => \'application/json\',\n    \'content-type\' => \'application/json\',\n  ],\n]);\n\necho $response->getBody();',
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","external_id":"string","first_name":"Miriam","last_name":"string","email":"string","status":"ACTIVE","username":"string","profile":{"about_me":"string","department":"string","job_title":"string","location":"Leinfelden-Echterdingen","mobile_number":"string","phone_number":"string"},"role":"USER","required_actions":["ACCEPT_TERMS_AND_CONDITIONS"],"primary_user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users"\n\npayload = {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "external_id": "string",\n    "first_name": "Miriam",\n    "last_name": "string",\n    "email": "string",\n    "status": "ACTIVE",\n    "username": "string",\n    "profile": {\n        "about_me": "string",\n        "department": "string",\n        "job_title": "string",\n        "location": "Leinfelden-Echterdingen",\n        "mobile_number": "string",\n        "phone_number": "string"\n    },\n    "role": "USER",\n    "required_actions": ["ACCEPT_TERMS_AND_CONDITIONS"],\n    "primary_user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users"\n\npayload <- "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"status\\":\\"ACTIVE\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/users")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"status\\":\\"ACTIVE\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/users \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "first_name": "Miriam",\n  "last_name": "string",\n  "email": "string",\n  "status": "ACTIVE",\n  "username": "string",\n  "profile": {\n    "about_me": "string",\n    "department": "string",\n    "job_title": "string",\n    "location": "Leinfelden-Echterdingen",\n    "mobile_number": "string",\n    "phone_number": "string"\n  },\n  "role": "USER",\n  "required_actions": [\n    "ACCEPT_TERMS_AND_CONDITIONS"\n  ],\n  "primary_user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "first_name": "Miriam",\n  "last_name": "string",\n  "email": "string",\n  "status": "ACTIVE",\n  "username": "string",\n  "profile": [\n    "about_me": "string",\n    "department": "string",\n    "job_title": "string",\n    "location": "Leinfelden-Echterdingen",\n    "mobile_number": "string",\n    "phone_number": "string"\n  ],\n  "role": "USER",\n  "required_actions": ["ACCEPT_TERMS_AND_CONDITIONS"],\n  "primary_user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/users",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "first_name": "Miriam",\n  "last_name": "string",\n  "email": "string",\n  "status": "ACTIVE",\n  "username": "string",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z",\n  "profile_picture": {\n    "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n  },\n  "profile": {\n    "about_me": "string",\n    "department": "string",\n    "job_title": "string",\n    "location": "Leinfelden-Echterdingen",\n    "mobile_number": "string",\n    "phone_number": "string",\n    "picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "role": "USER",\n  "required_actions": [\n    "ACCEPT_TERMS_AND_CONDITIONS"\n  ],\n  "primary_user_group": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "Marketing"\n    },\n    "status": "ACTIVE"\n  }\n}',
              "201":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "first_name": "Miriam",\n  "last_name": "string",\n  "email": "string",\n  "status": "ACTIVE",\n  "username": "string",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z",\n  "profile_picture": {\n    "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n  },\n  "profile": {\n    "about_me": "string",\n    "department": "string",\n    "job_title": "string",\n    "location": "Leinfelden-Echterdingen",\n    "mobile_number": "string",\n    "phone_number": "string",\n    "picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "role": "USER",\n  "required_actions": [\n    "ACCEPT_TERMS_AND_CONDITIONS"\n  ],\n  "primary_user_group": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "Marketing"\n    },\n    "status": "ACTIVE"\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      description: "Unique identifier of a user.",
                      format: "uuid",
                    },
                    external_id: {
                      type: "string",
                      maxLength: 255,
                      minLength: 1,
                      nullable: true,
                    },
                    first_name: {
                      type: "string",
                      maxLength: 64,
                      minLength: 1,
                      example: "Miriam",
                    },
                    last_name: { type: "string", minLength: 1, maxLength: 64 },
                    email: {
                      type: "string",
                      pattern:
                        "([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(\\.)?)+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+",
                      maxLength: 255,
                      minLength: 5,
                      nullable: true,
                    },
                    status: { type: "string", enum: ["ACTIVE", "LOCKED"] },
                    username: { type: "string", minLength: 1, maxLength: 255 },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    profile_picture: {
                      type: "object",
                      nullable: true,
                      properties: {
                        file_id: { type: "string", format: "uuid" },
                      },
                    },
                    profile: {
                      type: "object",
                      properties: {
                        about_me: { type: "string", nullable: true },
                        department: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        job_title: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        location: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                          example: "Leinfelden-Echterdingen",
                        },
                        mobile_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        phone_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                    },
                    role: { type: "string", enum: ["USER", "ADMIN"] },
                    required_actions: {
                      type: "array",
                      items: {
                        type: "string",
                        enum: [
                          "ACCEPT_TERMS_AND_CONDITIONS",
                          "UPDATE_PASSWORD",
                          "VERIFY_EMAIL",
                        ],
                      },
                    },
                    primary_user_group: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                  },
                  required: [
                    "id",
                    "first_name",
                    "last_name",
                    "status",
                    "username",
                    "created_at",
                    "profile",
                    "role",
                    "required_actions",
                    "primary_user_group",
                  ],
                },
                statusCode: "200",
              },
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      description: "Unique identifier of a user.",
                      format: "uuid",
                    },
                    external_id: {
                      type: "string",
                      maxLength: 255,
                      minLength: 1,
                      nullable: true,
                    },
                    first_name: {
                      type: "string",
                      maxLength: 64,
                      minLength: 1,
                      example: "Miriam",
                    },
                    last_name: { type: "string", minLength: 1, maxLength: 64 },
                    email: {
                      type: "string",
                      pattern:
                        "([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(\\.)?)+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+",
                      maxLength: 255,
                      minLength: 5,
                      nullable: true,
                    },
                    status: { type: "string", enum: ["ACTIVE", "LOCKED"] },
                    username: { type: "string", minLength: 1, maxLength: 255 },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    profile_picture: {
                      type: "object",
                      nullable: true,
                      properties: {
                        file_id: { type: "string", format: "uuid" },
                      },
                    },
                    profile: {
                      type: "object",
                      properties: {
                        about_me: { type: "string", nullable: true },
                        department: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        job_title: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        location: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                          example: "Leinfelden-Echterdingen",
                        },
                        mobile_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        phone_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                    },
                    role: { type: "string", enum: ["USER", "ADMIN"] },
                    required_actions: {
                      type: "array",
                      items: {
                        type: "string",
                        enum: [
                          "ACCEPT_TERMS_AND_CONDITIONS",
                          "UPDATE_PASSWORD",
                          "VERIFY_EMAIL",
                        ],
                      },
                    },
                    primary_user_group: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                  },
                  required: [
                    "id",
                    "first_name",
                    "last_name",
                    "status",
                    "username",
                    "created_at",
                    "profile",
                    "role",
                    "required_actions",
                    "primary_user_group",
                  ],
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
      {
        id: "user-me",
        title: "User Me",
        shortDescription: "",
        endpoints: [
          {
            id: "get-my-email-address",
            title: "Get my email address",
            description:
              "Retrieves information about the email address of the authenticated user.",
            path: "/api/users/v4/users/me/email",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "email",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "verified",
                    type: "boolean",
                    description: "",
                    required: true,
                  },
                  {
                    name: "update_allowed",
                    type: "boolean",
                    description: "",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/email");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/users/v4/users/me/email" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/email");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/users/me/email");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/users/v4/users/me/email HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/users/me/email"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/email")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/users/v4/users/me/email', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/email")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/users/me/email';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/users/me/email"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/users/me/email" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/users/v4/users/me/email', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/users/v4/users/me/email\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/users/me/email"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/users/me/email"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/users/v4/users/me/email\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/users/v4/users/me/email \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/users/me/email")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/users/v4/users/me/email",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "email": "string",\n  "verified": true,\n  "update_allowed": true\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    email: {
                      type: "string",
                      pattern:
                        "([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(\\.)?)+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+",
                      maxLength: 255,
                      minLength: 5,
                      nullable: true,
                    },
                    verified: { type: "boolean" },
                    update_allowed: { type: "boolean" },
                  },
                  required: ["verified", "update_allowed"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "change-my-account-email",
            title: "Change my email address",
            description:
              "Allows the authenticated user to change their own email address.",
            path: "/api/users/v4/users/me/email",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: ["INVALID_EMAIL_ADDRESS"],
            parameters: [],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "email",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            responseBody: [{ title: "204", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/email");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"email\\":\\"miriam.mueller@acme.com\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/users/v4/users/me/email" {:content-type :json\n                                                                  :form-params {:email "miriam.mueller@acme.com"}})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/email");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"email\\":\\"miriam.mueller@acme.com\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/users/me/email");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"email\\":\\"miriam.mueller@acme.com\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/users/v4/users/me/email HTTP/1.1\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 35\r\n\r\n{"email":"miriam.mueller@acme.com"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/users/me/email"\n\n\tpayload := strings.NewReader("{\\"email\\":\\"miriam.mueller@acme.com\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"email\\":\\"miriam.mueller@acme.com\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/email")\n  .post(body)\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {'content-type': 'application/json'},\n  body: JSON.stringify({email: 'miriam.mueller@acme.com'})\n};\n\nfetch('http://localhost:3000/api/users/v4/users/me/email', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"email\\":\\"miriam.mueller@acme.com\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/email")\n  .post(body)\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/users/me/email';\nconst options = {\n  method: 'POST',\n  headers: {'content-type': 'application/json'},\n  body: JSON.stringify({email: 'miriam.mueller@acme.com'})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"email": @"miriam.mueller@acme.com" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/users/me/email"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/users/me/email" in\nlet headers = Header.add (Header.init ()) "content-type" "application/json" in\nlet body = Cohttp_lwt_body.of_string "{\\"email\\":\\"miriam.mueller@acme.com\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/users/v4/users/me/email', [\n  'body' => '{\"email\":\"miriam.mueller@acme.com\"}',\n  'headers' => [\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/users/v4/users/me/email\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"email":"miriam.mueller@acme.com"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/users/me/email"\n\npayload = {"email": "miriam.mueller@acme.com"}\nheaders = {"content-type": "application/json"}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/users/me/email"\n\npayload <- "{\\"email\\":\\"miriam.mueller@acme.com\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/users/v4/users/me/email")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"email\\":\\"miriam.mueller@acme.com\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/users/v4/users/me/email \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"email\": \"miriam.mueller@acme.com\"\n}\n'",
                swift:
                  'import Foundation\n\nlet headers = ["content-type": "application/json"]\nlet parameters = ["email": "miriam.mueller@acme.com"] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/users/me/email")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "content-type", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/users/v4/users/me/email",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "204" }],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "logged-in",
            title: "Notify logged in",
            description:
              "Notifies the backend that the user is logged in. The authenticated user is tracked as 'active'.",
            path: "/api/users/v4/users/me/logged-in",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [{ title: "204", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/logged-in");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/users/v4/users/me/logged-in")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/logged-in");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/users/me/logged-in");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);',
                http: "POST /api/users/v4/users/me/logged-in HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/users/me/logged-in"\n\n\treq, _ := http.NewRequest("POST", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/logged-in")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'POST'};\n\nfetch('http://localhost:3000/api/users/v4/users/me/logged-in', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/logged-in")\n  .post(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/users/me/logged-in';\nconst options = {method: 'POST'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/users/me/logged-in"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/users/me/logged-in" in\n\nClient.call `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/users/v4/users/me/logged-in');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/users/v4/users/me/logged-in' -Method POST",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/users/me/logged-in"\n\nresponse = requests.post(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/users/me/logged-in"\n\nresponse <- VERB("POST", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/users/v4/users/me/logged-in\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/users/v4/users/me/logged-in",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/users/me/logged-in")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/users/v4/users/me/logged-in",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "204" }],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "do-I-have-a-password",
            title: "Check my password configuration",
            description:
              "Provides information whether or not a password is configured for the authenticated user.",
            path: "/api/users/v4/users/me/password",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              { title: "204", parameters: [], type: "response" },
              { title: "404", parameters: [], type: "response" },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/password");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/users/v4/users/me/password")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/password");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/users/me/password");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);',
                http: "GET /api/users/v4/users/me/password HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/users/me/password"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/password")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET'};\n\nfetch('http://localhost:3000/api/users/v4/users/me/password', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/password")\n  .get()\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/users/me/password';\nconst options = {method: 'GET'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/users/me/password"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/users/me/password" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/users/v4/users/me/password');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/users/v4/users/me/password' -Method GET",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/users/me/password"\n\nresponse = requests.get(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/users/me/password"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/users/v4/users/me/password\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/users/v4/users/me/password",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/users/me/password")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/users/v4/users/me/password",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [
              { schema: null, statusCode: "204" },
              { schema: null, statusCode: "404" },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "change-my-password",
            title: "Change my password",
            description:
              "Allows the authenticated user to change their own password.",
            path: "/api/users/v4/users/me/password",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "WRONG_PASSWORD",
              "PASSWORD_POLICY_NOT_RESPECTED",
              "PASSWORD_HISTORY_POLICY_NOT_RESPECTED",
            ],
            parameters: [],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "old_password",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "new_password",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            responseBody: [{ title: "204", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/password");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"old_password\\":\\"string\\",\\"new_password\\":\\"string\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/users/v4/users/me/password" {:content-type :json\n                                                                     :form-params {:old_password "string"\n                                                                                   :new_password "string"}})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/password");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"old_password\\":\\"string\\",\\"new_password\\":\\"string\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/users/me/password");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"old_password\\":\\"string\\",\\"new_password\\":\\"string\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/users/v4/users/me/password HTTP/1.1\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 49\r\n\r\n{"old_password":"string","new_password":"string"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/users/me/password"\n\n\tpayload := strings.NewReader("{\\"old_password\\":\\"string\\",\\"new_password\\":\\"string\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"old_password\\":\\"string\\",\\"new_password\\":\\"string\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/password")\n  .post(body)\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {'content-type': 'application/json'},\n  body: JSON.stringify({old_password: 'string', new_password: 'string'})\n};\n\nfetch('http://localhost:3000/api/users/v4/users/me/password', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"old_password\\":\\"string\\",\\"new_password\\":\\"string\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/password")\n  .post(body)\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/users/me/password';\nconst options = {\n  method: 'POST',\n  headers: {'content-type': 'application/json'},\n  body: JSON.stringify({old_password: 'string', new_password: 'string'})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"old_password": @"string",\n                              @"new_password": @"string" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/users/me/password"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/users/me/password" in\nlet headers = Header.add (Header.init ()) "content-type" "application/json" in\nlet body = Cohttp_lwt_body.of_string "{\\"old_password\\":\\"string\\",\\"new_password\\":\\"string\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/users/v4/users/me/password', [\n  'body' => '{\"old_password\":\"string\",\"new_password\":\"string\"}',\n  'headers' => [\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/users/v4/users/me/password\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"old_password":"string","new_password":"string"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/users/me/password"\n\npayload = {\n    "old_password": "string",\n    "new_password": "string"\n}\nheaders = {"content-type": "application/json"}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/users/me/password"\n\npayload <- "{\\"old_password\\":\\"string\\",\\"new_password\\":\\"string\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/users/v4/users/me/password")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"old_password\\":\\"string\\",\\"new_password\\":\\"string\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/users/v4/users/me/password \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "old_password": "string",\n  "new_password": "string"\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = ["content-type": "application/json"]\nlet parameters = [\n  "old_password": "string",\n  "new_password": "string"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/users/me/password")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "content-type", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/users/v4/users/me/password",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "204" }],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
      {
        id: "on-leave",
        title: "On Leave",
        shortDescription: "",
        endpoints: [
          {
            id: "get-on-leave-notes",
            title: "List my on-leave notes",
            description:
              "List on-leave notes for the authenticated user filtered by a date range.",
            path: "/api/users/v4/on-leave/me",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "range_start",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "range_end",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "START_ASC",
                        "START_DESC",
                        "END_ASC",
                        "END_DESC",
                        "UPDATED_AT_ASC",
                        "UPDATED_AT_DESC",
                        "CREATED_AT_ASC",
                        "CREATED_AT_DESC",
                      ],
                    },
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_cursor",
                    type: "string",
                    description:
                      'A cursor pointing to the first item to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "on_leave_notes",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        period: {
                          type: "object",
                          properties: {
                            start: { format: "date-time", type: "string" },
                            end: { format: "date-time", type: "string" },
                          },
                          required: ["start", "end"],
                        },
                        description: {
                          type: "object",
                          nullable: true,
                          properties: {
                            plain: { type: "string" },
                            mentions: {
                              type: "array",
                              items: {
                                type: "object",
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  is_deleted: { type: "boolean" },
                                  first_name: {
                                    type: "string",
                                    example: "Jon",
                                  },
                                  last_name: { type: "string", example: "Doe" },
                                  department: {
                                    type: "string",
                                    example: "Marketing",
                                    nullable: true,
                                  },
                                  profile_picture: {
                                    type: "object",
                                    nullable: true,
                                    properties: {
                                      file_id: {
                                        type: "string",
                                        format: "uuid",
                                      },
                                    },
                                  },
                                },
                                required: [
                                  "id",
                                  "is_deleted",
                                  "first_name",
                                  "last_name",
                                ],
                              },
                            },
                          },
                          required: ["plain", "mentions"],
                        },
                        created_at: { type: "string", format: "date-time" },
                        updated_at: { type: "string", format: "date-time" },
                      },
                      required: ["id", "period", "created_at", "updated_at"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "next_cursor",
                        type: "string",
                        description:
                          'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                      {
                        name: "has_more",
                        type: "boolean",
                        description:
                          'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/users/v4/on-leave/me" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/on-leave/me");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/users/v4/on-leave/me HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/on-leave/me"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/users/v4/on-leave/me', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/on-leave/me';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/on-leave/me"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/on-leave/me" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/users/v4/on-leave/me', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/users/v4/on-leave/me\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/on-leave/me"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/on-leave/me"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/users/v4/on-leave/me\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/users/v4/on-leave/me \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/on-leave/me")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/users/v4/on-leave/me",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "on_leave_notes": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "period": {\n        "start": "2024-01-11T07:41:25.662Z",\n        "end": "2024-01-11T07:41:25.662Z"\n      },\n      "description": {\n        "plain": "string",\n        "mentions": [\n          {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "is_deleted": true,\n            "first_name": "Jon",\n            "last_name": "Doe",\n            "department": "Marketing",\n            "profile_picture": {\n              "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n            }\n          }\n        ]\n      },\n      "created_at": "2024-01-11T07:41:25.662Z",\n      "updated_at": "2024-01-11T07:41:25.662Z"\n    }\n  ],\n  "pagination": {\n    "next_cursor": "string",\n    "has_more": true\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    on_leave_notes: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: { type: "string", format: "uuid" },
                          period: {
                            type: "object",
                            properties: {
                              start: { format: "date-time", type: "string" },
                              end: { format: "date-time", type: "string" },
                            },
                            required: ["start", "end"],
                          },
                          description: {
                            type: "object",
                            nullable: true,
                            properties: {
                              plain: { type: "string" },
                              mentions: {
                                type: "array",
                                items: {
                                  type: "object",
                                  properties: {
                                    id: { type: "string", format: "uuid" },
                                    is_deleted: { type: "boolean" },
                                    first_name: {
                                      type: "string",
                                      example: "Jon",
                                    },
                                    last_name: {
                                      type: "string",
                                      example: "Doe",
                                    },
                                    department: {
                                      type: "string",
                                      example: "Marketing",
                                      nullable: true,
                                    },
                                    profile_picture: {
                                      type: "object",
                                      nullable: true,
                                      properties: {
                                        file_id: {
                                          type: "string",
                                          format: "uuid",
                                        },
                                      },
                                    },
                                  },
                                  required: [
                                    "id",
                                    "is_deleted",
                                    "first_name",
                                    "last_name",
                                  ],
                                },
                              },
                            },
                            required: ["plain", "mentions"],
                          },
                          created_at: { type: "string", format: "date-time" },
                          updated_at: { type: "string", format: "date-time" },
                        },
                        required: ["id", "period", "created_at", "updated_at"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the next page to fetch. Refer to our general "pagination" concept for more information.',
                      required: ["has_more", "next_cursor"],
                      properties: {
                        next_cursor: {
                          type: "string",
                          description:
                            'A cursor string pointing to the first element not contained in this response. Refer to our general "pagination" concept for more information.',
                        },
                        has_more: {
                          type: "boolean",
                          description:
                            'Describes whether there is at least one more element contained in this collection after the given response. Refer to our general "pagination" concept for more information.',
                        },
                      },
                    },
                  },
                  required: ["on_leave_notes", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "create-on-leave-note",
            title: "Create on-leave note",
            description: "",
            path: "/api/users/v4/on-leave/me",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "ON_LEAVE_NOTE_ID_ALREADY_EXISTS",
              "ON_LEAVE_NOTE_PERIOD_INVALID",
              "INVALID_MENTION",
            ],
            parameters: [],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "description",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "plain",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mentioned_user_ids",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "period",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "start",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "end",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "201",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "period",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "start",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "end",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "description",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "plain",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mentions",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/users/v4/on-leave/me" {:content-type :json\n                                                               :form-params {:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                             :description {:plain "string"\n                                                                                           :mentioned_user_ids ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]}\n                                                                             :period {:start "2024-01-11T07:41:25.662Z"\n                                                                                      :end "2024-01-11T07:41:25.662Z"}}\n                                                               :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/on-leave/me");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/users/v4/on-leave/me HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 219\r\n\r\n{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","description":{"plain":"string","mentioned_user_ids":["3fa85f64-5717-4562-b3fc-2c963f66afa6"]},"period":{"start":"2024-01-11T07:41:25.662Z","end":"2024-01-11T07:41:25.662Z"}}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/on-leave/me"\n\n\tpayload := strings.NewReader("{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    description: {plain: 'string', mentioned_user_ids: ['3fa85f64-5717-4562-b3fc-2c963f66afa6']},\n    period: {start: '2024-01-11T07:41:25.662Z', end: '2024-01-11T07:41:25.662Z'}\n  })\n};\n\nfetch('http://localhost:3000/api/users/v4/on-leave/me', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/on-leave/me';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    description: {plain: 'string', mentioned_user_ids: ['3fa85f64-5717-4562-b3fc-2c963f66afa6']},\n    period: {start: '2024-01-11T07:41:25.662Z', end: '2024-01-11T07:41:25.662Z'}\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"description": @{ @"plain": @"string", @"mentioned_user_ids": @[ @"3fa85f64-5717-4562-b3fc-2c963f66afa6" ] },\n                              @"period": @{ @"start": @"2024-01-11T07:41:25.662Z", @"end": @"2024-01-11T07:41:25.662Z" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/on-leave/me"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/on-leave/me" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: '<?php\nrequire_once(\'vendor/autoload.php\');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request(\'POST\', \'http://localhost:3000/api/users/v4/on-leave/me\', [\n  \'body\' => \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","description":{"plain":"string","mentioned_user_ids":["3fa85f64-5717-4562-b3fc-2c963f66afa6"]},"period":{"start":"2024-01-11T07:41:25.662Z","end":"2024-01-11T07:41:25.662Z"}}\',\n  \'headers\' => [\n    \'accept\' => \'application/json\',\n    \'content-type\' => \'application/json\',\n  ],\n]);\n\necho $response->getBody();',
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/users/v4/on-leave/me\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","description":{"plain":"string","mentioned_user_ids":["3fa85f64-5717-4562-b3fc-2c963f66afa6"]},"period":{"start":"2024-01-11T07:41:25.662Z","end":"2024-01-11T07:41:25.662Z"}}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/on-leave/me"\n\npayload = {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "description": {\n        "plain": "string",\n        "mentioned_user_ids": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]\n    },\n    "period": {\n        "start": "2024-01-11T07:41:25.662Z",\n        "end": "2024-01-11T07:41:25.662Z"\n    }\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/on-leave/me"\n\npayload <- "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/users/v4/on-leave/me")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/users/v4/on-leave/me \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "description": {\n    "plain": "string",\n    "mentioned_user_ids": [\n      "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    ]\n  },\n  "period": {\n    "start": "2024-01-11T07:41:25.662Z",\n    "end": "2024-01-11T07:41:25.662Z"\n  }\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "description": [\n    "plain": "string",\n    "mentioned_user_ids": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]\n  ],\n  "period": [\n    "start": "2024-01-11T07:41:25.662Z",\n    "end": "2024-01-11T07:41:25.662Z"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/on-leave/me")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/users/v4/on-leave/me",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "201":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "period": {\n    "start": "2024-01-11T07:41:25.662Z",\n    "end": "2024-01-11T07:41:25.662Z"\n  },\n  "description": {\n    "plain": "string",\n    "mentions": [\n      {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      }\n    ]\n  },\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: { type: "string", format: "uuid" },
                    period: {
                      type: "object",
                      properties: {
                        start: { format: "date-time", type: "string" },
                        end: { format: "date-time", type: "string" },
                      },
                      required: ["start", "end"],
                    },
                    description: {
                      type: "object",
                      nullable: true,
                      properties: {
                        plain: { type: "string" },
                        mentions: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                        },
                      },
                      required: ["plain", "mentions"],
                    },
                    created_at: { type: "string", format: "date-time" },
                    updated_at: { type: "string", format: "date-time" },
                  },
                  required: ["id", "period", "created_at", "updated_at"],
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "get-mentionable-users-for-on-leave",
            title: "List mentionable users",
            description: "Retrieves all mentionable users for on-leave notes.",
            path: "/api/users/v4/on-leave/me/mentionable-users",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs a match in the user's first name, last name or department.",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "USER_FIRST_NAME_ASC",
                        "USER_FIRST_NAME_DESC",
                        "USER_LAST_NAME_ASC",
                        "USER_LAST_NAME_DESC",
                      ],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "users",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        is_deleted: { type: "boolean" },
                        first_name: { type: "string", example: "Jon" },
                        last_name: { type: "string", example: "Doe" },
                        department: {
                          type: "string",
                          example: "Marketing",
                          nullable: true,
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                      required: ["id", "is_deleted", "first_name", "last_name"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me/mentionable-users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/users/v4/on-leave/me/mentionable-users" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me/mentionable-users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/on-leave/me/mentionable-users");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/users/v4/on-leave/me/mentionable-users HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/on-leave/me/mentionable-users"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me/mentionable-users")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/users/v4/on-leave/me/mentionable-users', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me/mentionable-users")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/on-leave/me/mentionable-users';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/on-leave/me/mentionable-users"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/on-leave/me/mentionable-users" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/users/v4/on-leave/me/mentionable-users', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/users/v4/on-leave/me/mentionable-users\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/on-leave/me/mentionable-users"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/on-leave/me/mentionable-users"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/users/v4/on-leave/me/mentionable-users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/users/v4/on-leave/me/mentionable-users \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/on-leave/me/mentionable-users")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/users/v4/on-leave/me/mentionable-users",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "users": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "is_deleted": true,\n      "first_name": "Jon",\n      "last_name": "Doe",\n      "department": "Marketing",\n      "profile_picture": {\n        "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      }\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    users: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: { type: "string", format: "uuid" },
                          is_deleted: { type: "boolean" },
                          first_name: { type: "string", example: "Jon" },
                          last_name: { type: "string", example: "Doe" },
                          department: {
                            type: "string",
                            example: "Marketing",
                            nullable: true,
                          },
                          profile_picture: {
                            type: "object",
                            nullable: true,
                            properties: {
                              file_id: { type: "string", format: "uuid" },
                            },
                          },
                        },
                        required: [
                          "id",
                          "is_deleted",
                          "first_name",
                          "last_name",
                        ],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["users", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-on-leave-note",
            title: "Get my on-leave note",
            description:
              "Get on-leave note by its ID for the authenticated user.",
            path: "/api/users/v4/on-leave/me/{on_leave_note_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "on_leave_note_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "period",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "start",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "end",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "description",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "plain",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mentions",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/users/v4/on-leave/me/on_leave_note_id HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/users/v4/on-leave/me/{on_leave_note_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "period": {\n    "start": "2024-01-11T07:41:25.662Z",\n    "end": "2024-01-11T07:41:25.662Z"\n  },\n  "description": {\n    "plain": "string",\n    "mentions": [\n      {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      }\n    ]\n  },\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: { type: "string", format: "uuid" },
                    period: {
                      type: "object",
                      properties: {
                        start: { format: "date-time", type: "string" },
                        end: { format: "date-time", type: "string" },
                      },
                      required: ["start", "end"],
                    },
                    description: {
                      type: "object",
                      nullable: true,
                      properties: {
                        plain: { type: "string" },
                        mentions: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                        },
                      },
                      required: ["plain", "mentions"],
                    },
                    created_at: { type: "string", format: "date-time" },
                    updated_at: { type: "string", format: "date-time" },
                  },
                  required: ["id", "period", "created_at", "updated_at"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "update-on-leave-note",
            title: "Update on-leave note",
            description:
              "Update the specified on-leave note for the authenticated user.",
            path: "/api/users/v4/on-leave/me/{on_leave_note_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "ON_LEAVE_NOTE_PERIOD_INVALID",
              "INVALID_MENTION",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "on_leave_note_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "description",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "plain",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mentioned_user_ids",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "period",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "start",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "end",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "period",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "start",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "end",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "description",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "plain",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mentions",
                        type: "array",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/patch "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id" {:content-type :json\n                                                                                 :form-params {:description {:plain "string"\n                                                                                                             :mentioned_user_ids ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]}\n                                                                                               :period {:start "2024-01-11T07:41:25.662Z"\n                                                                                                        :end "2024-01-11T07:41:25.662Z"}}\n                                                                                 :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'PATCH /api/users/v4/on-leave/me/on_leave_note_id HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 175\r\n\r\n{"description":{"plain":"string","mentioned_user_ids":["3fa85f64-5717-4562-b3fc-2c963f66afa6"]},"period":{"start":"2024-01-11T07:41:25.662Z","end":"2024-01-11T07:41:25.662Z"}}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"\n\n\tpayload := strings.NewReader("{\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}")\n\n\treq, _ := http.NewRequest("PATCH", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'PATCH',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    description: {plain: 'string', mentioned_user_ids: ['3fa85f64-5717-4562-b3fc-2c963f66afa6']},\n    period: {start: '2024-01-11T07:41:25.662Z', end: '2024-01-11T07:41:25.662Z'}\n  })\n};\n\nfetch('http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id';\nconst options = {\n  method: 'PATCH',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    description: {plain: 'string', mentioned_user_ids: ['3fa85f64-5717-4562-b3fc-2c963f66afa6']},\n    period: {start: '2024-01-11T07:41:25.662Z', end: '2024-01-11T07:41:25.662Z'}\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"description": @{ @"plain": @"string", @"mentioned_user_ids": @[ @"3fa85f64-5717-4562-b3fc-2c963f66afa6" ] },\n                              @"period": @{ @"start": @"2024-01-11T07:41:25.662Z", @"end": @"2024-01-11T07:41:25.662Z" } };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"PATCH"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}" in\n\nClient.call ~headers ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('PATCH', 'http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id', [\n  'body' => '{\"description\":{\"plain\":\"string\",\"mentioned_user_ids\":[\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"]},\"period\":{\"start\":\"2024-01-11T07:41:25.662Z\",\"end\":\"2024-01-11T07:41:25.662Z\"}}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id\' -Method PATCH -Headers $headers -ContentType \'application/json\' -Body \'{"description":{"plain":"string","mentioned_user_ids":["3fa85f64-5717-4562-b3fc-2c963f66afa6"]},"period":{"start":"2024-01-11T07:41:25.662Z","end":"2024-01-11T07:41:25.662Z"}}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"\n\npayload = {\n    "description": {\n        "plain": "string",\n        "mentioned_user_ids": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]\n    },\n    "period": {\n        "start": "2024-01-11T07:41:25.662Z",\n        "end": "2024-01-11T07:41:25.662Z"\n    }\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.patch(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"\n\npayload <- "{\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}"\n\nencode <- "json"\n\nresponse <- VERB("PATCH", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"description\\":{\\"plain\\":\\"string\\",\\"mentioned_user_ids\\":[\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"]},\\"period\\":{\\"start\\":\\"2024-01-11T07:41:25.662Z\\",\\"end\\":\\"2024-01-11T07:41:25.662Z\\"}}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request PATCH \\\n     --url http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "description": {\n    "plain": "string",\n    "mentioned_user_ids": [\n      "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    ]\n  },\n  "period": {\n    "start": "2024-01-11T07:41:25.662Z",\n    "end": "2024-01-11T07:41:25.662Z"\n  }\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "description": [\n    "plain": "string",\n    "mentioned_user_ids": ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]\n  ],\n  "period": [\n    "start": "2024-01-11T07:41:25.662Z",\n    "end": "2024-01-11T07:41:25.662Z"\n  ]\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "PATCH"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "PATCH",
                url: "/api/users/v4/on-leave/me/{on_leave_note_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "period": {\n    "start": "2024-01-11T07:41:25.662Z",\n    "end": "2024-01-11T07:41:25.662Z"\n  },\n  "description": {\n    "plain": "string",\n    "mentions": [\n      {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      }\n    ]\n  },\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: { type: "string", format: "uuid" },
                    period: {
                      type: "object",
                      properties: {
                        start: { format: "date-time", type: "string" },
                        end: { format: "date-time", type: "string" },
                      },
                      required: ["start", "end"],
                    },
                    description: {
                      type: "object",
                      nullable: true,
                      properties: {
                        plain: { type: "string" },
                        mentions: {
                          type: "array",
                          items: {
                            type: "object",
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                        },
                      },
                      required: ["plain", "mentions"],
                    },
                    created_at: { type: "string", format: "date-time" },
                    updated_at: { type: "string", format: "date-time" },
                  },
                  required: ["id", "period", "created_at", "updated_at"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "patch",
          },
          {
            id: "delete-on-leave-note",
            title: "Delete on-leave note",
            description:
              "Delete specified on-leave note for the authenticated user.",
            path: "/api/users/v4/on-leave/me/{on_leave_note_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "on_leave_note_id",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "200", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/users/v4/on-leave/me/on_leave_note_id HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE'};\n\nfetch('http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id")\n  .delete(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id';\nconst options = {method: 'DELETE'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id' -Method DELETE",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"\n\nresponse = requests.delete(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/on-leave/me/on_leave_note_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/users/v4/on-leave/me/{on_leave_note_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "200" }],
            security: [{ bearer: [] }],
            method: "delete",
          },
        ],
      },
      {
        id: "action-link",
        title: "Action Link",
        shortDescription: "",
        endpoints: [
          {
            id: "create-action-link",
            title: "Create action link",
            description:
              "Create a new action-link for one-time propagation of the user session.",
            path: "/api/users/v4/users/me/action-link",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "redirect_url",
                    type: "string",
                    description:
                      "The URL the user should be redirected to after using the action link. The `redirect_url` must be a valid redirect url of either an external client or the frontend client.\n",
                    required: true,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "action_link",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/action-link");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"redirect_url\\":\\"string\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/users/v4/users/me/action-link" {:content-type :json\n                                                                        :form-params {:redirect_url "string"}\n                                                                        :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/users/v4/users/me/action-link");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"redirect_url\\":\\"string\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/users/v4/users/me/action-link");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"redirect_url\\":\\"string\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/users/v4/users/me/action-link HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 25\r\n\r\n{"redirect_url":"string"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/users/v4/users/me/action-link"\n\n\tpayload := strings.NewReader("{\\"redirect_url\\":\\"string\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"redirect_url\\":\\"string\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/action-link")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({redirect_url: 'string'})\n};\n\nfetch('http://localhost:3000/api/users/v4/users/me/action-link', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"redirect_url\\":\\"string\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/users/v4/users/me/action-link")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/users/v4/users/me/action-link';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({redirect_url: 'string'})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"redirect_url": @"string" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/users/v4/users/me/action-link"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/users/v4/users/me/action-link" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"redirect_url\\":\\"string\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/users/v4/users/me/action-link', [\n  'body' => '{\"redirect_url\":\"string\"}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/users/v4/users/me/action-link\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"redirect_url":"string"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/users/v4/users/me/action-link"\n\npayload = {"redirect_url": "string"}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/users/v4/users/me/action-link"\n\npayload <- "{\\"redirect_url\\":\\"string\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/users/v4/users/me/action-link")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"redirect_url\\":\\"string\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/users/v4/users/me/action-link \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"redirect_url\": \"string\"\n}\n'",
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["redirect_url": "string"] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/users/v4/users/me/action-link")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/users/v4/users/me/action-link",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: { "200": '{\n  "action_link": "string"\n}' },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  required: ["action_link"],
                  properties: { action_link: { type: "string" } },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
    ],
  },
  {
    id: "user-admin",
    title: "User Admin",
    resources: [
      {
        id: "role",
        title: "Role",
        shortDescription: "",
        endpoints: [
          {
            id: "get-all-roles",
            title: "List roles",
            description:
              "Returns all roles (pre-defined and custom) configured for an organisation.",
            path: "/api/admin/users/v4/roles",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "scope",
                    type: "string",
                    description: "A filter for the roles permission scope.",
                    required: false,
                  },
                  {
                    name: "type",
                    type: "string",
                    description: "A filter for the role type.",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: ["TITLE_ASC", "TITLE_DESC"],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "roles",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a role.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the Role",
                              maxLength: 120,
                              example: "System Owner",
                            },
                          },
                          required: ["language", "text"],
                        },
                        type: {
                          type: "string",
                          description:
                            "Distinguishes pre-defined and custom roles",
                          enum: ["PREDEFINED", "CUSTOM"],
                        },
                        scope: {
                          type: "string",
                          description:
                            "The scope describes the context in which a permission is valid.",
                          enum: ["ORGANISATION", "USER_GROUP", "USER_SELF"],
                        },
                        permission_count: {
                          type: "integer",
                          description:
                            "The number of permissions configured for the role.",
                          example: 1,
                        },
                      },
                      required: [
                        "id",
                        "title",
                        "type",
                        "scope",
                        "permission_count",
                      ],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/roles");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/roles" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/roles");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/roles");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/roles HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/roles"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/roles")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/roles', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/roles")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/roles';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/roles"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/roles" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/roles', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/roles\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/roles"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/roles"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/roles \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/roles")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/roles",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "roles": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "title": {\n        "language": "en-GB",\n        "text": "System Owner"\n      },\n      "type": "PREDEFINED",\n      "scope": "ORGANISATION",\n      "permission_count": 1\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    roles: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "Unique identifier of a role.",
                            format: "uuid",
                          },
                          title: {
                            type: "object",
                            properties: {
                              language: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              text: {
                                type: "string",
                                description: "Title of the Role",
                                maxLength: 120,
                                example: "System Owner",
                              },
                            },
                            required: ["language", "text"],
                          },
                          type: {
                            type: "string",
                            description:
                              "Distinguishes pre-defined and custom roles",
                            enum: ["PREDEFINED", "CUSTOM"],
                          },
                          scope: {
                            type: "string",
                            description:
                              "The scope describes the context in which a permission is valid.",
                            enum: ["ORGANISATION", "USER_GROUP", "USER_SELF"],
                          },
                          permission_count: {
                            type: "integer",
                            description:
                              "The number of permissions configured for the role.",
                            example: 1,
                          },
                        },
                        required: [
                          "id",
                          "title",
                          "type",
                          "scope",
                          "permission_count",
                        ],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["roles", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-role",
            title: "Get role",
            description: "Returns a single role",
            path: "/api/admin/users/v4/roles/{role_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "role_id",
                    type: "string",
                    description: "Unique identifier of a role.",
                    required: true,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a role.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description:
                      "An arbitrary string referencing an external entity identifier.",
                    required: false,
                  },
                  {
                    name: "title",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          example: "en-GB",
                        },
                        text: {
                          type: "string",
                          description: "Title of the Role",
                          maxLength: 120,
                          example: "System Owner",
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "description",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          example: "en-GB",
                        },
                        text: {
                          type: "string",
                          description: "Description of the Role",
                          maxLength: 200,
                          example:
                            "This roles grants all organisation permissions to a user.",
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "pre_defined_role_id",
                    type: "string",
                    description: "Identifier of a pre-defined role.",
                    required: false,
                  },
                  {
                    name: "type",
                    type: "string",
                    description: "Distinguishes pre-defined and custom roles",
                    required: true,
                  },
                  {
                    name: "scope",
                    type: "string",
                    description:
                      "The scope describes the context in which a permission is valid.",
                    required: true,
                  },
                  {
                    name: "permissions",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      description:
                        "A single permission applicable for the role.\nThe status describes if the permission is granted or denied.",
                      properties: {
                        permission: {
                          type: "string",
                          description:
                            "A permission describes a certain action that can be performed on a resource by an actor.",
                        },
                        status: {
                          type: "string",
                          description: "The status of the permission.",
                          enum: ["GRANTED", "DENIED"],
                          example: "GRANTED",
                        },
                      },
                      required: ["permission"],
                    },
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was created.",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was last updated.",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/roles/role_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/roles/role_id" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/roles/role_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/roles/role_id");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/roles/role_id HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/roles/role_id"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/roles/role_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/roles/role_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/roles/role_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/roles/role_id';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/roles/role_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/roles/role_id" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/roles/role_id', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/roles/role_id\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/roles/role_id"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/roles/role_id"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/roles/role_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/roles/role_id \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/roles/role_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/roles/{role_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "title": [\n    {\n      "language": "en-GB",\n      "text": "System Owner"\n    }\n  ],\n  "description": [\n    {\n      "language": "en-GB",\n      "text": "This roles grants all organisation permissions to a user."\n    }\n  ],\n  "pre_defined_role_id": "SYSTEM_OWNER",\n  "type": "PREDEFINED",\n  "scope": "ORGANISATION",\n  "permissions": [\n    {\n      "permission": "string",\n      "status": "GRANTED"\n    }\n  ],\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      description: "Unique identifier of a role.",
                      format: "uuid",
                    },
                    external_id: {
                      type: "string",
                      minLength: 1,
                      maxLength: 200,
                      nullable: true,
                      description:
                        "An arbitrary string referencing an external entity identifier.",
                    },
                    title: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          language: {
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            format: "bcp47",
                            pattern:
                              "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                            example: "en-GB",
                          },
                          text: {
                            type: "string",
                            description: "Title of the Role",
                            maxLength: 120,
                            example: "System Owner",
                          },
                        },
                        required: ["language", "text"],
                      },
                    },
                    description: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          language: {
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            format: "bcp47",
                            pattern:
                              "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                            example: "en-GB",
                          },
                          text: {
                            type: "string",
                            description: "Description of the Role",
                            maxLength: 200,
                            example:
                              "This roles grants all organisation permissions to a user.",
                          },
                        },
                        required: ["language", "text"],
                      },
                      nullable: true,
                    },
                    pre_defined_role_id: {
                      type: "string",
                      description: "Identifier of a pre-defined role.",
                      nullable: true,
                      enum: [
                        "SYSTEM_OWNER",
                        "SYSTEM_ADMIN",
                        "USER_GROUP_ADMIN",
                        "USER_GROUP_MEMBER",
                      ],
                    },
                    type: {
                      type: "string",
                      description: "Distinguishes pre-defined and custom roles",
                      enum: ["PREDEFINED", "CUSTOM"],
                    },
                    scope: {
                      type: "string",
                      description:
                        "The scope describes the context in which a permission is valid.",
                      enum: ["ORGANISATION", "USER_GROUP", "USER_SELF"],
                    },
                    permissions: {
                      type: "array",
                      items: {
                        type: "object",
                        description:
                          "A single permission applicable for the role.\nThe status describes if the permission is granted or denied.",
                        properties: {
                          permission: {
                            type: "string",
                            description:
                              "A permission describes a certain action that can be performed on a resource by an actor.",
                          },
                          status: {
                            type: "string",
                            description: "The status of the permission.",
                            enum: ["GRANTED", "DENIED"],
                            example: "GRANTED",
                          },
                        },
                        required: ["permission"],
                      },
                    },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      description:
                        "The point in time at which this resource was created.",
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      nullable: false,
                      description:
                        "The point in time at which this resource was last updated.",
                    },
                  },
                  required: [
                    "id",
                    "title",
                    "type",
                    "scope",
                    "permissions",
                    "created_at",
                    "updated_at",
                  ],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
        ],
      },
      {
        id: "user",
        title: "User",
        shortDescription: "",
        endpoints: [
          {
            id: "search-users",
            title: "List all users",
            description:
              "Allows admin users to search users filtered by a search term and status and sort the resulting list by various user attributes.",
            path: "/api/admin/users/v4/users",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs a match in the user's first name, last name, username, email, department or location.",
                    required: false,
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "A filter for the user's status.",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "FIRST_NAME_ASC",
                        "FIRST_NAME_DESC",
                        "LAST_NAME_ASC",
                        "LAST_NAME_DESC",
                        "USERNAME_ASC",
                        "USERNAME_DESC",
                        "EMAIL_ASC",
                        "EMAIL_DESC",
                        "DEPARTMENT_ASC",
                        "DEPARTMENT_DESC",
                        "LOCATION_ASC",
                        "LOCATION_DESC",
                        "ROLE_ASC",
                        "ROLE_DESC",
                        "STATUS_ASC",
                        "STATUS_DESC",
                        "UPDATED_AT_ASC",
                        "UPDATED_AT_DESC",
                        "CREATED_AT_ASC",
                        "CREATED_AT_DESC",
                      ],
                    },
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "users",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user.",
                          format: "uuid",
                        },
                        external_id: {
                          type: "string",
                          maxLength: 255,
                          minLength: 1,
                          nullable: true,
                        },
                        first_name: {
                          type: "string",
                          maxLength: 64,
                          minLength: 1,
                          example: "Miriam",
                        },
                        last_name: {
                          type: "string",
                          minLength: 1,
                          maxLength: 64,
                        },
                        email: {
                          type: "string",
                          pattern:
                            "([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(\\.)?)+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+",
                          maxLength: 255,
                          minLength: 5,
                          nullable: true,
                        },
                        status: { type: "string", enum: ["ACTIVE", "LOCKED"] },
                        username: {
                          type: "string",
                          minLength: 1,
                          maxLength: 255,
                        },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          readOnly: true,
                        },
                        updated_at: {
                          type: "string",
                          format: "date-time",
                          readOnly: true,
                        },
                        role: { type: "string", enum: ["USER", "ADMIN"] },
                        profile: {
                          type: "object",
                          properties: {
                            department: {
                              type: "string",
                              maxLength: 255,
                              nullable: true,
                            },
                            job_title: {
                              type: "string",
                              maxLength: 255,
                              nullable: true,
                            },
                            location: {
                              type: "string",
                              maxLength: 255,
                              nullable: true,
                              example: "Leinfelden-Echterdingen",
                            },
                            mobileNumber: {
                              type: "string",
                              maxLength: 50,
                              nullable: true,
                            },
                            phoneNumber: {
                              type: "string",
                              maxLength: 50,
                              nullable: true,
                            },
                            picture: {
                              type: "object",
                              nullable: true,
                              properties: {
                                file_id: { type: "string", format: "uuid" },
                              },
                            },
                          },
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                        primary_user_group: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            title: {
                              type: "object",
                              properties: {
                                language: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                text: {
                                  type: "string",
                                  description: "Title of the User Group",
                                  maxLength: 120,
                                  example: "Marketing",
                                },
                              },
                              required: ["language", "text"],
                            },
                            status: {
                              type: "string",
                              enum: ["ACTIVE", "ARCHIVED"],
                            },
                          },
                          required: ["id", "title", "status"],
                        },
                      },
                      required: [
                        "id",
                        "first_name",
                        "last_name",
                        "status",
                        "username",
                        "created_at",
                        "role",
                        "profile",
                        "primary_user_group",
                      ],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/users" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/users HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/users', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/users', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/users \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/users",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "users": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "external_id": "string",\n      "first_name": "Miriam",\n      "last_name": "string",\n      "email": "string",\n      "status": "ACTIVE",\n      "username": "string",\n      "created_at": "2024-01-11T07:41:25.662Z",\n      "updated_at": "2024-01-11T07:41:25.662Z",\n      "role": "USER",\n      "profile": {\n        "department": "string",\n        "job_title": "string",\n        "location": "Leinfelden-Echterdingen",\n        "mobileNumber": "string",\n        "phoneNumber": "string",\n        "picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      },\n      "profile_picture": {\n        "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      },\n      "primary_user_group": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "title": {\n          "language": "en-GB",\n          "text": "Marketing"\n        },\n        "status": "ACTIVE"\n      }\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    users: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "Unique identifier of a user.",
                            format: "uuid",
                          },
                          external_id: {
                            type: "string",
                            maxLength: 255,
                            minLength: 1,
                            nullable: true,
                          },
                          first_name: {
                            type: "string",
                            maxLength: 64,
                            minLength: 1,
                            example: "Miriam",
                          },
                          last_name: {
                            type: "string",
                            minLength: 1,
                            maxLength: 64,
                          },
                          email: {
                            type: "string",
                            pattern:
                              "([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(\\.)?)+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+",
                            maxLength: 255,
                            minLength: 5,
                            nullable: true,
                          },
                          status: {
                            type: "string",
                            enum: ["ACTIVE", "LOCKED"],
                          },
                          username: {
                            type: "string",
                            minLength: 1,
                            maxLength: 255,
                          },
                          created_at: {
                            type: "string",
                            format: "date-time",
                            readOnly: true,
                          },
                          updated_at: {
                            type: "string",
                            format: "date-time",
                            readOnly: true,
                          },
                          role: { type: "string", enum: ["USER", "ADMIN"] },
                          profile: {
                            type: "object",
                            properties: {
                              department: {
                                type: "string",
                                maxLength: 255,
                                nullable: true,
                              },
                              job_title: {
                                type: "string",
                                maxLength: 255,
                                nullable: true,
                              },
                              location: {
                                type: "string",
                                maxLength: 255,
                                nullable: true,
                                example: "Leinfelden-Echterdingen",
                              },
                              mobileNumber: {
                                type: "string",
                                maxLength: 50,
                                nullable: true,
                              },
                              phoneNumber: {
                                type: "string",
                                maxLength: 50,
                                nullable: true,
                              },
                              picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                          },
                          profile_picture: {
                            type: "object",
                            nullable: true,
                            properties: {
                              file_id: { type: "string", format: "uuid" },
                            },
                          },
                          primary_user_group: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the User Group",
                                    maxLength: 120,
                                    example: "Marketing",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              status: {
                                type: "string",
                                enum: ["ACTIVE", "ARCHIVED"],
                              },
                            },
                            required: ["id", "title", "status"],
                          },
                        },
                        required: [
                          "id",
                          "first_name",
                          "last_name",
                          "status",
                          "username",
                          "created_at",
                          "role",
                          "profile",
                          "primary_user_group",
                        ],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["users", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-user",
            title: "Get user",
            description:
              "Allows an admin user to get details about a user by its ID.",
            path: "/api/admin/users/v4/users/{user_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "first_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "last_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "email",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "username",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "profile_picture",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "file_id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "profile",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "about_me",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "job_title",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "location",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mobile_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "phone_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "role",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "required_actions",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "string",
                      enum: [
                        "ACCEPT_TERMS_AND_CONDITIONS",
                        "UPDATE_PASSWORD",
                        "VERIFY_EMAIL",
                      ],
                    },
                  },
                  {
                    name: "primary_user_group",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the User Group",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "status",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/users/user_id" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/users/user_id HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/users/user_id', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/user_id\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/users/{user_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "first_name": "Miriam",\n  "last_name": "string",\n  "email": "string",\n  "status": "ACTIVE",\n  "username": "string",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z",\n  "profile_picture": {\n    "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n  },\n  "profile": {\n    "about_me": "string",\n    "department": "string",\n    "job_title": "string",\n    "location": "Leinfelden-Echterdingen",\n    "mobile_number": "string",\n    "phone_number": "string",\n    "picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "role": "USER",\n  "required_actions": [\n    "ACCEPT_TERMS_AND_CONDITIONS"\n  ],\n  "primary_user_group": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "Marketing"\n    },\n    "status": "ACTIVE"\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      description: "Unique identifier of a user.",
                      format: "uuid",
                    },
                    external_id: {
                      type: "string",
                      maxLength: 255,
                      minLength: 1,
                      nullable: true,
                    },
                    first_name: {
                      type: "string",
                      maxLength: 64,
                      minLength: 1,
                      example: "Miriam",
                    },
                    last_name: { type: "string", minLength: 1, maxLength: 64 },
                    email: {
                      type: "string",
                      pattern:
                        "([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(\\.)?)+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+",
                      maxLength: 255,
                      minLength: 5,
                      nullable: true,
                    },
                    status: { type: "string", enum: ["ACTIVE", "LOCKED"] },
                    username: { type: "string", minLength: 1, maxLength: 255 },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    profile_picture: {
                      type: "object",
                      nullable: true,
                      properties: {
                        file_id: { type: "string", format: "uuid" },
                      },
                    },
                    profile: {
                      type: "object",
                      properties: {
                        about_me: { type: "string", nullable: true },
                        department: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        job_title: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        location: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                          example: "Leinfelden-Echterdingen",
                        },
                        mobile_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        phone_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                    },
                    role: { type: "string", enum: ["USER", "ADMIN"] },
                    required_actions: {
                      type: "array",
                      items: {
                        type: "string",
                        enum: [
                          "ACCEPT_TERMS_AND_CONDITIONS",
                          "UPDATE_PASSWORD",
                          "VERIFY_EMAIL",
                        ],
                      },
                    },
                    primary_user_group: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                  },
                  required: [
                    "id",
                    "first_name",
                    "last_name",
                    "status",
                    "username",
                    "created_at",
                    "profile",
                    "role",
                    "required_actions",
                    "primary_user_group",
                  ],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "update-user",
            title: "Update user",
            description: "Allows an admin user to (partially) update a user.",
            path: "/api/admin/users/v4/users/{user_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "USERNAME_ALREADY_EXISTS",
              "EXTERNAL_ID_ALREADY_EXISTS",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "external_id",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "first_name",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "last_name",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "email",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "username",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "profile",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "about_me",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "job_title",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "location",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mobile_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "phone_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "role",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "required_actions",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "ACCEPT_TERMS_AND_CONDITIONS",
                        "UPDATE_PASSWORD",
                        "VERIFY_EMAIL",
                      ],
                    },
                  },
                  {
                    name: "primary_user_group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: false,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "first_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "last_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "email",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "username",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "profile_picture",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "file_id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "profile",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "about_me",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "job_title",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "location",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mobile_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "phone_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "role",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "required_actions",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "string",
                      enum: [
                        "ACCEPT_TERMS_AND_CONDITIONS",
                        "UPDATE_PASSWORD",
                        "VERIFY_EMAIL",
                      ],
                    },
                  },
                  {
                    name: "primary_user_group",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the User Group",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "status",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/merge-patch+json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/patch "http://localhost:3000/api/admin/users/v4/users/user_id" {:headers {:content-type "application/merge-patch+json"}\n                                                                        :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/merge-patch+json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/merge-patch+json");\nrequest.AddParameter("application/merge-patch+json", "{\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'PATCH /api/admin/users/v4/users/user_id HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/merge-patch+json\r\nHost: localhost:3000\r\nContent-Length: 393\r\n\r\n{"external_id":"string","first_name":"Miriam","last_name":"string","email":"string","username":"string","profile":{"about_me":"string","department":"string","job_title":"string","location":"Leinfelden-Echterdingen","mobile_number":"string","phone_number":"string"},"role":"USER","required_actions":["ACCEPT_TERMS_AND_CONDITIONS"],"primary_user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id"\n\n\tpayload := strings.NewReader("{\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\n\n\treq, _ := http.NewRequest("PATCH", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/merge-patch+json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/merge-patch+json");\nRequestBody body = RequestBody.create(mediaType, "{\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/merge-patch+json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  'const options = {\n  method: \'PATCH\',\n  headers: {accept: \'application/json\', \'content-type\': \'application/merge-patch+json\'},\n  body: \'{"external_id":"string","first_name":"Miriam","last_name":"string","email":"string","username":"string","profile":{"about_me":"string","department":"string","job_title":"string","location":"Leinfelden-Echterdingen","mobile_number":"string","phone_number":"string"},"role":"USER","required_actions":["ACCEPT_TERMS_AND_CONDITIONS"],"primary_user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\'\n};\n\nfetch(\'http://localhost:3000/api/admin/users/v4/users/user_id\', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));',
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/merge-patch+json")\nval body = RequestBody.create(mediaType, "{\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/merge-patch+json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: 'const fetch = require(\'node-fetch\');\n\nconst url = \'http://localhost:3000/api/admin/users/v4/users/user_id\';\nconst options = {\n  method: \'PATCH\',\n  headers: {accept: \'application/json\', \'content-type\': \'application/merge-patch+json\'},\n  body: \'{"external_id":"string","first_name":"Miriam","last_name":"string","email":"string","username":"string","profile":{"about_me":"string","department":"string","job_title":"string","location":"Leinfelden-Echterdingen","mobile_number":"string","phone_number":"string"},"role":"USER","required_actions":["ACCEPT_TERMS_AND_CONDITIONS"],"primary_user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\'\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error(\'error:\' + err));',
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/merge-patch+json" };\n\nNSData *postData = [[NSData alloc] initWithData:[@"{"external_id":"string","first_name":"Miriam","last_name":"string","email":"string","username":"string","profile":{"about_me":"string","department":"string","job_title":"string","location":"Leinfelden-Echterdingen","mobile_number":"string","phone_number":"string"},"role":"USER","required_actions":["ACCEPT_TERMS_AND_CONDITIONS"],"primary_user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"PATCH"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/merge-patch+json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}" in\n\nClient.call ~headers ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: '<?php\nrequire_once(\'vendor/autoload.php\');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request(\'PATCH\', \'http://localhost:3000/api/admin/users/v4/users/user_id\', [\n  \'body\' => \'{"external_id":"string","first_name":"Miriam","last_name":"string","email":"string","username":"string","profile":{"about_me":"string","department":"string","job_title":"string","location":"Leinfelden-Echterdingen","mobile_number":"string","phone_number":"string"},"role":"USER","required_actions":["ACCEPT_TERMS_AND_CONDITIONS"],"primary_user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\',\n  \'headers\' => [\n    \'accept\' => \'application/json\',\n    \'content-type\' => \'application/merge-patch+json\',\n  ],\n]);\n\necho $response->getBody();',
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/merge-patch+json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/user_id\' -Method PATCH -Headers $headers -ContentType \'application/merge-patch+json\' -Body \'{"external_id":"string","first_name":"Miriam","last_name":"string","email":"string","username":"string","profile":{"about_me":"string","department":"string","job_title":"string","location":"Leinfelden-Echterdingen","mobile_number":"string","phone_number":"string"},"role":"USER","required_actions":["ACCEPT_TERMS_AND_CONDITIONS"],"primary_user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id"\n\npayload = "{\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/merge-patch+json"\n}\n\nresponse = requests.patch(url, data=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id"\n\npayload <- "{\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nencode <- "raw"\n\nresponse <- VERB("PATCH", url, body = payload, content_type("application/merge-patch+json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/users/user_id")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/merge-patch+json\'\nrequest.body = "{\\"external_id\\":\\"string\\",\\"first_name\\":\\"Miriam\\",\\"last_name\\":\\"string\\",\\"email\\":\\"string\\",\\"username\\":\\"string\\",\\"profile\\":{\\"about_me\\":\\"string\\",\\"department\\":\\"string\\",\\"job_title\\":\\"string\\",\\"location\\":\\"Leinfelden-Echterdingen\\",\\"mobile_number\\":\\"string\\",\\"phone_number\\":\\"string\\"},\\"role\\":\\"USER\\",\\"required_actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"primary_user_group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request PATCH \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/merge-patch+json\' \\\n     --data \'\n{\n  "external_id": "string",\n  "first_name": "Miriam",\n  "last_name": "string",\n  "email": "string",\n  "username": "string",\n  "profile": {\n    "about_me": "string",\n    "department": "string",\n    "job_title": "string",\n    "location": "Leinfelden-Echterdingen",\n    "mobile_number": "string",\n    "phone_number": "string"\n  },\n  "role": "USER",\n  "required_actions": [\n    "ACCEPT_TERMS_AND_CONDITIONS"\n  ],\n  "primary_user_group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/merge-patch+json"\n]\n\nlet postData = NSData(data: "{"external_id":"string","first_name":"Miriam","last_name":"string","email":"string","username":"string","profile":{"about_me":"string","department":"string","job_title":"string","location":"Leinfelden-Echterdingen","mobile_number":"string","phone_number":"string"},"role":"USER","required_actions":["ACCEPT_TERMS_AND_CONDITIONS"],"primary_user_group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "PATCH"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  {
                    name: "content-type",
                    value: "application/merge-patch+json",
                  },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "PATCH",
                url: "/api/admin/users/v4/users/{user_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "first_name": "Miriam",\n  "last_name": "string",\n  "email": "string",\n  "status": "ACTIVE",\n  "username": "string",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z",\n  "profile_picture": {\n    "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n  },\n  "profile": {\n    "about_me": "string",\n    "department": "string",\n    "job_title": "string",\n    "location": "Leinfelden-Echterdingen",\n    "mobile_number": "string",\n    "phone_number": "string",\n    "picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "role": "USER",\n  "required_actions": [\n    "ACCEPT_TERMS_AND_CONDITIONS"\n  ],\n  "primary_user_group": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "Marketing"\n    },\n    "status": "ACTIVE"\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      description: "Unique identifier of a user.",
                      format: "uuid",
                    },
                    external_id: {
                      type: "string",
                      maxLength: 255,
                      minLength: 1,
                      nullable: true,
                    },
                    first_name: {
                      type: "string",
                      maxLength: 64,
                      minLength: 1,
                      example: "Miriam",
                    },
                    last_name: { type: "string", minLength: 1, maxLength: 64 },
                    email: {
                      type: "string",
                      pattern:
                        "([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(\\.)?)+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+",
                      maxLength: 255,
                      minLength: 5,
                      nullable: true,
                    },
                    status: { type: "string", enum: ["ACTIVE", "LOCKED"] },
                    username: { type: "string", minLength: 1, maxLength: 255 },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    profile_picture: {
                      type: "object",
                      nullable: true,
                      properties: {
                        file_id: { type: "string", format: "uuid" },
                      },
                    },
                    profile: {
                      type: "object",
                      properties: {
                        about_me: { type: "string", nullable: true },
                        department: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        job_title: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        location: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                          example: "Leinfelden-Echterdingen",
                        },
                        mobile_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        phone_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                    },
                    role: { type: "string", enum: ["USER", "ADMIN"] },
                    required_actions: {
                      type: "array",
                      items: {
                        type: "string",
                        enum: [
                          "ACCEPT_TERMS_AND_CONDITIONS",
                          "UPDATE_PASSWORD",
                          "VERIFY_EMAIL",
                        ],
                      },
                    },
                    primary_user_group: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                  },
                  required: [
                    "id",
                    "first_name",
                    "last_name",
                    "status",
                    "username",
                    "created_at",
                    "profile",
                    "role",
                    "required_actions",
                    "primary_user_group",
                  ],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "patch",
          },
          {
            id: "delete-user",
            title: "Delete user",
            description:
              "Allows an admin user to delete a user identified by its ID.\n- MANAGEMENT_USER_MODIFICATION (user is a management user and cannot be deleted),\n- ACTOR_MUST_NOT_DELETE_ITSELF (actor cannot delete itself),",
            path: "/api/admin/users/v4/users/{user_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "200", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/admin/users/v4/users/user_id")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/admin/users/v4/users/user_id HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE'};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id")\n  .delete(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id';\nconst options = {method: 'DELETE'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/admin/users/v4/users/user_id');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/admin/users/v4/users/user_id' -Method DELETE",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id"\n\nresponse = requests.delete(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/admin/users/v4/users/{user_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "200" }],
            security: [{ bearer: [] }],
            method: "delete",
          },
          {
            id: "lock-user",
            title: "Lock user",
            description:
              "Allows an admin user to lock a user identified by its ID. A locked user cannot log-in anymore or get refresh tokens.",
            path: "/api/admin/users/v4/users/{user_id}/lock",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "first_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "last_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "email",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "username",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "profile_picture",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "file_id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "profile",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "about_me",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "job_title",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "location",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mobile_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "phone_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "role",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "required_actions",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "string",
                      enum: [
                        "ACCEPT_TERMS_AND_CONDITIONS",
                        "UPDATE_PASSWORD",
                        "VERIFY_EMAIL",
                      ],
                    },
                  },
                  {
                    name: "primary_user_group",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the User Group",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "status",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/lock");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/users/user_id/lock" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/lock");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/lock");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "POST /api/admin/users/v4/users/user_id/lock HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/lock"\n\n\treq, _ := http.NewRequest("POST", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/lock")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/lock', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/lock")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/lock';\nconst options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/lock"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/lock" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/users/user_id/lock', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/user_id/lock\' -Method POST -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/lock"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/lock"\n\nresponse <- VERB("POST", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id/lock\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/lock \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/lock")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/users/{user_id}/lock",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "first_name": "Miriam",\n  "last_name": "string",\n  "email": "string",\n  "status": "ACTIVE",\n  "username": "string",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z",\n  "profile_picture": {\n    "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n  },\n  "profile": {\n    "about_me": "string",\n    "department": "string",\n    "job_title": "string",\n    "location": "Leinfelden-Echterdingen",\n    "mobile_number": "string",\n    "phone_number": "string",\n    "picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "role": "USER",\n  "required_actions": [\n    "ACCEPT_TERMS_AND_CONDITIONS"\n  ],\n  "primary_user_group": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "Marketing"\n    },\n    "status": "ACTIVE"\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      description: "Unique identifier of a user.",
                      format: "uuid",
                    },
                    external_id: {
                      type: "string",
                      maxLength: 255,
                      minLength: 1,
                      nullable: true,
                    },
                    first_name: {
                      type: "string",
                      maxLength: 64,
                      minLength: 1,
                      example: "Miriam",
                    },
                    last_name: { type: "string", minLength: 1, maxLength: 64 },
                    email: {
                      type: "string",
                      pattern:
                        "([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(\\.)?)+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+",
                      maxLength: 255,
                      minLength: 5,
                      nullable: true,
                    },
                    status: { type: "string", enum: ["ACTIVE", "LOCKED"] },
                    username: { type: "string", minLength: 1, maxLength: 255 },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    profile_picture: {
                      type: "object",
                      nullable: true,
                      properties: {
                        file_id: { type: "string", format: "uuid" },
                      },
                    },
                    profile: {
                      type: "object",
                      properties: {
                        about_me: { type: "string", nullable: true },
                        department: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        job_title: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        location: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                          example: "Leinfelden-Echterdingen",
                        },
                        mobile_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        phone_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                    },
                    role: { type: "string", enum: ["USER", "ADMIN"] },
                    required_actions: {
                      type: "array",
                      items: {
                        type: "string",
                        enum: [
                          "ACCEPT_TERMS_AND_CONDITIONS",
                          "UPDATE_PASSWORD",
                          "VERIFY_EMAIL",
                        ],
                      },
                    },
                    primary_user_group: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                  },
                  required: [
                    "id",
                    "first_name",
                    "last_name",
                    "status",
                    "username",
                    "created_at",
                    "profile",
                    "role",
                    "required_actions",
                    "primary_user_group",
                  ],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "unlock-user",
            title: "Unlock User",
            description:
              "Allows an admin user to unlock a user identified by its ID. A previously locked user can log-in again once unlocked.",
            path: "/api/admin/users/v4/users/{user_id}/unlock",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "first_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "last_name",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "email",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "username",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: false,
                  },
                  {
                    name: "profile_picture",
                    type: "object",
                    description: "",
                    required: false,
                    properties: [
                      {
                        name: "file_id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "profile",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "about_me",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "job_title",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "location",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "mobile_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "phone_number",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "role",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "required_actions",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "string",
                      enum: [
                        "ACCEPT_TERMS_AND_CONDITIONS",
                        "UPDATE_PASSWORD",
                        "VERIFY_EMAIL",
                      ],
                    },
                  },
                  {
                    name: "primary_user_group",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the User Group",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "status",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/unlock");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/users/user_id/unlock" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/unlock");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/unlock");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "POST /api/admin/users/v4/users/user_id/unlock HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/unlock"\n\n\treq, _ := http.NewRequest("POST", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/unlock")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/unlock', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/unlock")\n  .post(null)\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/unlock';\nconst options = {method: 'POST', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/unlock"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/unlock" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/users/user_id/unlock', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/user_id/unlock\' -Method POST -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/unlock"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.post(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/unlock"\n\nresponse <- VERB("POST", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id/unlock\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/unlock \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/unlock")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/users/{user_id}/unlock",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "first_name": "Miriam",\n  "last_name": "string",\n  "email": "string",\n  "status": "ACTIVE",\n  "username": "string",\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z",\n  "profile_picture": {\n    "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n  },\n  "profile": {\n    "about_me": "string",\n    "department": "string",\n    "job_title": "string",\n    "location": "Leinfelden-Echterdingen",\n    "mobile_number": "string",\n    "phone_number": "string",\n    "picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "role": "USER",\n  "required_actions": [\n    "ACCEPT_TERMS_AND_CONDITIONS"\n  ],\n  "primary_user_group": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "Marketing"\n    },\n    "status": "ACTIVE"\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      description: "Unique identifier of a user.",
                      format: "uuid",
                    },
                    external_id: {
                      type: "string",
                      maxLength: 255,
                      minLength: 1,
                      nullable: true,
                    },
                    first_name: {
                      type: "string",
                      maxLength: 64,
                      minLength: 1,
                      example: "Miriam",
                    },
                    last_name: { type: "string", minLength: 1, maxLength: 64 },
                    email: {
                      type: "string",
                      pattern:
                        "([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(\\.)?)+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+",
                      maxLength: 255,
                      minLength: 5,
                      nullable: true,
                    },
                    status: { type: "string", enum: ["ACTIVE", "LOCKED"] },
                    username: { type: "string", minLength: 1, maxLength: 255 },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    updated_at: {
                      type: "string",
                      format: "date-time",
                      readOnly: true,
                    },
                    profile_picture: {
                      type: "object",
                      nullable: true,
                      properties: {
                        file_id: { type: "string", format: "uuid" },
                      },
                    },
                    profile: {
                      type: "object",
                      properties: {
                        about_me: { type: "string", nullable: true },
                        department: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        job_title: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                        },
                        location: {
                          type: "string",
                          maxLength: 255,
                          nullable: true,
                          example: "Leinfelden-Echterdingen",
                        },
                        mobile_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        phone_number: {
                          type: "string",
                          maxLength: 50,
                          nullable: true,
                        },
                        picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                    },
                    role: { type: "string", enum: ["USER", "ADMIN"] },
                    required_actions: {
                      type: "array",
                      items: {
                        type: "string",
                        enum: [
                          "ACCEPT_TERMS_AND_CONDITIONS",
                          "UPDATE_PASSWORD",
                          "VERIFY_EMAIL",
                        ],
                      },
                    },
                    primary_user_group: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                  },
                  required: [
                    "id",
                    "first_name",
                    "last_name",
                    "status",
                    "username",
                    "created_at",
                    "profile",
                    "role",
                    "required_actions",
                    "primary_user_group",
                  ],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
      {
        id: "user-role-assignment",
        title: "User Role Assignment",
        shortDescription: "",
        endpoints: [
          {
            id: "assign-role-to-user-batch",
            title: "Assign organisation roles to users",
            description: "Assigns organisation roles to the users",
            path: "/api/admin/users/v4/users/role-assignments/batch",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        user_id: {
                          type: "string",
                          description: "Unique identifier of a user.",
                          format: "uuid",
                        },
                        body: {
                          type: "object",
                          properties: {
                            role_id: {
                              type: "string",
                              description: "Unique identifier of a role.",
                              format: "uuid",
                            },
                          },
                          required: ["role_id"],
                        },
                      },
                      required: ["user_id", "body"],
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "object",
                          properties: {
                            user_id: {
                              type: "string",
                              description: "Unique identifier of a user.",
                              format: "uuid",
                            },
                            role_id: {
                              type: "string",
                              description: "Unique identifier of a role.",
                              format: "uuid",
                            },
                          },
                          required: ["user_id", "role_id"],
                        },
                        status: {
                          type: "integer",
                          format: "int32",
                          description:
                            "A well know HTTP status code (e.g. 200, 201, 400).",
                        },
                        body: {
                          type: "object",
                          properties: {
                            id: {
                              type: "object",
                              properties: {
                                user_id: {
                                  type: "string",
                                  description: "Unique identifier of a user.",
                                  format: "uuid",
                                },
                                role_id: {
                                  type: "string",
                                  description: "Unique identifier of a role.",
                                  format: "uuid",
                                },
                              },
                              required: ["user_id", "role_id"],
                            },
                            role: {
                              type: "object",
                              properties: {
                                id: {
                                  type: "string",
                                  description: "Unique identifier of a role.",
                                  format: "uuid",
                                },
                                title: {
                                  type: "object",
                                  properties: {
                                    language: {
                                      type: "string",
                                      description:
                                        "A locale representing a language and region.",
                                      format: "bcp47",
                                      pattern:
                                        "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                      example: "en-GB",
                                    },
                                    text: {
                                      type: "string",
                                      description: "Title of the Role",
                                      maxLength: 120,
                                      example: "System Owner",
                                    },
                                  },
                                  required: ["language", "text"],
                                },
                                type: {
                                  type: "string",
                                  description:
                                    "Distinguishes pre-defined and custom roles",
                                  enum: ["PREDEFINED", "CUSTOM"],
                                },
                                scope: {
                                  type: "string",
                                  description:
                                    "The scope describes the context in which a permission is valid.",
                                  enum: [
                                    "ORGANISATION",
                                    "USER_GROUP",
                                    "USER_SELF",
                                  ],
                                },
                                permission_count: {
                                  type: "integer",
                                  description:
                                    "The number of permissions configured for the role.",
                                  example: 1,
                                },
                              },
                              required: [
                                "id",
                                "title",
                                "type",
                                "scope",
                                "permission_count",
                              ],
                            },
                            created_at: {
                              type: "string",
                              format: "date-time",
                              description:
                                "The point in time at which this resource was created.",
                            },
                          },
                          required: ["id", "role", "created_at", "updated_at"],
                        },
                        error: {
                          type: "object",
                          description:
                            'An RFC 7807 inspired "problem JSON" object.',
                          title: "Problem",
                          properties: {
                            status: {
                              type: "integer",
                              format: "int32",
                              description:
                                "A well know HTTP status code (e.g. 200, 201, 400).",
                            },
                            title: {
                              type: "string",
                              description:
                                "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                              example: "No user with the given id found",
                            },
                            detail: {
                              type: "string",
                              description:
                                "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                              example:
                                "User with id <id> was not found. Please ...",
                              nullable: true,
                            },
                            error_code: {
                              type: "string",
                              description:
                                "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                              example: "USER_NOT_FOUND",
                              nullable: true,
                            },
                            property: {
                              type: "string",
                              description:
                                "The technical property name from the API that caused the problem.",
                              example: "user_id",
                              nullable: true,
                            },
                          },
                          required: ["status", "title"],
                        },
                      },
                      required: ["id", "status"],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch" {:content-type :json\n                                                                                      :form-params {:items [{:user_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                             :body {:role_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}\n                                                                                      :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/role-assignments/batch");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"items\\":[{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/users/v4/users/role-assignments/batch HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 120\r\n\r\n{"items":[{"user_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","body":{"role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch"\n\n\tpayload := strings.NewReader("{\\"items\\":[{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"items\\":[{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/role-assignments/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        user_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n        body: JSON.stringify({role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'})\n      }\n    ]\n  })\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/role-assignments/batch', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"items\\":[{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/role-assignments/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/role-assignments/batch';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        user_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n        body: JSON.stringify({role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'})\n      }\n    ]\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"items": @[ @{ @"user_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"body": @{ @"role_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6" } } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/role-assignments/batch"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"items\\":[{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/users/role-assignments/batch', [\n  'body' => '{\"items\":[{\"user_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"body\":{\"role_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"}}]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/role-assignments/batch\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"items":[{"user_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","body":{"role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch"\n\npayload = {"items": [\n        {\n            "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "body": {"role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"}\n        }\n    ]}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch"\n\npayload <- "{\\"items\\":[{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/users/role-assignments/batch")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"items\\":[{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/users/role-assignments/batch \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "items": [\n    {\n      "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "body": {\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      }\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["items": [\n    [\n      "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "body": ["role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"]\n    ]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/users/role-assignments/batch",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "items": [\n    {\n      "id": {\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      },\n      "status": 0,\n      "body": {\n        "id": {\n          "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        },\n        "role": {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "title": {\n            "language": "en-GB",\n            "text": "System Owner"\n          },\n          "type": "PREDEFINED",\n          "scope": "ORGANISATION",\n          "permission_count": 1\n        },\n        "created_at": "2024-01-11T07:41:25.662Z"\n      },\n      "error": {\n        "status": 0,\n        "title": "No user with the given id found",\n        "detail": "User with id <id> was not found. Please ...",\n        "error_code": "USER_NOT_FOUND",\n        "property": "user_id"\n      }\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    items: {
                      type: "array",
                      minItems: 1,
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "object",
                            properties: {
                              user_id: {
                                type: "string",
                                description: "Unique identifier of a user.",
                                format: "uuid",
                              },
                              role_id: {
                                type: "string",
                                description: "Unique identifier of a role.",
                                format: "uuid",
                              },
                            },
                            required: ["user_id", "role_id"],
                          },
                          status: {
                            type: "integer",
                            format: "int32",
                            description:
                              "A well know HTTP status code (e.g. 200, 201, 400).",
                          },
                          body: {
                            type: "object",
                            properties: {
                              id: {
                                type: "object",
                                properties: {
                                  user_id: {
                                    type: "string",
                                    description: "Unique identifier of a user.",
                                    format: "uuid",
                                  },
                                  role_id: {
                                    type: "string",
                                    description: "Unique identifier of a role.",
                                    format: "uuid",
                                  },
                                },
                                required: ["user_id", "role_id"],
                              },
                              role: {
                                type: "object",
                                properties: {
                                  id: {
                                    type: "string",
                                    description: "Unique identifier of a role.",
                                    format: "uuid",
                                  },
                                  title: {
                                    type: "object",
                                    properties: {
                                      language: {
                                        type: "string",
                                        description:
                                          "A locale representing a language and region.",
                                        format: "bcp47",
                                        pattern:
                                          "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                        example: "en-GB",
                                      },
                                      text: {
                                        type: "string",
                                        description: "Title of the Role",
                                        maxLength: 120,
                                        example: "System Owner",
                                      },
                                    },
                                    required: ["language", "text"],
                                  },
                                  type: {
                                    type: "string",
                                    description:
                                      "Distinguishes pre-defined and custom roles",
                                    enum: ["PREDEFINED", "CUSTOM"],
                                  },
                                  scope: {
                                    type: "string",
                                    description:
                                      "The scope describes the context in which a permission is valid.",
                                    enum: [
                                      "ORGANISATION",
                                      "USER_GROUP",
                                      "USER_SELF",
                                    ],
                                  },
                                  permission_count: {
                                    type: "integer",
                                    description:
                                      "The number of permissions configured for the role.",
                                    example: 1,
                                  },
                                },
                                required: [
                                  "id",
                                  "title",
                                  "type",
                                  "scope",
                                  "permission_count",
                                ],
                              },
                              created_at: {
                                type: "string",
                                format: "date-time",
                                description:
                                  "The point in time at which this resource was created.",
                              },
                            },
                            required: [
                              "id",
                              "role",
                              "created_at",
                              "updated_at",
                            ],
                          },
                          error: {
                            type: "object",
                            description:
                              'An RFC 7807 inspired "problem JSON" object.',
                            title: "Problem",
                            properties: {
                              status: {
                                type: "integer",
                                format: "int32",
                                description:
                                  "A well know HTTP status code (e.g. 200, 201, 400).",
                              },
                              title: {
                                type: "string",
                                description:
                                  "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                                example: "No user with the given id found",
                              },
                              detail: {
                                type: "string",
                                description:
                                  "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                                example:
                                  "User with id <id> was not found. Please ...",
                                nullable: true,
                              },
                              error_code: {
                                type: "string",
                                description:
                                  "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                                example: "USER_NOT_FOUND",
                                nullable: true,
                              },
                              property: {
                                type: "string",
                                description:
                                  "The technical property name from the API that caused the problem.",
                                example: "user_id",
                                nullable: true,
                              },
                            },
                            required: ["status", "title"],
                          },
                        },
                        required: ["id", "status"],
                      },
                    },
                  },
                  required: ["items"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "remove-role-from-user-batch",
            title: "Remove multiple role assignments from users",
            description:
              "Remove or or many role assignment from one or many users",
            path: "/api/admin/users/v4/users/role-assignments/batch",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "object",
                          properties: {
                            user_id: {
                              type: "string",
                              description: "Unique identifier of a user.",
                              format: "uuid",
                            },
                            role_id: {
                              type: "string",
                              description: "Unique identifier of a role.",
                              format: "uuid",
                            },
                          },
                          required: ["user_id", "role_id"],
                        },
                      },
                      required: ["id"],
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "object",
                          properties: {
                            user_id: {
                              type: "string",
                              description: "Unique identifier of a user.",
                              format: "uuid",
                            },
                            role_id: {
                              type: "string",
                              description: "Unique identifier of a role.",
                              format: "uuid",
                            },
                          },
                          required: ["user_id", "role_id"],
                        },
                        status: {
                          type: "integer",
                          format: "int32",
                          description:
                            "A well know HTTP status code (e.g. 200, 201, 400).",
                        },
                        error: {
                          type: "object",
                          description:
                            'An RFC 7807 inspired "problem JSON" object.',
                          title: "Problem",
                          properties: {
                            status: {
                              type: "integer",
                              format: "int32",
                              description:
                                "A well know HTTP status code (e.g. 200, 201, 400).",
                            },
                            title: {
                              type: "string",
                              description:
                                "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                              example: "No user with the given id found",
                            },
                            detail: {
                              type: "string",
                              description:
                                "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                              example:
                                "User with id <id> was not found. Please ...",
                              nullable: true,
                            },
                            error_code: {
                              type: "string",
                              description:
                                "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                              example: "USER_NOT_FOUND",
                              nullable: true,
                            },
                            property: {
                              type: "string",
                              description:
                                "The technical property name from the API that caused the problem.",
                              example: "user_id",
                              nullable: true,
                            },
                          },
                          required: ["status", "title"],
                        },
                      },
                      required: ["id", "status"],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"id\\":{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch" {:content-type :json\n                                                                                        :form-params {:items [{:id {:user_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                                    :role_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}\n                                                                                        :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"id\\":{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/role-assignments/batch");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"items\\":[{\\"id\\":{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'DELETE /api/admin/users/v4/users/role-assignments/batch HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 118\r\n\r\n{"items":[{"id":{"user_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch"\n\n\tpayload := strings.NewReader("{\\"items\\":[{\\"id\\":{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}")\n\n\treq, _ := http.NewRequest("DELETE", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"items\\":[{\\"id\\":{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/role-assignments/batch")\n  .delete(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'DELETE',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        id: {\n          user_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n          role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n        }\n      }\n    ]\n  })\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/role-assignments/batch', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"items\\":[{\\"id\\":{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/role-assignments/batch")\n  .delete(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/role-assignments/batch';\nconst options = {\n  method: 'DELETE',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        id: {\n          user_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n          role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n        }\n      }\n    ]\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"items": @[ @{ @"id": @{ @"user_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"role_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6" } } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/role-assignments/batch"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"items\\":[{\\"id\\":{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}" in\n\nClient.call ~headers ~body `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/admin/users/v4/users/role-assignments/batch', [\n  'body' => '{\"items\":[{\"id\":{\"user_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"role_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"}}]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/role-assignments/batch\' -Method DELETE -Headers $headers -ContentType \'application/json\' -Body \'{"items":[{"id":{"user_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch"\n\npayload = {"items": [{"id": {\n                "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n            }}]}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.delete(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch"\n\npayload <- "{\\"items\\":[{\\"id\\":{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}"\n\nencode <- "json"\n\nresponse <- VERB("DELETE", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/users/role-assignments/batch")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"items\\":[{\\"id\\":{\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request DELETE \\\n     --url http://localhost:3000/api/admin/users/v4/users/role-assignments/batch \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "items": [\n    {\n      "id": {\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      }\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["items": [["id": [\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      ]]]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/role-assignments/batch")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/admin/users/v4/users/role-assignments/batch",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "items": [\n    {\n      "id": {\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      },\n      "status": 0,\n      "error": {\n        "status": 0,\n        "title": "No user with the given id found",\n        "detail": "User with id <id> was not found. Please ...",\n        "error_code": "USER_NOT_FOUND",\n        "property": "user_id"\n      }\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    items: {
                      type: "array",
                      minItems: 1,
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "object",
                            properties: {
                              user_id: {
                                type: "string",
                                description: "Unique identifier of a user.",
                                format: "uuid",
                              },
                              role_id: {
                                type: "string",
                                description: "Unique identifier of a role.",
                                format: "uuid",
                              },
                            },
                            required: ["user_id", "role_id"],
                          },
                          status: {
                            type: "integer",
                            format: "int32",
                            description:
                              "A well know HTTP status code (e.g. 200, 201, 400).",
                          },
                          error: {
                            type: "object",
                            description:
                              'An RFC 7807 inspired "problem JSON" object.',
                            title: "Problem",
                            properties: {
                              status: {
                                type: "integer",
                                format: "int32",
                                description:
                                  "A well know HTTP status code (e.g. 200, 201, 400).",
                              },
                              title: {
                                type: "string",
                                description:
                                  "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                                example: "No user with the given id found",
                              },
                              detail: {
                                type: "string",
                                description:
                                  "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                                example:
                                  "User with id <id> was not found. Please ...",
                                nullable: true,
                              },
                              error_code: {
                                type: "string",
                                description:
                                  "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                                example: "USER_NOT_FOUND",
                                nullable: true,
                              },
                              property: {
                                type: "string",
                                description:
                                  "The technical property name from the API that caused the problem.",
                                example: "user_id",
                                nullable: true,
                              },
                            },
                            required: ["status", "title"],
                          },
                        },
                        required: ["id", "status"],
                      },
                    },
                  },
                  required: ["items"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "delete",
          },
          {
            id: "get-assignable-organization-roles",
            title: "List assignable roles",
            description:
              "Returns all organization roles that are assignable to the user.",
            path: "/api/admin/users/v4/users/{user_id}/assignable-roles",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: ["TITLE_ASC", "TITLE_DESC"],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "roles",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a role.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the Role",
                              maxLength: 120,
                              example: "System Owner",
                            },
                          },
                          required: ["language", "text"],
                        },
                        type: {
                          type: "string",
                          description:
                            "Distinguishes pre-defined and custom roles",
                          enum: ["PREDEFINED", "CUSTOM"],
                        },
                        scope: {
                          type: "string",
                          description:
                            "The scope describes the context in which a permission is valid.",
                          enum: ["ORGANISATION", "USER_GROUP", "USER_SELF"],
                        },
                        permission_count: {
                          type: "integer",
                          description:
                            "The number of permissions configured for the role.",
                          example: 1,
                        },
                      },
                      required: [
                        "id",
                        "title",
                        "type",
                        "scope",
                        "permission_count",
                      ],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/users/user_id/assignable-roles HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/assignable-roles")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/users/{user_id}/assignable-roles",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "roles": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "title": {\n        "language": "en-GB",\n        "text": "System Owner"\n      },\n      "type": "PREDEFINED",\n      "scope": "ORGANISATION",\n      "permission_count": 1\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    roles: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "Unique identifier of a role.",
                            format: "uuid",
                          },
                          title: {
                            type: "object",
                            properties: {
                              language: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              text: {
                                type: "string",
                                description: "Title of the Role",
                                maxLength: 120,
                                example: "System Owner",
                              },
                            },
                            required: ["language", "text"],
                          },
                          type: {
                            type: "string",
                            description:
                              "Distinguishes pre-defined and custom roles",
                            enum: ["PREDEFINED", "CUSTOM"],
                          },
                          scope: {
                            type: "string",
                            description:
                              "The scope describes the context in which a permission is valid.",
                            enum: ["ORGANISATION", "USER_GROUP", "USER_SELF"],
                          },
                          permission_count: {
                            type: "integer",
                            description:
                              "The number of permissions configured for the role.",
                            example: 1,
                          },
                        },
                        required: [
                          "id",
                          "title",
                          "type",
                          "scope",
                          "permission_count",
                        ],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["roles", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-user-roles",
            title: "List assigned organisation roles for user",
            description:
              "Returns all organisation roles that are assigned to the user",
            path: "/api/admin/users/v4/users/{user_id}/role-assignments",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: ["TITLE_ASC", "TITLE_DESC"],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "assignments",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "object",
                          properties: {
                            user_id: {
                              type: "string",
                              description: "Unique identifier of a user.",
                              format: "uuid",
                            },
                            role_id: {
                              type: "string",
                              description: "Unique identifier of a role.",
                              format: "uuid",
                            },
                          },
                          required: ["user_id", "role_id"],
                        },
                        role: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "Unique identifier of a role.",
                              format: "uuid",
                            },
                            title: {
                              type: "object",
                              properties: {
                                language: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                text: {
                                  type: "string",
                                  description: "Title of the Role",
                                  maxLength: 120,
                                  example: "System Owner",
                                },
                              },
                              required: ["language", "text"],
                            },
                            type: {
                              type: "string",
                              description:
                                "Distinguishes pre-defined and custom roles",
                              enum: ["PREDEFINED", "CUSTOM"],
                            },
                            scope: {
                              type: "string",
                              description:
                                "The scope describes the context in which a permission is valid.",
                              enum: ["ORGANISATION", "USER_GROUP", "USER_SELF"],
                            },
                            permission_count: {
                              type: "integer",
                              description:
                                "The number of permissions configured for the role.",
                              example: 1,
                            },
                          },
                          required: [
                            "id",
                            "title",
                            "type",
                            "scope",
                            "permission_count",
                          ],
                        },
                        created_at: {
                          type: "string",
                          format: "date-time",
                          description:
                            "The point in time at which this resource was created.",
                        },
                      },
                      required: ["id", "role", "created_at", "updated_at"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/users/user_id/role-assignments HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/users/{user_id}/role-assignments",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "assignments": [\n    {\n      "id": {\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      },\n      "role": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "title": {\n          "language": "en-GB",\n          "text": "System Owner"\n        },\n        "type": "PREDEFINED",\n        "scope": "ORGANISATION",\n        "permission_count": 1\n      },\n      "created_at": "2024-01-11T07:41:25.662Z"\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    assignments: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "object",
                            properties: {
                              user_id: {
                                type: "string",
                                description: "Unique identifier of a user.",
                                format: "uuid",
                              },
                              role_id: {
                                type: "string",
                                description: "Unique identifier of a role.",
                                format: "uuid",
                              },
                            },
                            required: ["user_id", "role_id"],
                          },
                          role: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description: "Unique identifier of a role.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the Role",
                                    maxLength: 120,
                                    example: "System Owner",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              type: {
                                type: "string",
                                description:
                                  "Distinguishes pre-defined and custom roles",
                                enum: ["PREDEFINED", "CUSTOM"],
                              },
                              scope: {
                                type: "string",
                                description:
                                  "The scope describes the context in which a permission is valid.",
                                enum: [
                                  "ORGANISATION",
                                  "USER_GROUP",
                                  "USER_SELF",
                                ],
                              },
                              permission_count: {
                                type: "integer",
                                description:
                                  "The number of permissions configured for the role.",
                                example: 1,
                              },
                            },
                            required: [
                              "id",
                              "title",
                              "type",
                              "scope",
                              "permission_count",
                            ],
                          },
                          created_at: {
                            type: "string",
                            format: "date-time",
                            description:
                              "The point in time at which this resource was created.",
                          },
                        },
                        required: ["id", "role", "created_at", "updated_at"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["assignments", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "assign-role-to-user",
            title: "Assign organisation role to user",
            description: "Assigns an organisation role to the user",
            path: "/api/admin/users/v4/users/{user_id}/role-assignments",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "role_id",
                    type: "string",
                    description: "Unique identifier of a role.",
                    required: true,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "201",
                parameters: [
                  {
                    name: "id",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "user_id",
                        type: "string",
                        description: "Unique identifier of a user.",
                        required: false,
                      },
                      {
                        name: "role_id",
                        type: "string",
                        description: "Unique identifier of a role.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "role",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "Unique identifier of a role.",
                        required: false,
                      },
                      {
                        name: "title",
                        type: "object",
                        description: "",
                        required: ["language", "text"],
                        properties: [
                          {
                            name: "language",
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            required: false,
                          },
                          {
                            name: "text",
                            type: "string",
                            description: "Title of the Role",
                            required: false,
                          },
                        ],
                      },
                      {
                        name: "type",
                        type: "string",
                        description:
                          "Distinguishes pre-defined and custom roles",
                        required: false,
                      },
                      {
                        name: "scope",
                        type: "string",
                        description:
                          "The scope describes the context in which a permission is valid.",
                        required: false,
                      },
                      {
                        name: "permission_count",
                        type: "integer",
                        description:
                          "The number of permissions configured for the role.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description:
                      "The point in time at which this resource was created.",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments" {:content-type :json\n                                                                                        :form-params {:role_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"}\n                                                                                        :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/users/v4/users/user_id/role-assignments HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 50\r\n\r\n{"role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments"\n\n\tpayload := strings.NewReader("{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'})\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"role_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments', [\n  'body' => '{\"role_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments"\n\npayload = {"role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments"\n\npayload <- "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"role_id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\"\n}\n'",
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/users/{user_id}/role-assignments",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "201":
                '{\n  "id": {\n    "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n  },\n  "role": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "title": {\n      "language": "en-GB",\n      "text": "System Owner"\n    },\n    "type": "PREDEFINED",\n    "scope": "ORGANISATION",\n    "permission_count": 1\n  },\n  "created_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "object",
                      properties: {
                        user_id: {
                          type: "string",
                          description: "Unique identifier of a user.",
                          format: "uuid",
                        },
                        role_id: {
                          type: "string",
                          description: "Unique identifier of a role.",
                          format: "uuid",
                        },
                      },
                      required: ["user_id", "role_id"],
                    },
                    role: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a role.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the Role",
                              maxLength: 120,
                              example: "System Owner",
                            },
                          },
                          required: ["language", "text"],
                        },
                        type: {
                          type: "string",
                          description:
                            "Distinguishes pre-defined and custom roles",
                          enum: ["PREDEFINED", "CUSTOM"],
                        },
                        scope: {
                          type: "string",
                          description:
                            "The scope describes the context in which a permission is valid.",
                          enum: ["ORGANISATION", "USER_GROUP", "USER_SELF"],
                        },
                        permission_count: {
                          type: "integer",
                          description:
                            "The number of permissions configured for the role.",
                          example: 1,
                        },
                      },
                      required: [
                        "id",
                        "title",
                        "type",
                        "scope",
                        "permission_count",
                      ],
                    },
                    created_at: {
                      type: "string",
                      format: "date-time",
                      description:
                        "The point in time at which this resource was created.",
                    },
                  },
                  required: ["id", "role", "created_at", "updated_at"],
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "remove-role-from-user",
            title: "Remove organisation role assignment from user",
            description: "Remove an organisation role from the user",
            path: "/api/admin/users/v4/users/{user_id}/role-assignments/{role_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                  {
                    name: "role_id",
                    type: "string",
                    description: "Unique identifier of a role.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "204", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/admin/users/v4/users/user_id/role-assignments/role_id HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE'};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id")\n  .delete(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id';\nconst options = {method: 'DELETE'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id' -Method DELETE",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id"\n\nresponse = requests.delete(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/role-assignments/role_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/admin/users/v4/users/{user_id}/role-assignments/{role_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "204" }],
            security: [{ bearer: [] }],
            method: "delete",
          },
        ],
      },
      {
        id: "linked-identity",
        title: "Linked Identity",
        shortDescription: "",
        endpoints: [
          {
            id: "get-linkable-identity-providers",
            title: "List linkable identity providers",
            description:
              "Provides a list of configured identity providers that can be linked to a user.",
            path: "/api/admin/users/v4/users/identity-providers",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "providers",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      description: "ID and display name of identity provider",
                      type: "object",
                      properties: {
                        active: {
                          type: "boolean",
                          description:
                            "true if the identity provider can be used to perform a login.",
                        },
                        id: {
                          description:
                            "Identifier of the linked identity provider.",
                          type: "string",
                        },
                        name: { type: "string" },
                      },
                      required: ["active", "id", "name"],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/identity-providers");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/users/identity-providers" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/identity-providers");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/identity-providers");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/users/identity-providers HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/identity-providers"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/identity-providers")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/identity-providers', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/identity-providers")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/identity-providers';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/identity-providers"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/identity-providers" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/users/identity-providers', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/identity-providers\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/identity-providers"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/identity-providers"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/identity-providers\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/users/identity-providers \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/identity-providers")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/users/identity-providers",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "providers": [\n    {\n      "active": true,\n      "id": "string",\n      "name": "string"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    providers: {
                      type: "array",
                      items: {
                        description: "ID and display name of identity provider",
                        type: "object",
                        properties: {
                          active: {
                            type: "boolean",
                            description:
                              "true if the identity provider can be used to perform a login.",
                          },
                          id: {
                            description:
                              "Identifier of the linked identity provider.",
                            type: "string",
                          },
                          name: { type: "string" },
                        },
                        required: ["active", "id", "name"],
                      },
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-linked-identities",
            title: "List linked identities for user",
            description:
              "Lists all identities of a remote identity provider linked to a user.",
            path: "/api/admin/users/v4/users/{user_id}/linked-identities",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        provider: {
                          description:
                            "ID and display name of identity provider",
                          type: "object",
                          properties: {
                            active: {
                              type: "boolean",
                              description:
                                "true if the identity provider can be used to perform a login.",
                            },
                            id: {
                              description:
                                "Identifier of the linked identity provider.",
                              type: "string",
                            },
                            name: { type: "string" },
                          },
                          required: ["active", "id", "name"],
                        },
                        linked_user_id: {
                          description:
                            "Identifier of the user in the linked identity provider.",
                          type: "string",
                        },
                        linked_username: {
                          description:
                            "Username of the user in the linked identity provider.",
                          type: "string",
                        },
                      },
                      required: [
                        "provider",
                        "linked_user_id",
                        "linked_username",
                      ],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/users/user_id/linked-identities HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/users/{user_id}/linked-identities",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "items": [\n    {\n      "provider": {\n        "active": true,\n        "id": "string",\n        "name": "string"\n      },\n      "linked_user_id": "string",\n      "linked_username": "string"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    items: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          provider: {
                            description:
                              "ID and display name of identity provider",
                            type: "object",
                            properties: {
                              active: {
                                type: "boolean",
                                description:
                                  "true if the identity provider can be used to perform a login.",
                              },
                              id: {
                                description:
                                  "Identifier of the linked identity provider.",
                                type: "string",
                              },
                              name: { type: "string" },
                            },
                            required: ["active", "id", "name"],
                          },
                          linked_user_id: {
                            description:
                              "Identifier of the user in the linked identity provider.",
                            type: "string",
                          },
                          linked_username: {
                            description:
                              "Username of the user in the linked identity provider.",
                            type: "string",
                          },
                        },
                        required: [
                          "provider",
                          "linked_user_id",
                          "linked_username",
                        ],
                      },
                    },
                  },
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "create-linked-identity",
            title: "Link identity to user",
            description:
              "Links an identity of a remote identity provider to a user.",
            path: "/api/admin/users/v4/users/{user_id}/linked-identities",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: ["INVALID_IDENTITY_PROVIDER"],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "provider_id",
                    type: "string",
                    description: "Identifier of the linked identity provider.",
                    required: true,
                  },
                  {
                    name: "linked_user_id",
                    type: "string",
                    description:
                      "Identifier of the user in the linked identity provider.",
                    required: true,
                  },
                  {
                    name: "linked_username",
                    type: "string",
                    description:
                      "Username of the user in the linked identity provider.",
                    required: true,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "provider",
                    type: "object",
                    description: "ID and display name of identity provider",
                    required: true,
                    properties: [
                      {
                        name: "active",
                        type: "boolean",
                        description:
                          "true if the identity provider can be used to perform a login.",
                        required: false,
                      },
                      {
                        name: "id",
                        type: "string",
                        description:
                          "Identifier of the linked identity provider.",
                        required: false,
                      },
                      {
                        name: "name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "linked_user_id",
                    type: "string",
                    description:
                      "Identifier of the user in the linked identity provider.",
                    required: true,
                  },
                  {
                    name: "linked_username",
                    type: "string",
                    description:
                      "Username of the user in the linked identity provider.",
                    required: true,
                  },
                ],
                type: "response",
              },
              {
                title: "201",
                parameters: [
                  {
                    name: "provider",
                    type: "object",
                    description: "ID and display name of identity provider",
                    required: true,
                    properties: [
                      {
                        name: "active",
                        type: "boolean",
                        description:
                          "true if the identity provider can be used to perform a login.",
                        required: false,
                      },
                      {
                        name: "id",
                        type: "string",
                        description:
                          "Identifier of the linked identity provider.",
                        required: false,
                      },
                      {
                        name: "name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "linked_user_id",
                    type: "string",
                    description:
                      "Identifier of the user in the linked identity provider.",
                    required: true,
                  },
                  {
                    name: "linked_username",
                    type: "string",
                    description:
                      "Username of the user in the linked identity provider.",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"provider_id\\":\\"string\\",\\"linked_user_id\\":\\"string\\",\\"linked_username\\":\\"string\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities" {:content-type :json\n                                                                                         :form-params {:provider_id "string"\n                                                                                                       :linked_user_id "string"\n                                                                                                       :linked_username "string"}\n                                                                                         :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"provider_id\\":\\"string\\",\\"linked_user_id\\":\\"string\\",\\"linked_username\\":\\"string\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"provider_id\\":\\"string\\",\\"linked_user_id\\":\\"string\\",\\"linked_username\\":\\"string\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/users/v4/users/user_id/linked-identities HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 77\r\n\r\n{"provider_id":"string","linked_user_id":"string","linked_username":"string"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities"\n\n\tpayload := strings.NewReader("{\\"provider_id\\":\\"string\\",\\"linked_user_id\\":\\"string\\",\\"linked_username\\":\\"string\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"provider_id\\":\\"string\\",\\"linked_user_id\\":\\"string\\",\\"linked_username\\":\\"string\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({provider_id: 'string', linked_user_id: 'string', linked_username: 'string'})\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"provider_id\\":\\"string\\",\\"linked_user_id\\":\\"string\\",\\"linked_username\\":\\"string\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({provider_id: 'string', linked_user_id: 'string', linked_username: 'string'})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"provider_id": @"string",\n                              @"linked_user_id": @"string",\n                              @"linked_username": @"string" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"provider_id\\":\\"string\\",\\"linked_user_id\\":\\"string\\",\\"linked_username\\":\\"string\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities', [\n  'body' => '{\"provider_id\":\"string\",\"linked_user_id\":\"string\",\"linked_username\":\"string\"}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"provider_id":"string","linked_user_id":"string","linked_username":"string"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities"\n\npayload = {\n    "provider_id": "string",\n    "linked_user_id": "string",\n    "linked_username": "string"\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities"\n\npayload <- "{\\"provider_id\\":\\"string\\",\\"linked_user_id\\":\\"string\\",\\"linked_username\\":\\"string\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"provider_id\\":\\"string\\",\\"linked_user_id\\":\\"string\\",\\"linked_username\\":\\"string\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "provider_id": "string",\n  "linked_user_id": "string",\n  "linked_username": "string"\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "provider_id": "string",\n  "linked_user_id": "string",\n  "linked_username": "string"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/users/{user_id}/linked-identities",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "provider": {\n    "active": true,\n    "id": "string",\n    "name": "string"\n  },\n  "linked_user_id": "string",\n  "linked_username": "string"\n}',
              "201":
                '{\n  "provider": {\n    "active": true,\n    "id": "string",\n    "name": "string"\n  },\n  "linked_user_id": "string",\n  "linked_username": "string"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    provider: {
                      description: "ID and display name of identity provider",
                      type: "object",
                      properties: {
                        active: {
                          type: "boolean",
                          description:
                            "true if the identity provider can be used to perform a login.",
                        },
                        id: {
                          description:
                            "Identifier of the linked identity provider.",
                          type: "string",
                        },
                        name: { type: "string" },
                      },
                      required: ["active", "id", "name"],
                    },
                    linked_user_id: {
                      description:
                        "Identifier of the user in the linked identity provider.",
                      type: "string",
                    },
                    linked_username: {
                      description:
                        "Username of the user in the linked identity provider.",
                      type: "string",
                    },
                  },
                  required: ["provider", "linked_user_id", "linked_username"],
                },
                statusCode: "200",
              },
              {
                schema: {
                  type: "object",
                  properties: {
                    provider: {
                      description: "ID and display name of identity provider",
                      type: "object",
                      properties: {
                        active: {
                          type: "boolean",
                          description:
                            "true if the identity provider can be used to perform a login.",
                        },
                        id: {
                          description:
                            "Identifier of the linked identity provider.",
                          type: "string",
                        },
                        name: { type: "string" },
                      },
                      required: ["active", "id", "name"],
                    },
                    linked_user_id: {
                      description:
                        "Identifier of the user in the linked identity provider.",
                      type: "string",
                    },
                    linked_username: {
                      description:
                        "Username of the user in the linked identity provider.",
                      type: "string",
                    },
                  },
                  required: ["provider", "linked_user_id", "linked_username"],
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "delete-linked-identity",
            title: "Delete linked identity",
            description:
              "Deletes a linked identity of a remote identity provider from a user.",
            path: "/api/admin/users/v4/users/{user_id}/linked-identities/{provider_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                  {
                    name: "provider_id",
                    type: "string",
                    description: "Identifier of the linked identity provider.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "200", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/admin/users/v4/users/user_id/linked-identities/provider_id HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE'};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id")\n  .delete(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id';\nconst options = {method: 'DELETE'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id' -Method DELETE",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id"\n\nresponse = requests.delete(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/linked-identities/provider_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/admin/users/v4/users/{user_id}/linked-identities/{provider_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "200" }],
            security: [{ bearer: [] }],
            method: "delete",
          },
        ],
      },
      {
        id: "one-time-password",
        title: "One Time Password",
        shortDescription: "",
        endpoints: [
          {
            id: "has-otp",
            title: "Check OTP configuration",
            description: "Checks if OTP is configured for a user.",
            path: "/api/admin/users/v4/users/{user_id}/otp",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              { title: "204", parameters: [], type: "response" },
              { title: "404", parameters: [], type: "response" },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/otp");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/users/user_id/otp")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/otp");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/otp");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/users/user_id/otp HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/otp"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/otp")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET'};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/otp', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/otp")\n  .get()\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/otp';\nconst options = {method: 'GET'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/otp"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/otp" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/users/user_id/otp');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/admin/users/v4/users/user_id/otp' -Method GET",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/otp"\n\nresponse = requests.get(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/otp"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id/otp\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/otp",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/otp")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/users/{user_id}/otp",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [
              { schema: null, statusCode: "204" },
              { schema: null, statusCode: "404" },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "delete-otp",
            title: "Delete OTP",
            description:
              "Allows an admin user to remove the OTP configured for a user. The user needs to set a new OTP on the next login.'",
            path: "/api/admin/users/v4/users/{user_id}/otp",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "204", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/otp");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/admin/users/v4/users/user_id/otp")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/otp");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/otp");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/admin/users/v4/users/user_id/otp HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/otp"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/otp")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE'};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/otp', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/otp")\n  .delete(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/otp';\nconst options = {method: 'DELETE'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/otp"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/otp" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/admin/users/v4/users/user_id/otp');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/admin/users/v4/users/user_id/otp' -Method DELETE",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/otp"\n\nresponse = requests.delete(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/otp"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id/otp\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/otp",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/otp")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/admin/users/v4/users/{user_id}/otp",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "204" }],
            security: [{ bearer: [] }],
            method: "delete",
          },
        ],
      },
      {
        id: "password",
        title: "Password",
        shortDescription: "",
        endpoints: [
          {
            id: "has-password",
            title: "Check password configuration",
            description: "Checks if a password is configured for a user.",
            path: "/api/admin/users/v4/users/{user_id}/password",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              { title: "204", parameters: [], type: "response" },
              { title: "404", parameters: [], type: "response" },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/password");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/users/user_id/password")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/password");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/password");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/users/user_id/password HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/password"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/password")\n  .get()\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET'};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/password', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/password")\n  .get()\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/password';\nconst options = {method: 'GET'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/password"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/password" in\n\nClient.call `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/users/user_id/password');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/admin/users/v4/users/user_id/password' -Method GET",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/password"\n\nresponse = requests.get(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/password"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id/password\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/password",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/password")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/users/{user_id}/password",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [
              { schema: null, statusCode: "204" },
              { schema: null, statusCode: "404" },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "change-password",
            title: "Reset password",
            description:
              "Allows an admin user to set a new password for a user.",
            path: "/api/admin/users/v4/users/{user_id}/password",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "WRONG_PASSWORD",
              "PASSWORD_POLICY_NOT_RESPECTED",
              "PASSWORD_HISTORY_POLICY_NOT_RESPECTED",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "password",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "temporary",
                    type: "boolean",
                    description: "",
                    required: false,
                  },
                ],
              },
            ],
            responseBody: [{ title: "204", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/password");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"password\\":\\"string\\",\\"temporary\\":true}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/users/user_id/password" {:content-type :json\n                                                                                :form-params {:password "string"\n                                                                                              :temporary true}})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/password");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"password\\":\\"string\\",\\"temporary\\":true}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/password");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"password\\":\\"string\\",\\"temporary\\":true}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/users/v4/users/user_id/password HTTP/1.1\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 38\r\n\r\n{"password":"string","temporary":true}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/password"\n\n\tpayload := strings.NewReader("{\\"password\\":\\"string\\",\\"temporary\\":true}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"password\\":\\"string\\",\\"temporary\\":true}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/password")\n  .post(body)\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {'content-type': 'application/json'},\n  body: JSON.stringify({password: 'string', temporary: true})\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/password', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"password\\":\\"string\\",\\"temporary\\":true}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/password")\n  .post(body)\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/password';\nconst options = {\n  method: 'POST',\n  headers: {'content-type': 'application/json'},\n  body: JSON.stringify({password: 'string', temporary: true})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"password": @"string",\n                              @"temporary": @YES };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/password"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/password" in\nlet headers = Header.add (Header.init ()) "content-type" "application/json" in\nlet body = Cohttp_lwt_body.of_string "{\\"password\\":\\"string\\",\\"temporary\\":true}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/users/user_id/password', [\n  'body' => '{\"password\":\"string\",\"temporary\":true}',\n  'headers' => [\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/user_id/password\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"password":"string","temporary":true}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/password"\n\npayload = {\n    "password": "string",\n    "temporary": True\n}\nheaders = {"content-type": "application/json"}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/password"\n\npayload <- "{\\"password\\":\\"string\\",\\"temporary\\":true}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/users/user_id/password")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"password\\":\\"string\\",\\"temporary\\":true}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/password \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "password": "string",\n  "temporary": true\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = ["content-type": "application/json"]\nlet parameters = [\n  "password": "string",\n  "temporary": true\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/password")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "content-type", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/users/{user_id}/password",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "204" }],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "delete-password",
            title: "Delete password",
            description:
              "Allows an admin user to remove the password configured for a user. The user can no longer log-in via its credentials afterwards.'",
            path: "/api/admin/users/v4/users/{user_id}/password",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "204", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/password");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/admin/users/v4/users/user_id/password")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/password");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/password");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/admin/users/v4/users/user_id/password HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/password"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/password")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE'};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/password', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/password")\n  .delete(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/password';\nconst options = {method: 'DELETE'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/password"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/password" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/admin/users/v4/users/user_id/password');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/admin/users/v4/users/user_id/password' -Method DELETE",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/password"\n\nresponse = requests.delete(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/password"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/users/user_id/password\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/password",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/password")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/admin/users/v4/users/{user_id}/password",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "204" }],
            security: [{ bearer: [] }],
            method: "delete",
          },
        ],
      },
      {
        id: "account-actions-email",
        title: "Account Actions Email",
        shortDescription: "",
        endpoints: [
          {
            id: "send-account-actions-emails-batch",
            title: "Send multiple account actions emails",
            description:
              "Sends emails to multiple users requesting one or multiple account actions.\nEndpoint-specific error codes on each result equal those defined for corresponding single operation.'",
            path: "/api/admin/users/v4/users/account-actions-email/batch",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: ["USER_IS_LOCKED", "USER_HAS_NO_EMAIL_ADDRESS"],
            parameters: [],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user.",
                          format: "uuid",
                        },
                        body: {
                          type: "object",
                          properties: {
                            actions: {
                              type: "array",
                              items: {
                                type: "string",
                                enum: [
                                  "ACCEPT_TERMS_AND_CONDITIONS",
                                  "UPDATE_PASSWORD",
                                  "VERIFY_EMAIL",
                                ],
                              },
                            },
                            validity_minutes: {
                              description:
                                "Minutes that the link in the email should be valid for",
                              minimum: 1,
                              maximum: 43200,
                              type: "integer",
                            },
                          },
                          required: ["actions", "validity_minutes"],
                        },
                      },
                      required: ["id", "body"],
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user.",
                          format: "uuid",
                        },
                        status: {
                          type: "integer",
                          format: "int32",
                          description:
                            "A well know HTTP status code (e.g. 200, 201, 400).",
                        },
                        error: {
                          type: "object",
                          description:
                            'An RFC 7807 inspired "problem JSON" object.',
                          title: "Problem",
                          properties: {
                            status: {
                              type: "integer",
                              format: "int32",
                              description:
                                "A well know HTTP status code (e.g. 200, 201, 400).",
                            },
                            title: {
                              type: "string",
                              description:
                                "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                              example: "No user with the given id found",
                            },
                            detail: {
                              type: "string",
                              description:
                                "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                              example:
                                "User with id <id> was not found. Please ...",
                              nullable: true,
                            },
                            error_code: {
                              type: "string",
                              description:
                                "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                              example: "USER_NOT_FOUND",
                              nullable: true,
                            },
                            property: {
                              type: "string",
                              description:
                                "The technical property name from the API that caused the problem.",
                              example: "user_id",
                              nullable: true,
                            },
                          },
                          required: ["status", "title"],
                        },
                      },
                      required: ["id", "status"],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch" {:content-type :json\n                                                                                           :form-params {:items [{:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                                  :body {:actions ["ACCEPT_TERMS_AND_CONDITIONS"]\n                                                                                                                         :validity_minutes 0}}]}\n                                                                                           :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/users/v4/users/account-actions-email/batch HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 129\r\n\r\n{"items":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","body":{"actions":["ACCEPT_TERMS_AND_CONDITIONS"],"validity_minutes":0}}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch"\n\n\tpayload := strings.NewReader("{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}}]}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n        body: JSON.stringify({actions: ['ACCEPT_TERMS_AND_CONDITIONS'], validity_minutes: 0})\n      }\n    ]\n  })\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n        body: JSON.stringify({actions: ['ACCEPT_TERMS_AND_CONDITIONS'], validity_minutes: 0})\n      }\n    ]\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"items": @[ @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"body": @{ @"actions": @[ @"ACCEPT_TERMS_AND_CONDITIONS" ], @"validity_minutes": @0 } } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}}]}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch', [\n  'body' => '{\"items\":[{\"id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"body\":{\"actions\":[\"ACCEPT_TERMS_AND_CONDITIONS\"],\"validity_minutes\":0}}]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"items":[{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","body":{"actions":["ACCEPT_TERMS_AND_CONDITIONS"],"validity_minutes":0}}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch"\n\npayload = {"items": [\n        {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "body": {\n                "actions": ["ACCEPT_TERMS_AND_CONDITIONS"],\n                "validity_minutes": 0\n            }\n        }\n    ]}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch"\n\npayload <- "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}}]}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"items\\":[{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "items": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "body": {\n        "actions": [\n          "ACCEPT_TERMS_AND_CONDITIONS"\n        ],\n        "validity_minutes": 0\n      }\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["items": [\n    [\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "body": [\n        "actions": ["ACCEPT_TERMS_AND_CONDITIONS"],\n        "validity_minutes": 0\n      ]\n    ]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/account-actions-email/batch")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/users/account-actions-email/batch",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "items": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "status": 0,\n      "error": {\n        "status": 0,\n        "title": "No user with the given id found",\n        "detail": "User with id <id> was not found. Please ...",\n        "error_code": "USER_NOT_FOUND",\n        "property": "user_id"\n      }\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    items: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "Unique identifier of a user.",
                            format: "uuid",
                          },
                          status: {
                            type: "integer",
                            format: "int32",
                            description:
                              "A well know HTTP status code (e.g. 200, 201, 400).",
                          },
                          error: {
                            type: "object",
                            description:
                              'An RFC 7807 inspired "problem JSON" object.',
                            title: "Problem",
                            properties: {
                              status: {
                                type: "integer",
                                format: "int32",
                                description:
                                  "A well know HTTP status code (e.g. 200, 201, 400).",
                              },
                              title: {
                                type: "string",
                                description:
                                  "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                                example: "No user with the given id found",
                              },
                              detail: {
                                type: "string",
                                description:
                                  "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                                example:
                                  "User with id <id> was not found. Please ...",
                                nullable: true,
                              },
                              error_code: {
                                type: "string",
                                description:
                                  "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                                example: "USER_NOT_FOUND",
                                nullable: true,
                              },
                              property: {
                                type: "string",
                                description:
                                  "The technical property name from the API that caused the problem.",
                                example: "user_id",
                                nullable: true,
                              },
                            },
                            required: ["status", "title"],
                          },
                        },
                        required: ["id", "status"],
                      },
                    },
                  },
                  required: ["items"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "send-account-actions-email",
            title: "Send account actions email",
            description:
              "Sends an email to a user requesting one or multiple account actions.",
            path: "/api/admin/users/v4/users/{user_id}/account-actions-email",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: ["USER_IS_LOCKED", "USER_HAS_NO_EMAIL_ADDRESS"],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "actions",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "string",
                      enum: [
                        "ACCEPT_TERMS_AND_CONDITIONS",
                        "UPDATE_PASSWORD",
                        "VERIFY_EMAIL",
                      ],
                    },
                  },
                  {
                    name: "validity_minutes",
                    type: "integer",
                    description:
                      "Minutes that the link in the email should be valid for",
                    required: true,
                  },
                ],
              },
            ],
            responseBody: [{ title: "204", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email" {:content-type :json\n                                                                                             :form-params {:actions ["ACCEPT_TERMS_AND_CONDITIONS"]\n                                                                                                           :validity_minutes 0}})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/users/v4/users/user_id/account-actions-email HTTP/1.1\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 64\r\n\r\n{"actions":["ACCEPT_TERMS_AND_CONDITIONS"],"validity_minutes":0}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email"\n\n\tpayload := strings.NewReader("{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email")\n  .post(body)\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {'content-type': 'application/json'},\n  body: JSON.stringify({actions: ['ACCEPT_TERMS_AND_CONDITIONS'], validity_minutes: 0})\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email")\n  .post(body)\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email';\nconst options = {\n  method: 'POST',\n  headers: {'content-type': 'application/json'},\n  body: JSON.stringify({actions: ['ACCEPT_TERMS_AND_CONDITIONS'], validity_minutes: 0})\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"actions": @[ @"ACCEPT_TERMS_AND_CONDITIONS" ],\n                              @"validity_minutes": @0 };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email" in\nlet headers = Header.add (Header.init ()) "content-type" "application/json" in\nlet body = Cohttp_lwt_body.of_string "{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email', [\n  'body' => '{\"actions\":[\"ACCEPT_TERMS_AND_CONDITIONS\"],\"validity_minutes\":0}',\n  'headers' => [\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"actions":["ACCEPT_TERMS_AND_CONDITIONS"],"validity_minutes":0}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email"\n\npayload = {\n    "actions": ["ACCEPT_TERMS_AND_CONDITIONS"],\n    "validity_minutes": 0\n}\nheaders = {"content-type": "application/json"}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email"\n\npayload <- "{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"actions\\":[\\"ACCEPT_TERMS_AND_CONDITIONS\\"],\\"validity_minutes\\":0}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "actions": [\n    "ACCEPT_TERMS_AND_CONDITIONS"\n  ],\n  "validity_minutes": 0\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = ["content-type": "application/json"]\nlet parameters = [\n  "actions": ["ACCEPT_TERMS_AND_CONDITIONS"],\n  "validity_minutes": 0\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/users/user_id/account-actions-email")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "content-type", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/users/{user_id}/account-actions-email",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "204" }],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
      {
        id: "user-groups",
        title: "User Groups",
        shortDescription: "",
        endpoints: [
          {
            id: "search-user-groups",
            title: "List user groups",
            description: "List and search user groups.",
            path: "/api/admin/users/v4/user-groups",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs to match in the user group name, description or external id.",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "GROUP_NAME_ASC",
                        "GROUP_NAME_DESC",
                        "STATUS_ASC",
                        "STATUS_DESC",
                        "UPDATED_AT_ASC",
                        "UPDATED_AT_DESC",
                        "CREATED_AT_ASC",
                        "CREATED_AT_DESC",
                      ],
                    },
                  },
                  {
                    name: "parent_candidates_for",
                    type: "string",
                    description:
                      "Filter user groups applicable as parent for given user group.",
                    required: false,
                  },
                  {
                    name: "parent_id",
                    type: "string",
                    description:
                      "Filter user groups by given parent user group id. Can be used to get all child user groups of the given user group.",
                    required: false,
                  },
                  {
                    name: "type",
                    type: "string",
                    description: "Filter by  user group type",
                    required: false,
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "Filter user groups by user groups status",
                    required: false,
                  },
                  {
                    name: "embed",
                    type: "array",
                    description:
                      "Embed related resources and more details in the response.",
                    required: false,
                    items: {
                      type: "string",
                      enum: ["number_of_contained_users", "path"],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "groups",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                        type: {
                          type: "string",
                          enum: ["ROOT", "ALL_USERS", "CUSTOM"],
                        },
                        path: {
                          type: "array",
                          description:
                            "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                          items: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the User Group",
                                    maxLength: 120,
                                    example: "Marketing",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              status: {
                                type: "string",
                                enum: ["ACTIVE", "ARCHIVED"],
                              },
                            },
                            required: ["id", "title", "status"],
                          },
                        },
                        parent_id: {
                          type: "string",
                          description:
                            "Unique identifier of a user group. Can only be null in case of the pre-defined root user group.",
                          format: "uuid",
                          nullable: true,
                        },
                        number_of_contained_users: {
                          type: "integer",
                          description:
                            "The total number of assigned users in this and all nested user groups.",
                          minimum: 0,
                        },
                        created_at: { type: "string", format: "date-time" },
                        updated_at: { type: "string", format: "date-time" },
                      },
                      required: [
                        "id",
                        "title",
                        "status",
                        "type",
                        "created_at",
                        "updated_at",
                      ],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/user-groups" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/user-groups HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/user-groups', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/user-groups",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "groups": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "title": {\n        "language": "en-GB",\n        "text": "Marketing"\n      },\n      "status": "ACTIVE",\n      "type": "ROOT",\n      "path": [\n        {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "title": {\n            "language": "en-GB",\n            "text": "Marketing"\n          },\n          "status": "ACTIVE"\n        }\n      ],\n      "parent_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "number_of_contained_users": 0,\n      "created_at": "2024-01-11T07:41:25.662Z",\n      "updated_at": "2024-01-11T07:41:25.662Z"\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    groups: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "Unique identifier of a user group.",
                            format: "uuid",
                          },
                          title: {
                            type: "object",
                            properties: {
                              language: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              text: {
                                type: "string",
                                description: "Title of the User Group",
                                maxLength: 120,
                                example: "Marketing",
                              },
                            },
                            required: ["language", "text"],
                          },
                          status: {
                            type: "string",
                            enum: ["ACTIVE", "ARCHIVED"],
                          },
                          type: {
                            type: "string",
                            enum: ["ROOT", "ALL_USERS", "CUSTOM"],
                          },
                          path: {
                            type: "array",
                            description:
                              "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                            items: {
                              type: "object",
                              properties: {
                                id: {
                                  type: "string",
                                  description:
                                    "Unique identifier of a user group.",
                                  format: "uuid",
                                },
                                title: {
                                  type: "object",
                                  properties: {
                                    language: {
                                      type: "string",
                                      description:
                                        "A locale representing a language and region.",
                                      format: "bcp47",
                                      pattern:
                                        "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                      example: "en-GB",
                                    },
                                    text: {
                                      type: "string",
                                      description: "Title of the User Group",
                                      maxLength: 120,
                                      example: "Marketing",
                                    },
                                  },
                                  required: ["language", "text"],
                                },
                                status: {
                                  type: "string",
                                  enum: ["ACTIVE", "ARCHIVED"],
                                },
                              },
                              required: ["id", "title", "status"],
                            },
                          },
                          parent_id: {
                            type: "string",
                            description:
                              "Unique identifier of a user group. Can only be null in case of the pre-defined root user group.",
                            format: "uuid",
                            nullable: true,
                          },
                          number_of_contained_users: {
                            type: "integer",
                            description:
                              "The total number of assigned users in this and all nested user groups.",
                            minimum: 0,
                          },
                          created_at: { type: "string", format: "date-time" },
                          updated_at: { type: "string", format: "date-time" },
                        },
                        required: [
                          "id",
                          "title",
                          "status",
                          "type",
                          "created_at",
                          "updated_at",
                        ],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["groups", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "create-user-group",
            title: "Create user group",
            description:
              "Create a new user group and assign it to a parent group.",
            path: "/api/admin/users/v4/user-groups",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "LANGUAGE_NOT_ENABLED",
              "DUPLICATE_ID",
              "DUPLICATE_EXTERNAL_ID",
              "USER_GROUP_MUST_NOT_HAVE_SUB_GROUPS",
            ],
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "embed",
                    type: "array",
                    description:
                      "Embed related resources and more details in the response.",
                    required: false,
                    items: {
                      type: "string",
                      enum: ["number_of_contained_users", "path"],
                    },
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: false,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description:
                      "Unique identifier by an external system for a user group.",
                    required: false,
                  },
                  {
                    name: "title",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          examples: ["en-GB"],
                        },
                        text: {
                          type: "string",
                          description: "Title of the User Group",
                          maxLength: 120,
                          examples: ["Marketing"],
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "description",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          examples: ["en-GB"],
                        },
                        text: {
                          type: "string",
                          description: "Description of the User Group",
                          maxLength: 200,
                          examples: [
                            "The Marketing department is based at our head quarters in Munich.",
                          ],
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "parent_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "201",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description:
                      "Unique identifier by an external system for a user group.",
                    required: false,
                  },
                  {
                    name: "title",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          example: "en-GB",
                        },
                        text: {
                          type: "string",
                          description: "Title of the User Group",
                          maxLength: 120,
                          example: "Marketing",
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "type",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "path",
                    type: "array",
                    description:
                      "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                  },
                  {
                    name: "description",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          example: "en-GB",
                        },
                        text: {
                          type: "string",
                          description: "Description of the User Group",
                          maxLength: 200,
                          example:
                            "The Marketing department is based at our head quarters in Munich.",
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "parent_id",
                    type: "string",
                    description:
                      "Unique identifier of a user group. Can only be null in case of the pre-defined root user group.",
                    required: false,
                  },
                  {
                    name: "number_of_contained_users",
                    type: "integer",
                    description:
                      "The total number of assigned users in this and all nested user groups.",
                    required: false,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/user-groups" {:content-type :json\n                                                                     :form-params {:id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                   :external_id "string"\n                                                                                   :title [{:language "en-GB"\n                                                                                            :text "Marketing"}]\n                                                                                   :description [{:language "en-GB"\n                                                                                                  :text "The Marketing department is based at our head quarters in Munich."}]\n                                                                                   :parent_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"}\n                                                                     :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/users/v4/user-groups HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 281\r\n\r\n{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","external_id":"string","title":[{"language":"en-GB","text":"Marketing"}],"description":[{"language":"en-GB","text":"The Marketing department is based at our head quarters in Munich."}],"parent_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups"\n\n\tpayload := strings.NewReader("{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    external_id: 'string',\n    title: [{language: 'en-GB', text: 'Marketing'}],\n    description: [\n      {\n        language: 'en-GB',\n        text: 'The Marketing department is based at our head quarters in Munich.'\n      }\n    ],\n    parent_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n  })\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    external_id: 'string',\n    title: [{language: 'en-GB', text: 'Marketing'}],\n    description: [\n      {\n        language: 'en-GB',\n        text: 'The Marketing department is based at our head quarters in Munich.'\n      }\n    ],\n    parent_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"external_id": @"string",\n                              @"title": @[ @{ @"language": @"en-GB", @"text": @"Marketing" } ],\n                              @"description": @[ @{ @"language": @"en-GB", @"text": @"The Marketing department is based at our head quarters in Munich." } ],\n                              @"parent_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: '<?php\nrequire_once(\'vendor/autoload.php\');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request(\'POST\', \'http://localhost:3000/api/admin/users/v4/user-groups\', [\n  \'body\' => \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","external_id":"string","title":[{"language":"en-GB","text":"Marketing"}],"description":[{"language":"en-GB","text":"The Marketing department is based at our head quarters in Munich."}],"parent_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\',\n  \'headers\' => [\n    \'accept\' => \'application/json\',\n    \'content-type\' => \'application/json\',\n  ],\n]);\n\necho $response->getBody();',
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","external_id":"string","title":[{"language":"en-GB","text":"Marketing"}],"description":[{"language":"en-GB","text":"The Marketing department is based at our head quarters in Munich."}],"parent_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups"\n\npayload = {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "external_id": "string",\n    "title": [\n        {\n            "language": "en-GB",\n            "text": "Marketing"\n        }\n    ],\n    "description": [\n        {\n            "language": "en-GB",\n            "text": "The Marketing department is based at our head quarters in Munich."\n        }\n    ],\n    "parent_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups"\n\npayload <- "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/user-groups")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"external_id\\":\\"string\\",\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "title": [\n    {\n      "language": "en-GB",\n      "text": "Marketing"\n    }\n  ],\n  "description": [\n    {\n      "language": "en-GB",\n      "text": "The Marketing department is based at our head quarters in Munich."\n    }\n  ],\n  "parent_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "title": [\n    [\n      "language": "en-GB",\n      "text": "Marketing"\n    ]\n  ],\n  "description": [\n    [\n      "language": "en-GB",\n      "text": "The Marketing department is based at our head quarters in Munich."\n    ]\n  ],\n  "parent_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/user-groups",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "201":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "title": [\n    {\n      "language": "en-GB",\n      "text": "Marketing"\n    }\n  ],\n  "status": "ACTIVE",\n  "type": "ROOT",\n  "path": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "title": {\n        "language": "en-GB",\n        "text": "Marketing"\n      },\n      "status": "ACTIVE"\n    }\n  ],\n  "description": [\n    {\n      "language": "en-GB",\n      "text": "The Marketing department is based at our head quarters in Munich."\n    }\n  ],\n  "parent_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "number_of_contained_users": 0,\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      description: "Unique identifier of a user group.",
                      format: "uuid",
                    },
                    external_id: {
                      type: "string",
                      description:
                        "Unique identifier by an external system for a user group.",
                      nullable: true,
                    },
                    title: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          language: {
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            format: "bcp47",
                            pattern:
                              "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                            example: "en-GB",
                          },
                          text: {
                            type: "string",
                            description: "Title of the User Group",
                            maxLength: 120,
                            example: "Marketing",
                          },
                        },
                        required: ["language", "text"],
                      },
                    },
                    status: { type: "string", enum: ["ACTIVE", "ARCHIVED"] },
                    type: {
                      type: "string",
                      enum: ["ROOT", "ALL_USERS", "CUSTOM"],
                    },
                    path: {
                      type: "array",
                      description:
                        "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "Unique identifier of a user group.",
                            format: "uuid",
                          },
                          title: {
                            type: "object",
                            properties: {
                              language: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              text: {
                                type: "string",
                                description: "Title of the User Group",
                                maxLength: 120,
                                example: "Marketing",
                              },
                            },
                            required: ["language", "text"],
                          },
                          status: {
                            type: "string",
                            enum: ["ACTIVE", "ARCHIVED"],
                          },
                        },
                        required: ["id", "title", "status"],
                      },
                    },
                    description: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          language: {
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            format: "bcp47",
                            pattern:
                              "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                            example: "en-GB",
                          },
                          text: {
                            type: "string",
                            description: "Description of the User Group",
                            maxLength: 200,
                            example:
                              "The Marketing department is based at our head quarters in Munich.",
                          },
                        },
                        required: ["language", "text"],
                      },
                      nullable: true,
                    },
                    parent_id: {
                      type: "string",
                      description:
                        "Unique identifier of a user group. Can only be null in case of the pre-defined root user group.",
                      format: "uuid",
                      nullable: true,
                    },
                    number_of_contained_users: {
                      type: "integer",
                      description:
                        "The total number of assigned users in this and all nested user groups.",
                      minimum: 0,
                    },
                    created_at: { type: "string", format: "date-time" },
                    updated_at: { type: "string", format: "date-time" },
                  },
                  required: [
                    "id",
                    "title",
                    "status",
                    "type",
                    "created_at",
                    "updated_at",
                  ],
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "search-assignable-parent-user-groups",
            title: "List assignable parent user groups",
            description:
              "List and search user groups which can be used as a parent for a user group by the actor.",
            path: "/api/admin/users/v4/user-groups/assignable-parents",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs to match in the user group name, description or external id.",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "GROUP_NAME_ASC",
                        "GROUP_NAME_DESC",
                        "UPDATED_AT_ASC",
                        "UPDATED_AT_DESC",
                        "CREATED_AT_ASC",
                        "CREATED_AT_DESC",
                      ],
                    },
                  },
                  {
                    name: "candidates_for",
                    type: "string",
                    description:
                      "Filter user groups applicable as parent for given user group.",
                    required: false,
                  },
                  {
                    name: "embed",
                    type: "array",
                    description:
                      "Embed related resources and more details in the response.",
                    required: false,
                    items: { type: "string", enum: ["path"] },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "groups",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        group_reference: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            title: {
                              type: "object",
                              properties: {
                                language: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                text: {
                                  type: "string",
                                  description: "Title of the User Group",
                                  maxLength: 120,
                                  example: "Marketing",
                                },
                              },
                              required: ["language", "text"],
                            },
                            status: {
                              type: "string",
                              enum: ["ACTIVE", "ARCHIVED"],
                            },
                          },
                          required: ["id", "title", "status"],
                        },
                        path: {
                          type: "array",
                          description:
                            "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                          items: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the User Group",
                                    maxLength: 120,
                                    example: "Marketing",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              status: {
                                type: "string",
                                enum: ["ACTIVE", "ARCHIVED"],
                              },
                            },
                            required: ["id", "title", "status"],
                          },
                        },
                      },
                      required: ["group_reference"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/user-groups/assignable-parents HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/assignable-parents")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/user-groups/assignable-parents",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "groups": [\n    {\n      "group_reference": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "title": {\n          "language": "en-GB",\n          "text": "Marketing"\n        },\n        "status": "ACTIVE"\n      },\n      "path": [\n        {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "title": {\n            "language": "en-GB",\n            "text": "Marketing"\n          },\n          "status": "ACTIVE"\n        }\n      ]\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    groups: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          group_reference: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the User Group",
                                    maxLength: 120,
                                    example: "Marketing",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              status: {
                                type: "string",
                                enum: ["ACTIVE", "ARCHIVED"],
                              },
                            },
                            required: ["id", "title", "status"],
                          },
                          path: {
                            type: "array",
                            description:
                              "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                            items: {
                              type: "object",
                              properties: {
                                id: {
                                  type: "string",
                                  description:
                                    "Unique identifier of a user group.",
                                  format: "uuid",
                                },
                                title: {
                                  type: "object",
                                  properties: {
                                    language: {
                                      type: "string",
                                      description:
                                        "A locale representing a language and region.",
                                      format: "bcp47",
                                      pattern:
                                        "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                      example: "en-GB",
                                    },
                                    text: {
                                      type: "string",
                                      description: "Title of the User Group",
                                      maxLength: 120,
                                      example: "Marketing",
                                    },
                                  },
                                  required: ["language", "text"],
                                },
                                status: {
                                  type: "string",
                                  enum: ["ACTIVE", "ARCHIVED"],
                                },
                              },
                              required: ["id", "title", "status"],
                            },
                          },
                        },
                        required: ["group_reference"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["groups", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-user-group",
            title: "Get user group",
            description:
              "Allows an admin user to get details about a user group by its ID.",
            path: "/api/admin/users/v4/user-groups/{group_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "embed",
                    type: "array",
                    description:
                      "Embed related resources and more details in the response.",
                    required: false,
                    items: {
                      type: "string",
                      enum: ["number_of_contained_users", "path"],
                    },
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description:
                      "Unique identifier by an external system for a user group.",
                    required: false,
                  },
                  {
                    name: "title",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          example: "en-GB",
                        },
                        text: {
                          type: "string",
                          description: "Title of the User Group",
                          maxLength: 120,
                          example: "Marketing",
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "type",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "path",
                    type: "array",
                    description:
                      "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                  },
                  {
                    name: "description",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          example: "en-GB",
                        },
                        text: {
                          type: "string",
                          description: "Description of the User Group",
                          maxLength: 200,
                          example:
                            "The Marketing department is based at our head quarters in Munich.",
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "parent_id",
                    type: "string",
                    description:
                      "Unique identifier of a user group. Can only be null in case of the pre-defined root user group.",
                    required: false,
                  },
                  {
                    name: "number_of_contained_users",
                    type: "integer",
                    description:
                      "The total number of assigned users in this and all nested user groups.",
                    required: false,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/user-groups/group_id" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/user-groups/group_id HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/user-groups/group_id', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/group_id\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/group_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/user-groups/{group_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "title": [\n    {\n      "language": "en-GB",\n      "text": "Marketing"\n    }\n  ],\n  "status": "ACTIVE",\n  "type": "ROOT",\n  "path": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "title": {\n        "language": "en-GB",\n        "text": "Marketing"\n      },\n      "status": "ACTIVE"\n    }\n  ],\n  "description": [\n    {\n      "language": "en-GB",\n      "text": "The Marketing department is based at our head quarters in Munich."\n    }\n  ],\n  "parent_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "number_of_contained_users": 0,\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      description: "Unique identifier of a user group.",
                      format: "uuid",
                    },
                    external_id: {
                      type: "string",
                      description:
                        "Unique identifier by an external system for a user group.",
                      nullable: true,
                    },
                    title: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          language: {
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            format: "bcp47",
                            pattern:
                              "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                            example: "en-GB",
                          },
                          text: {
                            type: "string",
                            description: "Title of the User Group",
                            maxLength: 120,
                            example: "Marketing",
                          },
                        },
                        required: ["language", "text"],
                      },
                    },
                    status: { type: "string", enum: ["ACTIVE", "ARCHIVED"] },
                    type: {
                      type: "string",
                      enum: ["ROOT", "ALL_USERS", "CUSTOM"],
                    },
                    path: {
                      type: "array",
                      description:
                        "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "Unique identifier of a user group.",
                            format: "uuid",
                          },
                          title: {
                            type: "object",
                            properties: {
                              language: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              text: {
                                type: "string",
                                description: "Title of the User Group",
                                maxLength: 120,
                                example: "Marketing",
                              },
                            },
                            required: ["language", "text"],
                          },
                          status: {
                            type: "string",
                            enum: ["ACTIVE", "ARCHIVED"],
                          },
                        },
                        required: ["id", "title", "status"],
                      },
                    },
                    description: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          language: {
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            format: "bcp47",
                            pattern:
                              "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                            example: "en-GB",
                          },
                          text: {
                            type: "string",
                            description: "Description of the User Group",
                            maxLength: 200,
                            example:
                              "The Marketing department is based at our head quarters in Munich.",
                          },
                        },
                        required: ["language", "text"],
                      },
                      nullable: true,
                    },
                    parent_id: {
                      type: "string",
                      description:
                        "Unique identifier of a user group. Can only be null in case of the pre-defined root user group.",
                      format: "uuid",
                      nullable: true,
                    },
                    number_of_contained_users: {
                      type: "integer",
                      description:
                        "The total number of assigned users in this and all nested user groups.",
                      minimum: 0,
                    },
                    created_at: { type: "string", format: "date-time" },
                    updated_at: { type: "string", format: "date-time" },
                  },
                  required: [
                    "id",
                    "title",
                    "status",
                    "type",
                    "created_at",
                    "updated_at",
                  ],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "update-user-group",
            title: "Update user group",
            description:
              "Allows an admin user to (partially) update a user group.",
            path: "/api/admin/users/v4/user-groups/{group_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "LANGUAGE_NOT_ENABLED",
              "DUPLICATE_EXTERNAL_ID",
              "USER_GROUP_ARCHIVED",
              "USER_GROUP_MUST_NOT_HAVE_SUB_GROUPS",
              "PARENT_ID_UPDATE_WOULD_PRODUCE_A_CYCLE",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "embed",
                    type: "array",
                    description:
                      "Embed related resources and more details in the response.",
                    required: false,
                    items: {
                      type: "string",
                      enum: ["number_of_contained_users", "path"],
                    },
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "title",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          examples: ["en-GB"],
                        },
                        text: {
                          type: "string",
                          description: "Title of the User Group",
                          maxLength: 120,
                          examples: ["Marketing"],
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "description",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          examples: ["en-GB"],
                        },
                        text: {
                          type: "string",
                          description: "Description of the User Group",
                          maxLength: 200,
                          examples: [
                            "The Marketing department is based at our head quarters in Munich.",
                          ],
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description:
                      "Unique identifier by an external system for a user group.",
                    required: false,
                  },
                  {
                    name: "parent_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: false,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                  {
                    name: "external_id",
                    type: "string",
                    description:
                      "Unique identifier by an external system for a user group.",
                    required: false,
                  },
                  {
                    name: "title",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          example: "en-GB",
                        },
                        text: {
                          type: "string",
                          description: "Title of the User Group",
                          maxLength: 120,
                          example: "Marketing",
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "status",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "type",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "path",
                    type: "array",
                    description:
                      "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        title: {
                          type: "object",
                          properties: {
                            language: {
                              type: "string",
                              description:
                                "A locale representing a language and region.",
                              format: "bcp47",
                              pattern:
                                "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                              example: "en-GB",
                            },
                            text: {
                              type: "string",
                              description: "Title of the User Group",
                              maxLength: 120,
                              example: "Marketing",
                            },
                          },
                          required: ["language", "text"],
                        },
                        status: {
                          type: "string",
                          enum: ["ACTIVE", "ARCHIVED"],
                        },
                      },
                      required: ["id", "title", "status"],
                    },
                  },
                  {
                    name: "description",
                    type: "array",
                    description: "",
                    required: false,
                    items: {
                      type: "object",
                      properties: {
                        language: {
                          type: "string",
                          description:
                            "A locale representing a language and region.",
                          format: "bcp47",
                          pattern:
                            "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                          example: "en-GB",
                        },
                        text: {
                          type: "string",
                          description: "Description of the User Group",
                          maxLength: 200,
                          example:
                            "The Marketing department is based at our head quarters in Munich.",
                        },
                      },
                      required: ["language", "text"],
                    },
                  },
                  {
                    name: "parent_id",
                    type: "string",
                    description:
                      "Unique identifier of a user group. Can only be null in case of the pre-defined root user group.",
                    required: false,
                  },
                  {
                    name: "number_of_contained_users",
                    type: "integer",
                    description:
                      "The total number of assigned users in this and all nested user groups.",
                    required: false,
                  },
                  {
                    name: "created_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "updated_at",
                    type: "string",
                    description: "",
                    required: true,
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"external_id\\":\\"string\\",\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/patch "http://localhost:3000/api/admin/users/v4/user-groups/group_id" {:content-type :json\n                                                                               :form-params {:title [{:language "en-GB"\n                                                                                                      :text "Marketing"}]\n                                                                                             :description [{:language "en-GB"\n                                                                                                            :text "The Marketing department is based at our head quarters in Munich."}]\n                                                                                             :external_id "string"\n                                                                                             :parent_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"}\n                                                                               :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"external_id\\":\\"string\\",\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"external_id\\":\\"string\\",\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'PATCH /api/admin/users/v4/user-groups/group_id HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 237\r\n\r\n{"title":[{"language":"en-GB","text":"Marketing"}],"description":[{"language":"en-GB","text":"The Marketing department is based at our head quarters in Munich."}],"external_id":"string","parent_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id"\n\n\tpayload := strings.NewReader("{\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"external_id\\":\\"string\\",\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\n\n\treq, _ := http.NewRequest("PATCH", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"external_id\\":\\"string\\",\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'PATCH',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    title: [{language: 'en-GB', text: 'Marketing'}],\n    description: [\n      {\n        language: 'en-GB',\n        text: 'The Marketing department is based at our head quarters in Munich.'\n      }\n    ],\n    external_id: 'string',\n    parent_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n  })\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"external_id\\":\\"string\\",\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id")\n  .patch(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id';\nconst options = {\n  method: 'PATCH',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    title: [{language: 'en-GB', text: 'Marketing'}],\n    description: [\n      {\n        language: 'en-GB',\n        text: 'The Marketing department is based at our head quarters in Munich.'\n      }\n    ],\n    external_id: 'string',\n    parent_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"title": @[ @{ @"language": @"en-GB", @"text": @"Marketing" } ],\n                              @"description": @[ @{ @"language": @"en-GB", @"text": @"The Marketing department is based at our head quarters in Munich." } ],\n                              @"external_id": @"string",\n                              @"parent_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"PATCH"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"external_id\\":\\"string\\",\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}" in\n\nClient.call ~headers ~body `PATCH uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: '<?php\nrequire_once(\'vendor/autoload.php\');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request(\'PATCH\', \'http://localhost:3000/api/admin/users/v4/user-groups/group_id\', [\n  \'body\' => \'{"title":[{"language":"en-GB","text":"Marketing"}],"description":[{"language":"en-GB","text":"The Marketing department is based at our head quarters in Munich."}],"external_id":"string","parent_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\',\n  \'headers\' => [\n    \'accept\' => \'application/json\',\n    \'content-type\' => \'application/json\',\n  ],\n]);\n\necho $response->getBody();',
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/group_id\' -Method PATCH -Headers $headers -ContentType \'application/json\' -Body \'{"title":[{"language":"en-GB","text":"Marketing"}],"description":[{"language":"en-GB","text":"The Marketing department is based at our head quarters in Munich."}],"external_id":"string","parent_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id"\n\npayload = {\n    "title": [\n        {\n            "language": "en-GB",\n            "text": "Marketing"\n        }\n    ],\n    "description": [\n        {\n            "language": "en-GB",\n            "text": "The Marketing department is based at our head quarters in Munich."\n        }\n    ],\n    "external_id": "string",\n    "parent_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.patch(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id"\n\npayload <- "{\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"external_id\\":\\"string\\",\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nencode <- "json"\n\nresponse <- VERB("PATCH", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/user-groups/group_id")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"title\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"Marketing\\"}],\\"description\\":[{\\"language\\":\\"en-GB\\",\\"text\\":\\"The Marketing department is based at our head quarters in Munich.\\"}],\\"external_id\\":\\"string\\",\\"parent_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request PATCH \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "title": [\n    {\n      "language": "en-GB",\n      "text": "Marketing"\n    }\n  ],\n  "description": [\n    {\n      "language": "en-GB",\n      "text": "The Marketing department is based at our head quarters in Munich."\n    }\n  ],\n  "external_id": "string",\n  "parent_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "title": [\n    [\n      "language": "en-GB",\n      "text": "Marketing"\n    ]\n  ],\n  "description": [\n    [\n      "language": "en-GB",\n      "text": "The Marketing department is based at our head quarters in Munich."\n    ]\n  ],\n  "external_id": "string",\n  "parent_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "PATCH"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "PATCH",
                url: "/api/admin/users/v4/user-groups/{group_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "external_id": "string",\n  "title": [\n    {\n      "language": "en-GB",\n      "text": "Marketing"\n    }\n  ],\n  "status": "ACTIVE",\n  "type": "ROOT",\n  "path": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "title": {\n        "language": "en-GB",\n        "text": "Marketing"\n      },\n      "status": "ACTIVE"\n    }\n  ],\n  "description": [\n    {\n      "language": "en-GB",\n      "text": "The Marketing department is based at our head quarters in Munich."\n    }\n  ],\n  "parent_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "number_of_contained_users": 0,\n  "created_at": "2024-01-11T07:41:25.662Z",\n  "updated_at": "2024-01-11T07:41:25.662Z"\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "string",
                      description: "Unique identifier of a user group.",
                      format: "uuid",
                    },
                    external_id: {
                      type: "string",
                      description:
                        "Unique identifier by an external system for a user group.",
                      nullable: true,
                    },
                    title: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          language: {
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            format: "bcp47",
                            pattern:
                              "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                            example: "en-GB",
                          },
                          text: {
                            type: "string",
                            description: "Title of the User Group",
                            maxLength: 120,
                            example: "Marketing",
                          },
                        },
                        required: ["language", "text"],
                      },
                    },
                    status: { type: "string", enum: ["ACTIVE", "ARCHIVED"] },
                    type: {
                      type: "string",
                      enum: ["ROOT", "ALL_USERS", "CUSTOM"],
                    },
                    path: {
                      type: "array",
                      description:
                        "List of ancestor user group references from root (first) to immediate parent (last). The group itself is not included.",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "Unique identifier of a user group.",
                            format: "uuid",
                          },
                          title: {
                            type: "object",
                            properties: {
                              language: {
                                type: "string",
                                description:
                                  "A locale representing a language and region.",
                                format: "bcp47",
                                pattern:
                                  "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                example: "en-GB",
                              },
                              text: {
                                type: "string",
                                description: "Title of the User Group",
                                maxLength: 120,
                                example: "Marketing",
                              },
                            },
                            required: ["language", "text"],
                          },
                          status: {
                            type: "string",
                            enum: ["ACTIVE", "ARCHIVED"],
                          },
                        },
                        required: ["id", "title", "status"],
                      },
                    },
                    description: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          language: {
                            type: "string",
                            description:
                              "A locale representing a language and region.",
                            format: "bcp47",
                            pattern:
                              "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                            example: "en-GB",
                          },
                          text: {
                            type: "string",
                            description: "Description of the User Group",
                            maxLength: 200,
                            example:
                              "The Marketing department is based at our head quarters in Munich.",
                          },
                        },
                        required: ["language", "text"],
                      },
                      nullable: true,
                    },
                    parent_id: {
                      type: "string",
                      description:
                        "Unique identifier of a user group. Can only be null in case of the pre-defined root user group.",
                      format: "uuid",
                      nullable: true,
                    },
                    number_of_contained_users: {
                      type: "integer",
                      description:
                        "The total number of assigned users in this and all nested user groups.",
                      minimum: 0,
                    },
                    created_at: { type: "string", format: "date-time" },
                    updated_at: { type: "string", format: "date-time" },
                  },
                  required: [
                    "id",
                    "title",
                    "status",
                    "type",
                    "created_at",
                    "updated_at",
                  ],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "patch",
          },
          {
            id: "delete-user-group",
            title: "Delete user group",
            description:
              "Allows an admin user to delete a user group identified by its ID and all nested groups as well.\nThe user group to be deleted must be archived beforehand, else the deletion will fail.\nPre-defined user groups cannot be deleted.",
            path: "/api/admin/users/v4/user-groups/{group_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "200", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/admin/users/v4/user-groups/group_id")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/admin/users/v4/user-groups/group_id HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE'};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id")\n  .delete(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id';\nconst options = {method: 'DELETE'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/admin/users/v4/user-groups/group_id');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/admin/users/v4/user-groups/group_id' -Method DELETE",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id"\n\nresponse = requests.delete(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/group_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/admin/users/v4/user-groups/{group_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "200" }],
            security: [{ bearer: [] }],
            method: "delete",
          },
          {
            id: "archive-user-group",
            title: "Archive user group",
            description:
              "Allows an admin user to archive a user group.\nAn archived group cannot be modified.\nOn archiving a group all primary assignments of users in this group are changed to the `All_USERS` user group.\nSecondary assignments will not be changed.",
            path: "/api/admin/users/v4/user-groups/{group_id}/archive",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: ["USER_GROUP_IS_PREDEFINED"],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "200", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);',
                http: "POST /api/admin/users/v4/user-groups/group_id/archive HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive"\n\n\treq, _ := http.NewRequest("POST", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'POST'};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive")\n  .post(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive';\nconst options = {method: 'POST'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive" in\n\nClient.call `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive' -Method POST",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive"\n\nresponse = requests.post(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive"\n\nresponse <- VERB("POST", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id/archive")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/user-groups/{group_id}/archive",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "200" }],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "restore-user-group",
            title: "Restore user group",
            description:
              "Allows an admin user to restore a user group.\nAn restored group can be modified again.\nPrimary assignments that were changed on archiving will not be restored.",
            path: "/api/admin/users/v4/user-groups/{group_id}/restore",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "USER_GROUP_IS_PREDEFINED",
              "USER_GROUP_NOT_ARCHIVED",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "200", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore");\nvar request = new RestRequest(Method.POST);\nIRestResponse response = client.Execute(request);',
                http: "POST /api/admin/users/v4/user-groups/group_id/restore HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore"\n\n\treq, _ := http.NewRequest("POST", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore")\n  .post(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'POST'};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore")\n  .post(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore';\nconst options = {method: 'POST'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore" in\n\nClient.call `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore' -Method POST",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore"\n\nresponse = requests.post(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore"\n\nresponse <- VERB("POST", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id/restore")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/user-groups/{group_id}/restore",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "200" }],
            security: [{ bearer: [] }],
            method: "post",
          },
        ],
      },
      {
        id: "user-group-assignments",
        title: "User Group Assignments",
        shortDescription: "",
        endpoints: [
          {
            id: "assign-users-to-user-group-batch",
            title: "Assign multiple users to user groups",
            description:
              "Allows an admin to assign multiple users to one or multiple user groups at once.",
            path: "/api/admin/users/v4/user-groups/assignments/batch",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        group_id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        body: {
                          type: "object",
                          properties: {
                            role_id: {
                              type: "string",
                              description: "Unique identifier of a user role.",
                              format: "uuid",
                            },
                            user_id: {
                              type: "string",
                              description: "Unique identifier of a user.",
                              format: "uuid",
                            },
                          },
                          required: ["role_id", "user_id"],
                        },
                      },
                      required: ["group_id", "body"],
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "object",
                          properties: {
                            group_id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            user_id: {
                              type: "string",
                              description: "Unique identifier of a user.",
                              format: "uuid",
                            },
                            role_id: {
                              type: "string",
                              description: "Unique identifier of a user role.",
                              format: "uuid",
                            },
                          },
                          required: ["group_id", "user_id", "role_id"],
                        },
                        status: {
                          type: "integer",
                          format: "int32",
                          description:
                            "A well know HTTP status code (e.g. 200, 201, 400).",
                        },
                        body: {
                          type: "object",
                          properties: {
                            id: {
                              type: "object",
                              properties: {
                                group_id: {
                                  type: "string",
                                  description:
                                    "Unique identifier of a user group.",
                                  format: "uuid",
                                },
                                user_id: {
                                  type: "string",
                                  description: "Unique identifier of a user.",
                                  format: "uuid",
                                },
                                role_id: {
                                  type: "string",
                                  description:
                                    "Unique identifier of a user role.",
                                  format: "uuid",
                                },
                              },
                              required: ["group_id", "user_id", "role_id"],
                            },
                            source: {
                              type: "string",
                              enum: ["PRIMARY", "MANUAL", "RULE"],
                            },
                            user: {
                              type: "object",
                              properties: {
                                id: { type: "string", format: "uuid" },
                                is_deleted: { type: "boolean" },
                                first_name: { type: "string", example: "Jon" },
                                last_name: { type: "string", example: "Doe" },
                                department: {
                                  type: "string",
                                  example: "Marketing",
                                  nullable: true,
                                },
                                profile_picture: {
                                  type: "object",
                                  nullable: true,
                                  properties: {
                                    file_id: { type: "string", format: "uuid" },
                                  },
                                },
                              },
                              required: [
                                "id",
                                "is_deleted",
                                "first_name",
                                "last_name",
                              ],
                            },
                          },
                          required: ["id", "source", "user"],
                        },
                        error: {
                          type: "object",
                          description:
                            'An RFC 7807 inspired "problem JSON" object.',
                          title: "Problem",
                          properties: {
                            status: {
                              type: "integer",
                              format: "int32",
                              description:
                                "A well know HTTP status code (e.g. 200, 201, 400).",
                            },
                            title: {
                              type: "string",
                              description:
                                "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                              example: "No user with the given id found",
                            },
                            detail: {
                              type: "string",
                              description:
                                "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                              example:
                                "User with id <id> was not found. Please ...",
                              nullable: true,
                            },
                            error_code: {
                              type: "string",
                              description:
                                "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                              example: "USER_NOT_FOUND",
                              nullable: true,
                            },
                            property: {
                              type: "string",
                              description:
                                "The technical property name from the API that caused the problem.",
                              example: "user_id",
                              nullable: true,
                            },
                          },
                          required: ["status", "title"],
                        },
                      },
                      required: ["id", "status"],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch" {:content-type :json\n                                                                                       :form-params {:items [{:group_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                              :body {:role_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                                     :user_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}\n                                                                                       :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"items\\":[{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/users/v4/user-groups/assignments/batch HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 170\r\n\r\n{"items":[{"group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","body":{"role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","user_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch"\n\n\tpayload := strings.NewReader("{\\"items\\":[{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"items\\":[{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        group_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n        body: JSON.stringify({\n          role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n          user_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n        })\n      }\n    ]\n  })\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"items\\":[{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        group_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n        body: JSON.stringify({\n          role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n          user_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n        })\n      }\n    ]\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"items": @[ @{ @"group_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"body": @{ @"role_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"user_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6" } } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"items\\":[{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch', [\n  'body' => '{\"items\":[{\"group_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"body\":{\"role_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"user_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"}}]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"items":[{"group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","body":{"role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","user_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch"\n\npayload = {"items": [\n        {\n            "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "body": {\n                "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n            }\n        }\n    ]}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch"\n\npayload <- "{\\"items\\":[{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"items\\":[{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"body\\":{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "items": [\n    {\n      "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "body": {\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      }\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["items": [\n    [\n      "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "body": [\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      ]\n    ]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/user-groups/assignments/batch",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "items": [\n    {\n      "id": {\n        "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      },\n      "status": 0,\n      "body": {\n        "id": {\n          "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        },\n        "source": "PRIMARY",\n        "user": {\n          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n          "is_deleted": true,\n          "first_name": "Jon",\n          "last_name": "Doe",\n          "department": "Marketing",\n          "profile_picture": {\n            "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n          }\n        }\n      },\n      "error": {\n        "status": 0,\n        "title": "No user with the given id found",\n        "detail": "User with id <id> was not found. Please ...",\n        "error_code": "USER_NOT_FOUND",\n        "property": "user_id"\n      }\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    items: {
                      type: "array",
                      minItems: 1,
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "object",
                            properties: {
                              group_id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              user_id: {
                                type: "string",
                                description: "Unique identifier of a user.",
                                format: "uuid",
                              },
                              role_id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user role.",
                                format: "uuid",
                              },
                            },
                            required: ["group_id", "user_id", "role_id"],
                          },
                          status: {
                            type: "integer",
                            format: "int32",
                            description:
                              "A well know HTTP status code (e.g. 200, 201, 400).",
                          },
                          body: {
                            type: "object",
                            properties: {
                              id: {
                                type: "object",
                                properties: {
                                  group_id: {
                                    type: "string",
                                    description:
                                      "Unique identifier of a user group.",
                                    format: "uuid",
                                  },
                                  user_id: {
                                    type: "string",
                                    description: "Unique identifier of a user.",
                                    format: "uuid",
                                  },
                                  role_id: {
                                    type: "string",
                                    description:
                                      "Unique identifier of a user role.",
                                    format: "uuid",
                                  },
                                },
                                required: ["group_id", "user_id", "role_id"],
                              },
                              source: {
                                type: "string",
                                enum: ["PRIMARY", "MANUAL", "RULE"],
                              },
                              user: {
                                type: "object",
                                properties: {
                                  id: { type: "string", format: "uuid" },
                                  is_deleted: { type: "boolean" },
                                  first_name: {
                                    type: "string",
                                    example: "Jon",
                                  },
                                  last_name: { type: "string", example: "Doe" },
                                  department: {
                                    type: "string",
                                    example: "Marketing",
                                    nullable: true,
                                  },
                                  profile_picture: {
                                    type: "object",
                                    nullable: true,
                                    properties: {
                                      file_id: {
                                        type: "string",
                                        format: "uuid",
                                      },
                                    },
                                  },
                                },
                                required: [
                                  "id",
                                  "is_deleted",
                                  "first_name",
                                  "last_name",
                                ],
                              },
                            },
                            required: ["id", "source", "user"],
                          },
                          error: {
                            type: "object",
                            description:
                              'An RFC 7807 inspired "problem JSON" object.',
                            title: "Problem",
                            properties: {
                              status: {
                                type: "integer",
                                format: "int32",
                                description:
                                  "A well know HTTP status code (e.g. 200, 201, 400).",
                              },
                              title: {
                                type: "string",
                                description:
                                  "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                                example: "No user with the given id found",
                              },
                              detail: {
                                type: "string",
                                description:
                                  "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                                example:
                                  "User with id <id> was not found. Please ...",
                                nullable: true,
                              },
                              error_code: {
                                type: "string",
                                description:
                                  "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                                example: "USER_NOT_FOUND",
                                nullable: true,
                              },
                              property: {
                                type: "string",
                                description:
                                  "The technical property name from the API that caused the problem.",
                                example: "user_id",
                                nullable: true,
                              },
                            },
                            required: ["status", "title"],
                          },
                        },
                        required: ["id", "status"],
                      },
                    },
                  },
                  required: ["items"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "delete-user-group-assignments-batch",
            title: "Delete multiple user group assignments",
            description:
              "Allows an admin to remove multiple users from groups at once.",
            path: "/api/admin/users/v4/user-groups/assignments/batch",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "object",
                          properties: {
                            group_id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            user_id: {
                              type: "string",
                              description: "Unique identifier of a user.",
                              format: "uuid",
                            },
                            role_id: {
                              type: "string",
                              description: "Unique identifier of a user role.",
                              format: "uuid",
                            },
                          },
                          required: ["group_id", "user_id", "role_id"],
                        },
                      },
                      required: ["id"],
                    },
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "items",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "object",
                          properties: {
                            group_id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            user_id: {
                              type: "string",
                              description: "Unique identifier of a user.",
                              format: "uuid",
                            },
                            role_id: {
                              type: "string",
                              description: "Unique identifier of a user role.",
                              format: "uuid",
                            },
                          },
                          required: ["group_id", "user_id", "role_id"],
                        },
                        status: {
                          type: "integer",
                          format: "int32",
                          description:
                            "A well know HTTP status code (e.g. 200, 201, 400).",
                        },
                        error: {
                          type: "object",
                          description:
                            'An RFC 7807 inspired "problem JSON" object.',
                          title: "Problem",
                          properties: {
                            status: {
                              type: "integer",
                              format: "int32",
                              description:
                                "A well know HTTP status code (e.g. 200, 201, 400).",
                            },
                            title: {
                              type: "string",
                              description:
                                "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                              example: "No user with the given id found",
                            },
                            detail: {
                              type: "string",
                              description:
                                "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                              example:
                                "User with id <id> was not found. Please ...",
                              nullable: true,
                            },
                            error_code: {
                              type: "string",
                              description:
                                "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                              example: "USER_NOT_FOUND",
                              nullable: true,
                            },
                            property: {
                              type: "string",
                              description:
                                "The technical property name from the API that caused the problem.",
                              example: "user_id",
                              nullable: true,
                            },
                          },
                          required: ["status", "title"],
                        },
                      },
                      required: ["id", "status"],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"id\\":{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch" {:content-type :json\n                                                                                         :form-params {:items [{:id {:group_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                                     :user_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                                     :role_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}\n                                                                                         :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"items\\":[{\\"id\\":{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"items\\":[{\\"id\\":{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'DELETE /api/admin/users/v4/user-groups/assignments/batch HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 168\r\n\r\n{"items":[{"id":{"group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","user_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch"\n\n\tpayload := strings.NewReader("{\\"items\\":[{\\"id\\":{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}")\n\n\treq, _ := http.NewRequest("DELETE", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"items\\":[{\\"id\\":{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch")\n  .delete(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'DELETE',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        id: {\n          group_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n          user_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n          role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n        }\n      }\n    ]\n  })\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"items\\":[{\\"id\\":{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch")\n  .delete(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch';\nconst options = {\n  method: 'DELETE',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    items: [\n      {\n        id: {\n          group_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n          user_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n          role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n        }\n      }\n    ]\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"items": @[ @{ @"id": @{ @"group_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"user_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6", @"role_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6" } } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"items\\":[{\\"id\\":{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}" in\n\nClient.call ~headers ~body `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch', [\n  'body' => '{\"items\":[{\"id\":{\"group_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"user_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"role_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"}}]}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch\' -Method DELETE -Headers $headers -ContentType \'application/json\' -Body \'{"items":[{"id":{"group_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","user_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}}]}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch"\n\npayload = {"items": [{"id": {\n                "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n            }}]}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.delete(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch"\n\npayload <- "{\\"items\\":[{\\"id\\":{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}"\n\nencode <- "json"\n\nresponse <- VERB("DELETE", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"items\\":[{\\"id\\":{\\"group_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}}]}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request DELETE \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "items": [\n    {\n      "id": {\n        "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      }\n    }\n  ]\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = ["items": [["id": [\n        "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      ]]]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/assignments/batch")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/admin/users/v4/user-groups/assignments/batch",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "items": [\n    {\n      "id": {\n        "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      },\n      "status": 0,\n      "error": {\n        "status": 0,\n        "title": "No user with the given id found",\n        "detail": "User with id <id> was not found. Please ...",\n        "error_code": "USER_NOT_FOUND",\n        "property": "user_id"\n      }\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    items: {
                      type: "array",
                      minItems: 1,
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "object",
                            properties: {
                              group_id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              user_id: {
                                type: "string",
                                description: "Unique identifier of a user.",
                                format: "uuid",
                              },
                              role_id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user role.",
                                format: "uuid",
                              },
                            },
                            required: ["group_id", "user_id", "role_id"],
                          },
                          status: {
                            type: "integer",
                            format: "int32",
                            description:
                              "A well know HTTP status code (e.g. 200, 201, 400).",
                          },
                          error: {
                            type: "object",
                            description:
                              'An RFC 7807 inspired "problem JSON" object.',
                            title: "Problem",
                            properties: {
                              status: {
                                type: "integer",
                                format: "int32",
                                description:
                                  "A well know HTTP status code (e.g. 200, 201, 400).",
                              },
                              title: {
                                type: "string",
                                description:
                                  "A short summary of the problem type. Written in English and readable for engineers, usually not suited for\nnon technical stakeholders and not localized.\nOpposed to the recommendation in RFC 7807 the title is likely to not contain http status code names.",
                                example: "No user with the given id found",
                              },
                              detail: {
                                type: "string",
                                description:
                                  "A human readable explanation specific to this occurrence of the problem that is helpful to locate the\nproblem and give advice on how to proceed. Written in English and readable for engineers, usually not suited\nfor non technical stakeholders and not localized.",
                                example:
                                  "User with id <id> was not found. Please ...",
                                nullable: true,
                              },
                              error_code: {
                                type: "string",
                                description:
                                  "A technical error code that uniquely identifies the problem type in the context of the provided API.",
                                example: "USER_NOT_FOUND",
                                nullable: true,
                              },
                              property: {
                                type: "string",
                                description:
                                  "The technical property name from the API that caused the problem.",
                                example: "user_id",
                                nullable: true,
                              },
                            },
                            required: ["status", "title"],
                          },
                        },
                        required: ["id", "status"],
                      },
                    },
                  },
                  required: ["items"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "delete",
          },
          {
            id: "get-all-user-group-roles",
            title: "List configured user group roles",
            description: "Returns all configured user group roles.",
            path: "/api/admin/users/v4/user-groups/roles",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "roles",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "string",
                          description: "Unique identifier of a user role.",
                          format: "uuid",
                        },
                        type: {
                          type: "string",
                          description:
                            "The type of the role. All roles except type CUSTOM are pre defined.",
                          enum: ["ADMIN", "MEMBER", "CUSTOM"],
                        },
                      },
                      required: ["id", "type"],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/roles");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/user-groups/roles" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/roles");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/roles");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/user-groups/roles HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/roles"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/roles")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/roles', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/roles")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/roles';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/roles"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/roles" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/user-groups/roles', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/roles\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/roles"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/roles"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/roles \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/roles")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/user-groups/roles",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "roles": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "type": "ADMIN"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    roles: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "Unique identifier of a user role.",
                            format: "uuid",
                          },
                          type: {
                            type: "string",
                            description:
                              "The type of the role. All roles except type CUSTOM are pre defined.",
                            enum: ["ADMIN", "MEMBER", "CUSTOM"],
                          },
                        },
                        required: ["id", "type"],
                      },
                    },
                  },
                  required: ["roles"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "search-user-group-assignments-for-single-user",
            title: "List user group assignments",
            description: "List all user group assignments for given user.",
            path: "/api/admin/users/v4/user-groups/user/{user_id}/assignments",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs a match in the user groups' title.",
                    required: false,
                  },
                  {
                    name: "role_ids",
                    type: "array",
                    description:
                      "Only return user groups that the user is at least assigned to with one of the given roles.\nThe result will still contain all roles of a user.",
                    required: false,
                    items: {
                      type: "string",
                      description: "Unique identifier of a user role.",
                      format: "uuid",
                    },
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: ["GROUP_NAME_ASC", "GROUP_NAME_DESC"],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
              {
                title: "Headers",
                type: "header",
                parameters: [
                  {
                    name: "Accept-Language",
                    type: "string",
                    description:
                      "The preferred language used when returning localized strings.",
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "groups",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        group: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            title: {
                              type: "object",
                              properties: {
                                language: {
                                  type: "string",
                                  description:
                                    "A locale representing a language and region.",
                                  format: "bcp47",
                                  pattern:
                                    "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                  example: "en-GB",
                                },
                                text: {
                                  type: "string",
                                  description: "Title of the User Group",
                                  maxLength: 120,
                                  example: "Marketing",
                                },
                              },
                              required: ["language", "text"],
                            },
                            status: {
                              type: "string",
                              enum: ["ACTIVE", "ARCHIVED"],
                            },
                          },
                          required: ["id", "title", "status"],
                        },
                        assignments: {
                          type: "array",
                          minItems: 1,
                          items: {
                            type: "object",
                            properties: {
                              role: {
                                type: "object",
                                properties: {
                                  id: {
                                    type: "string",
                                    description:
                                      "Unique identifier of a user role.",
                                    format: "uuid",
                                  },
                                  type: {
                                    type: "string",
                                    description:
                                      "The type of the role. All roles except type CUSTOM are pre defined.",
                                    enum: ["ADMIN", "MEMBER", "CUSTOM"],
                                  },
                                },
                                required: ["id", "type"],
                              },
                              source: {
                                type: "string",
                                enum: ["PRIMARY", "MANUAL", "RULE"],
                              },
                            },
                            required: ["role", "source"],
                          },
                        },
                      },
                      required: ["group", "assignments"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/user-groups/user/user_id/assignments HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/user/user_id/assignments")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/user-groups/user/{user_id}/assignments",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "groups": [\n    {\n      "group": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "title": {\n          "language": "en-GB",\n          "text": "Marketing"\n        },\n        "status": "ACTIVE"\n      },\n      "assignments": [\n        {\n          "role": {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "type": "ADMIN"\n          },\n          "source": "PRIMARY"\n        }\n      ]\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  description:
                    'List of all user group assignments for a single user aggregated by group.\nContains one entry in "groups" for each group the user is assigned to.\nEach entry in "groups" contains all roles the user has in this group.\n',
                  type: "object",
                  properties: {
                    groups: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          group: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              title: {
                                type: "object",
                                properties: {
                                  language: {
                                    type: "string",
                                    description:
                                      "A locale representing a language and region.",
                                    format: "bcp47",
                                    pattern:
                                      "^[a-z]{2,4}(-[A-Z][a-z]{3})?(-([A-Z]{2}|[0-9]{3}))?$",
                                    example: "en-GB",
                                  },
                                  text: {
                                    type: "string",
                                    description: "Title of the User Group",
                                    maxLength: 120,
                                    example: "Marketing",
                                  },
                                },
                                required: ["language", "text"],
                              },
                              status: {
                                type: "string",
                                enum: ["ACTIVE", "ARCHIVED"],
                              },
                            },
                            required: ["id", "title", "status"],
                          },
                          assignments: {
                            type: "array",
                            minItems: 1,
                            items: {
                              type: "object",
                              properties: {
                                role: {
                                  type: "object",
                                  properties: {
                                    id: {
                                      type: "string",
                                      description:
                                        "Unique identifier of a user role.",
                                      format: "uuid",
                                    },
                                    type: {
                                      type: "string",
                                      description:
                                        "The type of the role. All roles except type CUSTOM are pre defined.",
                                      enum: ["ADMIN", "MEMBER", "CUSTOM"],
                                    },
                                  },
                                  required: ["id", "type"],
                                },
                                source: {
                                  type: "string",
                                  enum: ["PRIMARY", "MANUAL", "RULE"],
                                },
                              },
                              required: ["role", "source"],
                            },
                          },
                        },
                        required: ["group", "assignments"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["groups", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-assignable-users-for-user-group",
            title: "List assignable users",
            description:
              "Returns all users that are not yet assigned to the given group and hence, can be assigned to this group.\nSee the `for_role_id` parameter for a description of different search modes.",
            path: "/api/admin/users/v4/user-groups/{group_id}/assignable-users",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs a match in the user's first name, last name or department.",
                    required: false,
                  },
                  {
                    name: "for_role_id",
                    type: "string",
                    description:
                      "Returns all users that are not yet assigned to this group with the given role and hence, can be assigned with this role to the group.\nIf omitted, only users that are not yet assigned with any role at all are returned.",
                    required: false,
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "USER_FIRST_NAME_ASC",
                        "USER_FIRST_NAME_DESC",
                        "USER_LAST_NAME_ASC",
                        "USER_LAST_NAME_DESC",
                      ],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "users",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        is_deleted: { type: "boolean" },
                        first_name: { type: "string", example: "Jon" },
                        last_name: { type: "string", example: "Doe" },
                        department: {
                          type: "string",
                          example: "Marketing",
                          nullable: true,
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                      required: ["id", "is_deleted", "first_name", "last_name"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/user-groups/group_id/assignable-users HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignable-users")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/user-groups/{group_id}/assignable-users",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "users": [\n    {\n      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n      "is_deleted": true,\n      "first_name": "Jon",\n      "last_name": "Doe",\n      "department": "Marketing",\n      "profile_picture": {\n        "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      }\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    users: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: { type: "string", format: "uuid" },
                          is_deleted: { type: "boolean" },
                          first_name: { type: "string", example: "Jon" },
                          last_name: { type: "string", example: "Doe" },
                          department: {
                            type: "string",
                            example: "Marketing",
                            nullable: true,
                          },
                          profile_picture: {
                            type: "object",
                            nullable: true,
                            properties: {
                              file_id: { type: "string", format: "uuid" },
                            },
                          },
                        },
                        required: [
                          "id",
                          "is_deleted",
                          "first_name",
                          "last_name",
                        ],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["users", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "search-user-group-assignments",
            title: "List user group assignments",
            description: "Get all user assignments for the given user group",
            path: "/api/admin/users/v4/user-groups/{group_id}/assignments",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs a match in the user's first name, last name or department.",
                    required: false,
                  },
                  {
                    name: "role_ids",
                    type: "array",
                    description:
                      "Only return users that have at least one of the given roles assigned.\nThe result will still contain all roles of a user.",
                    required: false,
                    items: {
                      type: "string",
                      description: "Unique identifier of a user role.",
                      format: "uuid",
                    },
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "USER_FIRST_NAME_ASC",
                        "USER_FIRST_NAME_DESC",
                        "USER_LAST_NAME_ASC",
                        "USER_LAST_NAME_DESC",
                        "ROLE_ORDER_ASC",
                        "ROLE_ORDER_DESC",
                      ],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "assignments",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        id: {
                          type: "object",
                          properties: {
                            group_id: {
                              type: "string",
                              description: "Unique identifier of a user group.",
                              format: "uuid",
                            },
                            user_id: {
                              type: "string",
                              description: "Unique identifier of a user.",
                              format: "uuid",
                            },
                            role_id: {
                              type: "string",
                              description: "Unique identifier of a user role.",
                              format: "uuid",
                            },
                          },
                          required: ["group_id", "user_id", "role_id"],
                        },
                        source: {
                          type: "string",
                          enum: ["PRIMARY", "MANUAL", "RULE"],
                        },
                        user: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            is_deleted: { type: "boolean" },
                            first_name: { type: "string", example: "Jon" },
                            last_name: { type: "string", example: "Doe" },
                            department: {
                              type: "string",
                              example: "Marketing",
                              nullable: true,
                            },
                            profile_picture: {
                              type: "object",
                              nullable: true,
                              properties: {
                                file_id: { type: "string", format: "uuid" },
                              },
                            },
                          },
                          required: [
                            "id",
                            "is_deleted",
                            "first_name",
                            "last_name",
                          ],
                        },
                      },
                      required: ["id", "source", "user"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/user-groups/group_id/assignments HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/user-groups/{group_id}/assignments",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "assignments": [\n    {\n      "id": {\n        "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n      },\n      "source": "PRIMARY",\n      "user": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      }\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    assignments: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "object",
                            properties: {
                              group_id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user group.",
                                format: "uuid",
                              },
                              user_id: {
                                type: "string",
                                description: "Unique identifier of a user.",
                                format: "uuid",
                              },
                              role_id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user role.",
                                format: "uuid",
                              },
                            },
                            required: ["group_id", "user_id", "role_id"],
                          },
                          source: {
                            type: "string",
                            enum: ["PRIMARY", "MANUAL", "RULE"],
                          },
                          user: {
                            type: "object",
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                        },
                        required: ["id", "source", "user"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["assignments", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "assign-user-to-user-group",
            title: "Create user group assignment",
            description: "Assign a user to a group with a defined role.",
            path: "/api/admin/users/v4/user-groups/{group_id}/assignments",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            globalErrorCodes: [
              "USER_GROUP_ROLE_DOES_NOT_EXIST",
              "USER_GROUP_ASSIGNMENT_ALREADY_EXISTS",
            ],
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [
              {
                title: "Body Params",
                type: "body",
                parameters: [
                  {
                    name: "role_id",
                    type: "string",
                    description: "Unique identifier of a user role.",
                    required: true,
                  },
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
            ],
            responseBody: [
              {
                title: "201",
                parameters: [
                  {
                    name: "id",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "group_id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "user_id",
                        type: "string",
                        description: "Unique identifier of a user.",
                        required: false,
                      },
                      {
                        name: "role_id",
                        type: "string",
                        description: "Unique identifier of a user role.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "source",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "user",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "is_deleted",
                        type: "boolean",
                        description: "",
                        required: false,
                      },
                      {
                        name: "first_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "last_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "profile_picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/post "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments" {:content-type :json\n                                                                                          :form-params {:role_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n                                                                                                        :user_id "3fa85f64-5717-4562-b3fc-2c963f66afa6"}\n                                                                                          :accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\nheaders = curl_slist_append(headers, "content-type: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader("accept", "application/json");\nrequest.AddHeader("content-type", "application/json");\nrequest.AddParameter("application/json", "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);',
                http: 'POST /api/admin/users/v4/user-groups/group_id/assignments HTTP/1.1\r\nAccept: application/json\r\nContent-Type: application/json\r\nHost: localhost:3000\r\nContent-Length: 99\r\n\r\n{"role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","user_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}',
                go: 'package main\n\nimport (\n\t"fmt"\n\t"strings"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments"\n\n\tpayload := strings.NewReader("{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\n\n\treq, _ := http.NewRequest("POST", url, payload)\n\n\treq.Header.Add("accept", "application/json")\n\treq.Header.Add("content-type", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse("application/json");\nRequestBody body = RequestBody.create(mediaType, "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}");\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    user_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n  })\n};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval mediaType = MediaType.parse("application/json")\nval body = RequestBody.create(mediaType, "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}")\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments")\n  .post(body)\n  .addHeader("accept", "application/json")\n  .addHeader("content-type", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments';\nconst options = {\n  method: 'POST',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: JSON.stringify({\n    role_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6',\n    user_id: '3fa85f64-5717-4562-b3fc-2c963f66afa6'\n  })\n};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json",\n                           @"content-type": @"application/json" };\nNSDictionary *parameters = @{ @"role_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6",\n                              @"user_id": @"3fa85f64-5717-4562-b3fc-2c963f66afa6" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"POST"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments" in\nlet headers = Header.add_list (Header.init ()) [\n  ("accept", "application/json");\n  ("content-type", "application/json");\n] in\nlet body = Cohttp_lwt_body.of_string "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('POST', 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments', [\n  'body' => '{\"role_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\"user_id\":\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"}',\n  'headers' => [\n    'accept' => 'application/json',\n    'content-type' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$headers.Add("content-type", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments\' -Method POST -Headers $headers -ContentType \'application/json\' -Body \'{"role_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6","user_id":"3fa85f64-5717-4562-b3fc-2c963f66afa6"}\'',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments"\n\npayload = {\n    "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n}\nheaders = {\n    "accept": "application/json",\n    "content-type": "application/json"\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments"\n\npayload <- "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nencode <- "json"\n\nresponse <- VERB("POST", url, body = payload, content_type("application/json"), accept("application/json"), encode = encode)\n\ncontent(response, "text")',
                ruby: 'require \'uri\'\nrequire \'net/http\'\n\nurl = URI("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest["accept"] = \'application/json\'\nrequest["content-type"] = \'application/json\'\nrequest.body = "{\\"role_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\",\\"user_id\\":\\"3fa85f64-5717-4562-b3fc-2c963f66afa6\\"}"\n\nresponse = http.request(request)\nputs response.read_body',
                shell:
                  'curl --request POST \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments \\\n     --header \'accept: application/json\' \\\n     --header \'content-type: application/json\' \\\n     --data \'\n{\n  "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n}\n\'',
                swift:
                  'import Foundation\n\nlet headers = [\n  "accept": "application/json",\n  "content-type": "application/json"\n]\nlet parameters = [\n  "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "POST"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [
                  { name: "accept", value: "application/json" },
                  { name: "content-type", value: "application/json" },
                ],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "POST",
                url: "/api/admin/users/v4/user-groups/{group_id}/assignments",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "201":
                '{\n  "id": {\n    "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n  },\n  "source": "PRIMARY",\n  "user": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "is_deleted": true,\n    "first_name": "Jon",\n    "last_name": "Doe",\n    "department": "Marketing",\n    "profile_picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "object",
                      properties: {
                        group_id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        user_id: {
                          type: "string",
                          description: "Unique identifier of a user.",
                          format: "uuid",
                        },
                        role_id: {
                          type: "string",
                          description: "Unique identifier of a user role.",
                          format: "uuid",
                        },
                      },
                      required: ["group_id", "user_id", "role_id"],
                    },
                    source: {
                      type: "string",
                      enum: ["PRIMARY", "MANUAL", "RULE"],
                    },
                    user: {
                      type: "object",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        is_deleted: { type: "boolean" },
                        first_name: { type: "string", example: "Jon" },
                        last_name: { type: "string", example: "Doe" },
                        department: {
                          type: "string",
                          example: "Marketing",
                          nullable: true,
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                      required: ["id", "is_deleted", "first_name", "last_name"],
                    },
                  },
                  required: ["id", "source", "user"],
                },
                statusCode: "201",
              },
            ],
            security: [{ bearer: [] }],
            method: "post",
          },
          {
            id: "search-user-group-assignments-aggregated-by-user",
            title: "List user group assignments grouped by user",
            description:
              "List all user assignments for the given user group grouped by user",
            path: "/api/admin/users/v4/user-groups/{group_id}/assignments-by-user",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                ],
              },
              {
                title: "Query Params",
                type: "query",
                parameters: [
                  {
                    name: "search_term",
                    type: "string",
                    description:
                      "A term that needs a match in the user's first name, last name or department.",
                    required: false,
                  },
                  {
                    name: "role_ids",
                    type: "array",
                    description:
                      "Only return users that have at least one of the given roles assigned.\nThe result will still contain all roles of a user.",
                    required: false,
                    items: {
                      type: "string",
                      description: "Unique identifier of a user role.",
                      format: "uuid",
                    },
                  },
                  {
                    name: "sort",
                    type: "array",
                    description:
                      'Defines the order in which the items are returned. Refer to our general "pagination" concept for more information.',
                    required: false,
                    items: {
                      type: "string",
                      enum: [
                        "USER_FIRST_NAME_ASC",
                        "USER_FIRST_NAME_DESC",
                        "USER_LAST_NAME_ASC",
                        "USER_LAST_NAME_DESC",
                      ],
                    },
                  },
                  {
                    name: "page_number",
                    type: "integer",
                    description:
                      'requested page for offset based pagination. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                  {
                    name: "page_limit",
                    type: "integer",
                    description:
                      'The maximum number of items to be contained in the response array. Refer to our general "pagination" concept for more information.',
                    required: false,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "users",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      description:
                        'List of all user group assignments for a single user group aggregated by user.\nContains one entry in "users" for each user assigned to this groups.\nEach entry in "user" contains all roles the user has in this group.\n',
                      type: "object",
                      properties: {
                        user: {
                          type: "object",
                          properties: {
                            id: { type: "string", format: "uuid" },
                            is_deleted: { type: "boolean" },
                            first_name: { type: "string", example: "Jon" },
                            last_name: { type: "string", example: "Doe" },
                            department: {
                              type: "string",
                              example: "Marketing",
                              nullable: true,
                            },
                            profile_picture: {
                              type: "object",
                              nullable: true,
                              properties: {
                                file_id: { type: "string", format: "uuid" },
                              },
                            },
                          },
                          required: [
                            "id",
                            "is_deleted",
                            "first_name",
                            "last_name",
                          ],
                        },
                        assignments: {
                          type: "array",
                          minItems: 1,
                          items: {
                            type: "object",
                            properties: {
                              role: {
                                type: "object",
                                properties: {
                                  id: {
                                    type: "string",
                                    description:
                                      "Unique identifier of a user role.",
                                    format: "uuid",
                                  },
                                  type: {
                                    type: "string",
                                    description:
                                      "The type of the role. All roles except type CUSTOM are pre defined.",
                                    enum: ["ADMIN", "MEMBER", "CUSTOM"],
                                  },
                                },
                                required: ["id", "type"],
                              },
                              source: {
                                type: "string",
                                enum: ["PRIMARY", "MANUAL", "RULE"],
                              },
                            },
                            required: ["role", "source"],
                          },
                        },
                      },
                      required: ["user", "assignments"],
                    },
                  },
                  {
                    name: "pagination",
                    type: "object",
                    description:
                      'Information about the pages. Refer to our general "pagination" concept for more information.',
                    required: true,
                    properties: [
                      {
                        name: "page_number",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_pages",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "total_elements",
                        type: "integer",
                        description: "",
                        required: false,
                      },
                      {
                        name: "page_limit",
                        type: "integer",
                        description:
                          "The page_limit value used to generate the response",
                        required: false,
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/user-groups/group_id/assignments-by-user HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/user-groups/{group_id}/assignments-by-user",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "users": [\n    {\n      "user": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "is_deleted": true,\n        "first_name": "Jon",\n        "last_name": "Doe",\n        "department": "Marketing",\n        "profile_picture": {\n          "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n        }\n      },\n      "assignments": [\n        {\n          "role": {\n            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n            "type": "ADMIN"\n          },\n          "source": "PRIMARY"\n        }\n      ]\n    }\n  ],\n  "pagination": {\n    "page_number": 0,\n    "total_pages": 0,\n    "total_elements": 0,\n    "page_limit": 0\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  description:
                    'List of all user group assignments for a single user group aggregated by user.\nContains one entry in "users" for each user assigned to this groups.\nEach entry in "user" contains all roles the user has in this group.\n',
                  type: "object",
                  properties: {
                    users: {
                      type: "array",
                      items: {
                        description:
                          'List of all user group assignments for a single user group aggregated by user.\nContains one entry in "users" for each user assigned to this groups.\nEach entry in "user" contains all roles the user has in this group.\n',
                        type: "object",
                        properties: {
                          user: {
                            type: "object",
                            properties: {
                              id: { type: "string", format: "uuid" },
                              is_deleted: { type: "boolean" },
                              first_name: { type: "string", example: "Jon" },
                              last_name: { type: "string", example: "Doe" },
                              department: {
                                type: "string",
                                example: "Marketing",
                                nullable: true,
                              },
                              profile_picture: {
                                type: "object",
                                nullable: true,
                                properties: {
                                  file_id: { type: "string", format: "uuid" },
                                },
                              },
                            },
                            required: [
                              "id",
                              "is_deleted",
                              "first_name",
                              "last_name",
                            ],
                          },
                          assignments: {
                            type: "array",
                            minItems: 1,
                            items: {
                              type: "object",
                              properties: {
                                role: {
                                  type: "object",
                                  properties: {
                                    id: {
                                      type: "string",
                                      description:
                                        "Unique identifier of a user role.",
                                      format: "uuid",
                                    },
                                    type: {
                                      type: "string",
                                      description:
                                        "The type of the role. All roles except type CUSTOM are pre defined.",
                                      enum: ["ADMIN", "MEMBER", "CUSTOM"],
                                    },
                                  },
                                  required: ["id", "type"],
                                },
                                source: {
                                  type: "string",
                                  enum: ["PRIMARY", "MANUAL", "RULE"],
                                },
                              },
                              required: ["role", "source"],
                            },
                          },
                        },
                        required: ["user", "assignments"],
                      },
                    },
                    pagination: {
                      type: "object",
                      description:
                        'Information about the pages. Refer to our general "pagination" concept for more information.',
                      properties: {
                        page_number: { type: "integer" },
                        total_pages: { type: "integer" },
                        total_elements: { type: "integer" },
                        page_limit: {
                          type: "integer",
                          description:
                            "The page_limit value used to generate the response",
                        },
                      },
                    },
                  },
                  required: ["users", "pagination"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-user-group-assignments-aggregated-by-user",
            title: "List user group assignments",
            description:
              "Get all user assignments for the given user group and user",
            path: "/api/admin/users/v4/user-groups/{group_id}/assignments-by-user/{user_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "user",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "is_deleted",
                        type: "boolean",
                        description: "",
                        required: false,
                      },
                      {
                        name: "first_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "last_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "profile_picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                  {
                    name: "assignments",
                    type: "array",
                    description: "",
                    required: true,
                    items: {
                      type: "object",
                      properties: {
                        role: {
                          type: "object",
                          properties: {
                            id: {
                              type: "string",
                              description: "Unique identifier of a user role.",
                              format: "uuid",
                            },
                            type: {
                              type: "string",
                              description:
                                "The type of the role. All roles except type CUSTOM are pre defined.",
                              enum: ["ADMIN", "MEMBER", "CUSTOM"],
                            },
                          },
                          required: ["id", "type"],
                        },
                        source: {
                          type: "string",
                          enum: ["PRIMARY", "MANUAL", "RULE"],
                        },
                      },
                      required: ["role", "source"],
                    },
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments-by-user/user_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/user-groups/{group_id}/assignments-by-user/{user_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "user": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "is_deleted": true,\n    "first_name": "Jon",\n    "last_name": "Doe",\n    "department": "Marketing",\n    "profile_picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  },\n  "assignments": [\n    {\n      "role": {\n        "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n        "type": "ADMIN"\n      },\n      "source": "PRIMARY"\n    }\n  ]\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  description:
                    'List of all user group assignments for a single user group aggregated by user.\nContains one entry in "users" for each user assigned to this groups.\nEach entry in "user" contains all roles the user has in this group.\n',
                  type: "object",
                  properties: {
                    user: {
                      type: "object",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        is_deleted: { type: "boolean" },
                        first_name: { type: "string", example: "Jon" },
                        last_name: { type: "string", example: "Doe" },
                        department: {
                          type: "string",
                          example: "Marketing",
                          nullable: true,
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                      required: ["id", "is_deleted", "first_name", "last_name"],
                    },
                    assignments: {
                      type: "array",
                      minItems: 1,
                      items: {
                        type: "object",
                        properties: {
                          role: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description:
                                  "Unique identifier of a user role.",
                                format: "uuid",
                              },
                              type: {
                                type: "string",
                                description:
                                  "The type of the role. All roles except type CUSTOM are pre defined.",
                                enum: ["ADMIN", "MEMBER", "CUSTOM"],
                              },
                            },
                            required: ["id", "type"],
                          },
                          source: {
                            type: "string",
                            enum: ["PRIMARY", "MANUAL", "RULE"],
                          },
                        },
                        required: ["role", "source"],
                      },
                    },
                  },
                  required: ["user", "assignments"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "get-user-group-assignment",
            title: "Get user group assignment",
            description: "Returns a single user group assignment",
            path: "/api/admin/users/v4/user-groups/{group_id}/assignments/{user_id}/{role_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                  {
                    name: "role_id",
                    type: "string",
                    description: "Unique identifier of a user role.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [
              {
                title: "200",
                parameters: [
                  {
                    name: "id",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "group_id",
                        type: "string",
                        description: "Unique identifier of a user group.",
                        required: false,
                      },
                      {
                        name: "user_id",
                        type: "string",
                        description: "Unique identifier of a user.",
                        required: false,
                      },
                      {
                        name: "role_id",
                        type: "string",
                        description: "Unique identifier of a user role.",
                        required: false,
                      },
                    ],
                  },
                  {
                    name: "source",
                    type: "string",
                    description: "",
                    required: true,
                  },
                  {
                    name: "user",
                    type: "object",
                    description: "",
                    required: true,
                    properties: [
                      {
                        name: "id",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "is_deleted",
                        type: "boolean",
                        description: "",
                        required: false,
                      },
                      {
                        name: "first_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "last_name",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "department",
                        type: "string",
                        description: "",
                        required: false,
                      },
                      {
                        name: "profile_picture",
                        type: "object",
                        description: "",
                        required: false,
                        properties: [
                          {
                            name: "file_id",
                            type: "string",
                            description: "",
                            required: false,
                          },
                        ],
                      },
                    ],
                  },
                ],
                type: "response",
              },
            ],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/get "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id" {:accept :json})',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, "accept: application/json");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader("accept", "application/json");\nIRestResponse response = client.Execute(request);',
                http: "GET /api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id HTTP/1.1\r\nAccept: application/json\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id"\n\n\treq, _ := http.NewRequest("GET", url, nil)\n\n\treq.Header.Add("accept", "application/json")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id")\n  .get()\n  .addHeader("accept", "application/json")\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id';\nconst options = {method: 'GET', headers: {accept: 'application/json'}};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @"accept": @"application/json" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"GET"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id" in\nlet headers = Header.add (Header.init ()) "accept" "application/json" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('GET', 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id', [\n  'headers' => [\n    'accept' => 'application/json',\n  ],\n]);\n\necho $response->getBody();",
                powershell:
                  '$headers=@{}\n$headers.Add("accept", "application/json")\n$response = Invoke-WebRequest -Uri \'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id\' -Method GET -Headers $headers',
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id"\n\nheaders = {"accept": "application/json"}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id"\n\nresponse <- VERB("GET", url, content_type("application/octet-stream"), accept("application/json"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"accept\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request GET \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id \\\n     --header 'accept: application/json'",
                swift:
                  'import Foundation\n\nlet headers = ["accept": "application/json"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "GET"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [{ name: "accept", value: "application/json" }],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "GET",
                url: "/api/admin/users/v4/user-groups/{group_id}/assignments/{user_id}/{role_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {
              "200":
                '{\n  "id": {\n    "group_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "user_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "role_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n  },\n  "source": "PRIMARY",\n  "user": {\n    "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "is_deleted": true,\n    "first_name": "Jon",\n    "last_name": "Doe",\n    "department": "Marketing",\n    "profile_picture": {\n      "file_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"\n    }\n  }\n}',
            },
            responseBodySchemas: [
              {
                schema: {
                  type: "object",
                  properties: {
                    id: {
                      type: "object",
                      properties: {
                        group_id: {
                          type: "string",
                          description: "Unique identifier of a user group.",
                          format: "uuid",
                        },
                        user_id: {
                          type: "string",
                          description: "Unique identifier of a user.",
                          format: "uuid",
                        },
                        role_id: {
                          type: "string",
                          description: "Unique identifier of a user role.",
                          format: "uuid",
                        },
                      },
                      required: ["group_id", "user_id", "role_id"],
                    },
                    source: {
                      type: "string",
                      enum: ["PRIMARY", "MANUAL", "RULE"],
                    },
                    user: {
                      type: "object",
                      properties: {
                        id: { type: "string", format: "uuid" },
                        is_deleted: { type: "boolean" },
                        first_name: { type: "string", example: "Jon" },
                        last_name: { type: "string", example: "Doe" },
                        department: {
                          type: "string",
                          example: "Marketing",
                          nullable: true,
                        },
                        profile_picture: {
                          type: "object",
                          nullable: true,
                          properties: {
                            file_id: { type: "string", format: "uuid" },
                          },
                        },
                      },
                      required: ["id", "is_deleted", "first_name", "last_name"],
                    },
                  },
                  required: ["id", "source", "user"],
                },
                statusCode: "200",
              },
            ],
            security: [{ bearer: [] }],
            method: "get",
          },
          {
            id: "delete-user-group-assignment",
            title: "Delete user group assignment",
            description: "Delete a specific user group assignment",
            path: "/api/admin/users/v4/user-groups/{group_id}/assignments/{user_id}/{role_id}",
            isDeprecated: false,
            isExperimental: true,
            isInternal: true,
            parameters: [
              {
                title: "Path Params",
                type: "path",
                parameters: [
                  {
                    name: "group_id",
                    type: "string",
                    description: "Unique identifier of a user group.",
                    required: true,
                  },
                  {
                    name: "user_id",
                    type: "string",
                    description: "Unique identifier of a user.",
                    required: true,
                  },
                  {
                    name: "role_id",
                    type: "string",
                    description: "Unique identifier of a user role.",
                    required: true,
                  },
                ],
              },
            ],
            requestBody: [],
            responseBody: [{ title: "200", parameters: [], type: "response" }],
            request: {
              snippets: {
                c: 'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                clojure:
                  '(require \'[clj-http.client :as client])\n\n(client/delete "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id")',
                cplusplus:
                  'CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");\ncurl_easy_setopt(hnd, CURLOPT_URL, "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id");\n\nCURLcode ret = curl_easy_perform(hnd);',
                csharp:
                  'var client = new RestClient("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);',
                http: "DELETE /api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id HTTP/1.1\r\nHost: localhost:3000\r\n\r\n",
                go: 'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"io/ioutil"\n)\n\nfunc main() {\n\n\turl := "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id"\n\n\treq, _ := http.NewRequest("DELETE", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}',
                java: 'OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id")\n  .delete(null)\n  .build();\n\nResponse response = client.newCall(request).execute();',
                javascript:
                  "const options = {method: 'DELETE'};\n\nfetch('http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id', options)\n  .then(response => response.json())\n  .then(response => console.log(response))\n  .catch(err => console.error(err));",
                kotlin:
                  'val client = OkHttpClient()\n\nval request = Request.Builder()\n  .url("http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id")\n  .delete(null)\n  .build()\n\nval response = client.newCall(request).execute()',
                node: "const fetch = require('node-fetch');\n\nconst url = 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id';\nconst options = {method: 'DELETE'};\n\nfetch(url, options)\n  .then(res => res.json())\n  .then(json => console.log(json))\n  .catch(err => console.error('error:' + err));",
                objectivec:
                  '#import <Foundation/Foundation.h>\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@"DELETE"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@"%@", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@"%@", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];',
                ocaml:
                  'open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id" in\n\nClient.call `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)',
                php: "<?php\nrequire_once('vendor/autoload.php');\n\n$client = new \\GuzzleHttp\\Client();\n\n$response = $client->request('DELETE', 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id');\n\necho $response->getBody();",
                powershell:
                  "$response = Invoke-WebRequest -Uri 'http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id' -Method DELETE",
                python:
                  'import requests\n\nurl = "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id"\n\nresponse = requests.delete(url)\n\nprint(response.text)',
                r: 'library(httr)\n\nurl <- "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id"\n\nresponse <- VERB("DELETE", url, content_type("application/octet-stream"))\n\ncontent(response, "text")',
                ruby: "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body",
                shell:
                  "curl --request DELETE \\\n     --url http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id",
                swift:
                  'import Foundation\n\nlet request = NSMutableURLRequest(url: NSURL(string: "http://localhost:3000/api/admin/users/v4/user-groups/group_id/assignments/user_id/role_id")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = "DELETE"\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error as Any)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()',
              },
              request: {
                cookies: [],
                headers: [],
                headersSize: 0,
                queryString: [],
                bodySize: 0,
                method: "DELETE",
                url: "/api/admin/users/v4/user-groups/{group_id}/assignments/{user_id}/{role_id}",
                httpVersion: "HTTP/1.1",
              },
            },
            responseExamples: {},
            responseBodySchemas: [{ schema: null, statusCode: "200" }],
            security: [{ bearer: [] }],
            method: "delete",
          },
        ],
      },
    ],
  },
] as unknown as ApiDocumentation[];
