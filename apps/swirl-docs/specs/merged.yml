openapi: 3.0.3
info:
  title: Flip API V3
  version: "3.0"
  contact:
    name: Flip
    url: "https://www.getflip.com"
  description: Flip API version 3
servers:
  - url: "http://localhost:3000"
security:
  - bearer: []
paths:
  /api/v3/tasks:
    get:
      x-experimental: true
      tags:
        - tasks
      summary: Get all tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTasksResponse"
      operationId: get-tasks
      description: Retrieves a list of all tasks visible to the acting user.
      parameters:
        - name: received_tasks_progress_status
          in: query
          allowEmptyValue: true
          schema:
            $ref: "#/components/schemas/ReceivedTasksProgressStatus"
        - name: distributed_tasks_progress_status
          in: query
          allowEmptyValue: true
          schema:
            $ref: "#/components/schemas/DistributedTasksProgressStatus"
        - schema:
            type: integer
            format: int32
            minimum: 0
          in: query
          name: _page_limit
          description: >-
            The maximum number of items to be contained in the response array.
            Refer to our general "pagination" concept for more information.
        - $ref: "#/components/parameters/_page_cursor"
        - $ref: "#/components/parameters/external_id"
        - $ref: "#/components/parameters/_sort"
    post:
      x-experimental: true
      tags:
        - tasks
      summary: Create a new task
      operationId: create-task
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskInformation"
      description: Creates a new task with the acting user as author.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskCreation"
        description: ""
  /api/v3/tasks/count:
    get:
      x-experimental: true
      tags:
        - tasks
      summary: Get number of tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TasksCounter"
      operationId: get-tasks-count
      description: >-
        Retrieve a count of the number of tasks by their assignment progress
        status of the acting user.
      parameters: []
  "/api/v3/tasks/{task_id}":
    parameters:
      - schema:
          type: string
          format: uuid
        name: task_id
        in: path
        required: true
        description: The primary identifier of the task to access.
    delete:
      x-experimental: true
      tags:
        - tasks
      summary: Delete a task
      operationId: delete-task
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskInformation"
      description: Deletes the task with this id.
    patch:
      x-experimental: true
      tags:
        - tasks
      summary: Modify/Update existing task
      operationId: update-task
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskInformation"
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/UpdateTask"
      description: >-
        Modifies certain contents or settings of a previously created task. To
        change the assignments of a task, see the `/tasks/{task_id}/assignments`
        path.
  "/api/v3/tasks/{task_id}/assignments":
    parameters:
      - schema:
          type: string
          format: uuid
        name: task_id
        in: path
        required: true
        description: The primary identifier of the task to access.
    get:
      x-experimental: true
      tags:
        - tasks
      summary: Get all task assignments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskAssignmentsResponse"
      operationId: get-task-assignments
      description: Retrieves a list of all assignments of a specific task.
      parameters:
        - schema:
            type: string
          name: _embed
          in: query
          required: false
          description: >-
            Defines the values to embed into the response body. Refer to our
            general "embedment" concept for more information.
        - $ref: "#/components/parameters/_page_cursor"
        - schema:
            type: integer
            default: 25
            example: 42
            minimum: 1
            maximum: 100
          in: query
          name: _page_limit
          description: >-
            The maximum number of items to be contained in the response array.
            Refer to our general "pagination" concept for more information.
        - schema:
            type: string
            pattern: ^\+|\-$
            default: +
          in: query
          name: _sort
          description: >-
            Defines the order in which the items are returned. Refer to our
            general "pagination" concept for more information.
          examples:
            standard:
              value: +
            reversed:
              value: "-"
    post:
      x-experimental: true
      tags:
        - tasks
      summary: Create new task assignment
      operationId: create-task-assignment
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostTaskAssignmentsResponse"
      description: Assigns a task to a new user or group.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTaskAssignmentsRequest"
        description: ""
  "/api/v3/tasks/assignments/{assignment_id}":
    parameters:
      - schema:
          type: string
          format: uuid
        name: assignment_id
        in: path
        required: true
        description: The primary identifier of the assignment to access.
    delete:
      x-experimental: true
      tags:
        - tasks
      summary: Delete existing task assignment
      operationId: delete-task-assignment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTaskAssignmentsResponse"
      description: Removes an assignment from a task.
  "/api/v3/tasks/{task_id}/assignments/batch":
    parameters:
      - schema:
          type: string
          format: uuid
        name: task_id
        in: path
        required: true
        description: The primary identifier of the task to access.
    post:
      x-experimental: true
      tags:
        - tasks
      summary: Create multiple task assignments
      operationId: batch-create-task-assignment
      responses:
        "200":
          description: OK
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTaskAssignmentsRequest"
      description: Creates multiple assignments on a task at once.
    delete:
      x-experimental: true
      tags:
        - tasks
      summary: Delete multiple task assignments
      description: Removes multiple assignments from a task at once.
      operationId: batch-delete-task-assignments
      responses:
        "200":
          description: OK
          content: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteTaskAssignmentsRequest"
  "/api/v3/tasks/{task_id}/comments":
    parameters:
      - schema:
          type: string
        name: task_id
        in: path
        required: true
    get:
      x-experimental: true
      summary: Get all task comments
      operationId: get-tasks-comments
      tags:
        - tasks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskCommentsResponse"
      description: Retrieves a list of all comments on a specific task.
      parameters:
        - $ref: "#/components/parameters/_page_cursor"
        - $ref: "#/components/parameters/_page_limit"
        - $ref: "#/components/parameters/_sort"
    post:
      x-experimental: true
      tags:
        - tasks
      summary: Create a task comment
      operationId: create-task-comment
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskComment"
      description: Adds a new comment to a task.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskCommentCreation"
        description: ""
  "/api/v3/tasks/comments/{comment_id}":
    parameters:
      - schema:
          type: string
        name: comment_id
        in: path
        required: true
    delete:
      x-experimental: true
      tags:
        - tasks
      summary: Delete existing task comment
      operationId: delete-task-comment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTaskCommentsResponse"
      description: Removes a comment from a task or marks it as "deleted".
  "/api/v3/tasks/comments/{comment_id}/reactions":
    parameters:
      - schema:
          type: string
        name: comment_id
        in: path
        required: true
    get:
      x-experimental: true
      tags:
        - tasks
      summary: Get all task reactions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskCommentsReactionsResponse"
      operationId: get-task-comment-reactions
      description: Gets all Reactions of a task comment
      parameters:
        - schema:
            type: string
          name: _embed
          in: query
          required: false
          description: >-
            Defines the values to embed into the response body. Refer to our
            general "embedment" concept for more information.
        - schema:
            type: array
            items:
              $ref: "#/components/schemas/ReactionType"
          in: query
          name: type_filter
          description: The Reaction Types to get
        - $ref: "#/components/parameters/_page_cursor"
        - $ref: "#/components/parameters/_page_limit"
        - $ref: "#/components/parameters/_sort"
    post:
      x-experimental: true
      tags:
        - tasks
      summary: Create new task comment reaction
      operationId: create-task-comment-reaction
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostTaskCommentsReactionsResponse"
      description: Reacts to a task comment.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTaskCommentsReactionsRequest"
  "/api/v3/tasks/comments/{comment_id}/reactions/{user_id}":
    parameters:
      - schema:
          type: string
        name: comment_id
        in: path
        required: true
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    delete:
      x-experimental: true
      tags:
        - tasks
      summary: Delete task comment reaction
      operationId: delete-task-comment-reaction
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTaskCommentsReactionsResponse"
      description: Removes the reaction from a task comment.
  /api/v3/admin/users:
    parameters: []
    get:
      x-experimental: true
      summary: Search Users
      description: >-
        Allows admin users to search users by a query string, filter by status
        and sort the resulting list by various user attributes.
      operationId: search-users
      responses:
        "200":
          description: A paged result list of matching users.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserManagementUserListResponse"
      parameters:
        - name: search_term
          description: >-
            A term that needs a match in the user's first name, last name,
            username, email, department or location.
          in: query
          schema:
            type: string
        - name: status
          description: A filter for the user's status.
          in: query
          schema:
            $ref: "#/components/schemas/UserStatus"
        - name: sort
          description: >-
            Defines the order in which the items are returned. Refer to our
            general "pagination" concept for more information.
          in: query
          schema:
            type: array
            maxItems: 5
            items:
              $ref: "#/components/schemas/UserManagementUserListSortingOption"
        - name: page_limit
          description: See general API concepts
          in: query
          schema:
            type: integer
            maximum: 50
            minimum: 1
        - name: page_number
          description: See general API concepts
          in: query
          schema:
            type: integer
            minimum: 1
      tags:
        - user-admin
    post:
      x-experimental: true
      summary: Create User
      description: |-
        Allows an admin user to create a new user.
        Endpoint-specific error codes are:
          - USER_ID_ALREADY_EXISTS (another user exists with the same id),
          - USERNAME_ALREADY_EXISTS (another user exists with the same username),
          - EXTERNAL_ID_ALREADY_EXISTS (another user exists with the same external ID)
      operationId: create-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserManagementUsersPostRequest"
      responses:
        "200":
          description:
            The linked identity as the idempotent result of a repeated request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserManagementUserResponse"
        "201":
          description: The created user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserManagementUserResponse"
      tags:
        - user-admin
  "/api/v3/admin/users/{userId}":
    parameters:
      - schema:
          $ref: "#/components/schemas/UserId"
        name: userId
        in: path
        required: true
    get:
      x-experimental: true
      summary: Get User Details
      description: Allows an admin user to get details about a user by its ID.
      responses:
        "200":
          description: The requested user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserManagementUserResponse"
      operationId: get-user
      tags:
        - user-admin
    patch:
      x-experimental: true
      summary: Update User
      description: |-
        Allows an admin user to (partially) update a user.
        Endpoint-specific error codes are:
         - USERNAME_ALREADY_EXISTS (another user exists with the same username),
         - EXTERNAL_ID_ALREADY_EXISTS (another user exists with the same external ID)
      operationId: patch-users-userId
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/UserManagementUsersPatchRequest"
      responses:
        "200":
          description: The updated user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserManagementUserResponse"
      tags:
        - user-admin
    delete:
      x-experimental: true
      summary: Delete User
      description: Allows an admin user to delete a user identified by its ID.
      operationId: delete-user
      responses:
        "200":
          description: The user that has been deleted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserManagementUserResponse"
      tags:
        - user-admin
  "/api/v3/admin/users/{userId}/lock":
    parameters:
      - schema:
          $ref: "#/components/schemas/UserId"
        name: userId
        in: path
        required: true
    post:
      x-experimental: true
      summary: Lock User
      description: >-
        Allows an admin user to lock a user identified by its ID. A locked user
        cannot log-in anymore or get refresh tokens.
      operationId: lock-user
      responses:
        "200":
          description: The user that has been locked.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserManagementUserResponse"
      tags:
        - user-admin
  "/api/v3/admin/users/{userId}/unlock":
    parameters:
      - schema:
          $ref: "#/components/schemas/UserId"
        name: userId
        in: path
        required: true
    post:
      x-experimental: true
      summary: Unlock User
      description: >-
        Allows an admin user to unlock a user identified by its ID. A previously
        locked user can log-in again once unlocked.
      operationId: unlock-user
      responses:
        "200":
          description: The user that has been unlocked.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserManagementUserResponse"
      tags:
        - user-admin
  /api/v3/admin/users/batch:
    parameters: []
    delete:
      x-experimental: true
      summary: Delete multiple users
      description: Allows an admin user to delete multiple users at once.
      operationId: delete-multiple-users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserManagementUsersBatchDeleteRequest"
      responses:
        "200":
          description: See general API concepts.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserManagementUsersBatchDeleteResponse"
      tags:
        - user-admin
  /api/v3/admin/users/identity-providers:
    get:
      x-experimental: true
      x-internal: true
      summary: List linkable identity providers
      description: >-
        Provides a list of configured identity providers that can be linked to a
        user.
      operationId: get-linkable-identity-providers
      responses:
        "200":
          description: List of linkable identity providers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkableIdentityProvidersResponse"
      tags:
        - user-admin
  "/api/v3/admin/users/{userId}/linked-identities":
    parameters:
      - schema:
          $ref: "#/components/schemas/UserId"
        name: userId
        in: path
        required: true
    get:
      x-experimental: true
      summary: Get linked identities for user
      description:
        Lists all identities of a remote identity provider linked to a user.
      operationId: get-linked-identities
      responses:
        "200":
          description: List of linked identities for that user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedIdentityListResponse"
      tags:
        - user-admin
    post:
      x-experimental: true
      summary: Link identity to user
      description: >-
        Links an identity of a remote identity provider to a user.

        Endpoint-specific error codes are:

        - INVALID_IDENTITY_PROVIDER (returned if the identity provider is not
        configured).
      operationId: create-linked-identity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkedIdentityPostRequest"
      responses:
        "200":
          description:
            The linked identity as the idempotent result of a repeated request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedIdentityResponse"
        "201":
          description: The identity linked to the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedIdentityResponse"
      tags:
        - user-admin
  "/api/v3/admin/users/{userId}/linked-identities/{providerId}":
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UserId"
      - name: providerId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/IdentityProviderId"
    delete:
      x-experimental: true
      summary: Delete linked identity
      description:
        Deletes a linked identity of a remote identity provider from a user.
      operationId: delete-linked-identity
      responses:
        "200":
          description: The identity that was removed from the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedIdentityResponse"
      tags:
        - user-admin
  "/api/v3/admin/users/{userId}/password":
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UserId"
    get:
      x-experimental: true
      summary: Check if a password is configured for a user
      description: Checks if a password is configured for a user.
      operationId: has-password
      responses:
        "204":
          description: A password is configured for the user.
        "404":
          description: No password is configured for the user.
      tags:
        - user-admin
    post:
      x-experimental: true
      summary: Set password for user
      description: |-
        Allows an admin user to set a new password for a user.
        Endpoint-specific error codes are:
         - PASSWORD_POLICY_NOT_RESPECTED (new password does not fulfill the password policy),
         - PASSWORD_HISTORY_POLICY_NOT_RESPECTED (new password has been used before)'
      operationId: change-password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserManagementPasswordPostRequest"
      responses:
        "204":
          description: The new password has been set.
      tags:
        - user-admin
    delete:
      x-experimental: true
      summary: Delete password of user
      description: >-
        Allows an admin user to remove the password configured for a user. The
        user can no longer log-in via its credentials afterwards.'
      operationId: delete-password
      responses:
        "204":
          description: The password has been deleted.
      tags:
        - user-admin
  "/api/v3/admin/users/{userId}/account-actions-email":
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UserId"
    post:
      x-experimental: true
      summary: Send email requesting account actions
      description: |-
        Sends an email to a user requesting one or multiple account actions.
        Endpoint-specific error codes are:
          - USER_IS_LOCKED (user is locked and therefore email cannot be sent),
          - USER_HAS_NOT_EMAIL_ADDRESS (no email address configured for the user)'
      operationId: send-account-actions-email
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountActionsEmailPostRequest"
      responses:
        "204":
          description: Acknowledgment that account action request was received.
      tags:
        - user-admin
  /api/v3/admin/users/account-actions-email/batch:
    post:
      x-experimental: true
      summary: Send emails to multiple users requesting account actions
      description: >-
        Sends emails to multiple users requesting one or multiple account
        actions.

        Endpoint-specific error codes on each result equal those defined for
        corresponding single operation.'
      operationId: send-multiple-account-actions-emails
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountActionsEmailBatchPostRequest"
      responses:
        "200":
          description: List of responses from the single operation executions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountActionsEmailBatchPostResponse"
      tags:
        - user-admin
  /api/v3/users/me/password:
    get:
      x-experimental: true
      summary: Check if authenticated user has password
      description: >-
        Provides the authenticated user information whether or not a password is
        configured for themselves.
      operationId: do-I-have-a-password
      responses:
        "204":
          description: A password is configured for the user.
        "404":
          description: No password is configured for the user.
      tags:
        - user-me
    post:
      x-experimental: true
      summary: Change password of authenticated user
      description: |-
        Allows the authenticated user to change their own password.
        Endpoint-specific error codes are:
          - WRONG_PASSWORD (old password not correct),
          - PASSWORD_POLICY_NOT_RESPECTED (new password does not fulfill the password policy),
          - PASSWORD_HISTORY_POLICY_NOT_RESPECTED (new password has been used before)'
      operationId: change-my-password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserMePasswordPostRequest"
      responses:
        "204":
          description: The new password has been set.
      tags:
        - user-me
  /api/v3/users/me/email:
    get:
      x-experimental: true
      summary: Get email address of authenticated user
      description:
        Retrieves information about the email address of the authenticated user.
      operationId: get-my-account-email
      responses:
        "200":
          description:
            The current email address and whether you are allowed to change it.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMeEmailResponse"
      tags:
        - user-me
    post:
      x-experimental: true
      summary: Change email address of authenticated user
      description: |-
        Allows the authenticated user to change their own email address.
        Endpoint-specific error codes are:
          - INVALID_EMAIL_ADDRESS (the email address is not valid)'
      operationId: change-my-account-email
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserMeEmailPostRequest"
      responses:
        "204":
          description: The new email address has been set.
      tags:
        - user-me
components:
  schemas:
    ExternalId:
      type: string
      minLength: 1
      maxLength: 200
      nullable: true
      description:
        An arbitrary string referencing an external entity identifier.
    EmbeddedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        is_deleted:
          type: boolean
        username:
          type: string
          example: xxsasukexx
    EmbeddedAttachment:
      type: object
      properties:
        id:
          type: string
          format: uuid
    ProfilePicture:
      type: object
      nullable: true
      properties:
        file_id:
          type: string
          format: uuid
    ReactionType:
      type: string
      enum:
        - THUMBS_UP
        - CLAPPING
        - HEART
        - INSPIRING
        - HAPPY
        - SAD
    ReactionsType:
      type: array
      items:
        $ref: "#/components/schemas/ReactionType"
      description: ""
    CursorPagination:
      type: object
      description: >-
        Information about the next page to fetch. Refer to our general
        "pagination" concept for more information.
      properties:
        next_cursor:
          type: string
          description: >-
            A cursor string pointing to the first element not contained in this
            response. Refer to our general "pagination" concept for more
            information.
          nullable: true
        has_more:
          type: boolean
          description: >-
            Describes whether there is at least one more element contained in
            this collection after the given response. Refer to our general
            "pagination" concept for more information.
    OffsetPagination:
      type: object
      description: >-
        Information about the pages. Refer to our general "pagination" concept
        for more information.
      properties:
        page_number:
          type: integer
        total_pages:
          type: integer
        total_elements:
          type: integer
        page_limit:
          type: integer
          description: The _page_limit value used to generate the response
    HttpStatusCode:
      type: integer
      format: int32
      description: "A well know HTTP status code (e.g. 200, 201, 400)."
    Problem:
      type: object
      description: An RFC 7807 inspired "problem JSON" object.
      title: Problem
      properties:
        status:
          $ref: "#/components/schemas/HttpStatusCode"
        title:
          type: string
          description: >-
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for

            non technical stakeholders and not localized.

            Opposed to the recommendation in RFC 7807 the title is likely to not
            contain http status code names.
          example: No user with the given id found
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the

            problem and give advice on how to proceed. Written in English and
            readable for engineers, usually not suited

            for non technical stakeholders and not localized.
          example: User with id <id> was not found. Please ...
          nullable: true
        error_code:
          type: string
          description: >-
            A technical error code that uniquely identifies the problem type in
            the context of the provided API.
          example: USER_NOT_FOUND
          nullable: true
        field:
          type: string
          description:
            The technical field name from the API that caused the problem.
          example: user_id
          nullable: true
      required:
        - status
        - title
    ReceivedTasksProgressStatus:
      title: ReceivedTasksProgressStatus
      description: >-
        Only return tasks that have been assigned to the acting user and have
        their assignment progress status set to one of the given arguments.
      type: string
      items:
        type: string
        enum:
          - OPEN
          - NEW
          - FINISHED
    DistributedTasksProgressStatus:
      title: DistributedTasksProgressStatus
      description: >-
        Only return tasks that have been assigned by the acting user and have
        their task progress status set to one of the given arguments.
      type: string
      items:
        type: string
        enum:
          - OPEN
          - IN_PROGRESS
          - FINISHED
          - CANCELLED
    Tasks:
      title: Tasks
      type: object
      additionalProperties: false
      properties:
        tasks:
          type: array
          description: >-
            An array of all retrieved tasks, according to the pagination and
            sort arguments.
          items:
            $ref: "#/components/schemas/TaskInformation"
        _pagination:
          $ref: "#/components/schemas/CursorPagination"
      description: Representation of a collection of tasks.
      x-examples:
        Example 1:
          tasks:
            - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              external_id: string
              author_id: 78424c75-5c41-4b25-9735-3c9f7d05c59e
              title: Wet-clean all aisles
              body:
                raw_text: >-
                  Hey @2b2b2af0-9644-4c0e-a606-5c3aa6ec1004, can you please
                  clean the aisles until tomorrow?
                html_body: >-
                  Hey @2b2b2af0-9644-4c0e-a606-5c3aa6ec1004, can you please
                  clean the aisles <b>until tomorrow</b>?
              created_at: "2019-08-24T14:15:22Z"
              updated_at: "2019-08-24T14:15:22Z"
              is_deleted: false
              language: en-US
              settings:
                comments_enabled: true
              comments_count: 0
              due_at:
                date: "2019-08-25"
                discriminator: DATE
              attachments:
                - id: string
              progress_status: OPEN
              mentions:
                - id: 2b2b2af0-9644-4c0e-a606-5c3aa6ec1004
                  is_deleted: false
                  username: Peter M.
              distribution_kind: DISTRIBUTED_WITHOUT_AUTHOR
              distribution_summary:
                new_count: 1
                open_count: 0
                finished_count: 0
          _pagination:
            next_cursor: Zm9vYmFyMTIz
            has_more: false
    TaskInformation:
      title: TaskInformation
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the task.
        external_id:
          $ref: "#/components/schemas/ExternalId"
        author_id:
          type: string
          format: uuid
          description: The unique identifier of the user that created this task.
        title:
          type: string
          maxLength: 150
          example: Wet-clean all aisles
          description: A short descriptive title of the task.
        body:
          $ref: "#/components/schemas/TaskBody"
        created_at:
          type: string
          format: date-time
          description: |-
            The point in time at which this task was created.
            Only visible to the author of the task.
          nullable: true
        modified_at:
          type: string
          format: date-time
          description: |-
            The point in time at which this task was last modified.
            Only visible to the author of the task.
          nullable: true
        is_deleted:
          type: boolean
          description: >-
            Whether the task has been marked as deleted. Note that it is not
            guaranteed for deleted tasks to be accessible at all.
        language:
          type: string
          format: bcp47
          example: en-US
          description: The detected language of the task.
        settings:
          type: object
          description: A collection of settings configured for a task.
          properties:
            comments_enabled:
              type: boolean
              description: Whether comments can be created on this task.
        comments_count:
          type: integer
          description: The total number of non-deleted comments on this task.
          format: int32
        due_at:
          $ref: "#/components/schemas/TaskDueAt"
          description: >-
            The point in time by which this task should be completed before
            being marked as overdue.
        attachments:
          type: array
          description: >-
            An array of attachments contained in the body of a task. Refer to
            our general "attachment" concept for mo
          items:
            $ref: "#/components/schemas/EmbeddedAttachment"
        progress_status:
          type: string
          description: >-
            The progress status of the task, describing accumulated assignment
            statuses.

            * `OPEN`: No assignee has made any progress on the task yet.

            * `IN_PROGRESS`: At least one assignee has finished the task.

            * `FINISHED`: All assignees have finished the task.

            * `CANCELLED`: The author has cancelled the task.


            Only visible to the author of the task.
          enum:
            - OPEN
            - IN_PROGRESS
            - FINISHED
            - CANCELLED
          nullable: true
        distribution_kind:
          type: string
          enum:
            - PERSONAL
            - DISTRIBUTED_WITHOUT_AUTHOR
          description: >-
            Describes how the task was distributed by the author.

            * `PERSONAL`: Only the author is assigned to the task.

            * `DISTRIBUTED_WITHOUT_AUTHOR`: Only users other than the author are
            assigned to the task.


            Only visible to the author of the task.
          nullable: true
        distribution_summary:
          type: object
          description: |-
            Aggregated data about assignments of the task.

            Only visible to the author of the task.
          nullable: true
          properties:
            new_count:
              type: integer
              minimum: 0
              description: >-
                The number of assignments of the task that have progress status
                `NEW`.
              format: int32
            open_count:
              type: integer
              minimum: 0
              description: >-
                The number of assignments of the task that have progress status
                `OPEN`.
              format: int32
            finished_count:
              type: integer
              minimum: 0
              description: >-
                The number of assignments of the task that have progress status
                `FINISHED`.
              format: int32
      description: Representation of a single task.
      x-examples:
        Example:
          $ref: "#/components/examples/TaskInformationExample"
    TaskAssignments:
      title: TaskAssignments
      type: object
      properties:
        assignments:
          type: array
          description: >-
            An array of all retrieved assignments, according to the pagination
            and sort arguments.
          items:
            $ref: "#/components/schemas/TaskAssignment"
        _pagination:
          $ref: "#/components/schemas/CursorPagination"
      description: Representation of a collection of tasks.
    TaskAssignment:
      title: TaskAssignment
      type: object
      additionalProperties: false
      description: >-
        Representation of a single task which is assigned to a particular
        recipient.
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the assignment.
        user_id:
          type: string
          format: uuid
          description: The unique identifier of the assignee (user).
        task_id:
          type: string
          format: uuid
          description: The unique identifier of the parent task.
        progress_status:
          type: string
          enum:
            - NEW
            - OPEN
            - FINISHED
          nullable: true
          description: |-
            The progress status of the individual assignment.
            * `NEW`: The assignee has never seen the task before.
            * `OPEN`: The assignee has seen but not finished the task.
            * `FINISHED`: The assignee has finished the task.

            Only visible to the author of the task and the assignee.
        created_at:
          type: string
          format: date-time
          description: |-
            The point in time at which this assignment was created.

            Only visible to the author of the task and the assignee.
          nullable: true
        updated_at:
          type: string
          format: date-time
          description: |-
            The point in time at which this assignment was last modified.

            Only visible to the author of the task and the assignee.
          nullable: true
        deletion_status:
          type: string
          enum:
            - NOT_DELETED
            - DELETED
            - TASK_DELETED
          description: >-
            The deletion status of the assignment. Note that it is not
            guaranteed for deleted tasks to be accessible at all.

            * `NOT_DELETED`: The assignment is available and not deleted.

            * `DELETED`: The assignment has been deleted individually.

            * `TASK_DELETED`: The assignment has been deleted by consequence of
            the task itself being deleted.


            Only visible to the author of the task and the assignee.
          nullable: true
        assignee:
          nullable: true
          description: >-
            Information about the assigned user. Is only present if requested by
            the `_embed` parameter. Refer to our general "embedment" concept for
            more information.
          $ref: "#/components/schemas/EmbeddedUser"
    GetTasksResponse:
      title: GetTasksResponse
      allOf:
        - $ref: "#/components/schemas/Tasks"
      additionalProperties: false
    TaskCreation:
      title: TaskCreation
      type: object
      required:
        - title
        - settings
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the task.
          nullable: true
        external_id:
          $ref: "#/components/schemas/ExternalId"
        title:
          type: string
          maxLength: 150
          example: Wet-clean all aisles
          description: A short descriptive title of the task.
        body:
          $ref: "#/components/schemas/TaskBody"
        settings:
          type: object
          description: A collection of settings configured for a task.
          required:
            - comments_enabled
          properties:
            comments_enabled:
              type: boolean
              description: Whether comments can be created on this task.
        due_at:
          $ref: "#/components/schemas/TaskDueAt"
          description: >-
            The point in time by which this task should be completed before
            being marked as overdue.
        attachments:
          type: array
          description: >-
            An array of attachments contained in the body of a task. Refer to
            our general "attachment" concept for mo
          maxItems: 10
          items:
            $ref: "#/components/schemas/EmbeddedAttachment"
        assignments:
          type: object
          description:
            Users and user groups which are marked as assignees to this task.
          properties:
            recipient_user_ids:
              type: array
              maxItems: 100
              description: An array of user IDs.
              items:
                type: string
                format: uuid
            recipient_group_ids:
              type: array
              maxItems: 10
              description: An array of group IDs.
              items:
                type: string
                format: uuid
      additionalProperties: false
    UpdateTaskMentions:
      type: object
      description: >-
        A list of users that have been "mentioned" in the body of this task.
        Refer to our general "mentions" concept for more information.
      properties:
        user_ids:
          type: array
          maxItems: 10
          items:
            type: string
            format: uuid
    UpdateTask:
      title: UpdateTask
      type: object
      x-json-merge-patch: true
      properties:
        external_id:
          $ref: "#/components/schemas/ExternalId"
        title:
          type: string
          maxLength: 150
          example: Wet-clean all aisles
          description: A short descriptive title of the task.
        body:
          $ref: "#/components/schemas/TaskBody"
        settings:
          type: object
          description: A collection of settings configured for a task.
          properties:
            comments_enabled:
              type: boolean
              description: Whether comments can be created on this task.
        due_at:
          $ref: "#/components/schemas/TaskDueAt"
          description: >-
            The point in time by which this task should be completed before
            being marked as overdue.
        attachments:
          type: array
          description: >-
            An array of attachments contained in the body of a task. Refer to
            our general "attachment" concept for mo
          maxItems: 10
          items:
            $ref: "#/components/schemas/EmbeddedAttachment"
        mentions:
          $ref: "#/components/schemas/UpdateTaskMentions"
    TaskBody:
      type: object
      nullable: true
      properties:
        raw_text:
          type: string
          maxLength: 100000
          description: The content body of the task as unformatted raw text.
        delta_body:
          type: string
          maxLength: 100000
          description:
            The content body of the task formatted as Quill delta format.
          nullable: true
        html_body:
          type: string
          maxLength: 100000
          description: The content body of the task formatted as HTML.
          nullable: true
    TasksCounter:
      title: GetTasksCountResponse
      type: object
      properties:
        open_tasks:
          type: integer
          format: int32
          minimum: 0
          description: >-
            The number of tasks of this user with assignment progress status
            `OPEN`.
        new_tasks:
          type: integer
          format: int32
          minimum: 0
          description: >-
            The number of tasks of this user with assignment progress status
            `NEW`.
    TaskDueAt:
      title: TaskDueAt
      type: object
      discriminator:
        propertyName: due_at_type
        mapping:
          DATE: "#/components/schemas/TaskDueAtDate"
          DATE_TIME: "#/components/schemas/TaskDueAtDateTime"
      properties:
        due_at_type:
          type: string
          enum:
            - DATE
            - DATE_TIME
    TaskDueAtDate:
      title: TaskDueAt with date
      allOf:
        - $ref: "#/components/schemas/TaskDueAt"
        - type: object
          required:
            - due_at_type
          properties:
            date:
              type: string
              format: date
            due_at_type:
              type: string
              enum:
                - DATE
          x-stoplight:
            id: faa524874c08f
    TaskDueAtDateTime:
      title: TaskDueAt with date-time
      allOf:
        - $ref: "#/components/schemas/TaskDueAt"
        - type: object
          required:
            - due_at_type
          properties:
            date_time:
              type: string
              format: date-time
            due_at_type:
              type: string
              enum:
                - DATE_TIME
          x-stoplight:
            id: 129a9c55d0b62
    GetTaskAssignmentsResponse:
      title: GetTaskAssignmentsResponse
      allOf:
        - $ref: "#/components/schemas/TaskAssignments"
    DeleteTaskAssignmentsRequest:
      title: DeleteTaskAssignmentsRequest
      type: object
      description: Deletes multiple assignments on a task at once.
      properties:
        assignment_ids:
          type: array
          maxItems: 100
          items:
            type: string
            format: uuid
    PostTaskAssignmentsRequest:
      title: PostTaskAssignmentsRequest
      type: object
      description: Creates multiple assignments on a task at once.
      properties:
        assignees:
          type: array
          maxItems: 100
          items:
            $ref: "#/components/schemas/NewAssignee"
    PostTaskAssignmentsResponse:
      title: PostTaskAssignmentsResponse
      allOf:
        - $ref: "#/components/schemas/TaskAssignment"
    DeleteTaskCommentsResponse:
      title: DeleteTaskCommentsResponse
      allOf:
        - $ref: "#/components/schemas/TaskComment"
    DeleteTaskAssignmentsResponse:
      title: DeleteTaskAssignmentsResponse
      allOf:
        - $ref: "#/components/schemas/TaskAssignment"
    NewAssignee:
      title: NewAssignee
      anyOf:
        - $ref: "#/components/schemas/NewAssigneeUser"
        - $ref: "#/components/schemas/NewAssigneeGroup"
      discriminator:
        propertyName: assignee_type
        mapping:
          DATE: "#/components/schemas/NewAssigneeUser"
          DATE_TIME: "#/components/schemas/NewAssigneeGroup"
    NewAssigneeUser:
      title: NewAssignee for a user
      type: object
      required:
        - assignee_type
      properties:
        user_id:
          type: string
          format: uuid
        assignee_type:
          enum:
            - USER
    NewAssigneeGroup:
      title: NewAssignee for a group
      type: object
      required:
        - assignee_type
      properties:
        group_id:
          type: string
          format: uuid
        assignee_type:
          enum:
            - GROUP
    TaskComment:
      type: object
      description: Representation of a single task comment.
      required:
        - id
        - task_id
        - author_id
        - created_at
        - is_deleted
        - sequence_number
      properties:
        id:
          type: string
          format: uuid
        task_id:
          type: string
          format: uuid
        author_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_deleted:
          type: boolean
        sequence_number:
          type: integer
          format: int32
          minimum: 0
        body:
          type: object
          properties:
            raw_text:
              type: string
        language:
          type: string
          format: bcp47
          example: en-US
          nullable: true
        mentions:
          type: array
          items:
            $ref: "#/components/schemas/EmbeddedUser"
        reactions_count:
          type: object
          properties:
            thumbs_up_count:
              type: integer
              format: int32
              minimum: 0
            sad_count:
              type: integer
              format: int32
              minimum: 0
            happy_count:
              type: integer
              format: int32
              minimum: 0
            inspiring_count:
              type: integer
              format: int32
              minimum: 0
            heart_count:
              type: integer
              format: int32
              minimum: 0
          description: >-
            The number of reactions on this comment grouped by the reaction
            type.
    GetTaskCommentsResponse:
      title: ""
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: "#/components/schemas/TaskComment"
        next_cursor:
          type: string
        has_more:
          type: boolean
      description: ""
    TaskCommentReaction:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ReactionType"
        comment_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        is_deleted:
          type: boolean
        user:
          $ref: "#/components/schemas/EmbeddedUser"
          nullable: true
          description: >-
            Information about the user who reacted. Is only present if requested
            by the `_embed` parameter. Refer to our general "embedment" concept
            for more information.
    TaskCommentsReactingUsers:
      title: TaskCommentsReactingUsers
      type: object
      properties:
        reactions:
          $ref: "#/components/schemas/TaskCommentReaction"
        _pagination:
          $ref: "#/components/schemas/CursorPagination"
    GetTaskCommentsReactionsResponse:
      $ref: "#/components/schemas/TaskCommentsReactingUsers"
    DeleteTaskCommentsReactionsResponse:
      title: DeleteTaskCommentsReactionsResponse
      allOf:
        - $ref: "#/components/schemas/TaskCommentReaction"
    PostTaskCommentsReactionsRequest:
      title: PostTaskCommentsReactionsRequest
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ReactionsType"
        author_id:
          type: string
          format: uuid
    PostTaskCommentsReactionsResponse:
      $ref: "#/components/schemas/TaskCommentReaction"
    TaskCommentCreation:
      type: object
      required:
        - body
      properties:
        id:
          type: string
          format: uuid
        body:
          type: string
        attachments:
          type: array
          items: {}
        mentions:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
    AccountActionsEmailPostRequest:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: "#/components/schemas/RequiredAction"
        validity_minutes:
          description: Minutes that the link in the email should be valid for
          minimum: 1
          maximum: 43200
          type: integer
      required:
        - actions
        - validity_minutes
    AccountActionsEmailBatchPostRequest:
      type: object
      properties:
        items:
          type: array
          minItems: 1
          maxItems: 50
          items:
            $ref: "#/components/schemas/AccountActionsEmailBatchPostRequestItem"
      required:
        - items
    AccountActionsEmailBatchPostRequestItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        body:
          $ref: "#/components/schemas/AccountActionsEmailPostRequest"
      required:
        - id
        - body
    AccountActionsEmailBatchPostResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/AccountActionsEmailPostBatchResponseItem"
      required:
        - items
    AccountActionsEmailPostBatchResponseItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        status:
          $ref: "#/components/schemas/HttpStatusCode"
        error:
          $ref: "#/components/schemas/Problem"
      required:
        - id
        - status
    LinkedIdentityPostRequest:
      type: object
      properties:
        provider_id:
          $ref: "#/components/schemas/IdentityProviderId"
        linked_user_id:
          $ref: "#/components/schemas/LinkedIdentityUserId"
        linked_username:
          $ref: "#/components/schemas/LinkedIdentityUsername"
      required:
        - provider_id
        - linked_user_id
        - linked_username
    LinkedIdentityResponse:
      type: object
      properties:
        provider:
          $ref: "#/components/schemas/IdentityProviderReference"
        linked_user_id:
          $ref: "#/components/schemas/LinkedIdentityUserId"
        linked_username:
          $ref: "#/components/schemas/LinkedIdentityUsername"
      required:
        - provider
        - linked_user_id
        - linked_username
    LinkedIdentityListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/LinkedIdentityResponse"
    LinkableIdentityProvidersResponse:
      type: object
      properties:
        providers:
          type: array
          items:
            $ref: "#/components/schemas/IdentityProviderReference"
    UserManagementUsersBatchDeleteRequest:
      type: object
      properties:
        items:
          type: array
          minItems: 1
          maxItems: 50
          items:
            $ref: "#/components/schemas/UserManagementUsersBatchDeleteRequestItem"
      required:
        - items
    UserManagementUsersBatchDeleteRequestItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
      required:
        - id
    UserManagementUsersBatchDeleteResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/UserManagementUsersBatchDeleteResponseItems"
      required:
        - items
    UserManagementUsersBatchDeleteResponseItems:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        status:
          $ref: "#/components/schemas/HttpStatusCode"
        body:
          $ref: "#/components/schemas/UserManagementUserResponse"
        error:
          $ref: "#/components/schemas/Problem"
      required:
        - id
        - status
    UserManagementUsersPostRequest:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        external_id:
          $ref: "#/components/schemas/ExternalUserId"
        first_name:
          $ref: "#/components/schemas/FirstName"
        last_name:
          $ref: "#/components/schemas/LastName"
        email:
          $ref: "#/components/schemas/EmailAddressNullable"
        status:
          $ref: "#/components/schemas/UserStatus"
        username:
          $ref: "#/components/schemas/UserName"
        profile:
          $ref: "#/components/schemas/UserManagementUsersPostRequestProfile"
        role:
          $ref: "#/components/schemas/SystemRole"
        required_actions:
          type: array
          items:
            $ref: "#/components/schemas/RequiredAction"
      required:
        - first_name
        - last_name
        - status
        - username
        - role
    UserManagementUsersPostRequestProfile:
      type: object
      nullable: true
      properties:
        about_me:
          $ref: "#/components/schemas/UserProfileAboutMe"
        department:
          $ref: "#/components/schemas/UserProfileDepartment"
        job_title:
          $ref: "#/components/schemas/UserProfileJobTitle"
        location:
          $ref: "#/components/schemas/UserProfileLocation"
        mobile_number:
          $ref: "#/components/schemas/UserProfilePhoneNumber"
        phone_number:
          $ref: "#/components/schemas/UserProfilePhoneNumber"
    UserManagementUsersPatchRequest:
      type: object
      x-json-merge-patch: true
      properties:
        external_id:
          $ref: "#/components/schemas/ExternalUserId"
        first_name:
          $ref: "#/components/schemas/FirstName"
        last_name:
          $ref: "#/components/schemas/LastName"
        email:
          $ref: "#/components/schemas/EmailAddressNullable"
        username:
          $ref: "#/components/schemas/UserName"
        profile:
          $ref: "#/components/schemas/UserManagementUsersPatchRequestProfile"
        role:
          $ref: "#/components/schemas/SystemRole"
        required_actions:
          type: array
          items:
            $ref: "#/components/schemas/RequiredAction"
    UserManagementUsersPatchRequestProfile:
      type: object
      x-json-merge-patch: true
      properties:
        about_me:
          $ref: "#/components/schemas/UserProfileAboutMe"
        department:
          $ref: "#/components/schemas/UserProfileDepartment"
        job_title:
          $ref: "#/components/schemas/UserProfileJobTitle"
        location:
          $ref: "#/components/schemas/UserProfileLocation"
        mobile_number:
          $ref: "#/components/schemas/UserProfilePhoneNumber"
        phone_number:
          $ref: "#/components/schemas/UserProfilePhoneNumber"
    UserManagementUserResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        external_id:
          $ref: "#/components/schemas/ExternalUserId"
        first_name:
          $ref: "#/components/schemas/FirstName"
        last_name:
          $ref: "#/components/schemas/LastName"
        email:
          $ref: "#/components/schemas/EmailAddressNullable"
        status:
          $ref: "#/components/schemas/UserStatus"
        username:
          $ref: "#/components/schemas/UserName"
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        profile_picture:
          $ref: "#/components/schemas/ProfilePicture"
        profile:
          $ref: "#/components/schemas/UserManagementUserResponseProfile"
        role:
          $ref: "#/components/schemas/SystemRole"
        required_actions:
          type: array
          items:
            $ref: "#/components/schemas/RequiredAction"
      required:
        - id
        - first_name
        - last_name
        - status
        - username
        - created_at
        - profile
        - role
        - required_actions
    UserManagementUserResponseProfile:
      type: object
      properties:
        about_me:
          $ref: "#/components/schemas/UserProfileAboutMe"
        department:
          $ref: "#/components/schemas/UserProfileDepartment"
        job_title:
          $ref: "#/components/schemas/UserProfileJobTitle"
        location:
          $ref: "#/components/schemas/UserProfileLocation"
        mobile_number:
          $ref: "#/components/schemas/UserProfilePhoneNumber"
        phone_number:
          $ref: "#/components/schemas/UserProfilePhoneNumber"
        picture:
          $ref: "#/components/schemas/ProfilePicture"
    UserManagementUserListSortingOption:
      type: string
      enum:
        - FIRST_NAME_ASC
        - FIRST_NAME_DESC
        - LAST_NAME_ASC
        - LAST_NAME_DESC
        - USERNAME_ASC
        - USERNAME_DESC
        - EMAIL_ASC
        - EMAIL_DESC
        - DEPARTMENT_ASC
        - DEPARTMENT_DESC
        - LOCATION_ASC
        - LOCATION_DESC
        - ROLE_ASC
        - ROLE_DESC
        - STATUS_ASC
        - STATUS_DESC
        - UPDATED_AT_ASC
        - UPDATED_AT_DESC
        - CREATED_AT_ASC
        - CREATED_AT_DESC
    UserManagementUserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserManagementUserListResponseItem"
        pagination:
          $ref: "#/components/schemas/OffsetPagination"
      required:
        - users
        - pagination
    UserManagementUserListResponseItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        external_id:
          $ref: "#/components/schemas/ExternalUserId"
        first_name:
          $ref: "#/components/schemas/FirstName"
        last_name:
          $ref: "#/components/schemas/LastName"
        email:
          $ref: "#/components/schemas/EmailAddressNullable"
        status:
          $ref: "#/components/schemas/UserStatus"
        username:
          $ref: "#/components/schemas/UserName"
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        role:
          $ref: "#/components/schemas/SystemRole"
        profile:
          $ref: "#/components/schemas/UserManagementUserListResponseItemProfile"
        profile_picture:
          $ref: "#/components/schemas/ProfilePicture"
      required:
        - id
        - first_name
        - last_name
        - status
        - username
        - created_at
        - role
        - profile
    UserManagementUserListResponseItemProfile:
      type: object
      properties:
        department:
          $ref: "#/components/schemas/UserProfileDepartment"
        job_title:
          $ref: "#/components/schemas/UserProfileJobTitle"
        location:
          $ref: "#/components/schemas/UserProfileLocation"
        mobileNumber:
          $ref: "#/components/schemas/UserProfilePhoneNumber"
        phoneNumber:
          $ref: "#/components/schemas/UserProfilePhoneNumber"
        picture:
          $ref: "#/components/schemas/ProfilePicture"
    UserManagementPasswordPostRequest:
      type: object
      properties:
        password:
          type: string
        temporary:
          type: boolean
          default: true
      required:
        - password
    UserMeEmailPostRequest:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/EmailAddress"
      required:
        - email
    UserMeEmailResponse:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/EmailAddressNullable"
        verified:
          type: boolean
        update_allowed:
          type: boolean
      required:
        - verified
        - update_allowed
    UserMePasswordPostRequest:
      type: object
      properties:
        old_password:
          type: string
        new_password:
          type: string
      required:
        - old_password
        - new_password
    EmailAddress:
      type: string
      pattern: '([a-zA-Z0-9!#$%&''*+/=?^_`{|}~-]+(\.)?)+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)+'
      maxLength: 255
      minLength: 5
      nullable: false
    EmailAddressNullable:
      type: string
      pattern: '([a-zA-Z0-9!#$%&''*+/=?^_`{|}~-]+(\.)?)+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)+'
      maxLength: 255
      minLength: 5
      nullable: true
    ExternalUserId:
      type: string
      maxLength: 255
      minLength: 1
      nullable: true
    FirstName:
      type: string
      maxLength: 64
      minLength: 1
    IdentityProviderId:
      description: Identifier of the linked identity provider.
      type: string
    IdentityProviderReference:
      description: ID and display name of identity provider
      type: object
      properties:
        active:
          type: boolean
          description:
            true if the identity provider can be used to perform a login.
        id:
          $ref: "#/components/schemas/IdentityProviderId"
        name:
          type: string
      required:
        - active
        - id
        - name
    LastName:
      type: string
      minLength: 1
      maxLength: 64
    LinkedIdentityUserId:
      description: Identifier of the user in the linked identity provider.
      type: string
    LinkedIdentityUsername:
      description: Username of the user in the linked identity provider.
      type: string
    UserId:
      type: string
      description: Unique identifier for the given user.
      format: uuid
    RequiredAction:
      type: string
      enum:
        - ACCEPT_TERMS_AND_CONDITIONS
        - UPDATE_PASSWORD
        - VERIFY_EMAIL
    SystemRole:
      type: string
      enum:
        - USER
        - ADMIN
    UserName:
      type: string
      minLength: 1
      maxLength: 255
    UserProfileAboutMe:
      type: string
      nullable: true
    UserProfileDepartment:
      type: string
      maxLength: 255
      nullable: true
    UserProfileJobTitle:
      type: string
      maxLength: 255
      nullable: true
    UserProfileLocation:
      type: string
      maxLength: 255
      nullable: true
    UserProfilePhoneNumber:
      type: string
      maxLength: 50
      nullable: true
    UserStatus:
      type: string
      enum:
        - ACTIVE
        - LOCKED
  parameters:
    _page_cursor:
      name: _page_cursor
      in: query
      required: false
      schema:
        type: string
      description: >-
        A cursor pointing to the first item to be contained in the response
        array. Refer to our general "pagination" concept for more information.
    _page_limit:
      name: _page_limit
      in: query
      schema:
        type: integer
        minimum: 0
        format: int32
      description: >-
        The maximum number of items to be contained in the response array. Refer
        to our general "pagination" concept for more information.
    _sort:
      name: _sort
      in: query
      required: false
      schema:
        type: string
        pattern: ^\+|\-$
      description: >-
        Defines the order in which the items are returned. Refer to our general
        "pagination" concept for more information.
    external_id:
      name: external_id
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/ExternalId"
  examples:
    TaskInformationExample:
      value:
        id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
        external_id: string
        author_id: 78424c75-5c41-4b25-9735-3c9f7d05c59e
        title: Wet-clean all aisles
        body:
          raw_text: >-
            Hey @2b2b2af0-9644-4c0e-a606-5c3aa6ec1004, can you please clean the
            aisles until tomorrow?
          html_body: >-
            Hey @2b2b2af0-9644-4c0e-a606-5c3aa6ec1004, can you please clean the
            aisles <b>until tomorrow</b>?
        created_at: "2019-08-24T14:15:22Z"
        updated_at: "2019-08-24T14:15:22Z"
        is_deleted: false
        language: en-US
        settings:
          comments_enabled: true
        comments_count: 0
        due_at:
          date: "2019-08-25"
          discriminator: DATE
        attachments:
          - id: string
        progress_status: OPEN
        mentions:
          - id: 2b2b2af0-9644-4c0e-a606-5c3aa6ec1004
            is_deleted: false
            username: Peter M.
        distribution_kind: DISTRIBUTED_WITHOUT_AUTHOR
        distribution_summary:
          new_count: 1
          open_count: 13
          finished_count: 0
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
x-stoplight:
  id: 7fe458603b892
